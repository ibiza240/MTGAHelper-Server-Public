
namespace MTGAHelper.Entity.Protobuf
{

    // <auto-generated>
    //     Generated by the protocol buffer compiler.  DO NOT EDIT!
    //     source: my.proto
    // </auto-generated>
#pragma warning disable 1591, 0612, 3021
    #region Designer generated code

    using pb = Google.Protobuf;
    using pbc = Google.Protobuf.Collections;
    using pbr = Google.Protobuf.Reflection;
    using scg = System.Collections.Generic;
    /// <summary>Holder for reflection information generated from my.proto</summary>
    public static partial class MyReflection
    {

        #region Descriptor
        /// <summary>File descriptor for my.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static MyReflection()
        {
            byte[] descriptorData = System.Convert.FromBase64String(
                string.Concat(
                  "CghteS5wcm90byKjBgoMQUlDb25maWdEYXRhEjsKGGNvbmZpZ3VyZVZhbHVl",
                  "SGV1cmlzdGljcxgLIAMoCzIZLlZhbHVlSGV1cmlzdGljRGVmaW5pdGlvbhJB",
                  "Chtjb25maWd1cmVPcmRlcmluZ0hldXJpc3RpY3MYDCADKAsyHC5PcmRlcmlu",
                  "Z0hldXJpc3RpY0RlZmluaXRpb24SOgoYdmFsdWVIZXVyaXN0aWNQYXJhbWV0",
                  "ZXJzGBAgAygLMhguVmFsdWVIZXVyaXN0aWNQYXJhbWV0ZXISQAobb3JkZXJp",
                  "bmdIZXVyaXN0aWNQYXJhbWV0ZXJzGBEgAygLMhsuT3JkZXJpbmdIZXVyaXN0",
                  "aWNQYXJhbWV0ZXISFQoEbW9kZRgBIAEoDjIHLkFJTW9kZRInCg50cmFjaW5n",
                  "RW5hYmxlZBgCIAEoDjIPLkFJQ29uZmlnT3B0aW9uEikKEHZpZXdPcHBvbmVu",
                  "dEhhbmQYAyABKA4yDy5BSUNvbmZpZ09wdGlvbhIbChN2aWV3T3Bwb25lbnRM",
                  "aWJyYXJ5GAQgASgNEhQKDG1heGltdW1EZXB0aBgFIAEoDRIWCg5tYXhpbXVt",
                  "QnJlYWR0aBgGIAEoDRIcChRtYXhpbXVtTm9kZUV4cGFuc2lvbhgHIAEoDRId",
                  "ChV0aW1lb3V0SW5NaWxsaXNlY29uZHMYCCABKA0SIgoadHJhbnNwb3NpdGlv",
                  "blRhYmxlU2l6ZUluS0IYCSABKA0SEgoKcmFuZG9tU2VlZBgKIAEoDRIrChJj",
                  "b25maWd1cmVIaXN0b3J5T24YDSABKA4yDy5BSUNvbmZpZ09wdGlvbhIpChFh",
                  "bGxvd09wcG9uZW50VW5kbxgOIAEoDjIOLkFJQ29uZmlnWWVzTm8SLAoUYWxs",
                  "b3dPcHBvbmVudENvbnRyb2wYDyABKA4yDi5BSUNvbmZpZ1llc05vEhYKDmRp",
                  "YWdub3N0aWNNb2RlGBIgASgNEhsKE3JhbmRvbU9yZGVyaW5nUmFuZ2UYEyAB",
                  "KA0SEwoLdHJhbnNFbmFibGUYFCABKAgSGgoSY29uY2VkZU9uRXhjZXB0aW9u",
                  "GBUgASgIIkcKEkFJQ29uZmlndXJlUmVxdWVzdBIMCgRhaUlEGAEgASgNEiMK",
                  "DGFpQ29uZmlnRGF0YRgCIAEoCzINLkFJQ29uZmlnRGF0YSJIChNBSUNvbmZp",
                  "Z3VyZVJlc3BvbnNlEgwKBGFpSUQYASABKA0SIwoGcmVzdWx0GAIgASgOMhMu",
                  "R1JFVEhIb3N0RXJyb3JDb2RlIqEBCg9BSUNyZWF0ZVJlcXVlc3QSDwoHbWF0",
                  "Y2hJRBgDIAEoCRIMCgRhaUlEGAEgASgNEhQKDHN5c3RlbVNlYXRJZBgCIAEo",
                  "DRIOCgZnYW1lSUQYBCABKA0SEAoIbWFqb3JWZXIYBSABKA0SEAoIbWlub3JW",
                  "ZXIYBiABKA0SEwoLcmV2aXNpb25WZXIYByABKA0SEAoIYnVpbGRWZXIYCCAB",
                  "KA0iRQoQQUlDcmVhdGVSZXNwb25zZRIMCgRhaUlEGAEgASgNEiMKBnJlc3Vs",
                  "dBgCIAEoDjITLkdSRVRISG9zdEVycm9yQ29kZSIgChBBSURlc3Ryb3lSZXF1",
                  "ZXN0EgwKBGFpSUQYASABKA0iRgoRQUlEZXN0cm95UmVzcG9uc2USDAoEYWlJ",
                  "RBgBIAEoDRIjCgZyZXN1bHQYAiABKA4yEy5HUkVUSEhvc3RFcnJvckNvZGUi",
                  "MgoMQUlGYXRhbEVycm9yEhQKDGVycm9yTWVzc2FnZRgCIAEoDBIMCgRhaUlE",
                  "GAEgASgNIu8DChFBSVJlY29uZmlndXJlRGF0YRI7Chhjb25maWd1cmVWYWx1",
                  "ZUhldXJpc3RpY3MYByADKAsyGS5WYWx1ZUhldXJpc3RpY0RlZmluaXRpb24S",
                  "QQobY29uZmlndXJlT3JkZXJpbmdIZXVyaXN0aWNzGAggAygLMhwuT3JkZXJp",
                  "bmdIZXVyaXN0aWNEZWZpbml0aW9uEjoKGHZhbHVlSGV1cmlzdGljUGFyYW1l",
                  "dGVycxgJIAMoCzIYLlZhbHVlSGV1cmlzdGljUGFyYW1ldGVyEkAKG29yZGVy",
                  "aW5nSGV1cmlzdGljUGFyYW1ldGVycxgKIAMoCzIbLk9yZGVyaW5nSGV1cmlz",
                  "dGljUGFyYW1ldGVyEicKDnRyYWNpbmdFbmFibGVkGAEgASgOMg8uQUlDb25m",
                  "aWdPcHRpb24SFAoMbWF4aW11bURlcHRoGAIgASgNEhYKDm1heGltdW1CcmVh",
                  "ZHRoGAMgASgNEhwKFG1heGltdW1Ob2RlRXhwYW5zaW9uGAQgASgNEiIKGnRy",
                  "YW5zcG9zaXRpb25UYWJsZVNpemVJbktCGAUgASgNEhIKCnJhbmRvbVNlZWQY",
                  "BiABKA0SEwoLdHJhbnNFbmFibGUYCyABKAgSGgoSY29uY2VkZU9uRXhjZXB0",
                  "aW9uGAwgASgIIsoDCgZBY3Rpb24SJgoOYXV0b1RhcEFjdGlvbnMYByADKAsy",
                  "Di5BdXRvVGFwQWN0aW9uEi4KEm1hbmFQYXltZW50T3B0aW9ucxgKIAMoCzIS",
                  "Lk1hbmFQYXltZW50T3B0aW9uEiIKCG1hbmFDb3N0GAsgAygLMhAuTWFuYVJl",
                  "cXVpcmVtZW50EhMKC2hvbGRTb3VyY2VzGBAgAygNEh8KCmFjdGlvblR5cGUY",
                  "ASABKA4yCy5BY3Rpb25UeXBlEg0KBWdycElkGAIgASgNEhIKCmluc3RhbmNl",
                  "SWQYAyABKA0SGwoIZ3JvdXBpbmcYBCABKA4yCS5Hcm91cGluZxIUCgxhYmls",
                  "aXR5R3JwSWQYBiABKA0SEAoIc291cmNlSWQYCCABKA0SGAoQYWx0ZXJuYXRp",
                  "dmVHcnBJZBgJIAEoDRISCgpzaG91bGRTdG9wGAwgASgIEh0KFWRpc3F1YWxp",
                  "ZnlpbmdTb3VyY2VJZBgNIAEoDRIVCg1zZWxlY3Rpb25UeXBlGA4gASgNEhEK",
                  "CXNlbGVjdGlvbhgPIAEoDRIdChVhbHRlcm5hdGl2ZVNvdXJjZVpjaWQYESAB",
                  "KA0SEAoIaXNIaWRkZW4YEiABKAgimQEKDUFjdGlvbkNvc3RSZXESDQoFaW5k",
                  "ZXgYASABKA0SJwoOYWN0aW9uQ29zdFR5cGUYAyABKA4yDy5BY3Rpb25Db3N0",
                  "VHlwZRIiCg1jb3N0U2VsZWN0aW9uGAQgASgLMgsuU2VsZWN0TlJlcRIsChBj",
                  "b3VudGVyU2VsZWN0aW9uGAUgASgLMhIuU2VsZWN0Q291bnRlcnNSZXEinAEK",
                  "DkFjdGlvbkNvc3RSZXNwEg0KBWluZGV4GAEgASgNEicKDmFjdGlvbkNvc3RU",
                  "eXBlGAIgASgOMg8uQWN0aW9uQ29zdFR5cGUSIwoNY29zdFNlbGVjdGlvbhgD",
                  "IAEoCzIMLlNlbGVjdE5SZXNwEi0KEGNvdW50ZXJTZWxlY3Rpb24YBCABKAsy",
                  "Ey5TZWxlY3RDb3VudGVyc1Jlc3AiRwoKQWN0aW9uSW5mbxIQCghhY3Rpb25J",
                  "ZBgBIAEoDRIOCgZzZWF0SWQYAiABKA0SFwoGYWN0aW9uGAMgASgLMgcuQWN0",
                  "aW9uIlEKE0FjdGlvbnNBdmFpbGFibGVSZXESGAoHYWN0aW9ucxgBIAMoCzIH",
                  "LkFjdGlvbhIgCg9pbmFjdGl2ZUFjdGlvbnMYAiADKAsyBy5BY3Rpb24iawoP",
                  "QWx0ZXJuYXRpdmVDb3N0EiIKCG1hbmFDb3N0GAQgAygLMhAuTWFuYVJlcXVp",
                  "cmVtZW50Eg0KBWluZGV4GAEgASgNEg0KBWdycElkGAIgASgNEhYKDmxvY2Fs",
                  "aXphdGlvbklkGAMgASgNIkkKEkFsdGVybmF0aXZlQ29zdFJlcRIfCgVjb3N0",
                  "cxgCIAMoCzIQLkFsdGVybmF0aXZlQ29zdBISCgppbnN0YW5jZUlkGAEgASgN",
                  "IiQKE0FsdGVybmF0aXZlQ29zdFJlc3ASDQoFaW5kZXgYASABKA0iugEKDkFu",
                  "bm90YXRpb25JbmZvEhMKC2FmZmVjdGVkSWRzGAMgAygNEh0KBHR5cGUYBCAD",
                  "KA4yDy5Bbm5vdGF0aW9uVHlwZRIiCgdkZXRhaWxzGAYgAygLMhEuS2V5VmFs",
                  "dWVQYWlySW5mbxIYChBpZ25vcmVGb3JTZWF0SWRzGAggAygNEgoKAmlkGAEg",
                  "ASgNEhIKCmFmZmVjdG9ySWQYAiABKA0SFgoOYWxsb3dSZWRhY3Rpb24YByAB",
                  "KAgiigEKD0FueUxvYmJ5TWVzc2FnZRI1ChRjbGllbnRUb0xvYmJ5TWVzc2Fn",
                  "ZRgCIAEoCzIVLkNsaWVudFRvTG9iYnlNZXNzYWdlSAASNQoUbG9iYnlUb0Ns",
                  "aWVudE1lc3NhZ2UYAyABKAsyFS5Mb2JieVRvQ2xpZW50TWVzc2FnZUgAQgkK",
                  "B21lc3NhZ2Ui9gEKCkFueU1lc3NhZ2USEQoJdGltZXN0YW1wGAEgASgDEjEK",
                  "EnNlcnZlclRvR1JFTWVzc2FnZRgCIAEoCzITLlNlcnZlclRvR1JFTWVzc2Fn",
                  "ZUgAEjEKEmdSRVRvU2VydmVyTWVzc2FnZRgDIAEoCzITLkdSRVRvU2VydmVy",
                  "TWVzc2FnZUgAEjEKEmNsaWVudFRvR1JFTWVzc2FnZRgEIAEoCzITLkNsaWVu",
                  "dFRvR1JFTWVzc2FnZUgAEjEKEmdSRVRvQ2xpZW50TWVzc2FnZRgFIAEoCzIT",
                  "LkdSRVRvQ2xpZW50TWVzc2FnZUgAQgkKB21lc3NhZ2UizwIKEUFueVNlcnZp",
                  "Y2VNZXNzYWdlEjcKC3VzZXJDb250ZXh0GAIgASgLMiIuQW55U2VydmljZU1l",
                  "c3NhZ2VUeXBlc1VzZXJDb250ZXh0EkMKG2NsaWVudFRvTWF0Y2hTZXJ2aWNl",
                  "TWVzc2FnZRgKIAEoCzIcLkNsaWVudFRvTWF0Y2hTZXJ2aWNlTWVzc2FnZUgA",
                  "EkMKG21hdGNoU2VydmljZVRvQ2xpZW50TWVzc2FnZRgLIAEoCzIcLk1hdGNo",
                  "U2VydmljZVRvQ2xpZW50TWVzc2FnZUgAEjUKFGNsaWVudFRvTG9iYnlNZXNz",
                  "YWdlGAwgASgLMhUuQ2xpZW50VG9Mb2JieU1lc3NhZ2VIABI1ChRsb2JieVRv",
                  "Q2xpZW50TWVzc2FnZRgNIAEoCzIVLkxvYmJ5VG9DbGllbnRNZXNzYWdlSABC",
                  "CQoHbWVzc2FnZSImCiRBbnlTZXJ2aWNlTWVzc2FnZVR5cGVzUmVxdWVzdENv",
                  "bnRleHQidwohQW55U2VydmljZU1lc3NhZ2VUeXBlc1VzZXJDb250ZXh0Eg4K",
                  "BnVzZXJJZBgBIAEoCRIRCgl1c2VyUm9sZXMYAiADKAkSLwoSYXV0aGVudGlj",
                  "YXRpb25UeXBlGAMgASgOMhMuQXV0aGVudGljYXRpb25UeXBlIpUBCg9BbnlU",
                  "b0dSRU1lc3NhZ2USEQoJdGltZXN0YW1wGAEgASgDEjEKEnNlcnZlclRvR1JF",
                  "TWVzc2FnZRgCIAEoCzITLlNlcnZlclRvR1JFTWVzc2FnZUgAEjEKEmNsaWVu",
                  "dFRvR1JFTWVzc2FnZRgDIAEoCzITLkNsaWVudFRvR1JFTWVzc2FnZUgAQgkK",
                  "B21lc3NhZ2UibQoYQXNzaWduRGFtYWdlQ29uZmlybWF0aW9uEjQKEmludmFs",
                  "aWRBc3NpZ25tZW50cxgCIAMoCzIYLkludmFsaWREYW1hZ2VBc3NpZ25tZW50",
                  "EhsKBnJlc3VsdBgBIAEoDjILLlJlc3VsdENvZGUiOwoPQXNzaWduRGFtYWdl",
                  "UmVxEigKD2RhbWFnZUFzc2lnbmVycxgBIAMoCzIPLkRhbWFnZUFzc2lnbmVy",
                  "IjYKEEFzc2lnbkRhbWFnZVJlc3ASIgoJYXNzaWduZXJzGAEgAygLMg8uRGFt",
                  "YWdlQXNzaWduZXIimgEKCkF0dGFja0luZm8SMQoPb3JkZXJlZEJsb2NrZXJz",
                  "GAQgAygLMhguT3JkZXJlZERhbWFnZUFzc2lnbm1lbnQSEAoIdGFyZ2V0SWQY",
                  "ASABKA0SFQoNZGFtYWdlT3JkZXJlZBgCIAEoCBIWCg5kYW1hZ2VBc3NpZ25l",
                  "ZBgDIAEoCBIYChBhbHRlcm5hdGl2ZUdycElkGAUgASgNIl4KDUF0dGFja1dh",
                  "cm5pbmcSEgoKaW5zdGFuY2VJZBgBIAEoDRIgCgR0eXBlGAIgASgOMhIuQXR0",
                  "YWNrV2FybmluZ1R5cGUSFwoPd2FybmluZ1Byb21wdElkGAMgASgNIs4BCghB",
                  "dHRhY2tlchIvChVsZWdhbERhbWFnZVJlY2lwaWVudHMYAiADKAsyEC5EYW1h",
                  "Z2VSZWNpcGllbnQSGgoSYXR0YWNrZXJJbnN0YW5jZUlkGAEgASgNEjEKF3Nl",
                  "bGVjdGVkRGFtYWdlUmVjaXBpZW50GAMgASgLMhAuRGFtYWdlUmVjaXBpZW50",
                  "EhgKEGFsdGVybmF0aXZlR3JwSWQYBCABKA0SFAoMYXV0b0F0dGFja2VkGAUg",
                  "ASgIEhIKCm11c3RBdHRhY2sYBiABKAgikwEKE0F1dGhlbnRpY2F0ZVJlcXVl",
                  "c3QSEAoIY2xpZW50SWQYASABKAkSFwoPY2xpZW50QXV0aFRva2VuGAIgASgM",
                  "EhIKCnBsYXllck5hbWUYAyABKAkSHAoUcGxheUZhYlNlc3Npb25UaWNrZXQY",
                  "BCABKAkSHwoKY2xpZW50SW5mbxgKIAEoCzILLkNsaWVudEluZm8iTwoUQXV0",
                  "aGVudGljYXRlUmVzcG9uc2USEAoIY2xpZW50SWQYASABKAkSEQoJc2Vzc2lv",
                  "bklkGAIgASgJEhIKCnNjcmVlbk5hbWUYCiABKAkipwEKCkF1dG9BbnN3ZXIS",
                  "EwoLcHJvbXB0R3JwSWQYASABKA0SFAoMYWJpbGl0eUdycElkGAIgASgNEhMK",
                  "C2NhcmRUaXRsZUlkGAMgASgNEiAKCWFwcGxpZXNUbxgEIAEoDjINLlNldHRp",
                  "bmdTY29wZRIeCgZzdGF0dXMYBSABKA4yDi5TZXR0aW5nU3RhdHVzEhcKBmFu",
                  "c3dlchgGIAEoDjIHLkFuc3dlciKdAQoNQXV0b1RhcEFjdGlvbhISCgppbnN0",
                  "YW5jZUlkGAEgASgNEhQKDGFiaWxpdHlHcnBJZBgCIAEoDRIOCgZtYW5hSWQY",
                  "AyABKA0SLQoRbWFuYVBheW1lbnRPcHRpb24YBCABKAsyEi5NYW5hUGF5bWVu",
                  "dE9wdGlvbhIjCgxjb3N0Q2F0ZWdvcnkYBSABKA4yDS5Db3N0Q2F0ZWdvcnki",
                  "eAoJQXV0b1lpZWxkEhQKDGFiaWxpdHlHcnBJZBgBIAEoDRITCgtjYXJkVGl0",
                  "bGVJZBgCIAEoDRIgCglhcHBsaWVzVG8YAyABKA4yDS5TZXR0aW5nU2NvcGUS",
                  "HgoGc3RhdHVzGAQgASgOMg4uU2V0dGluZ1N0YXR1cyIjCgxCZWhhdmlvclRy",
                  "ZWUSEwoEcm9vdBgBIAEoCzIFLk5vZGUilQEKD0JpbmFyeUdhbWVTdGF0ZRIU",
                  "CgxpbnN0YW5jZURhdGEYAiABKAwSKgoNY2xpZW50QWN0aW9ucxgDIAMoCzIT",
                  "LkNsaWVudFRvR1JFTWVzc2FnZRIXCg9pbnRlcm5hbEdSRURhdGEYBCABKAwS",
                  "JwoMZ2FtZVN0YXRlTXNnGAEgASgLMhEuR2FtZVN0YXRlTWVzc2FnZSKDAQoJ",
                  "QmxvY2tJbmZvEhMKC2F0dGFja2VySWRzGAEgAygNEjIKEG9yZGVyZWRBdHRh",
                  "Y2tlcnMYBCADKAsyGC5PcmRlcmVkRGFtYWdlQXNzaWdubWVudBIVCg1kYW1h",
                  "Z2VPcmRlcmVkGAIgASgIEhYKDmRhbWFnZUFzc2lnbmVkGAMgASgIIlwKDEJs",
                  "b2NrV2FybmluZxISCgppbnN0YW5jZUlkGAEgASgNEh8KBHR5cGUYAiABKA4y",
                  "ES5CbG9ja1dhcm5pbmdUeXBlEhcKD3dhcm5pbmdQcm9tcHRJZBgDIAEoDSKl",
                  "AQoHQmxvY2tlchIbChNhdHRhY2tlckluc3RhbmNlSWRzGAIgAygNEiMKG3Nl",
                  "bGVjdGVkQXR0YWNrZXJJbnN0YW5jZUlkcxgDIAMoDRIZChFibG9ja2VySW5z",
                  "dGFuY2VJZBgBIAEoDRIUCgxtaW5BdHRhY2tlcnMYBCABKA0SFAoMbWF4QXR0",
                  "YWNrZXJzGAUgASgNEhEKCW11c3RCbG9jaxgGIAEoCCLDAQoSQ0xJUFNDb25m",
                  "aWd1cmF0aW9uEhAKCGluaXRGaWxlGAQgASgJEhMKC21ldHJpY3NGaWxlGAcg",
                  "ASgJEg8KB2xvZ0ZpbGUYCCABKAkSEwoLZW5hYmxlV2F0Y2gYASABKAgSFQoN",
                  "ZW5hYmxlTWV0cmljcxgCIAEoCBIVCg1lbmFibGVMb2dnaW5nGAMgASgIEhYK",
                  "Dm1heEZpcmluZ0xpbWl0GAUgASgFEhoKEndhcm5pbmdGaXJpbmdMaW1pdBgG",
                  "IAEoBSIRCg9DYW5jZWxBY3Rpb25SZXEivgMKFENhc3RpbmdUaW1lT3B0aW9u",
                  "UmVxEiIKCG1hbmFDb3N0GA0gAygLMhAuTWFuYVJlcXVpcmVtZW50EiYKDmF1",
                  "dG9UYXBBY3Rpb25zGA4gAygLMg4uQXV0b1RhcEFjdGlvbhINCgVjdG9JZBgB",
                  "IAEoDRI1ChVjYXN0aW5nVGltZU9wdGlvblR5cGUYAiABKA4yFi5DYXN0aW5n",
                  "VGltZU9wdGlvblR5cGUSEgoKYWZmZWN0ZWRJZBgDIAEoDRISCgphZmZlY3Rv",
                  "cklkGAQgASgNEg0KBWdycElkGAUgASgNEhgKEHBsYXllcklkVG9Qcm9tcHQY",
                  "BiABKA0SEgoKaXNSZXF1aXJlZBgHIAEoCBIXCgZwcm9tcHQYCCABKAsyBy5Q",
                  "cm9tcHQSKQoPbnVtZXJpY0lucHV0UmVxGAkgASgLMhAuTnVtZXJpY0lucHV0",
                  "UmVxEi0KEXNlbGVjdE1hbmFUeXBlUmVxGAogASgLMhIuU2VsZWN0TWFuYVR5",
                  "cGVSZXESGwoIbW9kYWxSZXEYCyABKAsyCS5Nb2RhbFJlcRIfCgpzZWxlY3RO",
                  "UmVxGAwgASgLMgsuU2VsZWN0TlJlcSKJAgoVQ2FzdGluZ1RpbWVPcHRpb25S",
                  "ZXNwEg0KBWN0b0lkGAEgASgNEjUKFWNhc3RpbmdUaW1lT3B0aW9uVHlwZRgC",
                  "IAEoDjIWLkNhc3RpbmdUaW1lT3B0aW9uVHlwZRIrChBudW1lcmljSW5wdXRS",
                  "ZXNwGAMgASgLMhEuTnVtZXJpY0lucHV0UmVzcBIvChJzZWxlY3RNYW5hVHlw",
                  "ZVJlc3AYBCABKAsyEy5TZWxlY3RNYW5hVHlwZVJlc3ASKQoPY2hvb3NlTW9k",
                  "YWxSZXNwGAUgASgLMhAuQ2hvb3NlTW9kYWxSZXNwEiEKC3NlbGVjdE5SZXNw",
                  "GAYgASgLMgwuU2VsZWN0TlJlc3AiTAoVQ2FzdGluZ1RpbWVPcHRpb25zUmVx",
                  "EjMKFGNhc3RpbmdUaW1lT3B0aW9uUmVxGAEgAygLMhUuQ2FzdGluZ1RpbWVP",
                  "cHRpb25SZXEiTwoWQ2FzdGluZ1RpbWVPcHRpb25zUmVzcBI1ChVjYXN0aW5n",
                  "VGltZU9wdGlvblJlc3AYASABKAsyFi5DYXN0aW5nVGltZU9wdGlvblJlc3Ai",
                  "KgoXQ2hlY2twb2ludENvbmZpZ3VyYXRpb24SDwoHZW5hYmxlZBgBIAEoCCJX",
                  "CgZDaG9pY2USJAoKcGFyYW1ldGVycxgCIAMoCzIQLlByb21wdFBhcmFtZXRl",
                  "chIQCghjaG9pY2VJZBgBIAEoDRIVCg1yZXNwb25zZVZhbHVlGAMgASgNIjcK",
                  "D0Nob29zZU1vZGFsUmVzcBIOCgZncnBJZHMYAiADKA0SFAoMYWJpbGl0eUdy",
                  "cElkGAEgASgNIncKF0Nob29zZVN0YXJ0aW5nUGxheWVyUmVxEhUKDXN5c3Rl",
                  "bVNlYXRJZHMYAiADKA0SDwoHdGVhbUlkcxgDIAMoDRIbCgh0ZWFtVHlwZRgB",
                  "IAEoDjIJLlRlYW1UeXBlEhcKBnByb21wdBgEIAEoCzIHLlByb21wdCJdChhD",
                  "aG9vc2VTdGFydGluZ1BsYXllclJlc3ASGwoIdGVhbVR5cGUYASABKA4yCS5U",
                  "ZWFtVHlwZRIUCgxzeXN0ZW1TZWF0SWQYAiABKA0SDgoGdGVhbUlkGAMgASgN",
                  "Ii0KG0NsZWFyTG9iYnlVc2VyU3RhdHVzUmVxdWVzdBIOCgZ1c2VySWQYASAB",
                  "KAkiQAocQ2xlYXJMb2JieVVzZXJTdGF0dXNSZXNwb25zZRIgCgh1c2VySW5m",
                  "bxgBIAEoCzIOLkxvYmJ5VXNlckluZm8ihgEKCkNsaWVudEluZm8SEAoIY2xp",
                  "ZW50SWQYASABKAkSFQoNY2xpZW50VmVyc2lvbhgKIAEoCRIWCg5jbGllbnRM",
                  "b2NhdGlvbhgLIAEoCRIWCg5jbGllbnRMYW5ndWFnZRgMIAEoCRIfCgpjbGll",
                  "bnRUeXBlGAIgASgOMgsuQ2xpZW50VHlwZSKOAQoRQ2xpZW50U2Vzc2lvbklu",
                  "Zm8SEAoIY2xpZW50SWQYASABKAkSEQoJc2Vzc2lvbklkGAIgASgJEg0KBXJv",
                  "bGVzGAMgAygJEhAKCHVzZXJOYW1lGAQgASgJEhIKCnNjcmVlbk5hbWUYBSAB",
                  "KAkSHwoKY2xpZW50SW5mbxgKIAEoCzILLkNsaWVudEluZm8iIgoKQ2xpZW50",
                  "U3luYxIUCgxzeXN0ZW1TZWF0SWQYASABKA0ikQEKGENsaWVudFRvRnJvbnRE",
                  "b29yTWVzc2FnZRI1ChRjbGllbnRUb0xvYmJ5TWVzc2FnZRgBIAEoCzIVLkNs",
                  "aWVudFRvTG9iYnlNZXNzYWdlSAASMwoTY2xpZW50VG9MYXBhTWVzc2FnZRgC",
                  "IAEoCzIULkNsaWVudFRvTGFwYU1lc3NhZ2VIAEIJCgdtZXNzYWdlIsIMChJD",
                  "bGllbnRUb0dSRU1lc3NhZ2USIAoEdHlwZRgBIAEoDjISLkNsaWVudE1lc3Nh",
                  "Z2VUeXBlEhQKDHN5c3RlbVNlYXRJZBgCIAEoDRITCgtnYW1lU3RhdGVJZBgD",
                  "IAEoDRIOCgZyZXNwSWQYBCABKA0SHwoKY29ubmVjdFJlcRgFIAEoCzILLkNv",
                  "bm5lY3RSZXESKQoPY2FuY2VsQWN0aW9uUmVxGAYgASgLMhAuQ2FuY2VsQWN0",
                  "aW9uUmVxEikKD2Nob29zZU1vZGFsUmVzcBgHIAEoCzIQLkNob29zZU1vZGFs",
                  "UmVzcBIfCgpjb25jZWRlUmVxGAggASgLMgsuQ29uY2VkZVJlcRIjCgxmb3Jj",
                  "ZURyYXdSZXEYCSABKAsyDS5Gb3JjZURyYXdSZXESHQoJZ3JvdXBSZXNwGAog",
                  "ASgLMgouR3JvdXBSZXNwEiMKDG11bGxpZ2FuUmVzcBgLIAEoCzINLk11bGxp",
                  "Z2FuUmVzcBIjCgxvcHRpb25hbFJlc3AYDCABKAsyDS5PcHRpb25hbFJlc3AS",
                  "HQoJb3JkZXJSZXNwGA0gASgLMgouT3JkZXJSZXNwEi0KEXBlcmZvcm1BY3Rp",
                  "b25SZXNwGA4gASgLMhIuUGVyZm9ybUFjdGlvblJlc3ASIQoLc2VsZWN0TlJl",
                  "c3AYDyABKAsyDC5TZWxlY3ROUmVzcBInCg5zZXRTZXR0aW5nc1JlcRgQIAEo",
                  "CzIPLlNldFNldHRpbmdzUmVxEjsKGGNob29zZVN0YXJ0aW5nUGxheWVyUmVz",
                  "cBgVIAEoCzIZLkNob29zZVN0YXJ0aW5nUGxheWVyUmVzcBIzChRkZWNsYXJl",
                  "QXR0YWNrZXJzUmVzcBgWIAEoCzIVLkRlY2xhcmVBdHRhY2tlcnNSZXNwEjEK",
                  "E2RlY2xhcmVCbG9ja2Vyc1Jlc3AYFyABKAsyFC5EZWNsYXJlQmxvY2tlcnNS",
                  "ZXNwEjUKFW9yZGVyQ29tYmF0RGFtYWdlUmVzcBgYIAEoCzIWLk9yZGVyQ29t",
                  "YmF0RGFtYWdlUmVzcBIrChBhc3NpZ25EYW1hZ2VSZXNwGBkgASgLMhEuQXNz",
                  "aWduRGFtYWdlUmVzcBItChFzZWxlY3RUYXJnZXRzUmVzcBgaIAEoCzISLlNl",
                  "bGVjdFRhcmdldHNSZXNwEjUKFXNlbGVjdFJlcGxhY2VtZW50UmVzcBgbIAEo",
                  "CzIWLlNlbGVjdFJlcGxhY2VtZW50UmVzcBIrChBzZWxlY3ROR3JvdXBSZXNw",
                  "GBwgASgLMhEuU2VsZWN0Tkdyb3VwUmVzcBIxChNhbHRlcm5hdGl2ZUNvc3RS",
                  "ZXNwGB0gASgLMhQuQWx0ZXJuYXRpdmVDb3N0UmVzcBIrChBkaXN0cmlidXRp",
                  "b25SZXNwGB4gASgLMhEuRGlzdHJpYnV0aW9uUmVzcBIrChBudW1lcmljSW5w",
                  "dXRSZXNwGB8gASgLMhEuTnVtZXJpY0lucHV0UmVzcBIfCgpzZWFyY2hSZXNw",
                  "GCAgASgLMgsuU2VhcmNoUmVzcBInCg5hY3Rpb25Db3N0UmVzcBghIAEoCzIP",
                  "LkFjdGlvbkNvc3RSZXNwEjcKFmNhc3RpbmdUaW1lT3B0aW9uc1Jlc3AYIiAB",
                  "KAsyFy5DYXN0aW5nVGltZU9wdGlvbnNSZXNwEi8KEnNlbGVjdE1hbmFUeXBl",
                  "UmVzcBgjIAEoCzITLlNlbGVjdE1hbmFUeXBlUmVzcBIzChRzZWxlY3RGcm9t",
                  "R3JvdXBzUmVzcBgkIAEoCzIVLlNlbGVjdEZyb21Hcm91cHNSZXNwEjMKFHNl",
                  "YXJjaEZyb21Hcm91cHNSZXNwGCUgASgLMhUuU2VhcmNoRnJvbUdyb3Vwc1Jl",
                  "c3ASHwoKZ2F0aGVyUmVzcBgmIAEoCzILLkdhdGhlclJlc3ASLQoRc3VibWl0",
                  "UGF5bWVudFJlc3AYJyABKAsyEi5TdWJtaXRQYXltZW50UmVzcBIdCgl1aU1l",
                  "c3NhZ2UYKCABKAsyCi5VSU1lc3NhZ2USJwoOc3VibWl0RGVja1Jlc3AYKSAB",
                  "KAsyDy5TdWJtaXREZWNrUmVzcBIfCgpjb250cm9sUmVxGCogASgLMgsuQ29u",
                  "dHJvbFJlcRIPCgd0aW1lcklkGGQgASgNIiYKE0NsaWVudFRvTGFwYU1lc3Nh",
                  "Z2USDwoHcGF5bG9hZBgBIAEoCSL0BwoUQ2xpZW50VG9Mb2JieU1lc3NhZ2US",
                  "EAoIY2xpZW50SWQYASABKAkSEQoJcmVxdWVzdElkGAIgASgFEhEKCXRpbWVz",
                  "dGFtcBgDIAEoAxIpCg9jb3JyZWxhdGlvbkluZm8YBCABKAsyEC5Db3JyZWxh",
                  "dGlvbkluZm8SMwoTYXV0aGVudGljYXRlUmVxdWVzdBhkIAEoCzIULkF1dGhl",
                  "bnRpY2F0ZVJlcXVlc3RIABIxChJzZXJ2aWNlSW5mb1JlcXVlc3QYZSABKAsy",
                  "Ey5TZXJ2aWNlSW5mb1JlcXVlc3RIABIvChFjbGllbnRTZXNzaW9uSW5mbxhm",
                  "IAEoCzISLkNsaWVudFNlc3Npb25JbmZvSAASNAoRZ2V0VXNlcklkc1JlcXVl",
                  "c3QYbiABKAsyFy5HZXRMb2JieVVzZXJJZHNSZXF1ZXN0SAASNgoSZ2V0VXNl",
                  "ckluZm9SZXF1ZXN0GG8gASgLMhguR2V0TG9iYnlVc2VySW5mb1JlcXVlc3RI",
                  "ABJDChtjbGVhckxvYmJ5VXNlclN0YXR1c1JlcXVlc3QYcCABKAsyHC5DbGVh",
                  "ckxvYmJ5VXNlclN0YXR1c1JlcXVlc3RIABIuChBqb2luUXVldWVSZXF1ZXN0",
                  "GMgBIAEoCzIRLkpvaW5RdWV1ZVJlcXVlc3RIABIuChBkcm9wUXVldWVSZXF1",
                  "ZXN0GMkBIAEoCzIRLkRyb3BRdWV1ZVJlcXVlc3RIABIyChJkZWxldGVRdWV1",
                  "ZVJlcXVlc3QYygEgASgLMhMuRGVsZXRlUXVldWVSZXF1ZXN0SAASPgoYam9p",
                  "bk1hdGNobWFraW5nUmVxdWVzdFYyGMsBIAEoCzIZLkpvaW5NYXRjaG1ha2lu",
                  "Z1JlcXVlc3RWMkgAEj4KGGRyb3BNYXRjaG1ha2luZ1JlcXVlc3RWMhjMASAB",
                  "KAsyGS5Ecm9wTWF0Y2htYWtpbmdSZXF1ZXN0VjJIABJQCiFqb2luQ29uc3Ry",
                  "dWN0ZWRNYXRjaG1ha2luZ1JlcXVlc3QYzQEgASgLMiIuSm9pbkNvbnN0cnVj",
                  "dGVkTWF0Y2htYWtpbmdSZXF1ZXN0SAASUAohZHJvcENvbnN0cnVjdGVkTWF0",
                  "Y2htYWtpbmdSZXF1ZXN0GM4BIAEoCzIiLkRyb3BDb25zdHJ1Y3RlZE1hdGNo",
                  "bWFraW5nUmVxdWVzdEgAEkQKG21hdGNoU2VydmljZVRvQ2xpZW50TWVzc2Fn",
                  "ZRiQAyABKAsyHC5NYXRjaFNlcnZpY2VUb0NsaWVudE1lc3NhZ2VIABIkCgtl",
                  "Y2hvUmVxdWVzdBjoByABKAsyDC5FY2hvUmVxdWVzdEgAQgkKB21lc3NhZ2Ui",
                  "aAofQ2xpZW50VG9NYXRjaERvb3JDb25uZWN0UmVxdWVzdBIPCgdtYXRjaElk",
                  "GAEgASgJEhMKC21jRmFicmljVXJpGAIgASgJEh8KF2NsaWVudFRvR3JlTWVz",
                  "c2FnZUJ5dGVzGAogASgMIrYBChtDbGllbnRUb01hdGNoU2VydmljZU1lc3Nh",
                  "Z2USFQoNdHJhbnNhY3Rpb25JZBgEIAEoCRIPCgdwYXlsb2FkGGQgASgMEhEK",
                  "CXJlcXVlc3RJZBgBIAEoBRJJCh9jbGllbnRUb01hdGNoU2VydmljZU1lc3Nh",
                  "Z2VUeXBlGAIgASgOMiAuQ2xpZW50VG9NYXRjaFNlcnZpY2VNZXNzYWdlVHlw",
                  "ZRIRCgl0aW1lc3RhbXAYAyABKAMiZwoRQ29tYmF0RGFtYWdlT3JkZXISEgoK",
                  "aW5zdGFuY2VJZBgBIAEoDRIdCgpyZWNpcGllbnRzGAIgASgLMgkuT3JkZXJS",
                  "ZXESHwoOZGVjaXNpb25Qcm9tcHQYAyABKAsyBy5Qcm9tcHQicgobQ29tYmF0",
                  "RGFtYWdlT3JkZXJBc3NpZ25tZW50EhIKCmluc3RhbmNlSWQYASABKA0SHgoK",
                  "cmVjaXBpZW50cxgCIAEoCzIKLk9yZGVyUmVzcBIfCg5kZWNpc2lvblByb21w",
                  "dBgDIAEoCzIHLlByb21wdCJzCglDb21wb3NpdGUSHQoIc2VxdWVuY2UYASAB",
                  "KAsyCS5TZXF1ZW5jZUgAEh0KCHNlbGVjdG9yGAIgASgLMgkuU2VsZWN0b3JI",
                  "ABIdCghwYXJhbGxlbBgDIAEoCzIJLlBhcmFsbGVsSABCCQoHbWVzc2FnZSI8",
                  "CgpDb25jZWRlUmVxEhoKBXNjb3BlGAEgASgOMgsuTWF0Y2hTY29wZRISCgpn",
                  "YW1lTnVtYmVyGAIgASgNIjoKEENvbmZpZ3VyZVJlcXVlc3QSJgoHZ2VuZXJh",
                  "bBgBIAEoCzIVLkdlbmVyYWxDb25maWd1cmF0aW9uIjgKEUNvbmZpZ3VyZVJl",
                  "c3BvbnNlEiMKBnJlc3VsdBgBIAEoDjITLkdSRVRISG9zdEVycm9yQ29kZSKz",
                  "AQoKQ29ubmVjdFJlcRIQCghtYWpvclZlchgBIAEoDRIQCghtaW5vclZlchgC",
                  "IAEoDRITCgtyZXZpc2lvblZlchgDIAEoDRIQCghidWlsZFZlchgEIAEoDRIp",
                  "Cg9kZWZhdWx0U2V0dGluZ3MYBSABKAsyEC5TZXR0aW5nc01lc3NhZ2USHwoI",
                  "cHJvdG9WZXIYBiABKA4yDS5Qcm90b1ZlcnNpb24SDgoGc2VhdElkGAcgASgN",
                  "ItABCgtDb25uZWN0UmVzcBIhCgZzdGF0dXMYASABKA4yES5Db25uZWN0aW9u",
                  "U3RhdHVzEhAKCG1ham9yVmVyGAIgASgNEhAKCG1pbm9yVmVyGAMgASgNEhMK",
                  "C3JldmlzaW9uVmVyGAQgASgNEhAKCGJ1aWxkVmVyGAUgASgNEh8KCHByb3Rv",
                  "VmVyGAYgASgOMg0uUHJvdG9WZXJzaW9uEg4KBnNlYXRJZBgHIAEoDRIiCghz",
                  "ZXR0aW5ncxgIIAEoCzIQLlNldHRpbmdzTWVzc2FnZSIzChFDb250aW51YXRp",
                  "b25Ub2tlbhITCgl0aW1lc3RhbXAYBSABKANIAEIJCgdtZXNzYWdlIkEKCkNv",
                  "bnRyb2xSZXESHQoEdHlwZRgBIAEoDjIPLkNvbnRyb2xsZXJUeXBlEhQKDGNv",
                  "bnRyb2xsZXJJZBgCIAEoDSKpAQoPQ29ycmVsYXRpb25JbmZvEhUKDWNvcnJl",
                  "bGF0aW9uSWQYASABKAkSRAoSY29ycmVsYXRpb25Db250ZXh0GAUgAygLMigu",
                  "Q29ycmVsYXRpb25JbmZvLkNvcnJlbGF0aW9uQ29udGV4dEVudHJ5GjkKF0Nv",
                  "cnJlbGF0aW9uQ29udGV4dEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
                  "IAEoCToCOAEiLgoOQ29zbWV0aWNDb25maWcSDAoEZGF0YRgCIAEoCRIOCgZz",
                  "ZWF0SWQYASABKA0iLAoMQ29zbWV0aWNJbmZvEgwKBGRhdGEYAiABKAkSDgoG",
                  "c2VhdElkGAEgASgNIlYKB0NvdW50ZXISGgoEdHlwZRgBIAEoDjIMLkNvdW50",
                  "ZXJUeXBlEg0KBWNvdW50GAIgASgNEgoKAmlkGAMgASgNEhQKDG1hcmtlZE9i",
                  "amVjdBgEIAEoDSJKChpDcmVhdGVNYXRjaEdhbWVSb29tUmVxdWVzdBIsCg5n",
                  "YW1lUm9vbUNvbmZpZxgBIAEoCzIULk1hdGNoR2FtZVJvb21Db25maWciRwob",
                  "Q3JlYXRlTWF0Y2hHYW1lUm9vbVJlc3BvbnNlEigKDGdhbWVSb29tSW5mbxgB",
                  "IAEoCzISLk1hdGNoR2FtZVJvb21JbmZvIjQKHUNyZWF0ZU1hdGNoR2FtZVJv",
                  "b21SZXNwb25zZVYyEhMKC21jRmFicmljVXJpGAEgASgJIp0BCg5EYW1hZ2VB",
                  "c3NpZ25lchImCgthc3NpZ25tZW50cxgDIAMoCzIRLkRhbWFnZUFzc2lnbm1l",
                  "bnQSEgoKaW5zdGFuY2VJZBgBIAEoDRITCgt0b3RhbERhbWFnZRgCIAEoDRIf",
                  "Cg5kZWNpc2lvblByb21wdBgEIAEoCzIHLlByb21wdBIZChFjYW5JZ25vcmVC",
                  "bG9ja2VycxgFIAEoCCJkChBEYW1hZ2VBc3NpZ25tZW50EhIKCmluc3RhbmNl",
                  "SWQYASABKA0SEQoJbWluRGFtYWdlGAIgASgNEhEKCW1heERhbWFnZRgDIAEo",
                  "DRIWCg5hc3NpZ25lZERhbWFnZRgEIAEoDSJ7Cg9EYW1hZ2VSZWNpcGllbnQS",
                  "HAoEdHlwZRgBIAEoDjIOLkRhbWFnZVJlY1R5cGUSDgoGdGVhbUlkGAIgASgN",
                  "EhoKEnBsYXllclN5c3RlbVNlYXRJZBgDIAEoDRIeChZwbGFuZXN3YWxrZXJJ",
                  "bnN0YW5jZUlkGAQgASgNIoABCghEZWNrSW5mbxIOCgZkZWNrSWQYASABKAkS",
                  "DgoGdXNlcklkGAIgASgJEhAKCGNvdXJzZUlkGAMgASgJEhAKCGRlY2tOYW1l",
                  "GAQgASgJEhYKDmxpYnJhcnlDYXJkSWRzGAUgAygNEhgKEHNpZGVib2FyZENh",
                  "cmRJZHMYBiADKA0iOAoLRGVja01lc3NhZ2USEQoJZGVja0NhcmRzGAEgAygN",
                  "EhYKDnNpZGVib2FyZENhcmRzGAIgAygNIrEBChNEZWNsYXJlQXR0YWNrZXJz",
                  "UmVxEhwKCWF0dGFja2VycxgBIAMoCzIJLkF0dGFja2VyEiYKDmF0dGFja1dh",
                  "cm5pbmdzGAQgAygLMg4uQXR0YWNrV2FybmluZxIiCghtYW5hQ29zdBgFIAMo",
                  "CzIQLk1hbmFSZXF1aXJlbWVudBIXCg9oYXNSZXF1aXJlbWVudHMYAiABKAgS",
                  "FwoPaGFzUmVzdHJpY3Rpb25zGAMgASgIIjwKFERlY2xhcmVBdHRhY2tlcnNS",
                  "ZXNwEiQKEXNlbGVjdGVkQXR0YWNrZXJzGAEgAygLMgkuQXR0YWNrZXIiiAEK",
                  "EkRlY2xhcmVCbG9ja2Vyc1JlcRIaCghibG9ja2VycxgBIAMoCzIILkJsb2Nr",
                  "ZXISJAoNYmxvY2tXYXJuaW5ncxgEIAMoCzINLkJsb2NrV2FybmluZxIXCg9o",
                  "YXNSZXF1aXJlbWVudHMYAiABKAgSFwoPaGFzUmVzdHJpY3Rpb25zGAMgASgI",
                  "IjkKE0RlY2xhcmVCbG9ja2Vyc1Jlc3ASIgoQc2VsZWN0ZWRCbG9ja2VycxgB",
                  "IAMoCzIILkJsb2NrZXIiTAoJRGVjb3JhdG9yEhUKBGxvb3AYASABKAsyBS5M",
                  "b29wSAASHQoIaW52ZXJ0ZXIYAiABKAsyCS5JbnZlcnRlckgAQgkKB21lc3Nh",
                  "Z2UiRAoSRGVsZXRlUXVldWVSZXF1ZXN0Eg8KB2V2ZW50SWQYAiABKAkSHQoJ",
                  "cXVldWVUeXBlGAEgASgOMgouUXVldWVUeXBlIhUKE0RlbGV0ZVF1ZXVlUmVz",
                  "cG9uc2UiPAoSRGllUm9sbFJlc3VsdHNSZXNwEiYKDnBsYXllckRpZVJvbGxz",
                  "GAEgAygLMg4uUGxheWVyRGllUm9sbCIyCgxEaXN0cmlidXRpb24SEgoKaW5z",
                  "dGFuY2VJZBgBIAEoDRIOCgZhbW91bnQYAiABKA0imQEKD0Rpc3RyaWJ1dGlv",
                  "blJlcRIRCgl0YXJnZXRJZHMYBSADKA0SIgoaZXhpc3RpbmdEaXN0cmlidXRp",
                  "b25WYWx1ZXMYBiADKA0SEwoLb3B0aW9uSW5kZXgYASABKA0SEQoJbWluQW1v",
                  "dW50GAIgASgNEhEKCW1heEFtb3VudBgDIAEoDRIUCgxtaW5QZXJUYXJnZXQY",
                  "BCABKA0iTQoQRGlzdHJpYnV0aW9uUmVzcBIkCg1kaXN0cmlidXRpb25zGAIg",
                  "AygLMg0uRGlzdHJpYnV0aW9uEhMKC29wdGlvbkluZGV4GAEgASgNIjoKE0Ry",
                  "YWZ0R2FtZVJvb21Db25maWcSEgoKZ2FtZVJvb21JZBgBIAEoCRIPCgdldmVu",
                  "dElkGAIgASgJIhMKEURyYWZ0R2FtZVJvb21JbmZvIiMKIURyb3BDb25zdHJ1",
                  "Y3RlZE1hdGNobWFraW5nUmVxdWVzdCI9ChhEcm9wTWF0Y2htYWtpbmdSZXF1",
                  "ZXN0VjISDwoHZXZlbnRJZBgBIAEoCRIQCghjb3Vyc2VJZBgCIAEoCSJNChdE",
                  "cm9wTWF0Y2htYWtpbmdSZXNwb25zZRIyCgxyZXNwb25zZUNvZGUYASABKA4y",
                  "HC5Ecm9wTWF0Y2htYWtpbmdSZXNwb25zZUNvZGUiTwoZRHJvcE1hdGNobWFr",
                  "aW5nUmVzcG9uc2VWMhIyCgxyZXNwb25zZUNvZGUYASABKA4yHC5Ecm9wTWF0",
                  "Y2htYWtpbmdSZXNwb25zZUNvZGUiQgoQRHJvcFF1ZXVlUmVxdWVzdBIPCgdl",
                  "dmVudElkGAIgASgJEh0KCXF1ZXVlVHlwZRgBIAEoDjIKLlF1ZXVlVHlwZSIT",
                  "ChFEcm9wUXVldWVSZXNwb25zZSIeCg1EdW1teVJlc3BvbnNlEg0KBWR1bW15",
                  "GAEgASgNIh4KC0VjaG9SZXF1ZXN0Eg8KB21lc3NhZ2UYASABKAkiHwoMRWNo",
                  "b1Jlc3BvbnNlEg8KB21lc3NhZ2UYASABKAkiOwoORWRpY3RhbE1lc3NhZ2US",
                  "KQoMZWRpY3RNZXNzYWdlGAEgASgLMhMuQ2xpZW50VG9HUkVNZXNzYWdlIoYB",
                  "ChdFZmZlY3RWaW9sYXRpb25CbG9ja2luZxIZCgdibG9ja2VyGAQgAygLMggu",
                  "QmxvY2tlchIaChJhZmZlY3RlZEluc3RhbmNlSWQYASABKA0SFwoGcHJvbXB0",
                  "GAIgASgLMgcuUHJvbXB0EhsKBnJlc3VsdBgDIAEoDjILLlJlc3VsdENvZGUi",
                  "CQoHRW5kVHVybiK6AQoQRmluYWxNYXRjaFJlc3VsdBIPCgdtYXRjaElkGAEg",
                  "ASgJEh8KCnJlc3VsdExpc3QYBSADKAsyCy5SZXN1bHRTcGVjEhQKDGVycm9y",
                  "TWVzc2FnZRgKIAEoCRIlChBtYXRjaEZvcmNlUmVzdWx0GAIgASgLMgsuUmVz",
                  "dWx0U3BlYxI3ChRtYXRjaENvbXBsZXRlZFJlYXNvbhgDIAEoDjIZLk1hdGNo",
                  "Q29tcGxldGVkUmVhc29uVHlwZSIqCgxGb3JjZURyYXdSZXESGgoFc2NvcGUY",
                  "ASABKA4yCy5NYXRjaFNjb3BlIlwKGEZyb250RG9vclRvQ2xpZW50TWVzc2Fn",
                  "ZRI1ChRsb2JieVRvQ2xpZW50TWVzc2FnZRgBIAEoCzIVLkxvYmJ5VG9DbGll",
                  "bnRNZXNzYWdlSABCCQoHbWVzc2FnZSIsChlHUkVDYW5jZWxTY2hlZHVsZWRN",
                  "ZXNzYWdlEg8KB3RpbWVySWQYASABKA0iPwoQR1JFQ29uZmlnUmVxdWVzdBIr",
                  "ChBncmVDb25maWd1cmF0aW9uGAEgASgLMhEuR1JFQ29uZmlndXJhdGlvbiLH",
                  "AQoQR1JFQ29uZmlndXJhdGlvbhJHCh5nYW1lU3RhdGVSZWRhY3RvckNvbmZp",
                  "Z3VyYXRpb24YASABKAsyHy5HYW1lU3RhdGVSZWRhY3RvckNvbmZpZ3VyYXRp",
                  "b24SLwoSY2xpcHNDb25maWd1cmF0aW9uGAIgASgLMhMuQ0xJUFNDb25maWd1",
                  "cmF0aW9uEjkKF2NoZWNrcG9pbnRDb25maWd1cmF0aW9uGAMgASgLMhguQ2hl",
                  "Y2twb2ludENvbmZpZ3VyYXRpb24ijQEKEEdSRUNyZWF0ZVJlcXVlc3QSDwoH",
                  "bWF0Y2hJRBgCIAEoCRINCgVncmVJRBgBIAEoDRIOCgZnYW1lSUQYAyABKA0S",
                  "EAoIbWFqb3JWZXIYBCABKA0SEAoIbWlub3JWZXIYBSABKA0SEwoLcmV2aXNp",
                  "b25WZXIYBiABKA0SEAoIYnVpbGRWZXIYByABKA0iRwoRR1JFQ3JlYXRlUmVz",
                  "cG9uc2USDQoFZ3JlSUQYASABKA0SIwoGcmVzdWx0GAIgASgOMhMuR1JFVEhI",
                  "b3N0RXJyb3JDb2RlIiIKEUdSRURlc3Ryb3lSZXF1ZXN0Eg0KBWdyZUlEGAEg",
                  "ASgNIkgKEkdSRURlc3Ryb3lSZXNwb25zZRINCgVncmVJRBgBIAEoDRIjCgZy",
                  "ZXN1bHQYAiABKA4yEy5HUkVUSEhvc3RFcnJvckNvZGUiKAoVR1JFRXhwaXJl",
                  "VGltZXJSZXF1ZXN0Eg8KB3RpbWVySWQYASABKA0iNAoNR1JFRmF0YWxFcnJv",
                  "chIUCgxlcnJvck1lc3NhZ2UYAiABKAwSDQoFZ3JlSUQYASABKA0iNAoVR1JF",
                  "Rm9yY2VSZXN1bHRSZXF1ZXN0EhsKBnJlc3VsdBgBIAEoCzILLlJlc3VsdFNw",
                  "ZWMibwodR1JFR2FtZUxvZ2dlckNvbmZpZ3VyZVJlcXVlc3QSFAoMbG9hZEZp",
                  "bGVuYW1lGAEgASgJEhAKCGxvYWRQYXRoGAIgASgJEhQKDHNhdmVGaWxlbmFt",
                  "ZRgDIAEoCRIQCghzYXZlUGF0aBgEIAEoCSIkChNHUkVJbnRlcnByZXRSZXF1",
                  "ZXN0Eg0KBWNsaXBzGAEgASgJIigKEEdSRVJlcGxhY2VQbGF5ZXISFAoMc3lz",
                  "dGVtU2VhdElkGAEgASgNIkIKFUdSRVJlc3VtZU1hdGNoUmVxdWVzdBIpCg9i",
                  "aW5hcnlHYW1lU3RhdGUYASABKAsyEC5CaW5hcnlHYW1lU3RhdGUiXQoTR1JF",
                  "U2NoZWR1bGVkTWVzc2FnZRIPCgd0aW1lcklkGAEgASgNEg8KB2RlbGF5TXMY",
                  "AiABKAUSJAoHbWVzc2FnZRgDIAEoCzITLlNlcnZlclRvR1JFTWVzc2FnZSI5",
                  "ChRHUkVTdGFydE1hdGNoUmVxdWVzdBIhCgttYXRjaENvbmZpZxgBIAEoCzIM",
                  "Lk1hdGNoQ29uZmlnIlcKFEdSRVN1Ym1pdERlY2tSZXF1ZXN0EhEKCWRlY2tD",
                  "YXJkcxgCIAMoDRIWCg5zaWRlYm9hcmRDYXJkcxgDIAMoDRIUCgxzeXN0ZW1T",
                  "ZWF0SWQYASABKA0itAIKF0dSRVRISG9zdEVtdWxhdG9yTGF1bmNoEhMKC3By",
                  "b2dyYW1OYW1lGAEgASgJEhYKDmV4ZWN1dGFibGVQYXRoGAIgASgJEh0KFXNo",
                  "YXJlZExpYnJhcnlGaWxlbmFtZRgDIAEoCRIVCg1ncmVJUkZpbGVuYW1lGAQg",
                  "ASgJEhMKC2xvZ0ZpbGVuYW1lGAggASgJEhcKD3N5c2xvZ0lQQWRkcmVzcxgJ",
                  "IAEoCRIVCg1zeXNsb2dUQ1BQb3J0GAogASgJEhQKDHN5c2xvZ1Byb2NJRBgL",
                  "IAEoCRITCgtvdXRGaWxlbmFtZRgMIAEoCRIOCgZsaW5rSUQYBSABKA0SDgoG",
                  "aG9zdElEGAYgASgNEg0KBXN1dElEGAcgASgNEhcKD2VuYWJsZVJlZGFjdGlv",
                  "bhgNIAEoCCJKChtHUkVUSEhvc3RFbXVsYXRvckxhdW5jaFJlc3ASDgoGcmVz",
                  "dWx0GAEgASgNEg4KBmhvc3RJRBgCIAEoDRILCgNwSUQYAyABKAUiMwoZR1JF",
                  "VEhIb3N0RW11bGF0b3JTaHV0ZG93bhIWCg5zaHV0ZG93bkhvc3RJRBgBIAEo",
                  "DSJHCh1HUkVUSEhvc3RFbXVsYXRvclNodXRkb3duUmVzcBIOCgZyZXN1bHQY",
                  "ASABKA0SFgoOc2h1dGRvd25Ib3N0SUQYAiABKA0iEAoOR1JFVGlja01lc3Nh",
                  "Z2UiPwoRR1JFVGltZW91dE1lc3NhZ2USDgoGc2VhdElkGAEgASgNEhoKBHR5",
                  "cGUYAiABKA4yDC5UaW1lb3V0VHlwZSKhAQoWR1JFVGltZXJFeHBpcmVkTWVz",
                  "c2FnZRIWCg5leHBpcmVkVGltZXJJZBgBIAEoDRIxChJzZXJ2ZXJUb0dSRU1l",
                  "c3NhZ2UYAiABKAsyEy5TZXJ2ZXJUb0dSRU1lc3NhZ2VIABIxChJjbGllbnRU",
                  "b0dSRU1lc3NhZ2UYAyABKAsyEy5DbGllbnRUb0dSRU1lc3NhZ2VIAEIJCgdt",
                  "ZXNzYWdlIi4KG0dSRVRpbWVyRXhwaXJlZE5vdGlmaWNhdGlvbhIPCgd0aW1l",
                  "cklEGAEgASgNIpUBCg9HUkVUb0FueU1lc3NhZ2USEQoJdGltZXN0YW1wGAEg",
                  "ASgDEjEKEmdSRVRvU2VydmVyTWVzc2FnZRgCIAEoCzITLkdSRVRvU2VydmVy",
                  "TWVzc2FnZUgAEjEKEmdSRVRvQ2xpZW50TWVzc2FnZRgDIAEoCzITLkdSRVRv",
                  "Q2xpZW50TWVzc2FnZUgAQgkKB21lc3NhZ2UimxAKEkdSRVRvQ2xpZW50TWVz",
                  "c2FnZRIVCg1zeXN0ZW1TZWF0SWRzGAIgAygNEh0KBHR5cGUYASABKA4yDy5H",
                  "UkVNZXNzYWdlVHlwZRINCgVtc2dJZBgDIAEoDRITCgtnYW1lU3RhdGVJZBgE",
                  "IAEoDRIrChBnYW1lU3RhdGVNZXNzYWdlGAUgASgLMhEuR2FtZVN0YXRlTWVz",
                  "c2FnZRIXCgZwcm9tcHQYBiABKAsyBy5Qcm9tcHQSOQoXY2hvb3NlU3RhcnRp",
                  "bmdQbGF5ZXJSZXEYByABKAsyGC5DaG9vc2VTdGFydGluZ1BsYXllclJlcRI1",
                  "ChVvcHRpb25hbEFjdGlvbk1lc3NhZ2UYCCABKAsyFi5PcHRpb25hbEFjdGlv",
                  "bk1lc3NhZ2USMQoTYWN0aW9uc0F2YWlsYWJsZVJlcRgJIAEoCzIULkFjdGlv",
                  "bnNBdmFpbGFibGVSZXESGwoIb3JkZXJSZXEYCiABKAsyCS5PcmRlclJlcRIb",
                  "Cghncm91cFJlcRgLIAEoCzIJLkdyb3VwUmVxEh8KCnNlbGVjdE5SZXEYDCAB",
                  "KAsyCy5TZWxlY3ROUmVxEhsKCG1vZGFsUmVxGA0gASgLMgkuTW9kYWxSZXES",
                  "KQoPZ2V0U2V0dGluZ3NSZXNwGBAgASgLMhAuR2V0U2V0dGluZ3NSZXNwEikK",
                  "D3NldFNldHRpbmdzUmVzcBgRIAEoCzIQLlNldFNldHRpbmdzUmVzcBIhCgtj",
                  "b25uZWN0UmVzcBgSIAEoCzIMLkNvbm5lY3RSZXNwEjUKFWlsbGVnYWxSZXF1",
                  "ZXN0TWVzc2FnZRgTIAEoCzIWLklsbGVnYWxSZXF1ZXN0TWVzc2FnZRIpCg9i",
                  "aW5hcnlHYW1lU3RhdGUYFyABKAsyEC5CaW5hcnlHYW1lU3RhdGUSMQoTZGVj",
                  "bGFyZUF0dGFja2Vyc1JlcRgYIAEoCzIULkRlY2xhcmVBdHRhY2tlcnNSZXES",
                  "MQoTc3VibWl0QXR0YWNrZXJzUmVzcBgZIAEoCzIULlN1Ym1pdEF0dGFja2Vy",
                  "c1Jlc3ASLwoSZGVjbGFyZUJsb2NrZXJzUmVxGBogASgLMhMuRGVjbGFyZUJs",
                  "b2NrZXJzUmVxEi8KEnN1Ym1pdEJsb2NrZXJzUmVzcBgbIAEoCzITLlN1Ym1p",
                  "dEJsb2NrZXJzUmVzcBIpCg9hc3NpZ25EYW1hZ2VSZXEYHCABKAsyEC5Bc3Np",
                  "Z25EYW1hZ2VSZXESOwoYYXNzaWduRGFtYWdlQ29uZmlybWF0aW9uGB0gASgL",
                  "MhkuQXNzaWduRGFtYWdlQ29uZmlybWF0aW9uEjMKFG9yZGVyQ29tYmF0RGFt",
                  "YWdlUmVxGB4gASgLMhUuT3JkZXJDb21iYXREYW1hZ2VSZXESOQoXb3JkZXJE",
                  "YW1hZ2VDb25maXJtYXRpb24YHyABKAsyGC5PcmRlckRhbWFnZUNvbmZpcm1h",
                  "dGlvbhIrChBzZWxlY3RUYXJnZXRzUmVxGCAgASgLMhEuU2VsZWN0VGFyZ2V0",
                  "c1JlcRItChFzdWJtaXRUYXJnZXRzUmVzcBghIAEoCzISLlN1Ym1pdFRhcmdl",
                  "dHNSZXNwEiEKC3BheUNvc3RzUmVxGCIgASgLMgwuUGF5Q29zdHNSZXESKAoX",
                  "bm9uRGVjaXNpb25QbGF5ZXJQcm9tcHQYIyABKAsyBy5Qcm9tcHQSKQoPaW50",
                  "ZXJtaXNzaW9uUmVxGCQgASgLMhAuSW50ZXJtaXNzaW9uUmVxEi8KEmRpZVJv",
                  "bGxSZXN1bHRzUmVzcBglIAEoCzITLkRpZVJvbGxSZXN1bHRzUmVzcBIzChRz",
                  "ZWxlY3RSZXBsYWNlbWVudFJlcRgmIAEoCzIVLlNlbGVjdFJlcGxhY2VtZW50",
                  "UmVxEikKD3NlbGVjdE5Hcm91cFJlcRgnIAEoCzIQLlNlbGVjdE5Hcm91cFJl",
                  "cRIvChJhbHRlcm5hdGl2ZUNvc3RSZXEYKCABKAsyEy5BbHRlcm5hdGl2ZUNv",
                  "c3RSZXESKQoPZGlzdHJpYnV0aW9uUmVxGCkgASgLMhAuRGlzdHJpYnV0aW9u",
                  "UmVxEikKD251bWVyaWNJbnB1dFJlcRgqIAEoCzIQLk51bWVyaWNJbnB1dFJl",
                  "cRIdCglzZWFyY2hSZXEYKyABKAsyCi5TZWFyY2hSZXESNQoVY2FzdGluZ1Rp",
                  "bWVPcHRpb25zUmVxGCwgASgLMhYuQ2FzdGluZ1RpbWVPcHRpb25zUmVxEhwK",
                  "FGluZm9ybWF0aW9uYWxVc2VPbmx5GC0gASgIEi0KEXNlbGVjdE1hbmFUeXBl",
                  "UmVxGC4gASgLMhIuU2VsZWN0TWFuYVR5cGVSZXESMQoTc2VsZWN0RnJvbUdy",
                  "b3Vwc1JlcRgvIAEoCzIULlNlbGVjdEZyb21Hcm91cHNSZXESMQoTc2VhcmNo",
                  "RnJvbUdyb3Vwc1JlcRgwIAEoCzIULlNlYXJjaEZyb21Hcm91cHNSZXESHQoJ",
                  "Z2F0aGVyUmVxGDEgASgLMgouR2F0aGVyUmVxEiEKC2FsbG93Q2FuY2VsGDIg",
                  "ASgOMgwuQWxsb3dDYW5jZWwSHQoJdWlNZXNzYWdlGDMgASgLMgouVUlNZXNz",
                  "YWdlEiUKDXN1Ym1pdERlY2tSZXEYNCABKAsyDi5TdWJtaXREZWNrUmVxEicK",
                  "DmVkaWN0YWxNZXNzYWdlGDUgASgLMg8uRWRpY3RhbE1lc3NhZ2USJwoOdGlt",
                  "ZW91dE1lc3NhZ2UYNiABKAsyDy5UaW1lb3V0TWVzc2FnZSKlAgoSR1JFVG9T",
                  "ZXJ2ZXJNZXNzYWdlEg0KBW1zZ0lkGAEgASgNEisKD2JpbmFyeUdhbWVTdGF0",
                  "ZRgCIAEoCzIQLkJpbmFyeUdhbWVTdGF0ZUgAEjMKE3JlcG9ydFJlc3VsdE1l",
                  "c3NhZ2UYAyABKAsyFC5SZXBvcnRSZXN1bHRNZXNzYWdlSAASMAoQc2NoZWR1",
                  "bGVkTWVzc2FnZRgEIAEoCzIULkdSRVNjaGVkdWxlZE1lc3NhZ2VIABI8ChZj",
                  "YW5jZWxTY2hlZHVsZWRNZXNzYWdlGAUgASgLMhouR1JFQ2FuY2VsU2NoZWR1",
                  "bGVkTWVzc2FnZUgAEiMKC2dhbWVNZXRyaWNzGAYgASgLMgwuR2FtZU1ldHJp",
                  "Y3NIAEIJCgdtZXNzYWdlIoIDCghHYW1lSW5mbxIPCgdtYXRjaElEGAEgASgJ",
                  "EhwKB3Jlc3VsdHMYDSADKAsyCy5SZXN1bHRTcGVjEhIKCmdhbWVOdW1iZXIY",
                  "AyABKA0SGQoFc3RhZ2UYBSABKA4yCi5HYW1lU3RhZ2USFwoEdHlwZRgGIAEo",
                  "DjIJLkdhbWVUeXBlEh0KB3ZhcmlhbnQYByABKA4yDC5HYW1lVmFyaWFudBIf",
                  "CgptYXRjaFN0YXRlGAggASgOMgsuTWF0Y2hTdGF0ZRItChFtYXRjaFdpbkNv",
                  "bmRpdGlvbhgJIAEoDjISLk1hdGNoV2luQ29uZGl0aW9uEhcKD21heFRpbWVv",
                  "dXRDb3VudBgKIAEoDRITCgttYXhQaXBDb3VudBgLIAEoDRIaChJ0aW1lb3V0",
                  "RHVyYXRpb25TZWMYDCABKA0SIQoLc3VwZXJGb3JtYXQYDiABKA4yDC5TdXBl",
                  "ckZvcm1hdBIjCgxtdWxsaWdhblR5cGUYDyABKA4yDS5NdWxsaWdhblR5cGUi",
                  "NAoLR2FtZU1ldHJpY3MSJQoNcGxheWVyTWV0cmljcxgBIAMoCzIOLlBsYXll",
                  "ck1ldHJpY3Mi3AUKDkdhbWVPYmplY3RJbmZvEh4KCnN1cGVyVHlwZXMYCSAD",
                  "KA4yCi5TdXBlclR5cGUSHAoJY2FyZFR5cGVzGAogAygOMgkuQ2FyZFR5cGUS",
                  "GgoIc3VidHlwZXMYCyADKA4yCC5TdWJUeXBlEhkKBWNvbG9yGAwgAygOMgou",
                  "Q2FyZENvbG9yEg8KB3ZpZXdlcnMYGiADKA0SEQoJYWJpbGl0aWVzGB4gAygN",
                  "EhIKCmluc3RhbmNlSWQYASABKA0SDQoFZ3JwSWQYAiABKA0SDwoHZ3JvdXBJ",
                  "ZBgDIAEoBRIdCgR0eXBlGAQgASgOMg8uR2FtZU9iamVjdFR5cGUSDgoGem9u",
                  "ZUlkGAUgASgNEh8KCnZpc2liaWxpdHkYBiABKA4yCy5WaXNpYmlsaXR5EhMK",
                  "C293bmVyU2VhdElkGAcgASgNEhgKEGNvbnRyb2xsZXJTZWF0SWQYCCABKA0S",
                  "GgoFcG93ZXIYDSABKAsyCy5JbnQzMlZhbHVlEh4KCXRvdWdobmVzcxgOIAEo",
                  "CzILLkludDMyVmFsdWUSDgoGaXNDb3B5GBAgASgIEhAKCGlzVGFwcGVkGBEg",
                  "ASgIEhwKFGhhc1N1bW1vbmluZ1NpY2tuZXNzGBIgASgIEiEKC2F0dGFja1N0",
                  "YXRlGBMgASgOMgwuQXR0YWNrU3RhdGUSHwoKYmxvY2tTdGF0ZRgUIAEoDjIL",
                  "LkJsb2NrU3RhdGUSDgoGZGFtYWdlGBcgASgNEh8KCmF0dGFja0luZm8YGCAB",
                  "KAsyCy5BdHRhY2tJbmZvEh0KCWJsb2NrSW5mbxgZIAEoCzIKLkJsb2NrSW5m",
                  "bxIdCgdsb3lhbHR5GBsgASgLMgwuVUludDMyVmFsdWUSGQoRb2JqZWN0U291",
                  "cmNlR3JwSWQYHCABKA0SDAoEbmFtZRgdIAEoDRIQCghwYXJlbnRJZBgfIAEo",
                  "DRIUCgxvdmVybGF5R3JwSWQYICABKA0izwMKEEdhbWVTdGF0ZU1lc3NhZ2US",
                  "GAoFdGVhbXMYBCADKAsyCS5UZWFtSW5mbxIcCgdwbGF5ZXJzGAUgAygLMgsu",
                  "UGxheWVySW5mbxIYCgV6b25lcxgHIAMoCzIJLlpvbmVJbmZvEiQKC2dhbWVP",
                  "YmplY3RzGAggAygLMg8uR2FtZU9iamVjdEluZm8SJAoLYW5ub3RhdGlvbnMY",
                  "CSADKAsyDy5Bbm5vdGF0aW9uSW5mbxIeChZkaWZmRGVsZXRlZEluc3RhbmNl",
                  "SWRzGAogAygNEhoKBnRpbWVycxgNIAMoCzIKLlRpbWVySW5mbxIcCgdhY3Rp",
                  "b25zGA8gAygLMgsuQWN0aW9uSW5mbxIcCgR0eXBlGAEgASgOMg4uR2FtZVN0",
                  "YXRlVHlwZRITCgtnYW1lU3RhdGVJZBgCIAEoDRIbCghnYW1lSW5mbxgDIAEo",
                  "CzIJLkdhbWVJbmZvEhsKCHR1cm5JbmZvGAYgASgLMgkuVHVybkluZm8SGwoT",
                  "cGVuZGluZ01lc3NhZ2VDb3VudBgLIAEoDRIXCg9wcmV2R2FtZVN0YXRlSWQY",
                  "DCABKA0SIAoGdXBkYXRlGA4gASgOMhAuR2FtZVN0YXRlVXBkYXRlIlIKHkdh",
                  "bWVTdGF0ZVJlZGFjdG9yQ29uZmlndXJhdGlvbhIXCg9lbmFibGVSZWRhY3Rp",
                  "b24YASABKAgSFwoPZW5hYmxlRm9yY2VEaWZmGAIgASgIIlcKCUdhdGhlclJl",
                  "cRIeCgdzb3VyY2VzGAMgAygLMg0uR2F0aGVyU291cmNlEhMKC29wdGlvbklu",
                  "ZGV4GAEgASgNEhUKDWRlc3RpbmF0aW9uSWQYAiABKA0iQQoKR2F0aGVyUmVz",
                  "cBIeCgpnYXRoZXJpbmdzGAIgAygLMgouR2F0aGVyaW5nEhMKC29wdGlvbklu",
                  "ZGV4GAEgASgNIkYKDEdhdGhlclNvdXJjZRIQCghzb3VyY2VJZBgBIAEoDRIR",
                  "CgltaW5BbW91bnQYAiABKA0SEQoJbWF4QW1vdW50GAMgASgNIi8KCUdhdGhl",
                  "cmluZxISCgppbnN0YW5jZUlkGAEgASgNEg4KBmFtb3VudBgCIAEoDSJbChRH",
                  "ZW5lcmFsQ29uZmlndXJhdGlvbhIuCg1vcGVyYXRpb25Nb2RlGAEgASgOMhcu",
                  "R1JFVEhIb3N0T3BlcmF0aW9uTW9kZRITCgttYXhMb2dMZXZlbBgCIAEoDSL/",
                  "AQoVR2V0R2FtZVJvb21JZHNSZXF1ZXN0Eg8KB2V2ZW50SWQYASABKAkSOAoX",
                  "Z2FtZVJvb21TdGF0ZVR5cGVGaWx0ZXIYBSADKA4yFy5NYXRjaEdhbWVSb29t",
                  "U3RhdGVUeXBlEiMKDGdhbWVSb29tVHlwZRgCIAEoDjINLkdhbWVSb29tVHlw",
                  "ZRIdChVpbmNsdWRlSW52aXNpYmxlUm9vbXMYByABKAgSHAoUaW5jbHVkZVJl",
                  "c2VydmVkUm9vbXMYCCABKAgSOQoXc29ydEZpbHRlclBhZ2luZ09wdGlvbnMY",
                  "CiABKAsyGC5Tb3J0RmlsdGVyUGFnaW5nT3B0aW9ucyJcChZHZXRHYW1lUm9v",
                  "bUlkc1Jlc3BvbnNlEhMKC2dhbWVSb29tSWRzGAEgAygJEi0KEWNvbnRpbnVh",
                  "dGlvblRva2VuGAogASgLMhIuQ29udGludWF0aW9uVG9rZW4iLAoWR2V0R2Ft",
                  "ZVJvb21JbmZvUmVxdWVzdBISCgpnYW1lUm9vbUlkGAEgASgJIn4KF0dldEdh",
                  "bWVSb29tSW5mb1Jlc3BvbnNlEisKDW1hdGNoUm9vbUluZm8YASABKAsyEi5N",
                  "YXRjaEdhbWVSb29tSW5mb0gAEisKDWRyYWZ0Um9vbUluZm8YAiABKAsyEi5E",
                  "cmFmdEdhbWVSb29tSW5mb0gAQgkKB21lc3NhZ2UiUwoWR2V0TG9iYnlVc2Vy",
                  "SWRzUmVxdWVzdBI5Chdzb3J0RmlsdGVyUGFnaW5nT3B0aW9ucxgKIAEoCzIY",
                  "LlNvcnRGaWx0ZXJQYWdpbmdPcHRpb25zIlkKF0dldExvYmJ5VXNlcklkc1Jl",
                  "c3BvbnNlEg8KB3VzZXJJZHMYAiADKAkSLQoRY29udGludWF0aW9uVG9rZW4Y",
                  "CiABKAsyEi5Db250aW51YXRpb25Ub2tlbiIpChdHZXRMb2JieVVzZXJJbmZv",
                  "UmVxdWVzdBIOCgZ1c2VySWQYASABKAkiPAoYR2V0TG9iYnlVc2VySW5mb1Jl",
                  "c3BvbnNlEiAKCHVzZXJJbmZvGAIgASgLMg4uTG9iYnlVc2VySW5mbyI1Cg9H",
                  "ZXRTZXR0aW5nc1Jlc3ASIgoIc2V0dGluZ3MYASABKAsyEC5TZXR0aW5nc01l",
                  "c3NhZ2UiRAoQR3JlVG9DbGllbnRFdmVudBIwChNncmVUb0NsaWVudE1lc3Nh",
                  "Z2VzGAEgAygLMhMuR1JFVG9DbGllbnRNZXNzYWdlIosBCgVHcm91cBILCgNp",
                  "ZHMYASADKA0SDwoHZ3JvdXBJZBgCIAEoBRIbCgh6b25lVHlwZRgDIAEoDjIJ",
                  "LlpvbmVUeXBlEiEKC3N1YlpvbmVUeXBlGAQgASgOMgwuU3ViWm9uZVR5cGUS",
                  "EQoJbWluU2VsZWN0GAUgASgFEhEKCW1heFNlbGVjdBgGIAEoBSKuAQoIR3Jv",
                  "dXBSZXESEwoLaW5zdGFuY2VJZHMYASADKA0SJwoKZ3JvdXBTcGVjcxgCIAMo",
                  "CzITLkdyb3VwU3BlY2lmaWNhdGlvbhIVCg10b3RhbFNlbGVjdGVkGAMgASgN",
                  "EgsKA2lkeBgEIAEoDRIdCglncm91cFR5cGUYBSABKA4yCi5Hcm91cFR5cGUS",
                  "IQoHY29udGV4dBgGIAEoDjIQLkdyb3VwaW5nQ29udGV4dCJPCglHcm91cFJl",
                  "c3ASFgoGZ3JvdXBzGAEgAygLMgYuR3JvdXASCwoDaWR4GAIgASgNEh0KCWdy",
                  "b3VwVHlwZRgDIAEoDjIKLkdyb3VwVHlwZSKVAQoSR3JvdXBTcGVjaWZpY2F0",
                  "aW9uEhIKCmxvd2VyQm91bmQYASABKA0SEgoKdXBwZXJCb3VuZBgCIAEoDRIb",
                  "Cgh6b25lVHlwZRgDIAEoDjIJLlpvbmVUeXBlEiEKC3N1YlpvbmVUeXBlGAQg",
                  "ASgOMgwuU3ViWm9uZVR5cGUSFwoGcHJvbXB0GAUgASgLMgcuUHJvbXB0IjcK",
                  "FUlSTG9hZGVyQ29uZmlndXJhdGlvbhIeChZlbmFibGVMaW1pdGVkSVJMb2Fk",
                  "aW5nGAEgASgIImQKFUlsbGVnYWxSZXF1ZXN0TWVzc2FnZRIrCg5pbnZhbGlk",
                  "TWVzc2FnZRgBIAEoCzITLkNsaWVudFRvR1JFTWVzc2FnZRIeCgZyZWFzb24Y",
                  "AiABKA4yDi5GYWlsdXJlUmVhc29uIhsKCkludDMyVmFsdWUSDQoFdmFsdWUY",
                  "ASABKAUirQEKD0ludGVybWlzc2lvblJlcRIcCgdvcHRpb25zGAEgAygLMgsu",
                  "VXNlck9wdGlvbhIjChJpbnRlcm1pc3Npb25Qcm9tcHQYAiABKAsyBy5Qcm9t",
                  "cHQSIwoOZ2FtZVJlc3VsdFR5cGUYAyABKA4yCy5SZXN1bHRUeXBlEhUKDXdp",
                  "bm5pbmdUZWFtSWQYBCABKA0SGwoGcmVzdWx0GAUgASgLMgsuUmVzdWx0U3Bl",
                  "YyJqCg9JbnZhbGlkQXR0YWNrZXISGwoGcmVzdWx0GAEgASgOMgsuUmVzdWx0",
                  "Q29kZRIZCgZhdHRhY2sYAiABKAsyCS5BdHRhY2tlchIfCg5kZWNpc2lvblBy",
                  "b21wdBgDIAEoCzIHLlByb21wdCJnCg5JbnZhbGlkQmxvY2tlchIbCgZyZXN1",
                  "bHQYASABKA4yCy5SZXN1bHRDb2RlEhcKBWJsb2NrGAIgASgLMgguQmxvY2tl",
                  "chIfCg5kZWNpc2lvblByb21wdBgDIAEoCzIHLlByb21wdCJuCiJJbnZhbGlk",
                  "Q29tYmF0RGFtYWdlT3JkZXJBc3NpZ25tZW50EhsKBnJlc3VsdBgBIAEoDjIL",
                  "LlJlc3VsdENvZGUSKwoFb3JkZXIYAiABKAsyHC5Db21iYXREYW1hZ2VPcmRl",
                  "ckFzc2lnbm1lbnQiWwoXSW52YWxpZERhbWFnZUFzc2lnbm1lbnQSGwoGcmVz",
                  "dWx0GAEgASgOMgsuUmVzdWx0Q29kZRIjCgphc3NpZ25tZW50GAIgASgLMg8u",
                  "RGFtYWdlQXNzaWduZXIieAoWSW52YWxpZFRhcmdldFNlbGVjdGlvbhIgCgZ0",
                  "YXJnZXQYASABKAsyEC5UYXJnZXRTZWxlY3Rpb24SGwoGcmVzdWx0GAIgASgO",
                  "MgsuUmVzdWx0Q29kZRIfCg5kZWNpc2lvblByb21wdBgDIAEoCzIHLlByb21w",
                  "dCIgCghJbnZlcnRlchIUCgVjaGlsZBgBIAEoCzIFLk5vZGUidAohSm9pbkNv",
                  "bnN0cnVjdGVkTWF0Y2htYWtpbmdSZXF1ZXN0Eg4KBmRlY2tJZBgDIAEoCRIo",
                  "CgltYXRjaFR5cGUYASABKA4yFS5Db25zdHJ1Y3RlZE1hdGNoVHlwZRIVCg1u",
                  "dW1iZXJPZkdhbWVzGAIgASgFIkgKGEpvaW5NYXRjaEdhbWVSb29tUmVxdWVz",
                  "dBISCgpnYW1lUm9vbUlkGAEgASgJEhgKEGdhbWVSb29tUGFzc3dvcmQYAiAB",
                  "KAkiRQoZSm9pbk1hdGNoR2FtZVJvb21SZXNwb25zZRIoCgxnYW1lUm9vbUlu",
                  "Zm8YASABKAsyEi5NYXRjaEdhbWVSb29tSW5mbyItChtKb2luTWF0Y2hHYW1l",
                  "Um9vbVJlc3BvbnNlVjISDgoGc2VhdElkGAEgASgFIj0KGEpvaW5NYXRjaG1h",
                  "a2luZ1JlcXVlc3RWMhIPCgdldmVudElkGAEgASgJEhAKCGNvdXJzZUlkGAIg",
                  "ASgJIk0KF0pvaW5NYXRjaG1ha2luZ1Jlc3BvbnNlEjIKDHJlc3BvbnNlQ29k",
                  "ZRgBIAEoDjIcLkpvaW5NYXRjaG1ha2luZ1Jlc3BvbnNlQ29kZSJPChlKb2lu",
                  "TWF0Y2htYWtpbmdSZXNwb25zZVYyEjIKDHJlc3BvbnNlQ29kZRgBIAEoDjIc",
                  "LkpvaW5NYXRjaG1ha2luZ1Jlc3BvbnNlQ29kZSJ/ChBKb2luUXVldWVSZXF1",
                  "ZXN0Eg8KB2V2ZW50SWQYAiABKAkSDgoGZGVja0lkGAMgASgJEhAKCGNvdXJz",
                  "ZUlkGAUgASgJEhkKEW1hdGNobWFraW5nRmlsdGVyGAQgASgJEh0KCXF1ZXVl",
                  "VHlwZRgBIAEoDjIKLlF1ZXVlVHlwZSI7ChFKb2luUXVldWVSZXNwb25zZRIm",
                  "CglxdWV1ZUluZm8YBSABKAsyEy5Mb2JieVVzZXJRdWV1ZUluZm8i6AEKEEtl",
                  "eVZhbHVlUGFpckluZm8SCwoDa2V5GAEgASgJEhMKC3ZhbHVlVWludDMyGAMg",
                  "AygNEhIKCnZhbHVlSW50MzIYBCADKAUSEwoLdmFsdWVVaW50NjQYBSADKAQS",
                  "EgoKdmFsdWVJbnQ2NBgGIAMoAxIRCgl2YWx1ZUJvb2wYByADKAgSEwoLdmFs",
                  "dWVTdHJpbmcYCCADKAkSEgoKdmFsdWVGbG9hdBgJIAMoAhITCgt2YWx1ZURv",
                  "dWJsZRgKIAMoARIkCgR0eXBlGAIgASgOMhYuS2V5VmFsdWVQYWlyVmFsdWVU",
                  "eXBlIoIBCg5Mb2JieURyYWZ0SW5mbxIOCgZ1c2VySWQYASABKAkSDwoHZXZl",
                  "bnRJZBgCIAEoCRIPCgdkcmFmdElkGAMgASgJEh0KFWRyYWZ0U3RhcnRlZFRp",
                  "bWVzdGFtcBgUIAEoAxIfChdkcmFmdENvbXBsZXRlZFRpbWVzdGFtcBgVIAEo",
                  "AyJLCgpMb2JieUVycm9yEhQKDGVycm9yTWVzc2FnZRgDIAEoCRInCg5sb2Ji",
                  "eUVycm9yQ29kZRgCIAEoDjIPLkxvYmJ5RXJyb3JDb2RlIj4KGExvYmJ5TWF0",
                  "Y2hDb21wbGV0ZWRFdmVudBIiCgltYXRjaEluZm8YASABKAsyDy5Mb2JieU1h",
                  "dGNoSW5mbyKKAQoQTG9iYnlNYXRjaENvbmZpZxIPCgdtYXRjaElkGAEgASgJ",
                  "Eg8KB2V2ZW50SWQYAiABKAkSFwoPbWF0Y2hHYXRld2F5VXJsGAMgASgJEhMK",
                  "C21jRmFicmljVXJpGAQgASgJEiYKB3BsYXllcnMYCiADKAsyFS5Mb2JieU1h",
                  "dGNoUGxheWVySW5mbyJDChxMb2JieU1hdGNoQ3JlYXRlUGVuZGluZ0V2ZW50",
                  "EiMKG21hdGNoQ3JlYXRlUGVuZGluZ1RpbWVzdGFtcBgKIAEoAyJfChZMb2Ji",
                  "eU1hdGNoQ3JlYXRlZEV2ZW50EiYKC21hdGNoQ29uZmlnGAEgASgLMhEuTG9i",
                  "YnlNYXRjaENvbmZpZxIdChVtYXRjaENyZWF0ZWRUaW1lc3RhbXAYCiABKAMi",
                  "5QEKDkxvYmJ5TWF0Y2hJbmZvEiEKBmNvbmZpZxgBIAEoCzIRLkxvYmJ5TWF0",
                  "Y2hDb25maWcSLQoRbWF0Y2hHYW1lUm9vbUluZm8YAiABKAsyEi5NYXRjaEdh",
                  "bWVSb29tSW5mbxIdChVtYXRjaENyZWF0ZWRUaW1lc3RhbXAYCiABKAMSHQoV",
                  "bWF0Y2hTdGFydGVkVGltZXN0YW1wGAsgASgDEh8KF21hdGNoQ29tcGxldGVk",
                  "VGltZXN0YW1wGAwgASgDEiIKGm1hdGNoUmVzdWx0c1NhdmVkVGltZXN0YW1w",
                  "GA0gASgDImAKFExvYmJ5TWF0Y2hQbGF5ZXJJbmZvEhIKCnBsYXllck5hbWUY",
                  "ASABKAkSFAoMc3lzdGVtU2VhdElkGAIgASgFEg4KBnRlYW1JZBgDIAEoBRIO",
                  "CgZpc1dvdGMYBCABKAgiZgoQTG9iYnlTZXJ2aWNlSW5mbxIVCg1lbnZpcm9u",
                  "bWVudElkGAIgASgJEjsKGHNlcnZpY2VGYWJyaWNTZXJ2aWNlSW5mbxgBIAEo",
                  "CzIZLlNlcnZpY2VGYWJyaWNTZXJ2aWNlSW5mbyLtCAoUTG9iYnlUb0NsaWVu",
                  "dE1lc3NhZ2USGgoFZXJyb3IYAiABKAsyCy5Mb2JieUVycm9yEhEKCXJlcXVl",
                  "c3RJZBgDIAEoBRIRCgl0aW1lc3RhbXAYBCABKAMSKQoPY29ycmVsYXRpb25J",
                  "bmZvGAUgASgLMhAuQ29ycmVsYXRpb25JbmZvEjUKFGF1dGhlbnRpY2F0ZVJl",
                  "c3BvbnNlGGQgASgLMhUuQXV0aGVudGljYXRlUmVzcG9uc2VIABIwChNzZXJ2",
                  "aWNlSW5mb1Jlc3BvbnNlGGUgASgLMhEuTG9iYnlTZXJ2aWNlSW5mb0gAEjYK",
                  "EmdldFVzZXJJZHNSZXNwb25zZRhuIAEoCzIYLkdldExvYmJ5VXNlcklkc1Jl",
                  "c3BvbnNlSAASOAoTZ2V0VXNlckluZm9SZXNwb25zZRhvIAEoCzIZLkdldExv",
                  "YmJ5VXNlckluZm9SZXNwb25zZUgAEkUKHGNsZWFyTG9iYnlVc2VyU3RhdHVz",
                  "UmVzcG9uc2UYcCABKAsyHS5DbGVhckxvYmJ5VXNlclN0YXR1c1Jlc3BvbnNl",
                  "SAASMAoRam9pblF1ZXVlUmVzcG9uc2UYyAEgASgLMhIuSm9pblF1ZXVlUmVz",
                  "cG9uc2VIABIwChFkcm9wUXVldWVSZXNwb25zZRjJASABKAsyEi5Ecm9wUXVl",
                  "dWVSZXNwb25zZUgAEjQKE2RlbGV0ZVF1ZXVlUmVzcG9uc2UYygEgASgLMhQu",
                  "RGVsZXRlUXVldWVSZXNwb25zZUgAEkAKGWpvaW5NYXRjaG1ha2luZ1Jlc3Bv",
                  "bnNlVjIYywEgASgLMhouSm9pbk1hdGNobWFraW5nUmVzcG9uc2VWMkgAEkAK",
                  "GWRyb3BNYXRjaG1ha2luZ1Jlc3BvbnNlVjIYzAEgASgLMhouRHJvcE1hdGNo",
                  "bWFraW5nUmVzcG9uc2VWMkgAEjwKF2pvaW5NYXRjaG1ha2luZ1Jlc3BvbnNl",
                  "GM0BIAEoCzIYLkpvaW5NYXRjaG1ha2luZ1Jlc3BvbnNlSAASPAoXZHJvcE1h",
                  "dGNobWFraW5nUmVzcG9uc2UYzgEgASgLMhguRHJvcE1hdGNobWFraW5nUmVz",
                  "cG9uc2VIABJEChtjbGllbnRUb01hdGNoU2VydmljZU1lc3NhZ2UYkAMgASgL",
                  "MhwuQ2xpZW50VG9NYXRjaFNlcnZpY2VNZXNzYWdlSAASNQoRbWF0Y2hDcmVh",
                  "dGVkRXZlbnQY9AMgASgLMhcuTG9iYnlNYXRjaENyZWF0ZWRFdmVudEgAEjkK",
                  "E21hdGNoQ29tcGxldGVkRXZlbnQY9QMgASgLMhkuTG9iYnlNYXRjaENvbXBs",
                  "ZXRlZEV2ZW50SAASQQoXbWF0Y2hDcmVhdGVQZW5kaW5nRXZlbnQY9gMgASgL",
                  "Mh0uTG9iYnlNYXRjaENyZWF0ZVBlbmRpbmdFdmVudEgAEiYKDGVjaG9SZXNw",
                  "b25zZRjoByABKAsyDS5FY2hvUmVzcG9uc2VIAEIJCgdtZXNzYWdlIq4CCg1M",
                  "b2JieVVzZXJJbmZvEg4KBnVzZXJJZBgBIAEoCRImCglzdGF0ZVR5cGUYAiAB",
                  "KA4yEy5Mb2JieVVzZXJTdGF0ZVR5cGUSHQoVc3RhdGVVcGRhdGVkVGltZXN0",
                  "YW1wGAMgASgDEi8KEnVzZXJDb25uZWN0aW9uSW5mbxgKIAEoCzITLlVzZXJD",
                  "b25uZWN0aW9uSW5mbxIlCg1wcmVzZW5jZVN0YXRlGAsgASgOMg4uUHJlc2Vu",
                  "Y2VTdGF0ZRImCglxdWV1ZUluZm8YDyABKAsyEy5Mb2JieVVzZXJRdWV1ZUlu",
                  "Zm8SIgoJZHJhZnRJbmZvGBQgASgLMg8uTG9iYnlEcmFmdEluZm8SIgoJbWF0",
                  "Y2hJbmZvGBkgASgLMg8uTG9iYnlNYXRjaEluZm8imAEKEkxvYmJ5VXNlclF1",
                  "ZXVlSW5mbxIOCgZ1c2VySWQYASABKAkSDwoHZXZlbnRJZBgCIAEoCRIvChBq",
                  "b2luUXVldWVSZXF1ZXN0GAsgASgLMhUuQ2xpZW50VG9Mb2JieU1lc3NhZ2US",
                  "MAoRam9pblF1ZXVlUmVzcG9uc2UYDCABKAsyFS5Mb2JieVRvQ2xpZW50TWVz",
                  "c2FnZSIcCgRMb29wEhQKBWNoaWxkGAEgASgLMgUuTm9kZSIjCg9Mb29wYmFj",
                  "a1JlcXVlc3QSEAoIY29udGVudHMYASABKAkiSQoQTG9vcGJhY2tSZXNwb25z",
                  "ZRIQCghjb250ZW50cxgBIAEoCRIjCgZyZXN1bHQYAiABKA4yEy5HUkVUSEhv",
                  "c3RFcnJvckNvZGUihQEKCE1hbmFJbmZvEiEKBXNwZWNzGAQgAygLMhIuTWFu",
                  "YUluZm9UeXBlc1NwZWMSDgoGbWFuYUlkGAEgASgNEhkKBWNvbG9yGAIgASgO",
                  "MgouTWFuYUNvbG9yEhUKDXNyY0luc3RhbmNlSWQYAyABKA0SFAoMYWJpbGl0",
                  "eUdycElkGAUgASgNIjAKEU1hbmFJbmZvVHlwZXNTcGVjEhsKBHR5cGUYASAB",
                  "KA4yDS5NYW5hU3BlY1R5cGUiNwoLTWFuYVBheW1lbnQSGQoFY29sb3IYASAB",
                  "KA4yCi5NYW5hQ29sb3ISDQoFY291bnQYAiABKA0ieQoRTWFuYVBheW1lbnRP",
                  "cHRpb24SHgoIcGF5bWVudHMYASADKAsyDC5NYW5hUGF5bWVudBIXCgRtYW5h",
                  "GAIgAygLMgkuTWFuYUluZm8SFgoObWF4QWN0aXZhdGlvbnMYAyABKA0SEwoL",
                  "b3B0aW9uSW5kZXgYBCABKA0icwoPTWFuYVJlcXVpcmVtZW50EhkKBWNvbG9y",
                  "GAEgAygOMgouTWFuYUNvbG9yEg0KBWNvdW50GAIgASgFEg4KBmNvc3RJZBgD",
                  "IAEoDRIQCghvYmplY3RJZBgEIAEoDRIUCgxhYmlsaXR5R3JwSWQYBSABKA0i",
                  "iAQKC01hdGNoQ29uZmlnEhoKBXRlYW1zGAYgAygLMgsuVGVhbUNvbmZpZxIi",
                  "Cgx0aW1lckNvbmZpZ3MYCyADKAsyDC5UaW1lckNvbmZpZxIoCg9jb3NtZXRp",
                  "Y0NvbmZpZ3MYDiADKAsyDy5Db3NtZXRpY0NvbmZpZxIbCghnYW1lVHlwZRgB",
                  "IAEoDjIJLkdhbWVUeXBlEiEKC2dhbWVWYXJpYW50GAIgASgOMgwuR2FtZVZh",
                  "cmlhbnQSKAoMd2luQ29uZGl0aW9uGAMgASgOMhIuTWF0Y2hXaW5Db25kaXRp",
                  "b24SGgoSbWF0Y2hPcHRpb25CaXRtYXNrGAQgASgNEhkKEW1heFBsYXllckhh",
                  "bmRTaXplGAUgASgNEhkKEW1hdGNoVGltZUxpbWl0U2VjGAcgASgNEh4KFmlu",
                  "YWN0aXZpdHlUaW1lTGltaXRTZWMYCCABKA0SHwoKdGVzdENvbmZpZxgJIAEo",
                  "CzILLlRlc3RDb25maWcSIwoMbXVsbGlnYW5UeXBlGAogASgOMg0uTXVsbGln",
                  "YW5UeXBlEiMKDHRpbWVyUGFja2FnZRgMIAEoDjINLlRpbWVyUGFja2FnZRIl",
                  "Cg10aW1lb3V0Q29uZmlnGA0gASgLMg4uVGltZW91dENvbmZpZxIhCgtzdXBl",
                  "ckZvcm1hdBgPIAEoDjIMLlN1cGVyRm9ybWF0Il8KJE1hdGNoQ29udHJvbGxl",
                  "ckNsaWVudFNlc3Npb25TZXR0aW5ncxI3ChRzdWJzY3JpYmVkRXZlbnRUeXBl",
                  "cxgKIAMoDjIZLk1hdGNoQ29udHJvbGxlckV2ZW50VHlwZSI6CiFNYXRjaENv",
                  "bnRyb2xsZXJHZXRTZXR0aW5nc1JlcXVlc3QSFQoNcHJvcGVydHlOYW1lcxgB",
                  "IAMoCSKlAQoiTWF0Y2hDb250cm9sbGVyR2V0U2V0dGluZ3NSZXNwb25zZRI5",
                  "ChdtYXRjaENvbnRyb2xsZXJTZXR0aW5ncxgBIAEoCzIYLk1hdGNoQ29udHJv",
                  "bGxlclNldHRpbmdzEkQKFWNsaWVudFNlc3Npb25TZXR0aW5ncxgCIAEoCzIl",
                  "Lk1hdGNoQ29udHJvbGxlckNsaWVudFNlc3Npb25TZXR0aW5ncyJiChtNYXRj",
                  "aENvbnRyb2xsZXJIZWFsdGhSZXBvcnQSMAoLc2VydmljZUluZm8YASABKAsy",
                  "Gy5NYXRjaENvbnRyb2xsZXJTZXJ2aWNlSW5mbxIRCgl0aW1lc3RhbXAYAiAB",
                  "KAMipQEKGk1hdGNoQ29udHJvbGxlclNlcnZpY2VJbmZvEhUKDWVudmlyb25t",
                  "ZW50SWQYAiABKAkSOwoYc2VydmljZUZhYnJpY1NlcnZpY2VJbmZvGAEgASgL",
                  "MhkuU2VydmljZUZhYnJpY1NlcnZpY2VJbmZvEjMKFG1hdGNoQ29udHJvbGxl",
                  "clN0YXRlGAMgASgOMhUuTWF0Y2hDb250cm9sbGVyU3RhdGUilQEKIU1hdGNo",
                  "Q29udHJvbGxlclNldFNldHRpbmdzUmVxdWVzdBIqCghzZXR0aW5ncxgBIAEo",
                  "CzIYLk1hdGNoQ29udHJvbGxlclNldHRpbmdzEkQKFWNsaWVudFNlc3Npb25T",
                  "ZXR0aW5ncxgCIAEoCzIlLk1hdGNoQ29udHJvbGxlckNsaWVudFNlc3Npb25T",
                  "ZXR0aW5ncyKWAQoiTWF0Y2hDb250cm9sbGVyU2V0U2V0dGluZ3NSZXNwb25z",
                  "ZRIqCghzZXR0aW5ncxgBIAEoCzIYLk1hdGNoQ29udHJvbGxlclNldHRpbmdz",
                  "EkQKFWNsaWVudFNlc3Npb25TZXR0aW5ncxgCIAEoCzIlLk1hdGNoQ29udHJv",
                  "bGxlckNsaWVudFNlc3Npb25TZXR0aW5ncyJTChdNYXRjaENvbnRyb2xsZXJT",
                  "ZXR0aW5ncxIQCghncmVJckJpbhgFIAEoCRIPCgdncnBkWG1sGAYgASgJEhUK",
                  "DWN1cnJlbnRTZWFzb24YFCABKAkiZwogTWF0Y2hDb250cm9sbGVyU3RhdGVD",
                  "aGFuZ2VkRXZlbnQSMAoLc2VydmljZUluZm8YASABKAsyGy5NYXRjaENvbnRy",
                  "b2xsZXJTZXJ2aWNlSW5mbxIRCgl0aW1lc3RhbXAYAiABKAMi+wIKE01hdGNo",
                  "R2FtZVJvb21Db25maWcSEgoKZ2FtZVJvb21JZBgBIAEoCRIPCgdldmVudElk",
                  "GAIgASgJEjEKD3Jlc2VydmVkUGxheWVycxgIIAMoCzIYLk1hdGNoR2FtZVJv",
                  "b21QbGF5ZXJJbmZvEg8KB21hdGNoSWQYCyABKAkSEAoIcGFzc3dvcmQYFSAB",
                  "KAkSFAoMZ3JlSXJCaW5QYXRoGB4gASgJEhoKEmdyZUhvc3RMb2dnZXJMZXZl",
                  "bBgfIAEoCRIZChFncmVSZWNvcmRlckNvbmZpZxggIAEoCRIhCgttYXRjaENv",
                  "bmZpZxgMIAEoCzIMLk1hdGNoQ29uZmlnEiQKCWdyZUNvbmZpZxgNIAEoCzIR",
                  "LkdSRUNvbmZpZ3VyYXRpb24SEQoJaXNWaXNpYmxlGBQgASgIEhsKE2pvaW5S",
                  "b29tVGltZW91dFNlY3MYIyABKAUSIwobcGxheWVyRGlzY29ubmVjdFRpbWVv",
                  "dXRTZWNzGCQgASgFIvkDChFNYXRjaEdhbWVSb29tSW5mbxISCgpnYW1lUm9v",
                  "bUlkGAEgASgJEisKFmludGVyaW1NYXRjaFJlc3VsdExpc3QYBSADKAsyCy5S",
                  "ZXN1bHRTcGVjEikKB3BsYXllcnMYBiADKAsyGC5NYXRjaEdhbWVSb29tUGxh",
                  "eWVySW5mbxIqCg1wbGF5ZXJNZXRyaWNzGAcgAygLMhMuTWF0Y2hQbGF5ZXJN",
                  "ZXRyaWNzEhoKEm1hdGNoQ29udHJvbGxlclVyaRgIIAEoCRIXCg9tYXRjaENs",
                  "dXN0ZXJVcmkYCSABKAkSEQoJY3JlYXRvcklkGBUgASgJEiwKDmdhbWVSb29t",
                  "Q29uZmlnGAIgASgLMhQuTWF0Y2hHYW1lUm9vbUNvbmZpZxIqCglzdGF0ZVR5",
                  "cGUYAyABKA4yFy5NYXRjaEdhbWVSb29tU3RhdGVUeXBlEisKEGZpbmFsTWF0",
                  "Y2hSZXN1bHQYBCABKAsyES5GaW5hbE1hdGNoUmVzdWx0EhgKEGNyZWF0ZWRU",
                  "aW1lc3RhbXAYCiABKAMSGAoQdXBkYXRlZFRpbWVzdGFtcBgLIAEoAxIhChlt",
                  "YXRjaFJlc3VsdFNhdmVkVGltZXN0YW1wGAwgASgDEiYKEWNyZWF0b3JDbGll",
                  "bnRUeXBlGBQgASgOMgsuQ2xpZW50VHlwZSKhAQowTWF0Y2hHYW1lUm9vbU9w",
                  "cG9uZW50Q29ubmVjdGlvblN0YXRlQ2hhbmdlZEV2ZW50Eg8KB21hdGNoSWQY",
                  "ASABKAkSFAoMc3lzdGVtU2VhdElkGAIgASgFEjMKCWV2ZW50VHlwZRgDIAEo",
                  "DjIgLkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWRFdmVudFR5cGUSEQoJdGltZXN0",
                  "YW1wGAogASgDIqoCChdNYXRjaEdhbWVSb29tUGxheWVySW5mbxIOCgZ1c2Vy",
                  "SWQYASABKAkSEgoKcGxheWVyTmFtZRgCIAEoCRIQCghjb3Vyc2VJZBgKIAEo",
                  "CRIOCgZkZWNrSWQYCyABKAkSFwoPY2xpZW50QXV0aFRva2VuGAwgASgJEhQK",
                  "DHN5c3RlbVNlYXRJZBgDIAEoBRIOCgZ0ZWFtSWQYBCABKAUSKwoOY29ubmVj",
                  "dGlvbkluZm8YBSABKAsyEy5Vc2VyQ29ubmVjdGlvbkluZm8SFQoNam9pblRp",
                  "bWVzdGFtcBgUIAEoAxIiChppbmFjdGl2aXR5VGltZW91dFRpbWVzdGFtcBgV",
                  "IAEoAxIiChpkaXNjb25uZWN0VGltZW91dFRpbWVzdGFtcBgWIAEoAyJdCh5N",
                  "YXRjaEdhbWVSb29tU3RhdGVDaGFuZ2VkRXZlbnQSKAoMZ2FtZVJvb21JbmZv",
                  "GAEgASgLMhIuTWF0Y2hHYW1lUm9vbUluZm8SEQoJdGltZXN0YW1wGAIgASgD",
                  "IlAKEk1hdGNoUGxheWVyTWV0cmljcxIOCgZ1c2VySWQYASABKAkSKgoHbWV0",
                  "cmljcxgCIAMoCzIZLlBsYXllck1ldHJpY0tleVZhbHVlUGFpciI2ChBNYXRj",
                  "aFJlc3VsdFNhdmVkEg8KB21hdGNoSWQYASABKAkSEQoJdGltZXN0YW1wGAog",
                  "ASgDIlQKEU1hdGNoU2VydmljZUVycm9yEhQKDGVycm9yTWVzc2FnZRgDIAEo",
                  "CRIpCgllcnJvckNvZGUYAiABKA4yFi5NYXRjaFNlcnZpY2VFcnJvckNvZGUi",
                  "ngkKG01hdGNoU2VydmljZVRvQ2xpZW50TWVzc2FnZRIVCg10cmFuc2FjdGlv",
                  "bklkGAEgASgJEhEKCXJlcXVlc3RJZBgDIAEoBRIRCgl0aW1lc3RhbXAYBCAB",
                  "KAMSHAoFZXJyb3IYByABKAsyCy5Mb2JieUVycm9ySAASLQoQZ3JlVG9DbGll",
                  "bnRFdmVudBgIIAEoCzIRLkdyZVRvQ2xpZW50RXZlbnRIABJJCh5tYXRjaEdh",
                  "bWVSb29tU3RhdGVDaGFuZ2VkRXZlbnQYCSABKAsyHy5NYXRjaEdhbWVSb29t",
                  "U3RhdGVDaGFuZ2VkRXZlbnRIABJNCiBtYXRjaENvbnRyb2xsZXJTdGF0ZUNo",
                  "YW5nZWRFdmVudBgKIAEoCzIhLk1hdGNoQ29udHJvbGxlclN0YXRlQ2hhbmdl",
                  "ZEV2ZW50SAASQwobbWF0Y2hDb250cm9sbGVySGVhbHRoUmVwb3J0GAsgASgL",
                  "MhwuTWF0Y2hDb250cm9sbGVySGVhbHRoUmVwb3J0SAASYAojb3Bwb25lbnRD",
                  "b25uZWN0aW9uU3RhdGVDaGFuZ2VkRXZlbnQYDCABKAsyMS5NYXRjaEdhbWVS",
                  "b29tT3Bwb25lbnRDb25uZWN0aW9uU3RhdGVDaGFuZ2VkRXZlbnRIABI1ChRh",
                  "dXRoZW50aWNhdGVSZXNwb25zZRhkIAEoCzIVLkF1dGhlbnRpY2F0ZVJlc3Bv",
                  "bnNlSAASMAoTc2VydmljZUluZm9SZXNwb25zZRhlIAEoCzIRLkxvYmJ5U2Vy",
                  "dmljZUluZm9IABJCChNnZXRTZXR0aW5nc1Jlc3BvbnNlGG4gASgLMiMuTWF0",
                  "Y2hDb250cm9sbGVyR2V0U2V0dGluZ3NSZXNwb25zZUgAEkIKE3NldFNldHRp",
                  "bmdzUmVzcG9uc2UYbyABKAsyIy5NYXRjaENvbnRyb2xsZXJTZXRTZXR0aW5n",
                  "c1Jlc3BvbnNlSAASRAobY3JlYXRlTWF0Y2hHYW1lUm9vbVJlc3BvbnNlGMgB",
                  "IAEoCzIcLkNyZWF0ZU1hdGNoR2FtZVJvb21SZXNwb25zZUgAEkgKHWNyZWF0",
                  "ZU1hdGNoR2FtZVJvb21SZXNwb25zZVYyGMkBIAEoCzIeLkNyZWF0ZU1hdGNo",
                  "R2FtZVJvb21SZXNwb25zZVYySAASQAoZam9pbk1hdGNoR2FtZVJvb21SZXNw",
                  "b25zZRjSASABKAsyGi5Kb2luTWF0Y2hHYW1lUm9vbVJlc3BvbnNlSAASRAob",
                  "am9pbk1hdGNoR2FtZVJvb21SZXNwb25zZVYyGNMBIAEoCzIcLkpvaW5NYXRj",
                  "aEdhbWVSb29tUmVzcG9uc2VWMkgAEjoKFmdldEdhbWVSb29tSWRzUmVzcG9u",
                  "c2UY8AEgASgLMhcuR2V0R2FtZVJvb21JZHNSZXNwb25zZUgAEjwKF2dldEdh",
                  "bWVSb29tSW5mb1Jlc3BvbnNlGPEBIAEoCzIYLkdldEdhbWVSb29tSW5mb1Jl",
                  "c3BvbnNlSAASJgoMZWNob1Jlc3BvbnNlGOgHIAEoCzINLkVjaG9SZXNwb25z",
                  "ZUgAQgkKB21lc3NhZ2UiHAoLTW9kYWxPcHRpb24SDQoFZ3JwSWQYASABKA0i",
                  "qgEKCE1vZGFsUmVxEiIKDG1vZGFsT3B0aW9ucxgBIAMoCzIMLk1vZGFsT3B0",
                  "aW9uEiUKD2V4Y2x1ZGVkT3B0aW9ucxgGIAMoCzIMLk1vZGFsT3B0aW9uEhQK",
                  "DGFiaWxpdHlHcnBJZBgCIAEoDRIOCgZtaW5TZWwYAyABKA0SDgoGbWF4U2Vs",
                  "GAQgASgNEh0KFXJlcGVhdGVkU2VsZWN0QWxsb3dlZBgFIAEoCCIxCgxNdWxs",
                  "aWdhblJlc3ASIQoIZGVjaXNpb24YASABKA4yDy5NdWxsaWdhbk9wdGlvbiJq",
                  "CgROb2RlEh8KCWNvbXBvc2l0ZRgBIAEoCzIKLkNvbXBvc2l0ZUgAEh8KCWRl",
                  "Y29yYXRvchgCIAEoCzIKLkRlY29yYXRvckgAEhUKBHRhc2sYAyABKAsyBS5U",
                  "YXNrSABCCQoHbWVzc2FnZSJcCg9OdW1lcmljSW5wdXRSZXESEwoLb3B0aW9u",
                  "SW5kZXgYASABKA0SEAoIbWluVmFsdWUYAiABKA0SEAoIbWF4VmFsdWUYAyAB",
                  "KA0SEAoIc3RlcFNpemUYBCABKA0iQgoQTnVtZXJpY0lucHV0UmVzcBITCgtv",
                  "cHRpb25JbmRleBgBIAEoDRIZChFudW1lcmljSW5wdXRWYWx1ZRgCIAEoDSIW",
                  "CgZPbkNoYXQSDAoEdGV4dBgBIAEoCSIbCgdPbkhvdmVyEhAKCG9iamVjdElk",
                  "GAEgASgNIhwKCE9uU2VsZWN0EhAKCG9iamVjdElkGAEgASgNIh4KCU9uU2h1",
                  "ZmZsZRIRCglvYmplY3RJZHMYASADKA0iiAEKFU9wdGlvbmFsQWN0aW9uTWVz",
                  "c2FnZRIuChNvcHRpb25hbEFjdGlvblR5cGVzGAQgAygOMhEuQ2FyZE1lY2hh",
                  "bmljVHlwZRIXCgZwcm9tcHQYASABKAsyBy5Qcm9tcHQSFAoMc3lzdGVtU2Vh",
                  "dElkGAIgASgNEhAKCHNvdXJjZUlkGAMgASgNIpgBCgxPcHRpb25hbFJlc3AS",
                  "IQoIcmVzcG9uc2UYASABKA4yDy5PcHRpb25SZXNwb25zZRInCgtwZXJzaXN0",
                  "ZW5jZRgCIAEoDjISLkNob2ljZVBlcnNpc3RlbmNlEiAKCWFwcGxpZXNUbxgD",
                  "IAEoDjINLlNldHRpbmdTY29wZRIaCgVtYXBUbxgEIAEoDjILLlNldHRpbmdL",
                  "ZXkiawoUT3JkZXJDb21iYXREYW1hZ2VSZXESIgoGb3JkZXJzGAIgAygLMhIu",
                  "Q29tYmF0RGFtYWdlT3JkZXISLwoPb3JkZXJEYW1hZ2VUeXBlGAEgASgOMhYu",
                  "T3JkZXJDb21iYXREYW1hZ2VUeXBlInYKFU9yZGVyQ29tYmF0RGFtYWdlUmVz",
                  "cBIsCgZvcmRlcnMYAiADKAsyHC5Db21iYXREYW1hZ2VPcmRlckFzc2lnbm1l",
                  "bnQSLwoPb3JkZXJEYW1hZ2VUeXBlGAEgASgOMhYuT3JkZXJDb21iYXREYW1h",
                  "Z2VUeXBlIqMBChdPcmRlckRhbWFnZUNvbmZpcm1hdGlvbhI6Cg1pbnZhbGlk",
                  "T3JkZXJzGAMgAygLMiMuSW52YWxpZENvbWJhdERhbWFnZU9yZGVyQXNzaWdu",
                  "bWVudBIbCgZyZXN1bHQYASABKA4yCy5SZXN1bHRDb2RlEi8KD29yZGVyRGFt",
                  "YWdlVHlwZRgCIAEoDjIWLk9yZGVyQ29tYmF0RGFtYWdlVHlwZSKXAQoIT3Jk",
                  "ZXJLZXkSHwoMYWN0aXZlUGxheWVyGAEgASgOMgkuUGxheWVySXMSGQoJdHVy",
                  "blBoYXNlGAIgASgOMgYuUGhhc2USGAoJcGhhc2VTdGVwGAMgASgOMgUuU3Rl",
                  "cBIkCgtyZXF1ZXN0VHlwZRgEIAEoDjIPLkdSRU1lc3NhZ2VUeXBlEg8KB2Nv",
                  "bnRleHQYBSABKAUiTwoIT3JkZXJSZXESCwoDaWRzGAEgAygNEgsKA2lkeBgC",
                  "IAEoDRIpCg9vcmRlcmluZ0NvbnRleHQYAyABKA4yEC5PcmRlcmluZ0NvbnRl",
                  "eHQiRgoJT3JkZXJSZXNwEgsKA2lkcxgBIAMoDRIfCghvcmRlcmluZxgCIAEo",
                  "DjINLk9yZGVyaW5nVHlwZRILCgNpZHgYAyABKA0iRQoXT3JkZXJlZERhbWFn",
                  "ZUFzc2lnbm1lbnQSEgoKaW5zdGFuY2VJZBgBIAEoDRIWCg5hc3NpZ25lZERh",
                  "bWFnZRgCIAEoDSKPAgobT3JkZXJpbmdIZXVyaXN0aWNEZWZpbml0aW9uEgoK",
                  "AmlkGAEgASgJEhAKCHByaW9yaXR5GAIgASgNEg4KBndlaWdodBgDIAEoDRIb",
                  "CghvcmRlcktleRgEIAEoCzIJLk9yZGVyS2V5EisKDGZ1bmN0aW9uVHlwZRgF",
                  "IAEoDjIVLk9yZGVyaW5nRnVuY3Rpb25UeXBlEiMKDG1lY2hhbmljVHlwZRgK",
                  "IAEoDjINLk1lY2hhbmljVHlwZRIUCgx3aXRoTWVjaGFuaWMYCyABKAgSIQoL",
                  "YWJpbGl0eVR5cGUYDCABKA4yDC5BYmlsaXR5VHlwZRIaCglzb3J0T3JkZXIY",
                  "FCABKA4yBy5Tb3J0QnkiVwoaT3JkZXJpbmdIZXVyaXN0aWNQYXJhbWV0ZXIS",
                  "JQoHcGFyYW1JZBgBIAEoDjIULk9yZGVyaW5nUGFyYW1ldGVySWQSEgoKcGFy",
                  "YW1WYWx1ZRgCIAEoBSIjCghQYXJhbGxlbBIXCghjaGlsZHJlbhgBIAMoCzIF",
                  "Lk5vZGUiBgoEUGFzcyLaAQoLUGF5Q29zdHNSZXESIgoIbWFuYUNvc3QYASAD",
                  "KAsyEC5NYW5hUmVxdWlyZW1lbnQSLAoOcGF5bWVudEFjdGlvbnMYAiABKAsy",
                  "FC5BY3Rpb25zQXZhaWxhYmxlUmVxEiUKEHBheW1lbnRTZWxlY3Rpb24YAyAB",
                  "KAsyCy5TZWxlY3ROUmVxEiUKDWFjdGlvbkNvc3RSZXEYBCABKAsyDi5BY3Rp",
                  "b25Db3N0UmVxEisKEHN1Ym1pdFBheW1lbnRSZXEYBSABKAsyES5TdWJtaXRQ",
                  "YXltZW50UmVxIroBChFQZXJmb3JtQWN0aW9uUmVzcBIYCgdhY3Rpb25zGAEg",
                  "AygLMgcuQWN0aW9uEisKEGF1dG9QYXNzUHJpb3JpdHkYAiABKA4yES5BdXRv",
                  "UGFzc1ByaW9yaXR5EiAKCHNldFlpZWxkGAMgASgOMg4uU2V0dGluZ1N0YXR1",
                  "cxIgCglhcHBsaWVzVG8YBCABKA4yDS5TZXR0aW5nU2NvcGUSGgoFbWFwVG8Y",
                  "BSABKA4yCy5TZXR0aW5nS2V5IoACCgxQbGF5ZXJDb25maWcSEQoJZGVja0Nh",
                  "cmRzGAIgAygNEhYKDnNpZGVib2FyZENhcmRzGAMgAygNEhYKDmNvbW1hbmRF",
                  "bWJsZW1zGAkgAygNEhQKDHN5c3RlbVNlYXRJZBgBIAEoDRIdChV1bmRvUGVy",
                  "bWlzc2lvbkJpdG1hc2sYBCABKA0SIAoYY29udHJvbFBlcm1pc3Npb25CaXRt",
                  "YXNrGAUgASgNEhkKEXN0YXJ0aW5nTGlmZVRvdGFsGAYgASgNEiEKGXN0YXJ0",
                  "aW5nSGFuZFNpemVTcGVjaWZpZWQYByABKAgSGAoQc3RhcnRpbmdIYW5kU2l6",
                  "ZRgIIAEoDSI4Cg1QbGF5ZXJEaWVSb2xsEhQKDHN5c3RlbVNlYXRJZBgBIAEo",
                  "DRIRCglyb2xsVmFsdWUYAiABKA0ivAIKClBsYXllckluZm8SGwoIbWFuYVBv",
                  "b2wYBiADKAsyCS5NYW5hSW5mbxIQCgh0aW1lcklkcxgLIAMoDRIRCglsaWZl",
                  "VG90YWwYASABKAUSGAoQc3lzdGVtU2VhdE51bWJlchgCIAEoDRITCgttYXhI",
                  "YW5kU2l6ZRgHIAEoDRISCgp0dXJuTnVtYmVyGAkgASgNEg4KBnRlYW1JZBgK",
                  "IAEoDRIYChBjb250cm9sbGVyU2VhdElkGAwgASgNEicKDmNvbnRyb2xsZXJU",
                  "eXBlGA0gASgOMg8uQ29udHJvbGxlclR5cGUSFAoMdGltZW91dENvdW50GA4g",
                  "ASgNEhAKCHBpcENvdW50GA8gASgNEi4KEnBlbmRpbmdNZXNzYWdlVHlwZRgQ",
                  "IAEoDjISLkNsaWVudE1lc3NhZ2VUeXBlIjYKGFBsYXllck1ldHJpY0tleVZh",
                  "bHVlUGFpchILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAUiRQoNUGxheWVy",
                  "TWV0cmljcxIiCgdtZXRyaWNzGAIgAygLMhEuS2V5VmFsdWVQYWlySW5mbxIQ",
                  "CghwbGF5ZXJJZBgBIAEoDSJaCgZQcm9tcHQSJAoKcGFyYW1ldGVycxgCIAMo",
                  "CzIQLlByb21wdFBhcmFtZXRlchIYCgdjaG9pY2VzGAMgAygLMgcuQ2hvaWNl",
                  "EhAKCHByb21wdElkGAEgASgNIroBCg9Qcm9tcHRQYXJhbWV0ZXISFQoNcGFy",
                  "YW1ldGVyTmFtZRgBIAEoCRITCgtzdHJpbmdWYWx1ZRgEIAEoCRIXCg9yZXBl",
                  "YXRlZE51bWJlcnMYBiADKAUSHAoEdHlwZRgCIAEoDjIOLlBhcmFtZXRlclR5",
                  "cGUSHQoJcmVmZXJlbmNlGAMgASgLMgouUmVmZXJlbmNlEhMKC251bWJlclZh",
                  "bHVlGAUgASgFEhAKCHByb21wdElkGAcgASgFIqgCCglRdWV1ZUluZm8SDwoH",
                  "ZXZlbnRJZBgCIAEoCRIbChNxdWV1ZVNlcnZpY2VCYXNlVXJpGAUgASgJEiQK",
                  "HHF1ZXVlU2VydmljZUVycm9yQ2FsbGJhY2tVcmkYBiABKAkSJQodcXVldWVT",
                  "ZXJ2aWNlT3V0cHV0Q2FsbGJhY2tVcmkYByABKAkSHQoJcXVldWVUeXBlGAMg",
                  "ASgOMgouUXVldWVUeXBlEhoKEm1pbmltdW1QbGF5ZXJDb3VudBgKIAEoBRIX",
                  "Cg9wbGF5ZXJCYXRjaFNpemUYCyABKAUSGAoQdHJpZ2dlckNhZGVuY2VNcxgM",
                  "IAEoBRIYChBjcmVhdGVkVGltZXN0YW1wGBQgASgDEhgKEHVwZGF0ZWRUaW1l",
                  "c3RhbXAYFSABKAMiWAoJUmVmZXJlbmNlEg0KBWZpZWxkGAMgASgJEhIKCmRl",
                  "YnVnVmFsdWUYBCABKAkSHAoEdHlwZRgBIAEoDjIOLlJlZmVyZW5jZVR5cGUS",
                  "CgoCaWQYAiABKA0ijwEKEVJlcGxhY2VtZW50RWZmZWN0EhYKDm9iamVjdElu",
                  "c3RhbmNlGAEgASgNEhcKD2FiaWxpdHlJbnN0YW5jZRgCIAEoDRIUCgxhYmls",
                  "aXR5R3JwSWQYBCABKA0SFgoOYWZmZWN0ZWRPYmplY3QYBSABKA0SGwoTcmVw",
                  "bGFjZW1lbnRFZmZlY3RJZBgGIAEoDSIyChNSZXBvcnRSZXN1bHRNZXNzYWdl",
                  "EhsKBnJlc3VsdBgBIAEoCzILLlJlc3VsdFNwZWMiewoKUmVzdWx0U3BlYxIa",
                  "CgVzY29wZRgBIAEoDjILLk1hdGNoU2NvcGUSGwoGcmVzdWx0GAIgASgOMgsu",
                  "UmVzdWx0VHlwZRIVCg13aW5uaW5nVGVhbUlkGAMgASgNEh0KBnJlYXNvbhgE",
                  "IAEoDjINLlJlc3VsdFJlYXNvbiKiAQoTU2VhcmNoRnJvbUdyb3Vwc1JlcRIV",
                  "Cg16b25lc1RvU2VhcmNoGAQgAygNEhYKBmdyb3VwcxgFIAMoCzIGLkdyb3Vw",
                  "EhMKC29wdGlvbkluZGV4GAEgASgNEg8KB21pbkZpbmQYAiABKA0SDwoHbWF4",
                  "RmluZBgDIAEoDRIlCg1ncm91cGluZ1N0eWxlGAYgASgOMg4uR3JvdXBpbmdT",
                  "dHlsZSI/ChRTZWFyY2hGcm9tR3JvdXBzUmVzcBISCgppdGVtc0ZvdW5kGAIg",
                  "AygNEhMKC29wdGlvbkluZGV4GAEgASgNIoUBCglTZWFyY2hSZXESFQoNem9u",
                  "ZXNUb1NlYXJjaBgEIAMoDRIVCg1pdGVtc1RvU2VhcmNoGAUgAygNEhMKC2l0",
                  "ZW1zU291Z2h0GAYgAygNEhMKC29wdGlvbkluZGV4GAEgASgNEg8KB21pbkZp",
                  "bmQYAiABKA0SDwoHbWF4RmluZBgDIAEoDSI1CgpTZWFyY2hSZXNwEhIKCml0",
                  "ZW1zRm91bmQYAiADKA0SEwoLb3B0aW9uSW5kZXgYASABKA0icwoRU2VsZWN0",
                  "Q291bnRlcnNSZXESGgoIY291bnRlcnMYBCADKAsyCC5Db3VudGVyEg4KBm1p",
                  "blNlbBgBIAEoDRIOCgZtYXhTZWwYAiABKA0SIgoHY29udGV4dBgDIAEoDjIR",
                  "LlNlbGVjdGlvbkNvbnRleHQiVAoSU2VsZWN0Q291bnRlcnNSZXNwEhoKCGNv",
                  "dW50ZXJzGAIgAygLMgguQ291bnRlchIiCgdjb250ZXh0GAEgASgOMhEuU2Vs",
                  "ZWN0aW9uQ29udGV4dCKLAQoTU2VsZWN0RnJvbUdyb3Vwc1JlcRIWCgZncm91",
                  "cHMYAyADKAsyBi5Hcm91cBILCgNpZHgYBCABKA0SEwoLbWluVG90YWxTZWwY",
                  "BSABKA0SEwoLbWF4VG90YWxTZWwYBiABKA0SJQoNZ3JvdXBpbmdTdHlsZRgH",
                  "IAEoDjIOLkdyb3VwaW5nU3R5bGUiMAoUU2VsZWN0RnJvbUdyb3Vwc1Jlc3AS",
                  "CwoDaWRzGAIgAygNEgsKA2lkeBgBIAEoDSJCChFTZWxlY3RNYW5hVHlwZVJl",
                  "cRIeCgptYW5hQ29sb3JzGAIgAygOMgouTWFuYUNvbG9yEg0KBWluZGV4GAEg",
                  "ASgNImIKElNlbGVjdE1hbmFUeXBlUmVzcBIeCgptYW5hQ29sb3JzGAIgAygO",
                  "MgouTWFuYUNvbG9yEg0KBWluZGV4GAEgASgNEh0KCW1hbmFDb2xvchgDIAEo",
                  "DjIKLk1hbmFDb2xvciJWCg9TZWxlY3ROR3JvdXBSZXESFgoGZ3JvdXBzGAMg",
                  "AygLMgYuR3JvdXASDgoGbWluU2VsGAEgASgNEg4KBm1heFNlbBgCIAEoDRIL",
                  "CgNpZHgYBCABKA0iOQoQU2VsZWN0Tkdyb3VwUmVzcBIYChBzZWxlY3RlZGdy",
                  "b3VwaWRzGAIgAygNEgsKA2lkeBgBIAEoDSKDAwoKU2VsZWN0TlJlcRILCgNp",
                  "ZHMYByADKA0SDwoHd2VpZ2h0cxgIIAMoBRIVCg11bmZpbHRlcmVkSWRzGA4g",
                  "AygNEg4KBm1pblNlbBgBIAEoBRIOCgZtYXhTZWwYAiABKA0SIgoHY29udGV4",
                  "dBgDIAEoDjIRLlNlbGVjdGlvbkNvbnRleHQSHwoKb3B0aW9uVHlwZRgEIAEo",
                  "DjILLk9wdGlvblR5cGUSJQoNb3B0aW9uQ29udGV4dBgFIAEoDjIOLk9wdGlv",
                  "bkNvbnRleHQSJAoIbGlzdFR5cGUYBiABKA4yEi5TZWxlY3Rpb25MaXN0VHlw",
                  "ZRIfCgpzdGF0aWNMaXN0GAkgASgOMgsuU3RhdGljTGlzdBILCgNpZHgYCiAB",
                  "KA0SFwoGcHJvbXB0GAsgASgLMgcuUHJvbXB0EhcKBmlkVHlwZRgMIAEoDjIH",
                  "LklkVHlwZRIcChRjaG9pY2VzQXJlUmVwZWF0YWJsZRgNIAEoCBIQCghzb3Vy",
                  "Y2VJZBgPIAEoDSK4AQoLU2VsZWN0TlJlc3ASCwoDaWRzGAUgAygNEgsKA2lk",
                  "eBgBIAEoDRIiCgdjb250ZXh0GAIgASgOMhEuU2VsZWN0aW9uQ29udGV4dBIl",
                  "Cg1vcHRpb25Db250ZXh0GAMgASgOMg4uT3B0aW9uQ29udGV4dBIfCgpvcHRp",
                  "b25UeXBlGAQgASgOMgsuT3B0aW9uVHlwZRIjCgx1c2VBcmJpdHJhcnkYBiAB",
                  "KA4yDS5PcmRlcmluZ1R5cGUiVAoUU2VsZWN0UmVwbGFjZW1lbnRSZXESKAoM",
                  "cmVwbGFjZW1lbnRzGAEgAygLMhIuUmVwbGFjZW1lbnRFZmZlY3QSEgoKaXNP",
                  "cHRpb25hbBgCIAEoCCJAChVTZWxlY3RSZXBsYWNlbWVudFJlc3ASJwoLcmVw",
                  "bGFjZW1lbnQYASABKAsyEi5SZXBsYWNlbWVudEVmZmVjdCI1ChBTZWxlY3RU",
                  "YXJnZXRzUmVxEiEKB3RhcmdldHMYASADKAsyEC5UYXJnZXRTZWxlY3Rpb24i",
                  "VAoRU2VsZWN0VGFyZ2V0c1Jlc3ASIAoGdGFyZ2V0GAEgASgLMhAuVGFyZ2V0",
                  "U2VsZWN0aW9uEh0KBmFjdGlvbhgCIAEoDjINLlNlbGVjdEFjdGlvbiIjCghT",
                  "ZWxlY3RvchIXCghjaGlsZHJlbhgBIAMoCzIFLk5vZGUiIwoIU2VxdWVuY2US",
                  "FwoIY2hpbGRyZW4YASADKAsyBS5Ob2RlItAEChJTZXJ2ZXJUb0dSRU1lc3Nh",
                  "Z2USKgoNY3JlYXRlUmVxdWVzdBgBIAEoCzIRLkdSRUNyZWF0ZVJlcXVlc3RI",
                  "ABIqCg1jb25maWdSZXF1ZXN0GAIgASgLMhEuR1JFQ29uZmlnUmVxdWVzdEgA",
                  "EjIKEXN0YXJ0TWF0Y2hSZXF1ZXN0GAMgASgLMhUuR1JFU3RhcnRNYXRjaFJl",
                  "cXVlc3RIABI0ChJyZXN1bWVNYXRjaFJlcXVlc3QYBCABKAsyFi5HUkVSZXN1",
                  "bWVNYXRjaFJlcXVlc3RIABIyChFzdWJtaXREZWNrUmVxdWVzdBgFIAEoCzIV",
                  "LkdSRVN1Ym1pdERlY2tSZXF1ZXN0SAASNAoSZm9yY2VSZXN1bHRSZXF1ZXN0",
                  "GAYgASgLMhYuR1JFRm9yY2VSZXN1bHRSZXF1ZXN0SAASLAoOZGVzdHJveVJl",
                  "cXVlc3QYByABKAsyEi5HUkVEZXN0cm95UmVxdWVzdEgAEi8KDHRpbWVyRXhw",
                  "aXJlZBgIIAEoCzIXLkdSRVRpbWVyRXhwaXJlZE1lc3NhZ2VIABIfCgR0aWNr",
                  "GAkgASgLMg8uR1JFVGlja01lc3NhZ2VIABIbCgd0aW1lb3V0GAogASgLMggu",
                  "VGltZW91dEgAEjAKEGludGVycHJldFJlcXVlc3QYCyABKAsyFC5HUkVJbnRl",
                  "cnByZXRSZXF1ZXN0SAASNAoSZXhwaXJlVGltZXJSZXF1ZXN0GAwgASgLMhYu",
                  "R1JFRXhwaXJlVGltZXJSZXF1ZXN0SABCCQoHbWVzc2FnZSJNCh5TZXJ2aWNl",
                  "RmFicmljQ29uZmlnUGFja2FnZUluZm8SEwoLcGFja2FnZU5hbWUYASABKAkS",
                  "FgoOcGFja2FnZVZlcnNpb24YAiABKAkikQIKGFNlcnZpY2VGYWJyaWNTZXJ2",
                  "aWNlSW5mbxITCgtzZXJ2aWNlTmFtZRgBIAEoCRIXCg9zZXJ2aWNlVHlwZU5h",
                  "bWUYAiABKAkSEwoLcGFydGl0aW9uSWQYBCABKAkSEAoIbm9kZU5hbWUYBSAB",
                  "KAkSGgoSY29kZVBhY2thZ2VWZXJzaW9uGAYgASgJEjcKDmNvbmZpZ1BhY2th",
                  "Z2VzGAcgAygLMh8uU2VydmljZUZhYnJpY0NvbmZpZ1BhY2thZ2VJbmZvEhoK",
                  "EmV4ZUFzc2VtYmx5VmVyc2lvbhgKIAEoCRISCgpnYXRld2F5VXJsGBQgASgJ",
                  "EhsKE3JlcGxpY2FPckluc3RhbmNlSWQYAyABKAMiFAoSU2VydmljZUluZm9S",
                  "ZXF1ZXN0IjQKDlNldFNldHRpbmdzUmVxEiIKCHNldHRpbmdzGAEgASgLMhAu",
                  "U2V0dGluZ3NNZXNzYWdlIjUKD1NldFNldHRpbmdzUmVzcBIiCghzZXR0aW5n",
                  "cxgBIAEoCzIQLlNldHRpbmdzTWVzc2FnZSLQBQoPU2V0dGluZ3NNZXNzYWdl",
                  "EhQKBXN0b3BzGAEgAygLMgUuU3RvcBIaCgZ5aWVsZHMYAiADKAsyCi5BdXRv",
                  "WWllbGQSHAoHYW5zd2VycxgDIAMoCzILLkF1dG9BbnN3ZXISHQoOdHJhbnNp",
                  "ZW50U3RvcHMYDyADKAsyBS5TdG9wEiAKCWNvc21ldGljcxgQIAMoCzINLkNv",
                  "c21ldGljSW5mbxInCg5hdXRvUGFzc09wdGlvbhgEIAEoDjIPLkF1dG9QYXNz",
                  "T3B0aW9uEiUKDmdyYXZleWFyZE9yZGVyGAUgASgOMg0uT3JkZXJpbmdUeXBl",
                  "EiUKDWNsZWFyQWxsU3RvcHMYBiABKA4yDi5TZXR0aW5nU3RhdHVzEiYKDmNs",
                  "ZWFyQWxsWWllbGRzGAcgASgOMg4uU2V0dGluZ1N0YXR1cxInCg9jbGVhckFs",
                  "bEFuc3dlcnMYCCABKA4yDi5TZXR0aW5nU3RhdHVzEi0KEW1hbmFTZWxlY3Rp",
                  "b25UeXBlGAkgASgOMhIuTWFuYVNlbGVjdGlvblR5cGUSLgoVZGVmYXVsdEF1",
                  "dG9QYXNzT3B0aW9uGAogASgOMg8uQXV0b1Bhc3NPcHRpb24SLQoRc21hcnRT",
                  "dG9wc1NldHRpbmcYCyABKA4yEi5TbWFydFN0b3BzU2V0dGluZxIxChNhdXRv",
                  "VGFwU3RvcHNTZXR0aW5nGAwgASgOMhQuQXV0b1RhcFN0b3BzU2V0dGluZxI4",
                  "CiZhdXRvT3B0aW9uYWxQYXltZW50Q2FuY2VsbGF0aW9uU2V0dGluZxgNIAEo",
                  "DjIILlNldHRpbmcSOQoXbWFuYVBheW1lbnRTdHJhdGVneVR5cGUYDiABKA4y",
                  "GC5NYW5hUGF5bWVudFN0cmF0ZWd5VHlwZRIuChxhdXRvU2VsZWN0UmVwbGFj",
                  "ZW1lbnRTZXR0aW5nGBEgASgOMgguU2V0dGluZyKBAQoXU29ydEZpbHRlclBh",
                  "Z2luZ09wdGlvbnMSDAoEc29ydBgBIAEoCRIOCgZmaWx0ZXIYAiABKAkSCwoD",
                  "dG9wGAUgASgFEgwKBHNraXAYBiABKAUSLQoRY29udGludWF0aW9uVG9rZW4Y",
                  "CiABKAsyEi5Db250aW51YXRpb25Ub2tlbiJlCgRTdG9wEhsKCHN0b3BUeXBl",
                  "GAEgASgOMgkuU3RvcFR5cGUSIAoJYXBwbGllc1RvGAIgASgOMg0uU2V0dGlu",
                  "Z1Njb3BlEh4KBnN0YXR1cxgDIAEoDjIOLlNldHRpbmdTdGF0dXMiXgoTU3Vi",
                  "bWl0QXR0YWNrZXJzUmVzcBIqChBpbnZhbGlkQXR0YWNrZXJzGAIgAygLMhAu",
                  "SW52YWxpZEF0dGFja2VyEhsKBnJlc3VsdBgBIAEoDjILLlJlc3VsdENvZGUi",
                  "lgEKElN1Ym1pdEJsb2NrZXJzUmVzcBIoCg9pbnZhbGlkQmxvY2tlcnMYAiAD",
                  "KAsyDy5JbnZhbGlkQmxvY2tlchI5ChdlZmZlY3RWaW9sYXRpb25CbG9ja2lu",
                  "ZxgDIAMoCzIYLkVmZmVjdFZpb2xhdGlvbkJsb2NraW5nEhsKBnJlc3VsdBgB",
                  "IAEoDjILLlJlc3VsdENvZGUiKwoNU3VibWl0RGVja1JlcRIaCgRkZWNrGAEg",
                  "ASgLMgwuRGVja01lc3NhZ2UiLAoOU3VibWl0RGVja1Jlc3ASGgoEZGVjaxgB",
                  "IAEoCzIMLkRlY2tNZXNzYWdlIhIKEFN1Ym1pdFBheW1lbnRSZXEiEwoRU3Vi",
                  "bWl0UGF5bWVudFJlc3AiZAoRU3VibWl0VGFyZ2V0c1Jlc3ASMgoRaW52YWxp",
                  "ZFNlbGVjdGlvbnMYAiADKAsyFy5JbnZhbGlkVGFyZ2V0U2VsZWN0aW9uEhsK",
                  "BnJlc3VsdBgBIAEoDjILLlJlc3VsdENvZGUiWQoGVGFyZ2V0EhgKEHRhcmdl",
                  "dEluc3RhbmNlSWQYASABKA0SIgoLbGVnYWxBY3Rpb24YAiABKA4yDS5TZWxl",
                  "Y3RBY3Rpb24SEQoJaGlnaGxpZ2h0GAMgASgNIj8KClRhcmdldEluZm8SHwoK",
                  "dGFyZ2V0VHlwZRgBIAEoDjILLlRhcmdldFR5cGUSEAoIdGFyZ2V0SWQYAiAB",
                  "KA0imAEKD1RhcmdldFNlbGVjdGlvbhIYCgd0YXJnZXRzGAIgAygLMgcuVGFy",
                  "Z2V0EhEKCXRhcmdldElkeBgBIAEoDRISCgptaW5UYXJnZXRzGAMgASgNEhIK",
                  "Cm1heFRhcmdldHMYBCABKA0SFwoPc2VsZWN0ZWRUYXJnZXRzGAUgASgNEhcK",
                  "BnByb21wdBgGIAEoCzIHLlByb21wdCJiCgRUYXNrEhsKB3RpbWVvdXQYASAB",
                  "KAsyCC5UaW1lb3V0SAASGwoHZW5kVHVybhgCIAEoCzIILkVuZFR1cm5IABIV",
                  "CgRwYXNzGAMgASgLMgUuUGFzc0gAQgkKB21lc3NhZ2UiPAoKVGVhbUNvbmZp",
                  "ZxIeCgdwbGF5ZXJzGAIgAygLMg0uUGxheWVyQ29uZmlnEg4KBnRlYW1JRBgB",
                  "IAEoDSIpCghUZWFtSW5mbxIRCglwbGF5ZXJJZHMYAiADKA0SCgoCaWQYASAB",
                  "KA0i9QQKClRlc3RDb25maWcSEwoLcmFuZG9tU2VlZHMYDSADKA0SLwoSc2h1",
                  "ZmZsZVJlc3RyaWN0aW9uGAEgASgOMhMuU2h1ZmZsZVJlc3RyaWN0aW9uEhYK",
                  "DnN0YXJ0aW5nUGxheWVyGAIgASgNEhgKEHVzZVNwZWNpZmllZFNlZWQYAyAB",
                  "KAgSEgoKcmFuZG9tU2VlZBgEIAEoDRIhChl1c2VaZXJvTWFuYUNvc3RGb3JD",
                  "YXN0aW5nGAUgASgIEhoKEnVzZU1heExhbmRzUGVyVHVybhgGIAEoDRInCg50",
                  "cmVlT2ZDb25ncmVzcxgHIAEoCzIPLlRyZWVPZkNvbmdyZXNzEhUKDXVzZUxp",
                  "YnJhcnlSTkcYCSABKAgSNwovZGlzYWJsZUdhbWVTdGF0ZVF1ZXVlaW5nRHVy",
                  "aW5nQ2FuY2VsYWJsZUFjdGlvbnMYCiABKAgSHQoVZGlzYWJsZUhpRmlHYW1l",
                  "U3RhdGVzGAsgASgIEhUKDWRpc2FibGVUaW1lcnMYDCABKAgSGQoRZnJlZU11",
                  "bGxpZ2FuQ291bnQYDiABKA0SFwoPcmFuZG9tRHJhd0NvdW50GA8gASgNEh0K",
                  "FW1pblJhbmRvbURyYXdEaXN0YW5jZRgQIAEoAhIdChVtYXhSYW5kb21EcmF3",
                  "RGlzdGFuY2UYESABKAISHAoUZW5hYmxlQXV0b0FjY2VwdEhhbmQYEiABKAgS",
                  "FgoOZW5hYmxlQXV0b1BsYXkYEyABKAgSKAogZGlzYWJsZVVuZXhwZWN0ZWRN",
                  "ZXNzYWdlUmVjb3ZlcnkYFCABKAgSGwoTZGlzYWJsZVNpZGVib2FyZGluZxgV",
                  "IAEoCCIJCgdUaW1lb3V0IooBCg1UaW1lb3V0Q29uZmlnEhcKD21heFRpbWVv",
                  "dXRDb3VudBgBIAEoDRIcChRzdGFydGluZ1RpbWVvdXRDb3VudBgCIAEoDRIT",
                  "CgttYXhQaXBDb3VudBgDIAEoDRIYChBzdGFydGluZ1BpcENvdW50GAQgASgN",
                  "EhMKC2R1cmF0aW9uU2VjGAUgASgNIlEKDlRpbWVvdXRNZXNzYWdlEg4KBnNl",
                  "YXRJZBgBIAEoDRIUCgx0aW1lb3V0Q291bnQYAiABKA0SGQoFdGltZXIYAyAB",
                  "KAsyCi5UaW1lckluZm8itAEKC1RpbWVyQ29uZmlnEh8KCGNvbnRyb2xzGAYg",
                  "AygLMg0uVGltZXJDb250cm9sEhgKBHR5cGUYASABKA4yCi5UaW1lclR5cGUS",
                  "EwoLZHVyYXRpb25TZWMYBCABKA0SIAoIYmVoYXZpb3IYBSABKA4yDi5UaW1l",
                  "ckJlaGF2aW9yEhsKE3dhcm5pbmdUaHJlc2hvbGRTZWMYByABKA0SFgoObWF4",
                  "RHVyYXRpb25TZWMYCCABKA0iTAoMVGltZXJDb250cm9sEhoKBWV2ZW50GAEg",
                  "ASgOMgsuVGltZXJFdmVudBIgCghiZWhhdmlvchgCIAEoDjIOLlRpbWVyQmVo",
                  "YXZpb3IiwgEKCVRpbWVySW5mbxIPCgd0aW1lcklkGAEgASgNEhgKBHR5cGUY",
                  "AiABKA4yCi5UaW1lclR5cGUSEwoLZHVyYXRpb25TZWMYAyABKA0SEgoKZWxh",
                  "cHNlZFNlYxgEIAEoDRIPCgdydW5uaW5nGAUgASgIEiAKCGJlaGF2aW9yGAYg",
                  "ASgOMg4uVGltZXJCZWhhdmlvchIbChN3YXJuaW5nVGhyZXNob2xkU2VjGAcg",
                  "ASgNEhEKCWVsYXBzZWRNcxgIIAEoDSImCg5UcmVlT2ZDb25ncmVzcxIUCgxz",
                  "eXN0ZW1TZWF0SWQYASADKA0i2AEKCFR1cm5JbmZvEhUKBXBoYXNlGAEgASgO",
                  "MgYuUGhhc2USEwoEc3RlcBgCIAEoDjIFLlN0ZXASEgoKdHVybk51bWJlchgD",
                  "IAEoDRIUCgxhY3RpdmVQbGF5ZXIYBCABKA0SFgoOcHJpb3JpdHlQbGF5ZXIY",
                  "BSABKA0SFgoOZGVjaXNpb25QbGF5ZXIYBiABKA0SEgoKc3Rvcm1Db3VudBgH",
                  "IAEoDRIZCgluZXh0UGhhc2UYCCABKA4yBi5QaGFzZRIXCghuZXh0U3RlcBgJ",
                  "IAEoDjIFLlN0ZXAijAEKCVVJTWVzc2FnZRIPCgdzZWF0SWRzGAEgAygNEhsK",
                  "CG9uU2VsZWN0GAIgASgLMgkuT25TZWxlY3QSGQoHb25Ib3ZlchgDIAEoCzII",
                  "Lk9uSG92ZXISHQoJb25TaHVmZmxlGAQgASgLMgouT25TaHVmZmxlEhcKBm9u",
                  "Q2hhdBgFIAEoCzIHLk9uQ2hhdCIcCgtVSW50MzJWYWx1ZRINCgV2YWx1ZRgB",
                  "IAEoDSJ+ChJVc2VyQ29ubmVjdGlvbkluZm8SKQoPY29ubmVjdGlvblN0YXRl",
                  "GAEgASgOMhAuQ29ubmVjdGlvblN0YXRlEhwKFGxhc3RDb25uZWN0VGltZXN0",
                  "YW1wGAogASgDEh8KF2xhc3REaXNjb25uZWN0VGltZXN0YW1wGAsgASgDIlUK",
                  "ClVzZXJPcHRpb24SHQoMb3B0aW9uUHJvbXB0GAEgASgLMgcuUHJvbXB0EigK",
                  "DHJlc3BvbnNlVHlwZRgCIAEoDjISLkNsaWVudE1lc3NhZ2VUeXBlIkgKGFZh",
                  "bHVlSGV1cmlzdGljRGVmaW5pdGlvbhIKCgJpZBgBIAEoCRIQCghwcmlvcml0",
                  "eRgCIAEoDRIOCgZ3ZWlnaHQYAyABKA0iOQoXVmFsdWVIZXVyaXN0aWNQYXJh",
                  "bWV0ZXISCgoCaWQYASABKAkSEgoKcGFyYW1WYWx1ZRgCIAEoBSKVAQoIWm9u",
                  "ZUluZm8SGQoRb2JqZWN0SW5zdGFuY2VJZHMYBSADKA0SDwoHdmlld2VycxgG",
                  "IAMoDRIOCgZ6b25lSWQYASABKA0SFwoEdHlwZRgCIAEoDjIJLlpvbmVUeXBl",
                  "Eh8KCnZpc2liaWxpdHkYAyABKA4yCy5WaXNpYmlsaXR5EhMKC293bmVyU2Vh",
                  "dElkGAQgASgNKmEKDkFJQ29uZmlnT3B0aW9uEhcKE0FJQ29uZmlnT3B0aW9u",
                  "X05vbmUQABIbChdBSUNvbmZpZ09wdGlvbl9JbmFjdGl2ZRABEhkKFUFJQ29u",
                  "ZmlnT3B0aW9uX0FjdGl2ZRACKlQKDUFJQ29uZmlnWWVzTm8SFgoSQUlDb25m",
                  "aWdZZXNOb19Ob25lEAASFAoQQUlDb25maWdZZXNOb19ObxABEhUKEUFJQ29u",
                  "ZmlnWWVzTm9fWWVzEAIqVgoGQUlNb2RlEg8KC0FJTW9kZV9Ob25lEAASEwoP",
                  "QUlNb2RlX0dvbGRmaXNoEAESEwoPQUlNb2RlX0dhbWVwbGF5EAISEQoNQUlN",
                  "b2RlX1JhbmRvbRADKtACCg9BYmlsaXR5Q2F0ZWdvcnkSGAoUQWJpbGl0eUNh",
                  "dGVnb3J5X05vbmUQABIdChlBYmlsaXR5Q2F0ZWdvcnlfQWN0aXZhdGVkEAES",
                  "HQoZQWJpbGl0eUNhdGVnb3J5X1RyaWdnZXJlZBACEhoKFkFiaWxpdHlDYXRl",
                  "Z29yeV9TdGF0aWMQAxIZChVBYmlsaXR5Q2F0ZWdvcnlfU3BlbGwQBBIiCh5B",
                  "YmlsaXR5Q2F0ZWdvcnlfQWRkaXRpb25hbENvc3QQBRIhCh1BYmlsaXR5Q2F0",
                  "ZWdvcnlfQWN0aXZhdGVkVGVzdBAGEhsKF0FiaWxpdHlDYXRlZ29yeV9DaGFp",
                  "bmVkEAcSIwofQWJpbGl0eUNhdGVnb3J5X0FsdGVybmF0aXZlQ29zdBAIEiUK",
                  "IUFiaWxpdHlDYXRlZ29yeV9PcGVuaW5nSGFuZEFjdGlvbhAJKmQKFkFiaWxp",
                  "dHlHYW1lQWRqdXN0bWVudHMSHwobQWJpbGl0eUdhbWVBZGp1c3RtZW50c19O",
                  "b25lEAASKQolQWJpbGl0eUdhbWVBZGp1c3RtZW50c19Mb2FkU2lkZWJvYXJk",
                  "cxABKnMKEkFiaWxpdHlQYXltZW50VHlwZRIbChdBYmlsaXR5UGF5bWVudFR5",
                  "cGVfTm9uZRAAEiAKHEFiaWxpdHlQYXltZW50VHlwZV9UYXBTeW1ib2wQARIe",
                  "ChpBYmlsaXR5UGF5bWVudFR5cGVfTG95YWx0eRACKpsDChJBYmlsaXR5U3Vi",
                  "Q2F0ZWdvcnkSGwoXQWJpbGl0eVN1YkNhdGVnb3J5X05vbmUQABIbChdBYmls",
                  "aXR5U3ViQ2F0ZWdvcnlfTWFuYRABEh4KGkFiaWxpdHlTdWJDYXRlZ29yeV9M",
                  "b3lhbHR5EAISHgoaQWJpbGl0eVN1YkNhdGVnb3J5X1BheW1lbnQQAxIbChdB",
                  "YmlsaXR5U3ViQ2F0ZWdvcnlfQ3JldxAEEh0KGUFiaWxpdHlTdWJDYXRlZ29y",
                  "eV9FbWJhbG0QBRIeChpBYmlsaXR5U3ViQ2F0ZWdvcnlfQ3ljbGluZxAGEiAK",
                  "HEFiaWxpdHlTdWJDYXRlZ29yeV9UcmFuc2Zvcm0QBxIeChpBYmlsaXR5U3Vi",
                  "Q2F0ZWdvcnlfRXhwbG9yZRAIEiEKHUFiaWxpdHlTdWJDYXRlZ29yeV9FdGVy",
                  "bmFsaXplEAkSKgomQWJpbGl0eVN1YkNhdGVnb3J5X0VudGVyVGhlQmF0dGxl",
                  "ZmllbGQQChIeChpBYmlsaXR5U3ViQ2F0ZWdvcnlfU3VydmVpbBALKoQnCgtB",
                  "YmlsaXR5VHlwZRIUChBBYmlsaXR5VHlwZV9Ob25lEAASGgoWQWJpbGl0eVR5",
                  "cGVfRGVhdGh0b3VjaBABEhgKFEFiaWxpdHlUeXBlX0RlZmVuZGVyEAISHAoY",
                  "QWJpbGl0eVR5cGVfRG91YmxlU3RyaWtlEAMSFwoTQWJpbGl0eVR5cGVfRW5j",
                  "aGFudBAEEhUKEUFiaWxpdHlUeXBlX0VxdWlwEAUSGwoXQWJpbGl0eVR5cGVf",
                  "Rmlyc3RTdHJpa2UQBhIVChFBYmlsaXR5VHlwZV9GbGFzaBAHEhYKEkFiaWxp",
                  "dHlUeXBlX0ZseWluZxAIEhUKEUFiaWxpdHlUeXBlX0hhc3RlEAkSGAoUQWJp",
                  "bGl0eVR5cGVfSGV4cHJvb2YQChIaChZBYmlsaXR5VHlwZV9JbnRpbWlkYXRl",
                  "EAsSGAoUQWJpbGl0eVR5cGVfTGlmZWxpbmsQDBIVChFBYmlsaXR5VHlwZV9S",
                  "ZWFjaBANEhcKE0FiaWxpdHlUeXBlX1RyYW1wbGUQDhIZChVBYmlsaXR5VHlw",
                  "ZV9WaWdpbGFuY2UQDxIYChRBYmlsaXR5VHlwZV9MYW5kd2FsaxAQEh4KGkFi",
                  "aWxpdHlUeXBlX1Byb3RlY3Rpb25Gcm9tEBUSFgoSQWJpbGl0eVR5cGVfU2hy",
                  "b3VkEBYSFwoTQWJpbGl0eVR5cGVfQmFuZGluZxAXEhcKE0FiaWxpdHlUeXBl",
                  "X1JhbXBhZ2UQGBIgChxBYmlsaXR5VHlwZV9DdW11bGF0aXZlVXBrZWVwEBkS",
                  "GAoUQWJpbGl0eVR5cGVfRmxhbmtpbmcQGhIXChNBYmlsaXR5VHlwZV9QaGFz",
                  "aW5nEBsSFwoTQWJpbGl0eVR5cGVfQnV5YmFjaxAcEhYKEkFiaWxpdHlUeXBl",
                  "X1NoYWRvdxAdEhcKE0FiaWxpdHlUeXBlX0N5Y2xpbmcQHhIUChBBYmlsaXR5",
                  "VHlwZV9FY2hvEB8SHAoYQWJpbGl0eVR5cGVfSG9yc2VtYW5zaGlwECASFgoS",
                  "QWJpbGl0eVR5cGVfRmFkaW5nECESFgoSQWJpbGl0eVR5cGVfS2lja2VyECIS",
                  "GQoVQWJpbGl0eVR5cGVfRmxhc2hiYWNrECMSFwoTQWJpbGl0eVR5cGVfTWFk",
                  "bmVzcxAkEhUKEUFiaWxpdHlUeXBlX01vcnBoECUSFAoQQWJpbGl0eVR5cGVf",
                  "RmVhchAmEhcKE0FiaWxpdHlUeXBlX0FtcGxpZnkQJxIXChNBYmlsaXR5VHlw",
                  "ZV9Qcm92b2tlECgSFQoRQWJpbGl0eVR5cGVfU3Rvcm0QKRIbChdBYmlsaXR5",
                  "VHlwZV9BZmZpbml0eUZvchAqEhcKE0FiaWxpdHlUeXBlX0VudHdpbmUQKxIX",
                  "ChNBYmlsaXR5VHlwZV9Nb2R1bGFyECwSGAoUQWJpbGl0eVR5cGVfU3VuYnVy",
                  "c3QQLRIXChNBYmlsaXR5VHlwZV9CdXNoaWRvEC4SGQoVQWJpbGl0eVR5cGVf",
                  "U291bHNoaWZ0EC8SFgoSQWJpbGl0eVR5cGVfU3BsaWNlEDASGAoUQWJpbGl0",
                  "eVR5cGVfT2ZmZXJpbmcQMRIYChRBYmlsaXR5VHlwZV9OaW5qaXRzdRAyEhQK",
                  "EEFiaWxpdHlUeXBlX0VwaWMQMxIXChNBYmlsaXR5VHlwZV9Db252b2tlEDQS",
                  "FgoSQWJpbGl0eVR5cGVfRHJlZGdlEDUSGQoVQWJpbGl0eVR5cGVfVHJhbnNt",
                  "dXRlEDYSGwoXQWJpbGl0eVR5cGVfQmxvb2R0aGlyc3QQNxIVChFBYmlsaXR5",
                  "VHlwZV9IYXVudBA4EhkKFUFiaWxpdHlUeXBlX1JlcGxpY2F0ZRA5EhgKFEFi",
                  "aWxpdHlUeXBlX0ZvcmVjYXN0EDoSFQoRQWJpbGl0eVR5cGVfR3JhZnQQOxIX",
                  "ChNBYmlsaXR5VHlwZV9SZWNvdmVyEDwSFgoSQWJpbGl0eVR5cGVfUmlwcGxl",
                  "ED0SGwoXQWJpbGl0eVR5cGVfU3BsaXRTZWNvbmQQPhIXChNBYmlsaXR5VHlw",
                  "ZV9TdXNwZW5kED8SGQoVQWJpbGl0eVR5cGVfVmFuaXNoaW5nEEASFgoSQWJp",
                  "bGl0eVR5cGVfQWJzb3JiEEESGAoUQWJpbGl0eVR5cGVfQXVyYVN3YXAQQhIV",
                  "ChFBYmlsaXR5VHlwZV9EZWx2ZRBDEhcKE0FiaWxpdHlUeXBlX0ZvcnRpZnkQ",
                  "RBIWChJBYmlsaXR5VHlwZV9GcmVuenkQRRIaChZBYmlsaXR5VHlwZV9HcmF2",
                  "ZXN0b3JtEEYSGQoVQWJpbGl0eVR5cGVfUG9pc29ub3VzEEcSGwoXQWJpbGl0",
                  "eVR5cGVfVHJhbnNmaWd1cmUQSBIYChRBYmlsaXR5VHlwZV9DaGFtcGlvbhBJ",
                  "EhoKFkFiaWxpdHlUeXBlX0NoYW5nZWxpbmcQShIVChFBYmlsaXR5VHlwZV9F",
                  "dm9rZRBLEhgKFEFiaWxpdHlUeXBlX0hpZGVhd2F5EEwSFQoRQWJpbGl0eVR5",
                  "cGVfUHJvd2wQTRIZChVBYmlsaXR5VHlwZV9SZWluZm9yY2UQThIYChRBYmls",
                  "aXR5VHlwZV9Db25zcGlyZRBPEhcKE0FiaWxpdHlUeXBlX1BlcnNpc3QQUBIW",
                  "ChJBYmlsaXR5VHlwZV9XaXRoZXIQURIXChNBYmlsaXR5VHlwZV9SZXRyYWNl",
                  "EFISFgoSQWJpbGl0eVR5cGVfRGV2b3VyEFMSFwoTQWJpbGl0eVR5cGVfRXhh",
                  "bHRlZBBUEhcKE0FiaWxpdHlUeXBlX1VuZWFydGgQVRIXChNBYmlsaXR5VHlw",
                  "ZV9DYXNjYWRlEFYSGwoXQWJpbGl0eVR5cGVfQW5uaWhpbGF0b3IQVxIXChNB",
                  "YmlsaXR5VHlwZV9MZXZlbFVwEFgSFwoTQWJpbGl0eVR5cGVfUmVib3VuZBBZ",
                  "EhoKFkFiaWxpdHlUeXBlX1RvdGVtQXJtb3IQWhIWChJBYmlsaXR5VHlwZV9J",
                  "bmZlY3QQWxIZChVBYmlsaXR5VHlwZV9CYXR0bGVDcnkQXBIcChhBYmlsaXR5",
                  "VHlwZV9MaXZpbmdXZWFwb24QXRIXChNBYmlsaXR5VHlwZV9VbmR5aW5nEF4S",
                  "FwoTQWJpbGl0eVR5cGVfTWlyYWNsZRBfEhgKFEFiaWxpdHlUeXBlX1NvdWxi",
                  "b25kEGASGAoUQWJpbGl0eVR5cGVfT3ZlcmxvYWQQYRIYChRBYmlsaXR5VHlw",
                  "ZV9TY2F2ZW5nZRBiEhcKE0FiaWxpdHlUeXBlX1VubGVhc2gQYxIWChJBYmls",
                  "aXR5VHlwZV9DaXBoZXIQZBIWChJBYmlsaXR5VHlwZV9Fdm9sdmUQZRIWChJB",
                  "YmlsaXR5VHlwZV9FeHRvcnQQZhIUChBBYmlsaXR5VHlwZV9GdXNlEGcSHgoa",
                  "QWJpbGl0eVR5cGVfSW5kZXN0cnVjdGlibGUQaBIaChZBYmlsaXR5VHlwZV9S",
                  "ZWdlbmVyYXRlEGkSIAocQWJpbGl0eVR5cGVfRW50ZXJab25lX1RhcHBlZBBq",
                  "EiQKIEFiaWxpdHlUeXBlX0VudGVyWm9uZV9Db250cm9sbGVkEGsSIgoeQWJp",
                  "bGl0eVR5cGVfRW50ZXJab25lX0F0dGFjaGVkEGwSFQoRQWJpbGl0eVR5cGVf",
                  "TGV2ZWwQbRImCiJBYmlsaXR5VHlwZV9FbnRlclpvbmVfV2l0aENvdW50ZXJz",
                  "EG4SJwojQWJpbGl0eVR5cGVfVHVybkZhY2VVcF9XaXRoQ291bnRlcnMQbxIu",
                  "CipBYmlsaXR5VHlwZV9QbGFuZXN3YWxrZXJMb3lhbHR5UmVwbGFjZW1lbnQQ",
                  "chIbChdBYmlsaXR5VHlwZV9NdWx0aWtpY2tlchB6EiAKHEFiaWxpdHlUeXBl",
                  "X0Jhc2ljTGFuZGN5Y2xpbmcQexIdChlBYmlsaXR5VHlwZV9Gb3Jlc3RjeWNs",
                  "aW5nEHwSHQoZQWJpbGl0eVR5cGVfSXNsYW5kY3ljbGluZxB9Eh8KG0FiaWxp",
                  "dHlUeXBlX01vdW50YWluY3ljbGluZxB+Eh0KGUFiaWxpdHlUeXBlX1BsYWlu",
                  "c2N5Y2xpbmcQfxIeChlBYmlsaXR5VHlwZV9TbGl2ZXJjeWNsaW5nEIABEh0K",
                  "GEFiaWxpdHlUeXBlX1N3YW1wY3ljbGluZxCBARIeChlBYmlsaXR5VHlwZV9X",
                  "aXphcmRjeWNsaW5nEIIBEhwKF0FiaWxpdHlUeXBlX01vbnN0cm9zaXR5EIYB",
                  "EhgKE0FiaWxpdHlUeXBlX1RyaWJ1dGUQhwESGAoTQWJpbGl0eVR5cGVfT3V0",
                  "bGFzdBCIARIYChNBYmlsaXR5VHlwZV9Qcm93ZXNzEIkBEhgKE0FiaWxpdHlU",
                  "eXBlX0JvbHN0ZXIQigESLgopQWJpbGl0eVR5cGVfUGxhbmVzd2Fsa2VyRGFt",
                  "YWdlUmVkaXJlY3Rpb24QiwESLgopQWJpbGl0eVR5cGVfT3JkZXJPYmplY3Rz",
                  "RW50ZXJpbmdHcmF2ZXlhcmQQjAESLAonQWJpbGl0eVR5cGVfT3JkZXJPYmpl",
                  "Y3RzRW50ZXJpbmdMaWJyYXJ5EI0BEhcKEkFiaWxpdHlUeXBlX01lbmFjZRCO",
                  "ARIWChFBYmlsaXR5VHlwZV9Ta3VsaxCPARIXChJBYmlsaXR5VHlwZV9Jbmdl",
                  "c3QQkAESGQoUQWJpbGl0eVR5cGVfTWFuaWZlc3QQkQESFwoSQWJpbGl0eVR5",
                  "cGVfRW1lcmdlEJMBEhwKF0FiaWxpdHlUeXBlX0RlbGl2ZXJhbmNlEJQBEioK",
                  "JUFiaWxpdHlUeXBlX0Nhc3RXaXRob3V0UGF5aW5nTWFuYUNvc3QQlQESGgoV",
                  "QWJpbGl0eVR5cGVfTWVnYW1vcnBoEJYBEhcKEkFiaWxpdHlUeXBlX0Rldm9p",
                  "ZBCXARIeChlBYmlsaXR5VHlwZV9TYWNyaWZpY2VDbHVlEJgBEhkKFEFiaWxp",
                  "dHlUeXBlX0VzY2FsYXRlEJkBEhoKFUFiaWxpdHlUeXBlX0ZhYnJpY2F0ZRCa",
                  "ARIVChBBYmlsaXR5VHlwZV9DcmV3EJwBEhoKFUFiaWxpdHlUeXBlX0ltcHJv",
                  "dmlzZRCdARI8CjdBYmlsaXR5VHlwZV9DaG9vc2Vab25lRm9yTXV0dWFsbHlF",
                  "eGNsdXNpdmVab25lVHJhbnNmZXJzEJ4BEhoKFUFiaWxpdHlUeXBlX0FmdGVy",
                  "bWF0aBCfARIXChJBYmlsaXR5VHlwZV9FbWJhbG0QoAESIAobQWJpbGl0eVR5",
                  "cGVfVGFwRm9ySW1wcm92aXNlEKEBEhYKEUFiaWxpdHlUeXBlX0V4ZXJ0EKIB",
                  "EhsKFkFiaWxpdHlUeXBlX0V0ZXJuYWxpemUQowESGAoTQWJpbGl0eVR5cGVf",
                  "QWZmbGljdBCkARIXChJBYmlsaXR5VHlwZV9Bc2NlbmQQpQESHAoXQWJpbGl0",
                  "eVR5cGVfU2FnYUNoYXB0ZXIQpgESJAofQWJpbGl0eVR5cGVfU2FnYUxvcmVS",
                  "ZXBsYWNlbWVudBCnARIdChhBYmlsaXR5VHlwZV9TYWdhTG9yZVR1cm4QqAES",
                  "GAoTQWJpbGl0eVR5cGVfU3VydmVpbBCpARIaChVBYmlsaXR5VHlwZV9KdW1w",
                  "c3RhcnQQqgESFwoSQWJpbGl0eVR5cGVfTWVudG9yEKsBEh4KGUFiaWxpdHlU",
                  "eXBlX1RhcEZvckNvbnZva2UQrAESHQoYQWJpbGl0eVR5cGVfUGxhY2Vob2xk",
                  "ZXIxEK0BEh0KGEFiaWxpdHlUeXBlX1BsYWNlaG9sZGVyMhCuARIdChhBYmls",
                  "aXR5VHlwZV9QbGFjZWhvbGRlcjMQrwESHQoYQWJpbGl0eVR5cGVfUGxhY2Vo",
                  "b2xkZXI0ELABEh0KGEFiaWxpdHlUeXBlX1BsYWNlaG9sZGVyNRCxARIdChhB",
                  "YmlsaXR5VHlwZV9Ud2lkZGxlX1Rlc3QQ3QcSHAoXQWJpbGl0eVR5cGVfRG9u",
                  "YXRlX1Rlc3QQ3gcSHAoXQWJpbGl0eVR5cGVfQm91bmNlX1Rlc3QQ3wcSHgoZ",
                  "QWJpbGl0eVR5cGVfRHJhd0NhcmRfVGVzdBDgBxIdChhBYmlsaXR5VHlwZV9B",
                  "ZGRDb3N0X1Rlc3QQ4QcSIQocQWJpbGl0eVR5cGVfRGVwbG95QmVhcnNfVGVz",
                  "dBDiBxIdChhBYmlsaXR5VHlwZV9FbmRUdXJuX1Rlc3QQ4wcSGgoVQWJpbGl0",
                  "eVR5cGVfV2lzaF9UZXN0EOQHEiAKG0FiaWxpdHlUeXBlX1B1dExpYnJhcnlf",
                  "VGVzdBDlBxIfChpBYmlsaXR5VHlwZV9HYWluSGFzdGVfVGVzdBDmBxIeChlB",
                  "YmlsaXR5VHlwZV9BZGRXVUJSR19UZXN0EOcHEiAKG0FiaWxpdHlUeXBlX0lu",
                  "dHJpbnNpY01hbmFfVxDpBxIgChtBYmlsaXR5VHlwZV9JbnRyaW5zaWNNYW5h",
                  "X1UQ6gcSIAobQWJpbGl0eVR5cGVfSW50cmluc2ljTWFuYV9CEOsHEiAKG0Fi",
                  "aWxpdHlUeXBlX0ludHJpbnNpY01hbmFfUhDsBxIgChtBYmlsaXR5VHlwZV9J",
                  "bnRyaW5zaWNNYW5hX0cQ7QcSGAoTQWJpbGl0eVR5cGVfQXV0b0dlbhDuByqP",
                  "CAoLQWJpbGl0eVdvcmQSFAoQQWJpbGl0eVdvcmRfTm9uZRAAEhkKFUFiaWxp",
                  "dHlXb3JkX0JhdHRhbGlvbhABEhkKFUFiaWxpdHlXb3JkX0Jsb29kcnVzaBAC",
                  "EhcKE0FiaWxpdHlXb3JkX0NoYW5uZWwQAxIWChJBYmlsaXR5V29yZF9DaHJv",
                  "bWEQBBIWChJBYmlsaXR5V29yZF9Db2hvcnQQBRIdChlBYmlsaXR5V29yZF9D",
                  "b25zdGVsbGF0aW9uEAYSGAoUQWJpbGl0eVdvcmRfQ29udmVyZ2UQBxIfChtB",
                  "YmlsaXR5V29yZF9Db3VuY2lsc0RpbGVtbWEQCBIYChRBYmlsaXR5V29yZF9E",
                  "ZWxpcml1bRAJEhYKEkFiaWxpdHlXb3JkX0RvbWFpbhAKEhsKF0FiaWxpdHlX",
                  "b3JkX0ZhdGVmdWxIb3VyEAsSGQoVQWJpbGl0eVdvcmRfRmVyb2Npb3VzEAwS",
                  "GgoWQWJpbGl0eVdvcmRfRm9ybWlkYWJsZRANEhgKFEFiaWxpdHlXb3JkX0dy",
                  "YW5kZXVyEA4SGAoUQWJpbGl0eVdvcmRfSGVsbGJlbnQQDxIWChJBYmlsaXR5",
                  "V29yZF9IZXJvaWMQEBIXChNBYmlsaXR5V29yZF9JbXByaW50EBESGAoUQWJp",
                  "bGl0eVdvcmRfSW5zcGlyZWQQEhIaChZBYmlsaXR5V29yZF9Kb2luRm9yY2Vz",
                  "EBMSFwoTQWJpbGl0eVdvcmRfS2luc2hpcBAUEhgKFEFiaWxpdHlXb3JkX0xh",
                  "bmRmYWxsEBUSGgoWQWJpbGl0eVdvcmRfTGlldXRlbmFudBAWEhoKFkFiaWxp",
                  "dHlXb3JkX01ldGFsY3JhZnQQFxIWChJBYmlsaXR5V29yZF9Nb3JiaWQQGBIW",
                  "ChJBYmlsaXR5V29yZF9QYXJsZXkQGRIYChRBYmlsaXR5V29yZF9SYWRpYW5j",
                  "ZRAaEhQKEEFiaWxpdHlXb3JkX1JhaWQQGxIVChFBYmlsaXR5V29yZF9SYWxs",
                  "eRAcEhwKGEFiaWxpdHlXb3JkX1NwZWxsTWFzdGVyeRAdEhYKEkFiaWxpdHlX",
                  "b3JkX1N0cml2ZRAeEhUKEUFiaWxpdHlXb3JkX1N3ZWVwEB8SHQoZQWJpbGl0",
                  "eVdvcmRfVGVtcHRpbmdPZmZlchAgEhkKFUFiaWxpdHlXb3JkX1RocmVzaG9s",
                  "ZBAhEiAKHEFiaWxpdHlXb3JkX1dpbGxPZlRoZUNvdW5jaWwQIhIWChJBYmls",
                  "aXR5V29yZF9SZXZvbHQQIxIWChJBYmlsaXR5V29yZF9FbnJhZ2UQJBIYChRB",
                  "YmlsaXR5V29yZF9IaXN0b3JpYxAlEhsKF0FiaWxpdHlXb3JkX1VuZGVyZ3Jv",
                  "d3RoECYqhQEKDkFjdGlvbkNvc3RUeXBlEhcKE0FjdGlvbkNvc3RUeXBlX05v",
                  "bmUQABIZChVBY3Rpb25Db3N0VHlwZV9TZWxlY3QQARIgChxBY3Rpb25Db3N0",
                  "VHlwZV9TZWxlY3RDb3VudGVyEAISHQoZQWN0aW9uQ29zdFR5cGVfQXV0b3Nl",
                  "bGVjdBADKrsDCgpBY3Rpb25UeXBlEhMKD0FjdGlvblR5cGVfTm9uZRAAEhMK",
                  "D0FjdGlvblR5cGVfQ2FzdBABEhcKE0FjdGlvblR5cGVfQWN0aXZhdGUQAhIT",
                  "Cg9BY3Rpb25UeXBlX1BsYXkQAxIcChhBY3Rpb25UeXBlX0FjdGl2YXRlX01h",
                  "bmEQBBITCg9BY3Rpb25UeXBlX1Bhc3MQBRIcChhBY3Rpb25UeXBlX0FjdGl2",
                  "YXRlX1Rlc3QQBhITCg9BY3Rpb25UeXBlX01vZGUQBxIhCh1BY3Rpb25UeXBl",
                  "X1NwZWNpYWxfVHVybkZhY2VVcBAIEh0KGUFjdGlvblR5cGVfUmVzb2x1dGlv",
                  "bkNvc3QQCRIXChNBY3Rpb25UeXBlX0Nhc3RMZWZ0EAoSGAoUQWN0aW9uVHlw",
                  "ZV9DYXN0UmlnaHQQCxIbChdBY3Rpb25UeXBlX01ha2VfUGF5bWVudBAMEiAK",
                  "HEFjdGlvblR5cGVfQ2FzdGluZ1RpbWVPcHRpb24QDRIZChVBY3Rpb25UeXBl",
                  "X0NvbWJhdENvc3QQDhIgChxBY3Rpb25UeXBlX09wZW5pbmdIYW5kQWN0aW9u",
                  "EA8qaAoLQWxsb3dDYW5jZWwSFAoQQWxsb3dDYW5jZWxfTm9uZRAAEhgKFEFs",
                  "bG93Q2FuY2VsX0NvbnRpbnVlEAESFQoRQWxsb3dDYW5jZWxfQWJvcnQQAhIS",
                  "Cg5BbGxvd0NhbmNlbF9ObxADKvUSCg5Bbm5vdGF0aW9uVHlwZRIXChNBbm5v",
                  "dGF0aW9uVHlwZV9Ob25lEAASHwobQW5ub3RhdGlvblR5cGVfWm9uZVRyYW5z",
                  "ZmVyEAESHQoZQW5ub3RhdGlvblR5cGVfTG9zc09mR2FtZRACEh4KGkFubm90",
                  "YXRpb25UeXBlX0RhbWFnZURlYWx0EAMSKgomQW5ub3RhdGlvblR5cGVfVGFw",
                  "cGVkVW50YXBwZWRQZXJtYW5lbnQQBBIgChxBbm5vdGF0aW9uVHlwZV9Nb2Rp",
                  "ZmllZFBvd2VyEAUSJAogQW5ub3RhdGlvblR5cGVfTW9kaWZpZWRUb3VnaG5l",
                  "c3MQBhIgChxBbm5vdGF0aW9uVHlwZV9Nb2RpZmllZENvbG9yEAcSJgoiQW5u",
                  "b3RhdGlvblR5cGVfUGhhc2VPclN0ZXBNb2RpZmllZBAIEh0KGUFubm90YXRp",
                  "b25UeXBlX0FkZEFiaWxpdHkQCRIfChtBbm5vdGF0aW9uVHlwZV9Nb2RpZmll",
                  "ZExpZmUQChIjCh9Bbm5vdGF0aW9uVHlwZV9DcmVhdGVBdHRhY2htZW50EAsS",
                  "IwofQW5ub3RhdGlvblR5cGVfUmVtb3ZlQXR0YWNobWVudBAMEiIKHkFubm90",
                  "YXRpb25UeXBlX09iamVjdElkQ2hhbmdlZBANEhoKFkFubm90YXRpb25UeXBl",
                  "X0NvdW50ZXIQDhIkCiBBbm5vdGF0aW9uVHlwZV9Db250cm9sbGVyQ2hhbmdl",
                  "ZBAPEh8KG0Fubm90YXRpb25UeXBlX0NvdW50ZXJBZGRlZBAQEiEKHUFubm90",
                  "YXRpb25UeXBlX0NvdW50ZXJSZW1vdmVkEBESJwojQW5ub3RhdGlvblR5cGVf",
                  "TGF5ZXJlZEVmZmVjdENyZWF0ZWQQEhIpCiVBbm5vdGF0aW9uVHlwZV9MYXll",
                  "cmVkRWZmZWN0RGVzdHJveWVkEBMSHQoZQW5ub3RhdGlvblR5cGVfQXR0YWNo",
                  "bWVudBAUEhgKFEFubm90YXRpb25UeXBlX0hhdW50EBUSHwobQW5ub3RhdGlv",
                  "blR5cGVfQ29waWVkT2JqZWN0EBYSIAocQW5ub3RhdGlvblR5cGVfUmVtb3Zl",
                  "QWJpbGl0eRAXEh0KGUFubm90YXRpb25UeXBlX1dpblRoZUdhbWUQGBIfChtB",
                  "bm5vdGF0aW9uVHlwZV9Nb2RpZmllZFR5cGUQGRIdChlBbm5vdGF0aW9uVHlw",
                  "ZV9UYXJnZXRTcGVjEBoSHQoZQW5ub3RhdGlvblR5cGVfVGV4dENoYW5nZRAb",
                  "EhsKF0Fubm90YXRpb25UeXBlX0ZhY2VEb3duEBwSIAocQW5ub3RhdGlvblR5",
                  "cGVfVHVyblBlcm1hbmVudBAdEiEKHUFubm90YXRpb25UeXBlX0R5bmFtaWNB",
                  "YmlsaXR5EB4SIgoeQW5ub3RhdGlvblR5cGVfT2JqZWN0c1NlbGVjdGVkEB8S",
                  "IwofQW5ub3RhdGlvblR5cGVfVHJpZ2dlcmluZ09iamVjdBAgEh8KG0Fubm90",
                  "YXRpb25UeXBlX0RhbWFnZVNvdXJjZRAhEhsKF0Fubm90YXRpb25UeXBlX01h",
                  "bmFQYWlkECISHwobQW5ub3RhdGlvblR5cGVfVG9rZW5DcmVhdGVkECMSKQol",
                  "QW5ub3RhdGlvblR5cGVfQWJpbGl0eUluc3RhbmNlQ3JlYXRlZBAkEikKJUFu",
                  "bm90YXRpb25UeXBlX0FiaWxpdHlJbnN0YW5jZURlbGV0ZWQQJRInCiNBbm5v",
                  "dGF0aW9uVHlwZV9EaXNwbGF5Q2FyZFVuZGVyQ2FyZBAmEiQKIEFubm90YXRp",
                  "b25UeXBlX0FiaWxpdHlXb3JkQWN0aXZlECcSGwoXQW5ub3RhdGlvblR5cGVf",
                  "TGlua0luZm8QKBIfChtBbm5vdGF0aW9uVHlwZV9Ub2tlbkRlbGV0ZWQQKRIg",
                  "ChxBbm5vdGF0aW9uVHlwZV9RdWFsaWZpY2F0aW9uECoSIgoeQW5ub3RhdGlv",
                  "blR5cGVfUmVzb2x1dGlvblN0YXJ0ECsSJQohQW5ub3RhdGlvblR5cGVfUmVz",
                  "b2x1dGlvbkNvbXBsZXRlECwSHgoaQW5ub3RhdGlvblR5cGVfRGVzaWduYXRp",
                  "b24QLRIiCh5Bbm5vdGF0aW9uVHlwZV9HYWluRGVzaWduYXRpb24QLhIfChtB",
                  "bm5vdGF0aW9uVHlwZV9DYXJkUmV2ZWFsZWQQLxIhCh1Bbm5vdGF0aW9uVHlw",
                  "ZV9OZXdUdXJuU3RhcnRlZBAwEh4KGkFubm90YXRpb25UeXBlX01hbmFEZXRh",
                  "aWxzEDESJQohQW5ub3RhdGlvblR5cGVfRGlzcXVhbGlmaWVkRWZmZWN0EDIS",
                  "IAocQW5ub3RhdGlvblR5cGVfTGF5ZXJlZEVmZmVjdBAzEiAKHEFubm90YXRp",
                  "b25UeXBlX1BlbmRpbmdFZmZlY3QQNBIfChtBbm5vdGF0aW9uVHlwZV9TaG91",
                  "bGRudFBsYXkQNRIlCiFBbm5vdGF0aW9uVHlwZV9Vc2VPckNvc3RzTWFuYUNv",
                  "c3QQNhImCiJBbm5vdGF0aW9uVHlwZV9SZW1haW5pbmdTZWxlY3Rpb25zEDcS",
                  "GgoWQW5ub3RhdGlvblR5cGVfU2h1ZmZsZRA4EhsKF0Fubm90YXRpb25UeXBl",
                  "X0NvaW5GbGlwEDkSHwobQW5ub3RhdGlvblR5cGVfQ2hvb3NlUmFuZG9tEDoS",
                  "JgoiQW5ub3RhdGlvblR5cGVfUmV2ZWFsZWRDYXJkQ3JlYXRlZBA7EiYKIkFu",
                  "bm90YXRpb25UeXBlX1JldmVhbGVkQ2FyZERlbGV0ZWQQPBIeChpBbm5vdGF0",
                  "aW9uVHlwZV9TdXNwZW5kTGlrZRA9EiQKIEFubm90YXRpb25UeXBlX1JlcGxh",
                  "Y2VtZW50RWZmZWN0ED4SJgoiQW5ub3RhdGlvblR5cGVfRW50ZXJlZFpvbmVU",
                  "aGlzVHVybhA/EiQKIEFubm90YXRpb25UeXBlX0Nhc3RpbmdUaW1lT3B0aW9u",
                  "EEASFwoTQW5ub3RhdGlvblR5cGVfU2NyeRBBEigKJEFubm90YXRpb25UeXBl",
                  "X1ByZWRpY3RlZERpcmVjdERhbWFnZRBCEicKI0Fubm90YXRpb25UeXBlX1N3",
                  "aXRjaFBvd2VyVG91Z2huZXNzEEMSIwofQW5ub3RhdGlvblR5cGVfU3VwcGxl",
                  "bWVudGFsVGV4dBBEKjgKBkFuc3dlchIPCgtBbnN3ZXJfTm9uZRAAEg4KCkFu",
                  "c3dlcl9ZZXMQARINCglBbnN3ZXJfTm8QAipYCgtBdHRhY2tTdGF0ZRIUChBB",
                  "dHRhY2tTdGF0ZV9Ob25lEAASGAoUQXR0YWNrU3RhdGVfRGVjbGFyZWQQARIZ",
                  "ChVBdHRhY2tTdGF0ZV9BdHRhY2tpbmcQAiqqAQoRQXR0YWNrV2FybmluZ1R5",
                  "cGUSGgoWQXR0YWNrV2FybmluZ1R5cGVfTm9uZRAAEi4KKkF0dGFja1dhcm5p",
                  "bmdUeXBlX011c3RBdHRhY2tXaXRoQXRMZWFzdE9uZRABEicKI0F0dGFja1dh",
                  "cm5pbmdUeXBlX0Nhbm5vdEF0dGFja0Fsb25lEAISIAocQXR0YWNrV2Fybmlu",
                  "Z1R5cGVfTXVzdEF0dGFjaxADKoEBChJBdXRoZW50aWNhdGlvblR5cGUSHgoa",
                  "QXV0aGVudGljYXRpb25UeXBlX0ludmFsaWQQABIrCidBdXRoZW50aWNhdGlv",
                  "blR5cGVfUGxheUZhYkltcGVyc29uYXRpb24QARIeChpBdXRoZW50aWNhdGlv",
                  "blR5cGVfU2VydmljZRACKowCCg5BdXRvUGFzc09wdGlvbhIXChNBdXRvUGFz",
                  "c09wdGlvbl9Ob25lEAASFwoTQXV0b1Bhc3NPcHRpb25fVHVybhABEh8KG0F1",
                  "dG9QYXNzT3B0aW9uX1VubGVzc0FjdGlvbhACEhoKFkF1dG9QYXNzT3B0aW9u",
                  "X0VuZFN0ZXAQAxIYChRBdXRvUGFzc09wdGlvbl9DbGVhchAEEicKI0F1dG9Q",
                  "YXNzT3B0aW9uX1VubGVzc09wcG9uZW50QWN0aW9uEAUSKAokQXV0b1Bhc3NP",
                  "cHRpb25fUmVzb2x2ZU15U3RhY2tFZmZlY3RzEAYSHgoaQXV0b1Bhc3NPcHRp",
                  "b25fRnVsbENvbnRyb2wQBypgChBBdXRvUGFzc1ByaW9yaXR5EhkKFUF1dG9Q",
                  "YXNzUHJpb3JpdHlfTm9uZRAAEhcKE0F1dG9QYXNzUHJpb3JpdHlfTm8QARIY",
                  "ChRBdXRvUGFzc1ByaW9yaXR5X1llcxACKnQKE0F1dG9UYXBTdG9wc1NldHRp",
                  "bmcSHAoYQXV0b1RhcFN0b3BzU2V0dGluZ19Ob25lEAASHgoaQXV0b1RhcFN0",
                  "b3BzU2V0dGluZ19FbmFibGUQARIfChtBdXRvVGFwU3RvcHNTZXR0aW5nX0Rp",
                  "c2FibGUQAiqqAQoNQmFzaWNMYW5kVHlwZRIWChJCYXNpY0xhbmRUeXBlX05v",
                  "bmUQABIYChRCYXNpY0xhbmRUeXBlX1BsYWlucxABEhgKFEJhc2ljTGFuZFR5",
                  "cGVfSXNsYW5kEAISFwoTQmFzaWNMYW5kVHlwZV9Td2FtcBADEhoKFkJhc2lj",
                  "TGFuZFR5cGVfTW91bnRhaW4QBBIYChRCYXNpY0xhbmRUeXBlX0ZvcmVzdBAF",
                  "KoUBCgpCbG9ja1N0YXRlEhMKD0Jsb2NrU3RhdGVfTm9uZRAAEhcKE0Jsb2Nr",
                  "U3RhdGVfRGVjbGFyZWQQARIXChNCbG9ja1N0YXRlX0Jsb2NraW5nEAISFgoS",
                  "QmxvY2tTdGF0ZV9CbG9ja2VkEAMSGAoUQmxvY2tTdGF0ZV9VbmJsb2NrZWQQ",
                  "BCrsAQoQQmxvY2tXYXJuaW5nVHlwZRIZChVCbG9ja1dhcm5pbmdUeXBlX05v",
                  "bmUQABIpCiVCbG9ja1dhcm5pbmdUeXBlX0luc3VmZmljaWVudEJsb2NrZXJz",
                  "EAESJQohQmxvY2tXYXJuaW5nVHlwZV9DYW5ub3RCbG9ja0Fsb25lEAISIgoe",
                  "QmxvY2tXYXJuaW5nVHlwZV9NdXN0QmVCbG9ja2VkEAMSHgoaQmxvY2tXYXJu",
                  "aW5nVHlwZV9NdXN0QmxvY2sQBBInCiNCbG9ja1dhcm5pbmdUeXBlX011c3RC",
                  "ZUJsb2NrZWRCeUFsbBAFKrYBCglDYXJkQ29sb3ISFwoTQ2FyZENvbG9yX0Nv",
                  "bG9ybGVzcxAAEhMKD0NhcmRDb2xvcl9XaGl0ZRABEhIKDkNhcmRDb2xvcl9C",
                  "bHVlEAISEwoPQ2FyZENvbG9yX0JsYWNrEAMSEQoNQ2FyZENvbG9yX1JlZBAE",
                  "EhMKD0NhcmRDb2xvcl9HcmVlbhAFEhIKDkNhcmRDb2xvcl9MYW5kEAYSFgoS",
                  "Q2FyZENvbG9yX0FydGlmYWN0EAcq+AwKEENhcmRNZWNoYW5pY1R5cGUSGQoV",
                  "Q2FyZE1lY2hhbmljVHlwZV9Ob25lEAASHwobQ2FyZE1lY2hhbmljVHlwZV9B",
                  "ZGRBYmlsaXR5EAISIgoeQ2FyZE1lY2hhbmljVHlwZV9BZGRBdHRhY2htZW50",
                  "EAMSHwobQ2FyZE1lY2hhbmljVHlwZV9EZWFsRGFtYWdlEAQSJQohQ2FyZE1l",
                  "Y2hhbmljVHlwZV9EZXN0cm95UGVybWFuZW50EAUSHAoYQ2FyZE1lY2hhbmlj",
                  "VHlwZV9EaXNjYXJkEAYSHQoZQ2FyZE1lY2hhbmljVHlwZV9EcmF3Q2FyZBAH",
                  "Eh8KG0NhcmRNZWNoYW5pY1R5cGVfTG9zc09mR2FtZRAIEh0KGUNhcmRNZWNo",
                  "YW5pY1R5cGVfU2V0Q29sb3IQCRIfChtDYXJkTWVjaGFuaWNUeXBlX01vZGlm",
                  "eUxpZmUQChIgChxDYXJkTWVjaGFuaWNUeXBlX01vZGlmeVBvd2VyEAsSJAog",
                  "Q2FyZE1lY2hhbmljVHlwZV9Nb2RpZnlUb3VnaG5lc3MQDBIqCiZDYXJkTWVj",
                  "aGFuaWNUeXBlX1BoYXNlT3JTdGVwVHJhbnNpdGlvbhANEicKI0NhcmRNZWNo",
                  "YW5pY1R5cGVfUHV0Q291bnRlck9uT2JqZWN0EA4SIAocQ2FyZE1lY2hhbmlj",
                  "VHlwZV9DcmVhdGVUb2tlbhAPEiwKKENhcmRNZWNoYW5pY1R5cGVfUmVtb3Zl",
                  "Q291bnRlckZyb21PYmplY3QQEBIjCh9DYXJkTWVjaGFuaWNUeXBlX1Jlc29s",
                  "dmVBYmlsaXR5EBESGwoXQ2FyZE1lY2hhbmljVHlwZV9SZXZlYWwQEhIhCh1D",
                  "YXJkTWVjaGFuaWNUeXBlX1RhcFBlcm1hbmVudBATEiMKH0NhcmRNZWNoYW5p",
                  "Y1R5cGVfVW50YXBQZXJtYW5lbnQQFRIhCh1DYXJkTWVjaGFuaWNUeXBlX1pv",
                  "bmVUcmFuc2ZlchAWEigKJENhcmRNZWNoYW5pY1R5cGVfUmVnZW5lcmF0ZVBl",
                  "cm1hbmVudBAXEicKI0NhcmRNZWNoYW5pY1R5cGVfU2FjcmlmaWNlUGVybWFu",
                  "ZW50EBgSIgoeQ2FyZE1lY2hhbmljVHlwZV9TZXRDb250cm9sbGVyEBkSJQoh",
                  "Q2FyZE1lY2hhbmljVHlwZV9EZWNsYXJlZEF0dGFja2VyEBoSJAogQ2FyZE1l",
                  "Y2hhbmljVHlwZV9EZWNsYXJlZEJsb2NrZXIQGxIhCh1DYXJkTWVjaGFuaWNU",
                  "eXBlX0JlY29tZVRhcmdldBAcEiIKHkNhcmRNZWNoYW5pY1R5cGVfQWRkVG9N",
                  "YW5hUG9vbBAdEh4KGkNhcmRNZWNoYW5pY1R5cGVfRW50ZXJab25lEB4SIwof",
                  "Q2FyZE1lY2hhbmljVHlwZV9TaHVmZmxlTGlicmFyeRAfEikKJUNhcmRNZWNo",
                  "YW5pY1R5cGVfQ291bnRlck9iamVjdE9uU3RhY2sQIBIkCiBDYXJkTWVjaGFu",
                  "aWNUeXBlX0V4aWxlR2FtZU9iamVjdBAhEiAKHENhcmRNZWNoYW5pY1R5cGVf",
                  "RGFtYWdlRGVhbHQQIhIlCiFDYXJkTWVjaGFuaWNUeXBlX1BoYXNlSW5QZXJt",
                  "YW5lbnQQIxImCiJDYXJkTWVjaGFuaWNUeXBlX1BoYXNlT3V0UGVybWFuZW50",
                  "ECQSJAogQ2FyZE1lY2hhbmljVHlwZV9BdHRhY2tlckJsb2NrZWQQJRInCiND",
                  "YXJkTWVjaGFuaWNUeXBlX0F0dGFja2Vyc1N1Ym1pdHRlZBAmEicKI0NhcmRN",
                  "ZWNoYW5pY1R5cGVfQmxvY2tlcnNEZXRlcm1pbmVkECcSHQoZQ2FyZE1lY2hh",
                  "bmljVHlwZV9TZXRQb3dlchAoEiEKHUNhcmRNZWNoYW5pY1R5cGVfU2V0VG91",
                  "Z2huZXNzECkSHgoaQ2FyZE1lY2hhbmljVHlwZV9CZWdpblR1cm4QKhIfChtD",
                  "YXJkTWVjaGFuaWNUeXBlX1R1cm5GYWNlVXAQKxIeChpDYXJkTWVjaGFuaWNU",
                  "eXBlX1RyYW5zZm9ybRAsEhsKF0NhcmRNZWNoYW5pY1R5cGVfRHJlZGdlEC0S",
                  "HAoYQ2FyZE1lY2hhbmljVHlwZV9FeHBsb3JlEC4SHAoYQ2FyZE1lY2hhbmlj",
                  "VHlwZV9Qcm92b2tlEC8qrQIKCENhcmRUeXBlEhEKDUNhcmRUeXBlX05vbmUQ",
                  "ABIVChFDYXJkVHlwZV9BcnRpZmFjdBABEhUKEUNhcmRUeXBlX0NyZWF0dXJl",
                  "EAISGAoUQ2FyZFR5cGVfRW5jaGFudG1lbnQQAxIUChBDYXJkVHlwZV9JbnN0",
                  "YW50EAQSEQoNQ2FyZFR5cGVfTGFuZBAFEhcKE0NhcmRUeXBlX1BoZW5vbWVu",
                  "b24QBhISCg5DYXJkVHlwZV9QbGFuZRAHEhkKFUNhcmRUeXBlX1BsYW5lc3dh",
                  "bGtlchAIEhMKD0NhcmRUeXBlX1NjaGVtZRAJEhQKEENhcmRUeXBlX1NvcmNl",
                  "cnkQChITCg9DYXJkVHlwZV9UcmliYWwQCxIVChFDYXJkVHlwZV9WYW5ndWFy",
                  "ZBAMKvADChVDYXN0aW5nVGltZU9wdGlvblR5cGUSHgoaQ2FzdGluZ1RpbWVP",
                  "cHRpb25UeXBlX05vbmUQABIeChpDYXN0aW5nVGltZU9wdGlvblR5cGVfRG9u",
                  "ZRABEiEKHUNhc3RpbmdUaW1lT3B0aW9uVHlwZV9DaG9vc2VYEAISIAocQ2Fz",
                  "dGluZ1RpbWVPcHRpb25UeXBlX0tpY2tlchADEiUKIUNhc3RpbmdUaW1lT3B0",
                  "aW9uVHlwZV9NdWx0aWtpY2tlchAEEigKJENhc3RpbmdUaW1lT3B0aW9uVHlw",
                  "ZV9BZGRpdGlvbmFsQ29zdBAFEiYKIkNhc3RpbmdUaW1lT3B0aW9uVHlwZV9P",
                  "cHRpb25hbENvc3QQBhIjCh9DYXN0aW5nVGltZU9wdGlvblR5cGVfUmVwbGlj",
                  "YXRlEAcSIgoeQ2FzdGluZ1RpbWVPcHRpb25UeXBlX0NvbnNwaXJlEAgSIgoe",
                  "Q2FzdGluZ1RpbWVPcHRpb25UeXBlX01hbmFUeXBlEAkSHwobQ2FzdGluZ1Rp",
                  "bWVPcHRpb25UeXBlX01vZGFsEAoSJgoiQ2FzdGluZ1RpbWVPcHRpb25UeXBl",
                  "X0Nob29zZU9yQ29zdBALEiMKH0Nhc3RpbmdUaW1lT3B0aW9uVHlwZV9TZWxl",
                  "Y3Rpb24QDCp1ChFDaG9pY2VQZXJzaXN0ZW5jZRIaChZDaG9pY2VQZXJzaXN0",
                  "ZW5jZV9Ob25lEAASIAocQ2hvaWNlUGVyc2lzdGVuY2VfQ2hvb3NlT25jZRAB",
                  "EiIKHkNob2ljZVBlcnNpc3RlbmNlX0Nob29zZUFsd2F5cxACKo4OChFDbGll",
                  "bnRNZXNzYWdlVHlwZRIaChZDbGllbnRNZXNzYWdlVHlwZV9Ob25lEAASIAoc",
                  "Q2xpZW50TWVzc2FnZVR5cGVfQ29ubmVjdFJlcRABEiUKIUNsaWVudE1lc3Nh",
                  "Z2VUeXBlX0NhbmNlbEFjdGlvblJlcRAFEiUKIUNsaWVudE1lc3NhZ2VUeXBl",
                  "X0Nob29zZU1vZGFsUmVzcBAGEiAKHENsaWVudE1lc3NhZ2VUeXBlX0NvbmNl",
                  "ZGVSZXEQBxIqCiZDbGllbnRNZXNzYWdlVHlwZV9FbnRlclNpZGVib2FyZGlu",
                  "Z1JlcRAIEiIKHkNsaWVudE1lc3NhZ2VUeXBlX0ZvcmNlRHJhd1JlcRAJEiQK",
                  "IENsaWVudE1lc3NhZ2VUeXBlX0dldFNldHRpbmdzUmVxEAsSHwobQ2xpZW50",
                  "TWVzc2FnZVR5cGVfR3JvdXBSZXNwEAwSIgoeQ2xpZW50TWVzc2FnZVR5cGVf",
                  "TXVsbGlnYW5SZXNwEA0SHwobQ2xpZW50TWVzc2FnZVR5cGVfT3JkZXJSZXNw",
                  "EA4SJwojQ2xpZW50TWVzc2FnZVR5cGVfUGVyZm9ybUFjdGlvblJlc3AQDxIg",
                  "ChxDbGllbnRNZXNzYWdlVHlwZV9Db250cm9sUmVxEBESIQodQ2xpZW50TWVz",
                  "c2FnZVR5cGVfU2VsZWN0TlJlc3AQEhIkCiBDbGllbnRNZXNzYWdlVHlwZV9T",
                  "ZXRTZXR0aW5nc1JlcRAUEh0KGUNsaWVudE1lc3NhZ2VUeXBlX1VuZG9SZXEQ",
                  "FhIuCipDbGllbnRNZXNzYWdlVHlwZV9DaG9vc2VTdGFydGluZ1BsYXllclJl",
                  "c3AQGBIoCiRDbGllbnRNZXNzYWdlVHlwZV9PcHRpb25hbEFjdGlvblJlc3AQ",
                  "GRIoCiRDbGllbnRNZXNzYWdlVHlwZV9BbGxvd0ZvcmNlRHJhd1Jlc3AQGhIk",
                  "CiBDbGllbnRNZXNzYWdlVHlwZV9SZXZlYWxIYW5kUmVzcBAcEioKJkNsaWVu",
                  "dE1lc3NhZ2VUeXBlX0RlY2xhcmVBdHRhY2tlcnNSZXNwEB4SKAokQ2xpZW50",
                  "TWVzc2FnZVR5cGVfU3VibWl0QXR0YWNrZXJzUmVxEB8SKQolQ2xpZW50TWVz",
                  "c2FnZVR5cGVfRGVjbGFyZUJsb2NrZXJzUmVzcBAgEicKI0NsaWVudE1lc3Nh",
                  "Z2VUeXBlX1N1Ym1pdEJsb2NrZXJzUmVxECESKwonQ2xpZW50TWVzc2FnZVR5",
                  "cGVfT3JkZXJDb21iYXREYW1hZ2VSZXNwECISJgoiQ2xpZW50TWVzc2FnZVR5",
                  "cGVfQXNzaWduRGFtYWdlUmVzcBAjEicKI0NsaWVudE1lc3NhZ2VUeXBlX1Nl",
                  "bGVjdFRhcmdldHNSZXNwECQSJgoiQ2xpZW50TWVzc2FnZVR5cGVfU3VibWl0",
                  "VGFyZ2V0c1JlcRAlEiIKHkNsaWVudE1lc3NhZ2VUeXBlX0RyYXdDYXJkUmVz",
                  "cBAmEisKJ0NsaWVudE1lc3NhZ2VUeXBlX1NlbGVjdFJlcGxhY2VtZW50UmVz",
                  "cBAnEiYKIkNsaWVudE1lc3NhZ2VUeXBlX1NlbGVjdE5Hcm91cFJlc3AQKBIp",
                  "CiVDbGllbnRNZXNzYWdlVHlwZV9BbHRlcm5hdGl2ZUNvc3RSZXNwECkSJgoi",
                  "Q2xpZW50TWVzc2FnZVR5cGVfRGlzdHJpYnV0aW9uUmVzcBAqEiYKIkNsaWVu",
                  "dE1lc3NhZ2VUeXBlX051bWVyaWNJbnB1dFJlc3AQKxIgChxDbGllbnRNZXNz",
                  "YWdlVHlwZV9TZWFyY2hSZXNwECwSJAogQ2xpZW50TWVzc2FnZVR5cGVfQWN0",
                  "aW9uQ29zdFJlc3AQLRIsCihDbGllbnRNZXNzYWdlVHlwZV9DYXN0aW5nVGlt",
                  "ZU9wdGlvbnNSZXNwEC4SKAokQ2xpZW50TWVzc2FnZVR5cGVfU2VsZWN0TWFu",
                  "YVR5cGVSZXNwEC8SKgomQ2xpZW50TWVzc2FnZVR5cGVfU2VsZWN0RnJvbUdy",
                  "b3Vwc1Jlc3AQMBIqCiZDbGllbnRNZXNzYWdlVHlwZV9TZWFyY2hGcm9tR3Jv",
                  "dXBzUmVzcBAxEiAKHENsaWVudE1lc3NhZ2VUeXBlX0dhdGhlclJlc3AQMhIn",
                  "CiNDbGllbnRNZXNzYWdlVHlwZV9TdWJtaXRQYXltZW50UmVzcBAzEh4KGkNs",
                  "aWVudE1lc3NhZ2VUeXBlX0F1dG9SZXNwEDQSHwobQ2xpZW50TWVzc2FnZVR5",
                  "cGVfVUlNZXNzYWdlEDUSJAogQ2xpZW50TWVzc2FnZVR5cGVfU3VibWl0RGVj",
                  "a1Jlc3AQNhIkCiBDbGllbnRNZXNzYWdlVHlwZV9UYWtlVGltZW91dFJlcRA3",
                  "KqwDCh9DbGllbnRUb01hdGNoU2VydmljZU1lc3NhZ2VUeXBlEigKJENsaWVu",
                  "dFRvTWF0Y2hTZXJ2aWNlTWVzc2FnZVR5cGVfTm9uZRAAEkMKP0NsaWVudFRv",
                  "TWF0Y2hTZXJ2aWNlTWVzc2FnZVR5cGVfQ2xpZW50VG9NYXRjaERvb3JDb25u",
                  "ZWN0UmVxdWVzdBABEjYKMkNsaWVudFRvTWF0Y2hTZXJ2aWNlTWVzc2FnZVR5",
                  "cGVfQ2xpZW50VG9HUkVNZXNzYWdlEAISOAo0Q2xpZW50VG9NYXRjaFNlcnZp",
                  "Y2VNZXNzYWdlVHlwZV9DbGllbnRUb0dSRVVJTWVzc2FnZRADEjcKM0NsaWVu",
                  "dFRvTWF0Y2hTZXJ2aWNlTWVzc2FnZVR5cGVfQXV0aGVudGljYXRlUmVxdWVz",
                  "dBAEEj4KOkNsaWVudFRvTWF0Y2hTZXJ2aWNlTWVzc2FnZVR5cGVfQ3JlYXRl",
                  "TWF0Y2hHYW1lUm9vbVJlcXVlc3QQBRIvCitDbGllbnRUb01hdGNoU2Vydmlj",
                  "ZU1lc3NhZ2VUeXBlX0VjaG9SZXF1ZXN0EAgqagoKQ2xpZW50VHlwZRIWChJD",
                  "bGllbnRUeXBlX0ludmFsaWQQABITCg9DbGllbnRUeXBlX1VzZXIQARIWChJD",
                  "bGllbnRUeXBlX1NlcnZpY2UQAhIXChNDbGllbnRUeXBlX0ZhbWlsaWFyEAMq",
                  "RQoIQ29pbkZhY2USEQoNQ29pbkZhY2VfTm9uZRAAEhIKDkNvaW5GYWNlX0hl",
                  "YWRzEAESEgoOQ29pbkZhY2VfVGFpbHMQAippCgVDb2xvchIOCgpDb2xvcl9O",
                  "b25lEAASDwoLQ29sb3JfV2hpdGUQARIOCgpDb2xvcl9CbHVlEAISDwoLQ29s",
                  "b3JfQmxhY2sQAxINCglDb2xvcl9SZWQQBBIPCgtDb2xvcl9HcmVlbhAFKqEB",
                  "Cg9Db25uZWN0aW9uU3RhdGUSGwoXQ29ubmVjdGlvblN0YXRlX0ludmFsaWQQ",
                  "ABIYChRDb25uZWN0aW9uU3RhdGVfT3BlbhABEhoKFkNvbm5lY3Rpb25TdGF0",
                  "ZV9DbG9zZWQQAhIeChpDb25uZWN0aW9uU3RhdGVfQ29ubmVjdGluZxADEhsK",
                  "F0Nvbm5lY3Rpb25TdGF0ZV9DbG9zaW5nEAQqrwEKH0Nvbm5lY3Rpb25TdGF0",
                  "ZUNoYW5nZWRFdmVudFR5cGUSKwonQ29ubmVjdGlvblN0YXRlQ2hhbmdlZEV2",
                  "ZW50VHlwZV9JbnZhbGlkEAASLQopQ29ubmVjdGlvblN0YXRlQ2hhbmdlZEV2",
                  "ZW50VHlwZV9Db25uZWN0ZWQQARIwCixDb25uZWN0aW9uU3RhdGVDaGFuZ2Vk",
                  "RXZlbnRUeXBlX0Rpc2Nvbm5lY3RlZBACKroBChBDb25uZWN0aW9uU3RhdHVz",
                  "EhkKFUNvbm5lY3Rpb25TdGF0dXNfTm9uZRAAEhwKGENvbm5lY3Rpb25TdGF0",
                  "dXNfU3VjY2VzcxABEiUKIUNvbm5lY3Rpb25TdGF0dXNfQWxyZWFkeUNvbm5l",
                  "Y3RlZBACEh0KGUNvbm5lY3Rpb25TdGF0dXNfR2FtZU92ZXIQAxInCiNDb25u",
                  "ZWN0aW9uU3RhdHVzX0dSUFZlcnNpb25JbmNvbXBhdBAEKjwKFENvbnN0cnVj",
                  "dGVkTWF0Y2hUeXBlEgoKBlByZWNvbhAAEgwKCFVucmFua2VkEAESCgoGUmFu",
                  "a2VkEAIqmgEKDkNvbnRyb2xsZXJUeXBlEhcKE0NvbnRyb2xsZXJUeXBlX05v",
                  "bmUQABIZChVDb250cm9sbGVyVHlwZV9QbGF5ZXIQARIVChFDb250cm9sbGVy",
                  "VHlwZV9BSRACEh4KGkNvbnRyb2xsZXJUeXBlX0FJX0dvbGRmaXNoEAMSHQoZ",
                  "Q29udHJvbGxlclR5cGVfQUlfUGV0Um9jaxAEKmAKDENvc3RDYXRlZ29yeRIV",
                  "ChFDb3N0Q2F0ZWdvcnlfTm9uZRAAEhsKF0Nvc3RDYXRlZ29yeV9FeGVjdXRh",
                  "YmxlEAESHAoYQ29zdENhdGVnb3J5X1ByZWRpY3RhYmxlEAIq9QEKCENvc3RU",
                  "eXBlEhEKDUNvc3RUeXBlX05vbmUQABIRCg1Db3N0VHlwZV9NYW5hEAESFAoQ",
                  "Q29zdFR5cGVfVGFwU2VsZhACEhQKEENvc3RUeXBlX1NhY1NlbGYQAxITCg9D",
                  "b3N0VHlwZV9BY3Rpb24QBBIUChBDb3N0VHlwZV9Mb3lhbHR5EAUSGAoUQ29z",
                  "dFR5cGVfRGlzY2FyZFNlbGYQBhIRCg1Db3N0VHlwZV9MaWZlEAcSFgoSQ29z",
                  "dFR5cGVfRXhpbGVTZWxmEAgSFgoSQ29zdFR5cGVfVW50YXBTZWxmEAkSDwoL",
                  "Q29zdFR5cGVfT3IQCir9GQoLQ291bnRlclR5cGUSFAoQQ291bnRlclR5cGVf",
                  "Tm9uZRAAEhQKEENvdW50ZXJUeXBlX1AxUDEQARIUChBDb3VudGVyVHlwZV9N",
                  "MU0xEAISFgoSQ291bnRlclR5cGVfUG9pc29uEAMSFAoQQ291bnRlclR5cGVf",
                  "V2luZBAEEhQKEENvdW50ZXJUeXBlX1RpbWUQBRIUChBDb3VudGVyVHlwZV9G",
                  "YWRlEAYSFwoTQ291bnRlclR5cGVfTG95YWx0eRAHEhQKEENvdW50ZXJUeXBl",
                  "X1dpc2gQCBITCg9Db3VudGVyVHlwZV9BZ2UQCRITCg9Db3VudGVyVHlwZV9B",
                  "aW0QChIVChFDb3VudGVyVHlwZV9BcnJvdxALEhkKFUNvdW50ZXJUeXBlX0Fy",
                  "cm93aGVhZBAMEhkKFUNvdW50ZXJUeXBlX0F3YWtlbmluZxANEhUKEUNvdW50",
                  "ZXJUeXBlX0JsYXplEA4SFQoRQ291bnRlclR5cGVfQmxvb2QQDxIWChJDb3Vu",
                  "dGVyVHlwZV9Cb3VudHkQEBIXChNDb3VudGVyVHlwZV9CcmliZXJ5EBESFwoT",
                  "Q291bnRlclR5cGVfQ2FycmlvbhASEhYKEkNvdW50ZXJUeXBlX0NoYXJnZRAT",
                  "EhcKE0NvdW50ZXJUeXBlX0NvbnRyb2wQFBIWChJDb3VudGVyVHlwZV9Db3Jw",
                  "c2UQFRIWChJDb3VudGVyVHlwZV9DcmVkaXQQFhIUChBDb3VudGVyVHlwZV9D",
                  "dWJlEBcSGAoUQ291bnRlclR5cGVfQ3VycmVuY3kQGBIVChFDb3VudGVyVHlw",
                  "ZV9EZWF0aBAZEhUKEUNvdW50ZXJUeXBlX0RlbGF5EBoSGQoVQ291bnRlclR5",
                  "cGVfRGVwbGV0aW9uEBsSFwoTQ291bnRlclR5cGVfRGVzcGFpchAcEhgKFENv",
                  "dW50ZXJUeXBlX0Rldm90aW9uEB0SGAoUQ291bnRlclR5cGVfRGl2aW5pdHkQ",
                  "HhIUChBDb3VudGVyVHlwZV9Eb29tEB8SFQoRQ291bnRlclR5cGVfRHJlYW0Q",
                  "IBIUChBDb3VudGVyVHlwZV9FY2hvECESFgoSQ291bnRlclR5cGVfRWxpeGly",
                  "ECISFgoSQ291bnRlclR5cGVfRW5lcmd5ECMSEwoPQ291bnRlclR5cGVfRW9u",
                  "ECQSFwoTQ291bnRlclR5cGVfRXllYmFsbBAlEhQKEENvdW50ZXJUeXBlX0Zh",
                  "dGUQJhIXChNDb3VudGVyVHlwZV9GZWF0aGVyECcSGgoWQ291bnRlclR5cGVf",
                  "RmlsaWJ1c3RlchAoEhUKEUNvdW50ZXJUeXBlX0ZsYW1lECkSFQoRQ291bnRl",
                  "clR5cGVfRmxvb2QQKhIWChJDb3VudGVyVHlwZV9GdW5ndXMQKxIUChBDb3Vu",
                  "dGVyVHlwZV9GdXNlECwSFQoRQ291bnRlclR5cGVfR2x5cGgQLRIUChBDb3Vu",
                  "dGVyVHlwZV9Hb2xkEC4SFgoSQ291bnRlclR5cGVfR3Jvd3RoEC8SGQoVQ291",
                  "bnRlclR5cGVfSGF0Y2hsaW5nEDASFwoTQ291bnRlclR5cGVfSGVhbGluZxAx",
                  "EhkKFUNvdW50ZXJUeXBlX0hvb2ZwcmludBAyEhkKFUNvdW50ZXJUeXBlX0hv",
                  "dXJnbGFzcxAzEhYKEkNvdW50ZXJUeXBlX0h1bmdlchA0EhMKD0NvdW50ZXJU",
                  "eXBlX0ljZRA1EhkKFUNvdW50ZXJUeXBlX0luZmVjdGlvbhA2EhwKGENvdW50",
                  "ZXJUeXBlX0ludGVydmVudGlvbhA3EhcKE0NvdW50ZXJUeXBlX0phdmVsaW4Q",
                  "OBISCg5Db3VudGVyVHlwZV9LaRA5EhUKEUNvdW50ZXJUeXBlX0xldmVsEDoS",
                  "FAoQQ291bnRlclR5cGVfTHVjaxA7EhYKEkNvdW50ZXJUeXBlX01hZ25ldBA8",
                  "EhkKFUNvdW50ZXJUeXBlX01hbm5lcXVpbhA9EhYKEkNvdW50ZXJUeXBlX01h",
                  "dHJpeBA+EhMKD0NvdW50ZXJUeXBlX01heRA/EhQKEENvdW50ZXJUeXBlX01p",
                  "bmUQQBIWChJDb3VudGVyVHlwZV9NaW5pbmcQQRIUChBDb3VudGVyVHlwZV9N",
                  "aXJlEEISFgoSQ291bnRlclR5cGVfTXVzdGVyEEMSEwoPQ291bnRlclR5cGVf",
                  "TmV0EEQSFAoQQ291bnRlclR5cGVfT21lbhBFEhMKD0NvdW50ZXJUeXBlX09y",
                  "ZRBGEhQKEENvdW50ZXJUeXBlX1BhZ2UQRxIUChBDb3VudGVyVHlwZV9QYWlu",
                  "EEgSHAoYQ291bnRlclR5cGVfUGFyYWx5emF0aW9uEEkSFQoRQ291bnRlclR5",
                  "cGVfUGV0YWwQShIdChlDb3VudGVyVHlwZV9QZXRyaWZpY2F0aW9uEEsSGgoW",
                  "Q291bnRlclR5cGVfUGh5bGFjdGVyeRBMEhMKD0NvdW50ZXJUeXBlX1BpbhBN",
                  "EhYKEkNvdW50ZXJUeXBlX1BsYWd1ZRBOEhUKEUNvdW50ZXJUeXBlX1BvbHlw",
                  "EE8SGAoUQ291bnRlclR5cGVfUHJlc3N1cmUQUBIUChBDb3VudGVyVHlwZV9Q",
                  "dXBhEFESFQoRQ291bnRlclR5cGVfUXVlc3QQUhIWChJDb3VudGVyVHlwZV9T",
                  "Y3JlYW0QUxIWChJDb3VudGVyVHlwZV9TY3JvbGwQVBIVChFDb3VudGVyVHlw",
                  "ZV9TaGVsbBBVEhYKEkNvdW50ZXJUeXBlX1NoaWVsZBBWEhUKEUNvdW50ZXJU",
                  "eXBlX1NocmVkEFcSFQoRQ291bnRlclR5cGVfU2xlZXAQWBIXChNDb3VudGVy",
                  "VHlwZV9TbGVpZ2h0EFkSFQoRQ291bnRlclR5cGVfU2xpbWUQWhIUChBDb3Vu",
                  "dGVyVHlwZV9Tb290EFsSFQoRQ291bnRlclR5cGVfU3BlbGwQXBIVChFDb3Vu",
                  "dGVyVHlwZV9TcG9yZRBdEhcKE0NvdW50ZXJUeXBlX1N0b3JhZ2UQXhIWChJD",
                  "b3VudGVyVHlwZV9TdHJpZmUQXxIVChFDb3VudGVyVHlwZV9TdHVkeRBgEhUK",
                  "EUNvdW50ZXJUeXBlX1RoZWZ0EGESFAoQQ291bnRlclR5cGVfVGlkZRBiEhUK",
                  "EUNvdW50ZXJUeXBlX1Rvd2VyEGQSGAoUQ291bnRlclR5cGVfVHJhaW5pbmcQ",
                  "ZRIUChBDb3VudGVyVHlwZV9UcmFwEGYSGAoUQ291bnRlclR5cGVfVHJlYXN1",
                  "cmUQZxIVChFDb3VudGVyVHlwZV9WZXJzZRBoEhgKFENvdW50ZXJUeXBlX1Zp",
                  "dGFsaXR5EGkSFAoQQ291bnRlclR5cGVfV2FnZRBqEhUKEUNvdW50ZXJUeXBl",
                  "X1dpbmNoEGsSFAoQQ291bnRlclR5cGVfTG9yZRBsEhQKEENvdW50ZXJUeXBl",
                  "X1AxUDIQbRIUChBDb3VudGVyVHlwZV9QMFAxEG4SFAoQQ291bnRlclR5cGVf",
                  "UDBQMhBvEhQKEENvdW50ZXJUeXBlX1AxUDAQcBIUChBDb3VudGVyVHlwZV9Q",
                  "MlAyEHESFAoQQ291bnRlclR5cGVfTTBNMRByEhQKEENvdW50ZXJUeXBlX00w",
                  "TTIQcxIUChBDb3VudGVyVHlwZV9NMU0wEHQSFAoQQ291bnRlclR5cGVfTTJN",
                  "MRB1EhQKEENvdW50ZXJUeXBlX00yTTIQdhIdChlDb3VudGVyVHlwZV9NYW5p",
                  "ZmVzdGF0aW9uEHcSEwoPQ291bnRlclR5cGVfR2VtEHgSFwoTQ291bnRlclR5",
                  "cGVfQ3J5c3RhbBB5EhkKFUNvdW50ZXJUeXBlX0lzb2xhdGlvbhB6EhQKEENv",
                  "dW50ZXJUeXBlX0hvdXIQexIVChFDb3VudGVyVHlwZV9Vbml0eRB8EhgKFENv",
                  "dW50ZXJUeXBlX1ZlbG9jaXR5EH0SFQoRQ291bnRlclR5cGVfQnJpY2sQfhIY",
                  "ChRDb3VudGVyVHlwZV9MYW5kbWFyaxB/EhUKEENvdW50ZXJUeXBlX1ByZXkQ",
                  "gAESFwoSQ291bnRlclR5cGVfU2lsdmVyEIEBEhQKD0NvdW50ZXJUeXBlX0Vn",
                  "ZxCCARIUCg9Db3VudGVyVHlwZV9IaXQQgwESKAojQ291bnRlclR5cGVfUGxh",
                  "Y2Vob2xkZXJDb3VudGVyVHlwZTEQhAESKAojQ291bnRlclR5cGVfUGxhY2Vo",
                  "b2xkZXJDb3VudGVyVHlwZTIQhQESKAojQ291bnRlclR5cGVfUGxhY2Vob2xk",
                  "ZXJDb3VudGVyVHlwZTMQhgESKAojQ291bnRlclR5cGVfUGxhY2Vob2xkZXJD",
                  "b3VudGVyVHlwZTQQhwESKAojQ291bnRlclR5cGVfUGxhY2Vob2xkZXJDb3Vu",
                  "dGVyVHlwZTUQiAEqeQoNRGFtYWdlUmVjVHlwZRIWChJEYW1hZ2VSZWNUeXBl",
                  "X05vbmUQABIWChJEYW1hZ2VSZWNUeXBlX1RlYW0QARIYChREYW1hZ2VSZWNU",
                  "eXBlX1BsYXllchACEh4KGkRhbWFnZVJlY1R5cGVfUGxhbmVzV2Fsa2VyEAMq",
                  "ZQoKRGFtYWdlVHlwZRITCg9EYW1hZ2VUeXBlX05vbmUQABIVChFEYW1hZ2VU",
                  "eXBlX0NvbWJhdBABEhUKEURhbWFnZVR5cGVfRGlyZWN0EAISFAoQRGFtYWdl",
                  "VHlwZV9GaWdodBADKrgBCgxEZXNpZ25hdGlvbnMSGQoVRGVzaWduYXRpb25f",
                  "Q29tbWFuZGVyEAASFwoTRGVzaWduYXRpb25fTW9uYXJjaBABEhkKFURlc2ln",
                  "bmF0aW9uX01vbnN0cm91cxACEiAKHERlc2lnbmF0aW9uX1BsYW5hckNvbnRy",
                  "b2xsZXIQAxIYChREZXNpZ25hdGlvbl9SZW5vd25lZBAEEh0KGURlc2lnbmF0",
                  "aW9uX0NpdHlzQmxlc3NpbmcQBSrFAQoVRGV0ZXJtaW5lT3B0aW9uc1N0YXRl",
                  "Eh4KGkRldGVybWluZU9wdGlvbnNTdGF0ZV9Ob25lEAASHwobRGV0ZXJtaW5l",
                  "T3B0aW9uc1N0YXRlX01vZGFsEAESKAokRGV0ZXJtaW5lT3B0aW9uc1N0YXRl",
                  "X1RhcmdldExpbWl0aW5nEAISIQodRGV0ZXJtaW5lT3B0aW9uc1N0YXRlX05v",
                  "bk1hbmEQAxIeChpEZXRlcm1pbmVPcHRpb25zU3RhdGVfTWFuYRAEKn0KD0Rp",
                  "ZmZpY3VsdHlMZXZlbBIYChREaWZmaWN1bHR5TGV2ZWxfTm9uZRAAEhgKFERp",
                  "ZmZpY3VsdHlMZXZlbF9FYXN5EAESHAoYRGlmZmljdWx0eUxldmVsX01vZGVy",
                  "YXRlEAISGAoURGlmZmljdWx0eUxldmVsX0hhcmQQAyrFAQobRHJvcE1hdGNo",
                  "bWFraW5nUmVzcG9uc2VDb2RlEhQKEERyb3BVbmtub3duRXJyb3IQABIPCgtE",
                  "cm9wU3VjY2VzcxABEhYKEkRyb3BFcnJvck5vdEpvaW5lZBACEhoKFkRyb3BF",
                  "cnJvckV2ZW50Tm90Rm91bmQQAxIbChdEcm9wRXJyb3JDb3Vyc2VOb3RGb3Vu",
                  "ZBAEEhQKEERyb3BTZXJ2aWNlRXJyb3IQBRIYChREcm9wRXJyb3JVbmF2YWls",
                  "YWJsZRAGKrQLCg1GYWlsdXJlUmVhc29uEhYKEkZhaWx1cmVSZWFzb25fTm9u",
                  "ZRAAEhkKFUZhaWx1cmVSZWFzb25fRXhwaXJlZBABEhsKF0ZhaWx1cmVSZWFz",
                  "b25fT3V0T2ZUdXJuEAISIQodRmFpbHVyZVJlYXNvbl9SZXFSZXNwTWlzbWF0",
                  "Y2gQAxIkCiBGYWlsdXJlUmVhc29uX0FjdGlvbk5vdEJhdGNoYWJsZRAEEh8K",
                  "G0ZhaWx1cmVSZWFzb25fQWN0aW9uSW52YWxpZBAFEiMKH0ZhaWx1cmVSZWFz",
                  "b25fSW5jb21wbGV0ZU1lc3NhZ2UQBhIfChtGYWlsdXJlUmVhc29uX0lsbGVn",
                  "YWxPcHRpb24QBxIjCh9GYWlsdXJlUmVhc29uX1VucmVjb2duaXplZFZhbHVl",
                  "EAgSJAogRmFpbHVyZVJlYXNvbl9UYXJnZXRzVW5hdmFpbGFibGUQCRInCiNG",
                  "YWlsdXJlUmVhc29uX1RhcmdldEluZGV4T3V0T2ZSYW5nZRAKEh8KG0ZhaWx1",
                  "cmVSZWFzb25fVGFyZ2V0SWxsZWdhbBALEiQKIEZhaWx1cmVSZWFzb25fVW5y",
                  "ZWNvZ25pemVkTWFuYUlkEAwSKAokRmFpbHVyZVJlYXNvbl9JbnZhbGlkT3B0",
                  "aW9uU2VsZWN0aW9uEA0SIwofRmFpbHVyZVJlYXNvbl9VbmV4cGVjdGVkTWVz",
                  "c2FnZRAOEiAKHEZhaWx1cmVSZWFzb25fTGltaXRWaW9sYXRpb24QDxIlCiFG",
                  "YWlsdXJlUmVhc29uX1Jlc3RyaWN0aW9uVmlvbGF0ZWQQEBIlCiFGYWlsdXJl",
                  "UmVhc29uX1JlcXVpcmVtZW50VmlvbGF0ZWQQERIfChtGYWlsdXJlUmVhc29u",
                  "X1VucGF5YWJsZUNvc3QQEhIfChtGYWlsdXJlUmVhc29uX0ludmFsaWRTZWF0",
                  "SWQQExIfChtGYWlsdXJlUmVhc29uX0ludmFsaWRUZWFtSWQQFBIjCh9GYWls",
                  "dXJlUmVhc29uX0ludmFsaWRNYXRjaFN0YXRlEBUSIwofRmFpbHVyZVJlYXNv",
                  "bl9JbnZhbGlkTWF0Y2hTY29wZRAWEh0KGUZhaWx1cmVSZWFzb25fSW52YWxp",
                  "ZERlY2sQFxIkCiBGYWlsdXJlUmVhc29uX0ludmFsaWRDYW5jZWxTdGF0ZRAY",
                  "EiIKHkZhaWx1cmVSZWFzb25fSW52YWxpZFVuZG9TdGF0ZRAZEiIKHkZhaWx1",
                  "cmVSZWFzb25fUGVybWlzc2lvbkRlbmllZBAaEhsKF0ZhaWx1cmVSZWFzb25f",
                  "Tm9UaW1lb3V0EBsSHgoaRmFpbHVyZVJlYXNvbl9JbnZhbGlkQ29sb3IQHBIi",
                  "Ch5GYWlsdXJlUmVhc29uX0ludmFsaWRNYW5hQ29sb3IQHRIhCh1GYWlsdXJl",
                  "UmVhc29uX0ludmFsaWRDb2luRmFjZRAeEh0KGUZhaWx1cmVSZWFzb25fSW52",
                  "YWxpZENhcmQQHxIhCh1GYWlsdXJlUmVhc29uX0ludmFsaWRDYXJkTmFtZRAg",
                  "EiEKHUZhaWx1cmVSZWFzb25fSW52YWxpZENhcmRUeXBlECESIAocRmFpbHVy",
                  "ZVJlYXNvbl9JbnZhbGlkU3ViVHlwZRAiEiIKHkZhaWx1cmVSZWFzb25fSW52",
                  "YWxpZFN1cGVyVHlwZRAjEiQKIEZhaWx1cmVSZWFzb25fSW52YWxpZENvdW50",
                  "ZXJUeXBlECQSJAogRmFpbHVyZVJlYXNvbl9JbnZhbGlkQWJpbGl0eVR5cGUQ",
                  "JRImCiJGYWlsdXJlUmVhc29uX0ludmFsaWRCYXNpY0xhbmRUeXBlECYSJAog",
                  "RmFpbHVyZVJlYXNvbl9JbnZhbGlkT3B0aW9uSW5kZXgQJxImCiJGYWlsdXJl",
                  "UmVhc29uX0ludmFsaWRPcHRpb25Db250ZXh0ECgq1Q0KDkdSRU1lc3NhZ2VU",
                  "eXBlEhcKE0dSRU1lc3NhZ2VUeXBlX05vbmUQABIjCh9HUkVNZXNzYWdlVHlw",
                  "ZV9HYW1lU3RhdGVNZXNzYWdlEAESJgoiR1JFTWVzc2FnZVR5cGVfQWN0aW9u",
                  "c0F2YWlsYWJsZVJlcRACEioKJkdSRU1lc3NhZ2VUeXBlX0Nob29zZVN0YXJ0",
                  "aW5nUGxheWVyUmVxEAYSHgoaR1JFTWVzc2FnZVR5cGVfQ29ubmVjdFJlc3AQ",
                  "BxIiCh5HUkVNZXNzYWdlVHlwZV9HZXRTZXR0aW5nc1Jlc3AQCRIiCh5HUkVN",
                  "ZXNzYWdlVHlwZV9TZXRTZXR0aW5nc1Jlc3AQChIbChdHUkVNZXNzYWdlVHlw",
                  "ZV9Hcm91cFJlcRALEiEKHUdSRU1lc3NhZ2VUeXBlX0lsbGVnYWxSZXF1ZXN0",
                  "EAwSGwoXR1JFTWVzc2FnZVR5cGVfTW9kYWxSZXEQDhIeChpHUkVNZXNzYWdl",
                  "VHlwZV9NdWxsaWdhblJlcRAPEhwKGEdSRU1lc3NhZ2VUeXBlX09wdGlvblJl",
                  "cRAQEhsKF0dSRU1lc3NhZ2VUeXBlX09yZGVyUmVxEBESHAoYR1JFTWVzc2Fn",
                  "ZVR5cGVfUHJvbXB0UmVxEBISIAocR1JFTWVzc2FnZVR5cGVfUmV2ZWFsSGFu",
                  "ZFJlcRAVEh0KGUdSRU1lc3NhZ2VUeXBlX1NlbGVjdE5SZXEQFhIhCh1HUkVN",
                  "ZXNzYWdlVHlwZV9BbGxvd0ZvcmNlRHJhdxAYEiIKHkdSRU1lc3NhZ2VUeXBl",
                  "X0JpbmFyeUdhbWVTdGF0ZRAZEiYKIkdSRU1lc3NhZ2VUeXBlX0RlY2xhcmVB",
                  "dHRhY2tlcnNSZXEQGhImCiJHUkVNZXNzYWdlVHlwZV9TdWJtaXRBdHRhY2tl",
                  "cnNSZXNwEBsSJQohR1JFTWVzc2FnZVR5cGVfRGVjbGFyZUJsb2NrZXJzUmVx",
                  "EBwSJQohR1JFTWVzc2FnZVR5cGVfU3VibWl0QmxvY2tlcnNSZXNwEB0SIgoe",
                  "R1JFTWVzc2FnZVR5cGVfQXNzaWduRGFtYWdlUmVxEB4SKwonR1JFTWVzc2Fn",
                  "ZVR5cGVfQXNzaWduRGFtYWdlQ29uZmlybWF0aW9uEB8SJwojR1JFTWVzc2Fn",
                  "ZVR5cGVfT3JkZXJDb21iYXREYW1hZ2VSZXEQIBIqCiZHUkVNZXNzYWdlVHlw",
                  "ZV9PcmRlckRhbWFnZUNvbmZpcm1hdGlvbhAhEiMKH0dSRU1lc3NhZ2VUeXBl",
                  "X1NlbGVjdFRhcmdldHNSZXEQIhIkCiBHUkVNZXNzYWdlVHlwZV9TdWJtaXRU",
                  "YXJnZXRzUmVzcBAjEh4KGkdSRU1lc3NhZ2VUeXBlX1BheUNvc3RzUmVxECQS",
                  "IgoeR1JFTWVzc2FnZVR5cGVfSW50ZXJtaXNzaW9uUmVxECUSJQohR1JFTWVz",
                  "c2FnZVR5cGVfRGllUm9sbFJlc3VsdHNSZXNwECYSJwojR1JFTWVzc2FnZVR5",
                  "cGVfU2VsZWN0UmVwbGFjZW1lbnRSZXEQJxIiCh5HUkVNZXNzYWdlVHlwZV9T",
                  "ZWxlY3ROR3JvdXBSZXEQKBIlCiFHUkVNZXNzYWdlVHlwZV9BbHRlcm5hdGl2",
                  "ZUNvc3RSZXEQKRIiCh5HUkVNZXNzYWdlVHlwZV9EaXN0cmlidXRpb25SZXEQ",
                  "KhIiCh5HUkVNZXNzYWdlVHlwZV9OdW1lcmljSW5wdXRSZXEQKxIcChhHUkVN",
                  "ZXNzYWdlVHlwZV9TZWFyY2hSZXEQLBIoCiRHUkVNZXNzYWdlVHlwZV9PcHRp",
                  "b25hbEFjdGlvbk1lc3NhZ2UQLRIoCiRHUkVNZXNzYWdlVHlwZV9DYXN0aW5n",
                  "VGltZU9wdGlvbnNSZXEQLhIkCiBHUkVNZXNzYWdlVHlwZV9TZWxlY3RNYW5h",
                  "VHlwZVJlcRAvEiYKIkdSRU1lc3NhZ2VUeXBlX1NlbGVjdEZyb21Hcm91cHNS",
                  "ZXEQMBImCiJHUkVNZXNzYWdlVHlwZV9TZWFyY2hGcm9tR3JvdXBzUmVxEDES",
                  "HAoYR1JFTWVzc2FnZVR5cGVfR2F0aGVyUmVxEDISKQolR1JFTWVzc2FnZVR5",
                  "cGVfUXVldWVkR2FtZVN0YXRlTWVzc2FnZRAzEhwKGEdSRU1lc3NhZ2VUeXBl",
                  "X1VJTWVzc2FnZRA0EiAKHEdSRU1lc3NhZ2VUeXBlX1N1Ym1pdERlY2tSZXEQ",
                  "NRIhCh1HUkVNZXNzYWdlVHlwZV9FZGljdGFsTWVzc2FnZRA2EiEKHUdSRU1l",
                  "c3NhZ2VUeXBlX1RpbWVvdXRNZXNzYWdlEDcqvwEKG0dSRVRISG9zdEVtdWxh",
                  "dG9yRXJyb3JDb2RlcxImCiJHUkVUSEhvc3RFbXVsYXRvckVycm9yQ29kZV9T",
                  "dWNjZXNzEAASJgoiR1JFVEhIb3N0RW11bGF0b3JFcnJvckNvZGVfVGltZW91",
                  "dBABEigKJEdSRVRISG9zdEVtdWxhdG9yRXJyb3JDb2RlX1Vua25vd25JRBAC",
                  "EiYKIkdSRVRISG9zdEVtdWxhdG9yRXJyb3JDb2RlX0lESW5Vc2UQAyq8AwoS",
                  "R1JFVEhIb3N0RXJyb3JDb2RlEh4KGkdSRVRISG9zdEVycm9yQ29kZV9TdWNj",
                  "ZXNzEAASIgoeR1JFVEhIb3N0RXJyb3JDb2RlX051bGxQYXlsb2FkEAESIgoe",
                  "R1JFVEhIb3N0RXJyb3JDb2RlX1BhcnNlRmFpbGVkEAISKAokR1JFVEhIb3N0",
                  "RXJyb3JDb2RlX0luY29tcGxldGVQYXlsb2FkEAMSJgoiR1JFVEhIb3N0RXJy",
                  "b3JDb2RlX0dyZUNyZWF0ZUZhaWxlZBAEEicKI0dSRVRISG9zdEVycm9yQ29k",
                  "ZV9HcmVEZXN0cm95RmFpbGVkEAUSJQohR1JFVEhIb3N0RXJyb3JDb2RlX0FJ",
                  "Q3JlYXRlRmFpbGVkEAYSJgoiR1JFVEhIb3N0RXJyb3JDb2RlX0FJRGVzdHJv",
                  "eUZhaWxlZBAHEigKJEdSRVRISG9zdEVycm9yQ29kZV9VbnJlY29nbml6ZWRH",
                  "cmVJRBAIEiUKIUdSRVRISG9zdEVycm9yQ29kZV9JbnZhbGlkUG9pbnRlchAJ",
                  "EiMKH0dSRVRISG9zdEVycm9yQ29kZV9Vbmtub3duRXJyb3IQCipgChZHUkVU",
                  "SEhvc3RPcGVyYXRpb25Nb2RlEiEKHUdSRVRISG9zdE9wZXJhdGlvbk1vZGVf",
                  "Tm9ybWFsEAASIwofR1JFVEhIb3N0T3BlcmF0aW9uTW9kZV9Mb29wYmFjaxAB",
                  "KsMBCgpHYW1lRm9ybWF0EhMKD0dhbWVGb3JtYXRfTm9uZRAAEhQKEEdhbWVG",
                  "b3JtYXRfQmxvY2sQARIXChNHYW1lRm9ybWF0X1N0YW5kYXJkEAISFQoRR2Ft",
                  "ZUZvcm1hdF9Nb2Rlcm4QAxIVChFHYW1lRm9ybWF0X0xlZ2FjeRAEEhYKEkdh",
                  "bWVGb3JtYXRfVmludGFnZRAFEhQKEEdhbWVGb3JtYXRfRHJhZnQQBxIVChFH",
                  "YW1lRm9ybWF0X1NlYWxlZBAIKo8CCg5HYW1lT2JqZWN0VHlwZRIXChNHYW1l",
                  "T2JqZWN0VHlwZV9Ob25lEAASFwoTR2FtZU9iamVjdFR5cGVfQ2FyZBABEhgK",
                  "FEdhbWVPYmplY3RUeXBlX1Rva2VuEAISGgoWR2FtZU9iamVjdFR5cGVfQWJp",
                  "bGl0eRADEhkKFUdhbWVPYmplY3RUeXBlX0VtYmxlbRAEEhwKGEdhbWVPYmpl",
                  "Y3RUeXBlX1NwbGl0Q2FyZBAFEhwKGEdhbWVPYmplY3RUeXBlX1NwbGl0TGVm",
                  "dBAGEh0KGUdhbWVPYmplY3RUeXBlX1NwbGl0UmlnaHQQBxIfChtHYW1lT2Jq",
                  "ZWN0VHlwZV9SZXZlYWxlZENhcmQQCCpYCgxHYW1lUm9vbVR5cGUSGAoUR2Ft",
                  "ZVJvb21UeXBlX0ludmFsaWQQABIWChJHYW1lUm9vbVR5cGVfTWF0Y2gQARIW",
                  "ChJHYW1lUm9vbVR5cGVfRHJhZnQQAipgCglHYW1lU3RhZ2USEgoOR2FtZVN0",
                  "YWdlX05vbmUQABITCg9HYW1lU3RhZ2VfU3RhcnQQARISCg5HYW1lU3RhZ2Vf",
                  "UGxheRACEhYKEkdhbWVTdGFnZV9HYW1lT3ZlchADKnEKDUdhbWVTdGF0ZVR5",
                  "cGUSFgoSR2FtZVN0YXRlVHlwZV9Ob25lEAASFgoSR2FtZVN0YXRlVHlwZV9G",
                  "dWxsEAESFgoSR2FtZVN0YXRlVHlwZV9EaWZmEAISGAoUR2FtZVN0YXRlVHlw",
                  "ZV9CaW5hcnkQAyq9AQoPR2FtZVN0YXRlVXBkYXRlEhgKFEdhbWVTdGF0ZVVw",
                  "ZGF0ZV9Ob25lEAASGAoUR2FtZVN0YXRlVXBkYXRlX1NlbmQQARIhCh1HYW1l",
                  "U3RhdGVVcGRhdGVfU2VuZEFuZFJlY29yZBACEhwKGEdhbWVTdGF0ZVVwZGF0",
                  "ZV9TZW5kSGlGaRADEhgKFEdhbWVTdGF0ZVVwZGF0ZV9VbmRvEAQSGwoXR2Ft",
                  "ZVN0YXRlVXBkYXRlX1Jlc3RvcmUQBSpiCghHYW1lVHlwZRIRCg1HYW1lVHlw",
                  "ZV9Ob25lEAASEQoNR2FtZVR5cGVfRHVlbBABEhgKFEdhbWVUeXBlX011bHRp",
                  "UGxheWVyEAISFgoSR2FtZVR5cGVfU29saXRhaXJlEAMq4wEKC0dhbWVWYXJp",
                  "YW50EhQKEEdhbWVWYXJpYW50X05vbmUQABIWChJHYW1lVmFyaWFudF9Ob3Jt",
                  "YWwQARIaChZHYW1lVmFyaWFudF9QbGFuZWNoYXNlEAISGAoUR2FtZVZhcmlh",
                  "bnRfVmFuZ3VhcmQQAxIZChVHYW1lVmFyaWFudF9Db21tYW5kZXIQBBIZChVH",
                  "YW1lVmFyaWFudF9BcmNoZW5lbXkQBRIaChZHYW1lVmFyaWFudF9UZWFtVnNU",
                  "ZWFtEAYSHgoaR2FtZVZhcmlhbnRfVHdvSGVhZGVkR2lhbnQQBypPCglHcm91",
                  "cFR5cGUSEgoOR3JvdXBUeXBlX05vbmUQABIVChFHcm91cFR5cGVfT3JkZXJl",
                  "ZBABEhcKE0dyb3VwVHlwZV9BcmJpdHJhcnkQAipKCghHcm91cGluZxIRCg1H",
                  "cm91cGluZ19Ob25lEAASEwoPR3JvdXBpbmdfU2luZ2xlEAESFgoSR3JvdXBp",
                  "bmdfQmF0Y2hhYmxlEAIqYgoPR3JvdXBpbmdDb250ZXh0EhgKFEdyb3VwaW5n",
                  "Q29udGV4dF9Ob25lEAASGAoUR3JvdXBpbmdDb250ZXh0X1NjcnkQARIbChdH",
                  "cm91cGluZ0NvbnRleHRfU3VydmVpbBACKnwKDUdyb3VwaW5nU3R5bGUSFgoS",
                  "R3JvdXBpbmdTdHlsZV9Ob25lEAASHQoZR3JvdXBpbmdTdHlsZV9TaW5nbGVH",
                  "cm91cBABEhsKF0dyb3VwaW5nU3R5bGVfQWxsR3JvdXBzEAISFwoTR3JvdXBp",
                  "bmdTdHlsZV9NaXhlZBADKsYBChFIZXVyaXN0aWNQcmlvcml0eRIaChZIZXVy",
                  "aXN0aWNQcmlvcml0eV9Ob25lEAASJAogSGV1cmlzdGljUHJpb3JpdHlfVGFy",
                  "Z2V0Q3JlYXR1cmUQChIoCiRIZXVyaXN0aWNQcmlvcml0eV9UYXJnZXRQbGFu",
                  "ZXN3YWxrZXIQCxIiCh5IZXVyaXN0aWNQcmlvcml0eV9UYXJnZXRQbGF5ZXIQ",
                  "DBIhCh1IZXVyaXN0aWNQcmlvcml0eV9PYmplY3RTY29yZRANKm8KDUhpZ2hs",
                  "aWdodFR5cGUSFgoSSGlnaGxpZ2h0VHlwZV9Ob25lEAASFgoSSGlnaGxpZ2h0",
                  "VHlwZV9Db2xkEAESFwoTSGlnaGxpZ2h0VHlwZV9UZXBpZBACEhUKEUhpZ2hs",
                  "aWdodFR5cGVfSG90EAMqUwoISVJGb3JtYXQSEQoNSVJGb3JtYXRfTm9uZRAA",
                  "EhcKE0lSRm9ybWF0X1N1cGVyVHlwZXMQARIbChdJUkZvcm1hdF9TaWRlYm9h",
                  "cmRDYXJkcxACKlEKBklkVHlwZRIPCgtJZFR5cGVfTm9uZRAAEhUKEUlkVHlw",
                  "ZV9JbnN0YW5jZUlkEAESHwobSWRUeXBlX1Byb21wdFBhcmFtZXRlckluZGV4",
                  "EAIqgQIKG0pvaW5NYXRjaG1ha2luZ1Jlc3BvbnNlQ29kZRIUChBKb2luVW5r",
                  "bm93bkVycm9yEAASDwoLSm9pblN1Y2Nlc3MQARIaChZKb2luRXJyb3JBbHJl",
                  "YWR5Sm9pbmVkEAISGgoWSm9pbkVycm9yRXZlbnROb3RGb3VuZBADEhsKF0pv",
                  "aW5FcnJvckNvdXJzZU5vdEZvdW5kEAQSFAoQSm9pblNlcnZpY2VFcnJvchAF",
                  "EhgKFEpvaW5FcnJvclVuYXZhaWxhYmxlEAYSGAoUSm9pbkVycm9yTm9WYWxp",
                  "ZERlY2sQBxIcChhKb2luRXJyb3JDb3Vyc2VOb3RBY3RpdmUQCCrCAgoVS2V5",
                  "VmFsdWVQYWlyVmFsdWVUeXBlEh4KGktleVZhbHVlUGFpclZhbHVlVHlwZV9O",
                  "b25lEAASIAocS2V5VmFsdWVQYWlyVmFsdWVUeXBlX3VpbnQzMhABEh8KG0tl",
                  "eVZhbHVlUGFpclZhbHVlVHlwZV9pbnQzMhACEiAKHEtleVZhbHVlUGFpclZh",
                  "bHVlVHlwZV91aW50NjQQAxIfChtLZXlWYWx1ZVBhaXJWYWx1ZVR5cGVfaW50",
                  "NjQQBBIeChpLZXlWYWx1ZVBhaXJWYWx1ZVR5cGVfYm9vbBAFEiAKHEtleVZh",
                  "bHVlUGFpclZhbHVlVHlwZV9zdHJpbmcQBhIfChtLZXlWYWx1ZVBhaXJWYWx1",
                  "ZVR5cGVfZmxvYXQQBxIgChxLZXlWYWx1ZVBhaXJWYWx1ZVR5cGVfZG91Ymxl",
                  "EAgqsQEKCExpbmtUeXBlEhEKDUxpbmtUeXBlX05vbmUQABISCg5MaW5rVHlw",
                  "ZV9FeGlsZRABEhYKEkxpbmtUeXBlX1NhY3JpZmljZRACEhMKD0xpbmtUeXBl",
                  "X0Nob29zZRADEhIKDkxpbmtUeXBlX0hhdW50EAQSEwoPTGlua1R5cGVfUmV2",
                  "ZWFsEAUSEwoPTGlua1R5cGVfS2lja2VyEAYSEwoPTGlua1R5cGVfVGFyZ2V0",
                  "EAcqwQEKCkxpbmtlZEZhY2USEwoPTGlua2VkRmFjZV9Ob25lEAASGAoUTGlu",
                  "a2VkRmFjZV9ERkNfRnJvbnQQARIXChNMaW5rZWRGYWNlX0RGQ19CYWNrEAIS",
                  "FwoTTGlua2VkRmFjZV9NZWxkQ2FyZBADEh4KGkxpbmtlZEZhY2VfTWVsZGVk",
                  "UGVybWFuZW50EAQSGAoUTGlua2VkRmFjZV9TcGxpdENhcmQQBRIYChRMaW5r",
                  "ZWRGYWNlX1NwbGl0SGFsZhAGKpAGCg5Mb2JieUVycm9yQ29kZRIaChZMb2Ji",
                  "eUVycm9yQ29kZV9JbnZhbGlkEAASGgoWTG9iYnlFcnJvckNvZGVfU3VjY2Vz",
                  "cxABEiUKIUxvYmJ5RXJyb3JDb2RlX1Byb3RvYnVmUGFyc2VFcnJvchALEiUK",
                  "IUxvYmJ5RXJyb3JDb2RlX0ludmFsaWRNZXNzYWdlVHlwZRAMEiYKIkxvYmJ5",
                  "RXJyb3JDb2RlX0ludmFsaWRNZXNzYWdlRmllbGQQDRIhCh1Mb2JieUVycm9y",
                  "Q29kZV9CdWZmZXJPdmVyZmxvdxAOEh8KG0xvYmJ5RXJyb3JDb2RlX1VuYXV0",
                  "aG9yaXplZBAUEhwKGExvYmJ5RXJyb3JDb2RlX0ZvcmJpZGRlbhAVEiQKIExv",
                  "YmJ5RXJyb3JDb2RlX09wZXJhdGlvbkNhbmNlbGVkEB4SIQodTG9iYnlFcnJv",
                  "ckNvZGVfUmVxdWVzdFRpbWVvdXQQHxIjCh9Mb2JieUVycm9yQ29kZV9JbnZh",
                  "bGlkT3BlcmF0aW9uECASGwoXTG9iYnlFcnJvckNvZGVfTm90Rm91bmQQKBIf",
                  "ChtMb2JieUVycm9yQ29kZV9Vc2VyTm90Rm91bmQQKRIgChxMb2JieUVycm9y",
                  "Q29kZV9RdWV1ZU5vdEZvdW5kECoSHwobTG9iYnlFcnJvckNvZGVfRGVja05v",
                  "dEZvdW5kECsSIAocTG9iYnlFcnJvckNvZGVfRXZlbnROb3RGb3VuZBAsEiEK",
                  "HUxvYmJ5RXJyb3JDb2RlX0FscmVhZHlJblF1ZXVlEDISIQodTG9iYnlFcnJv",
                  "ckNvZGVfQWxyZWFkeUluTWF0Y2gQMxIiCh5Mb2JieUVycm9yQ29kZV9EcmFm",
                  "dFN0YXJ0RXJyb3IQPBInCiJMb2JieUVycm9yQ29kZV9JbnRlcm5hbFNlcnZl",
                  "ckVycm9yEPQDEiIKHUxvYmJ5RXJyb3JDb2RlX05vdEltcGxlbWVudGVkEPUD",
                  "EiYKIUxvYmJ5RXJyb3JDb2RlX1NlcnZpY2VVbmF2YWlsYWJsZRD3AyrNAgoS",
                  "TG9iYnlVc2VyU3RhdGVUeXBlEh4KGkxvYmJ5VXNlclN0YXRlVHlwZV9JbnZh",
                  "bGlkEAASGwoXTG9iYnlVc2VyU3RhdGVUeXBlX0lkbGUQARIjCh9Mb2JieVVz",
                  "ZXJTdGF0ZVR5cGVfSm9pbmluZ1F1ZXVlEAISIgoeTG9iYnlVc2VyU3RhdGVU",
                  "eXBlX0pvaW5lZFF1ZXVlEAMSJAogTG9iYnlVc2VyU3RhdGVUeXBlX0Ryb3Bw",
                  "aW5nUXVldWUQBBIgChxMb2JieVVzZXJTdGF0ZVR5cGVfTWF0Y2htYWRlEAoS",
                  "HgoaTG9iYnlVc2VyU3RhdGVUeXBlX0luRHJhZnQQDxIkCiBMb2JieVVzZXJT",
                  "dGF0ZVR5cGVfQ3JlYXRpbmdNYXRjaBAUEiMKH0xvYmJ5VXNlclN0YXRlVHlw",
                  "ZV9QbGF5aW5nTWF0Y2gQFSqiAgoJTWFuYUNvbG9yEhIKDk1hbmFDb2xvcl9O",
                  "b25lEAASEwoPTWFuYUNvbG9yX1doaXRlEAESEgoOTWFuYUNvbG9yX0JsdWUQ",
                  "AhITCg9NYW5hQ29sb3JfQmxhY2sQAxIRCg1NYW5hQ29sb3JfUmVkEAQSEwoP",
                  "TWFuYUNvbG9yX0dyZWVuEAUSFwoTTWFuYUNvbG9yX1BoeXJleGlhbhAGEhUK",
                  "EU1hbmFDb2xvcl9HZW5lcmljEAcSDwoLTWFuYUNvbG9yX1gQCBIPCgtNYW5h",
                  "Q29sb3JfWRAJEhgKFE1hbmFDb2xvcl9Ud29HZW5lcmljEAoSFgoSTWFuYUNv",
                  "bG9yX0FueUNvbG9yEAsSFwoTTWFuYUNvbG9yX0NvbG9ybGVzcxAMKqUBChdN",
                  "YW5hUGF5bWVudFN0cmF0ZWd5VHlwZRIgChxNYW5hUGF5bWVudFN0cmF0ZWd5",
                  "VHlwZV9Ob25lEAASIAocTWFuYVBheW1lbnRTdHJhdGVneVR5cGVfQXV0bxAB",
                  "EiIKHk1hbmFQYXltZW50U3RyYXRlZ3lUeXBlX01hbnVhbBACEiIKHk1hbmFQ",
                  "YXltZW50U3RyYXRlZ3lUeXBlX0xlZ2FjeRADKmkKEU1hbmFTZWxlY3Rpb25U",
                  "eXBlEhoKFk1hbmFTZWxlY3Rpb25UeXBlX05vbmUQABIaChZNYW5hU2VsZWN0",
                  "aW9uVHlwZV9BdXRvEAESHAoYTWFuYVNlbGVjdGlvblR5cGVfTWFudWFsEAIq",
                  "kQIKDE1hbmFTcGVjVHlwZRIVChFNYW5hU3BlY1R5cGVfTm9uZRAAEhoKFk1h",
                  "bmFTcGVjVHlwZV9Gcm9tQmFzaWMQARIbChdNYW5hU3BlY1R5cGVfUHJlZGlj",
                  "dGl2ZRACEhsKF01hbmFTcGVjVHlwZV9SZXN0cmljdGVkEAMSGAoUTWFuYVNw",
                  "ZWNUeXBlX1RyaWdnZXIQBBIdChlNYW5hU3BlY1R5cGVfRnJvbUNyZWF0dXJl",
                  "EAUSGQoVTWFuYVNwZWNUeXBlX0Zyb21Tbm93EAYSHQoZTWFuYVNwZWNUeXBl",
                  "X0RvZXNOb3RFbXB0eRAHEiEKHU1hbmFTcGVjVHlwZV9BZGRpdGlvbmFsRWZm",
                  "ZWN0EAgqwAQKGE1hdGNoQ29tcGxldGVkUmVhc29uVHlwZRIkCiBNYXRjaENv",
                  "bXBsZXRlZFJlYXNvblR5cGVfSW52YWxpZBAAEiQKIE1hdGNoQ29tcGxldGVk",
                  "UmVhc29uVHlwZV9TdWNjZXNzEAESLworTWF0Y2hDb21wbGV0ZWRSZWFzb25U",
                  "eXBlX0ZvcmNlUmVzdWx0UmVxdWVzdBACEiUKIU1hdGNoQ29tcGxldGVkUmVh",
                  "c29uVHlwZV9DYW5jZWxlZBADEi4KKk1hdGNoQ29tcGxldGVkUmVhc29uVHlw",
                  "ZV9QbGF5ZXJKb2luVGltZW91dBAKEjQKME1hdGNoQ29tcGxldGVkUmVhc29u",
                  "VHlwZV9QbGF5ZXJJbmFjdGl2aXR5VGltZW91dBALEjQKME1hdGNoQ29tcGxl",
                  "dGVkUmVhc29uVHlwZV9QbGF5ZXJEaXNjb25uZWN0VGltZW91dBAMEisKJ01h",
                  "dGNoQ29tcGxldGVkUmVhc29uVHlwZV9TeXN0ZW1TaHV0ZG93bhAeEiUKIU1h",
                  "dGNoQ29tcGxldGVkUmVhc29uVHlwZV9HcmVFcnJvchAfEi8KK01hdGNoQ29t",
                  "cGxldGVkUmVhc29uVHlwZV9TZXJ2aWNlRmFicmljRXJyb3IQIRIuCipNYXRj",
                  "aENvbXBsZXRlZFJlYXNvblR5cGVfQ29kZUNvbnRyYWN0RXJyb3IQIhIvCitN",
                  "YXRjaENvbXBsZXRlZFJlYXNvblR5cGVfVW5rbm93blNlcnZlckVycm9yECgq",
                  "7AEKGE1hdGNoQ29udHJvbGxlckV2ZW50VHlwZRIkCiBNYXRjaENvbnRyb2xs",
                  "ZXJFdmVudFR5cGVfSW52YWxpZBAAEjYKMk1hdGNoQ29udHJvbGxlckV2ZW50",
                  "VHlwZV9NYXRjaEdhbWVSb29tU3RhdGVDaGFuZ2VkEAESOAo0TWF0Y2hDb250",
                  "cm9sbGVyRXZlbnRUeXBlX01hdGNoQ29udHJvbGxlclN0YXRlQ2hhbmdlZBAC",
                  "EjgKNE1hdGNoQ29udHJvbGxlckV2ZW50VHlwZV9NYXRjaENvbnRyb2xsZXJI",
                  "ZWFsdGhSZXBvcnQQAyqHAgoUTWF0Y2hDb250cm9sbGVyU3RhdGUSIAocTWF0",
                  "Y2hDb250cm9sbGVyU3RhdGVfSW52YWxpZBAAEiAKHE1hdGNoQ29udHJvbGxl",
                  "clN0YXRlX09wZW5pbmcQARIgChxNYXRjaENvbnRyb2xsZXJTdGF0ZV9SdW5u",
                  "aW5nEAISIwofTWF0Y2hDb250cm9sbGVyU3RhdGVfUmVjb3ZlcmluZxADEiEK",
                  "HU1hdGNoQ29udHJvbGxlclN0YXRlX0RyYWluaW5nEAQSIAocTWF0Y2hDb250",
                  "cm9sbGVyU3RhdGVfQ2xvc2luZxAUEh8KG01hdGNoQ29udHJvbGxlclN0YXRl",
                  "X0Nsb3NlZBAVKqYDChZNYXRjaEdhbWVSb29tU3RhdGVUeXBlEiIKHk1hdGNo",
                  "R2FtZVJvb21TdGF0ZVR5cGVfSW52YWxpZBAAEjIKLk1hdGNoR2FtZVJvb21T",
                  "dGF0ZVR5cGVfV2FpdGluZ0ZvclBsYXllcnNUb0pvaW4QARInCiNNYXRjaEdh",
                  "bWVSb29tU3RhdGVUeXBlX1N0YXJ0UGVuZGluZxACEjMKL01hdGNoR2FtZVJv",
                  "b21TdGF0ZVR5cGVfV2FpdGluZ0ZvckdyZUNvbm5lY3Rpb25zEAMSIgoeTWF0",
                  "Y2hHYW1lUm9vbVN0YXRlVHlwZV9QbGF5aW5nEAUSKQolTWF0Y2hHYW1lUm9v",
                  "bVN0YXRlVHlwZV9NYXRjaENvbXBsZXRlZBAPEjAKLE1hdGNoR2FtZVJvb21T",
                  "dGF0ZVR5cGVfTWF0Y2hSZXN1bHRzUHJvY2Vzc2VkEBQSKgomTWF0Y2hHYW1l",
                  "Um9vbVN0YXRlVHlwZV9HYW1lUm9vbUNsb3NpbmcQFRIpCiVNYXRjaEdhbWVS",
                  "b29tU3RhdGVUeXBlX0dhbWVSb29tQ2xvc2VkEBYqTAoKTWF0Y2hTY29wZRIT",
                  "Cg9NYXRjaFNjb3BlX05vbmUQABITCg9NYXRjaFNjb3BlX0dhbWUQARIUChBN",
                  "YXRjaFNjb3BlX01hdGNoEAIqgQYKFU1hdGNoU2VydmljZUVycm9yQ29kZRIh",
                  "Ch1NYXRjaFNlcnZpY2VFcnJvckNvZGVfSW52YWxpZBAAEiEKHU1hdGNoU2Vy",
                  "dmljZUVycm9yQ29kZV9TdWNjZXNzEAESIgoeTWF0Y2hTZXJ2aWNlRXJyb3JD",
                  "b2RlX0dyZUVycm9yEGQSKwonTWF0Y2hTZXJ2aWNlRXJyb3JDb2RlX09wZXJh",
                  "dGlvbkNhbmNlbGVkEGUSJQohTWF0Y2hTZXJ2aWNlRXJyb3JDb2RlX0ludmFs",
                  "aWRVc2VyEGYSJgoiTWF0Y2hTZXJ2aWNlRXJyb3JDb2RlX0ludmFsaWRTdGF0",
                  "ZRBnEioKJk1hdGNoU2VydmljZUVycm9yQ29kZV9DcmVhdGVSb29tRmFpbGVk",
                  "EGgSJgoiTWF0Y2hTZXJ2aWNlRXJyb3JDb2RlX0F1dGhSZXF1aXJlZBBpEiIK",
                  "Hk1hdGNoU2VydmljZUVycm9yQ29kZV9Ob3RGb3VuZBBqEjcKM01hdGNoU2Vy",
                  "dmljZUVycm9yQ29kZV9TZXJ2aWNlRmFicmljVHJhbnNhY3Rpb25FcnJvchBr",
                  "EiQKIE1hdGNoU2VydmljZUVycm9yQ29kZV9CYWRSZXF1ZXN0EGwSJgoiTWF0",
                  "Y2hTZXJ2aWNlRXJyb3JDb2RlX0dhbWVSb29tRnVsbBBuEicKI01hdGNoU2Vy",
                  "dmljZUVycm9yQ29kZV9Ob3RBdXRob3JpemVkEG8SKAokTWF0Y2hTZXJ2aWNl",
                  "RXJyb3JDb2RlX0J1ZmZlck92ZXJmbG93EHASKwonTWF0Y2hTZXJ2aWNlRXJy",
                  "b3JDb2RlX0ltbXV0YWJsZVByb3BlcnR5EHESJAogTWF0Y2hTZXJ2aWNlRXJy",
                  "b3JDb2RlX1NlcnZlckJ1c3kQchIuCipNYXRjaFNlcnZpY2VFcnJvckNvZGVf",
                  "UmVxdWVzdFF1ZXVlT3ZlcmZsb3cQcxItCihNYXRjaFNlcnZpY2VFcnJvckNv",
                  "ZGVfVW5rbm93blNlcnZlckVycm9yEPQDKpgBCgpNYXRjaFN0YXRlEhMKD01h",
                  "dGNoU3RhdGVfTm9uZRAAEh0KGU1hdGNoU3RhdGVfR2FtZUluUHJvZ3Jlc3MQ",
                  "ARIbChdNYXRjaFN0YXRlX0dhbWVDb21wbGV0ZRACEhwKGE1hdGNoU3RhdGVf",
                  "TWF0Y2hDb21wbGV0ZRADEhsKF01hdGNoU3RhdGVfU2lkZWJvYXJkaW5nEAQq",
                  "mAEKEU1hdGNoV2luQ29uZGl0aW9uEhoKFk1hdGNoV2luQ29uZGl0aW9uX05v",
                  "bmUQABInCiNNYXRjaFdpbkNvbmRpdGlvbl9TaW5nbGVFbGltaW5hdGlvbhAB",
                  "Eh4KGk1hdGNoV2luQ29uZGl0aW9uX0Jlc3Qyb2YzEAISHgoaTWF0Y2hXaW5D",
                  "b25kaXRpb25fQmVzdDNvZjUQAyo5CgdNYXlDYXN0EhgKFE1heUNhc3RfSW5z",
                  "dGFudHNPbmx5EAASFAoQTWF5Q2FzdF9BbnlTcGVsbBABKjkKB01heVBsYXkS",
                  "EgoOTWF5UGxheV9TcGVsbHMQABIaChZNYXlQbGF5X1NwZWxsc0FuZExhbmRz",
                  "EAEqoAQKDE1lY2hhbmljVHlwZRIVChFNZWNoYW5pY1R5cGVfTm9uZRAAEicK",
                  "I01lY2hhbmljVHlwZV9Db21iYXRFbmhhbmNpbmdTb3JjZXJ5EAESJwojTWVj",
                  "aGFuaWNUeXBlX0NvbWJhdEVuaGFuY2luZ0luc3RhbnQQAhIWChJNZWNoYW5p",
                  "Y1R5cGVfSGFzdGUQAxIWChJNZWNoYW5pY1R5cGVfRmxhc2gQBBIuCipNZWNo",
                  "YW5pY1R5cGVfUmVwbGFjZU9wcG9uZW50QmVnaW5uaW5nUGhhc2UQBRIoCiRN",
                  "ZWNoYW5pY1R5cGVfUmVwbGFjZUFJQmVnaW5uaW5nUGhhc2UQBhIjCh9NZWNo",
                  "YW5pY1R5cGVfRGlyZWN0RGFtYWdlUGxheWVyEAcSGAoUTWVjaGFuaWNUeXBl",
                  "X0V2YXNpb24QCRIbChdNZWNoYW5pY1R5cGVfTXVzdEF0dGFjaxAKEhoKFk1l",
                  "Y2hhbmljVHlwZV9NdXN0QmxvY2sQCxInCiNNZWNoYW5pY1R5cGVfQ29tYmF0",
                  "RW5oYW5jaW5nQWJpbGl0eRAMEh4KGk1lY2hhbmljVHlwZV9NYWluMkNyZWF0",
                  "dXJlEA0SLQopTWVjaGFuaWNUeXBlX0RpcmVjdERhbWFnZUNyZWF0dXJlX1Nv",
                  "cmNlcnkQDhItCilNZWNoYW5pY1R5cGVfRGlyZWN0RGFtYWdlQ3JlYXR1cmVf",
                  "SW5zdGFudBAPKn0KDU1lc3NhZ2VJZFR5cGUSFgoSTWVzc2FnZUlkVHlwZV9O",
                  "b25lEAASGAoUTWVzc2FnZUlkVHlwZV9Qcm9tcHQQARIYChRNZXNzYWdlSWRU",
                  "eXBlX0Nob2ljZRACEiAKHE1lc3NhZ2VJZFR5cGVfTG9jYWxpemF0aW9uSWQQ",
                  "AyqKAQoRTWlzY2VsbGFuZW91c1Rlcm0SGgoWTWlzY2VsbGFuZW91c1Rlcm1f",
                  "Tm9uZRAAEhoKFk1pc2NlbGxhbmVvdXNUZXJtX1NjcnkQARIeChpNaXNjZWxs",
                  "YW5lb3VzVGVybV9IaXN0b3JpYxACEh0KGU1pc2NlbGxhbmVvdXNUZXJtX1N1",
                  "cnZlaWwQAyplCg5NdWxsaWdhbk9wdGlvbhIXChNNdWxsaWdhbk9wdGlvbl9O",
                  "b25lEAASGwoXTXVsbGlnYW5PcHRpb25fTXVsbGlnYW4QARIdChlNdWxsaWdh",
                  "bk9wdGlvbl9BY2NlcHRIYW5kEAIqWQoMTXVsbGlnYW5UeXBlEhUKEU11bGxp",
                  "Z2FuVHlwZV9Ob25lEAASFgoSTXVsbGlnYW5UeXBlX1BhcmlzEAESGgoWTXVs",
                  "bGlnYW5UeXBlX1ZhbmNvdXZlchACKrICCg1PcHRpb25Db250ZXh0EhYKEk9w",
                  "dGlvbkNvbnRleHRfTm9uZRAAEh0KGU9wdGlvbkNvbnRleHRfTWFuYUFiaWxp",
                  "dHkQARIZChVPcHRpb25Db250ZXh0X1BheW1lbnQQAhIaChZPcHRpb25Db250",
                  "ZXh0X1N0YWNraW5nEAMSGwoXT3B0aW9uQ29udGV4dF9UYXJnZXRpbmcQBBIc",
                  "ChhPcHRpb25Db250ZXh0X1Jlc29sdXRpb24QBRIbChdPcHRpb25Db250ZXh0",
                  "X1R1cm5CYXNlZBAGEh0KGU9wdGlvbkNvbnRleHRfUmVwbGFjZW1lbnQQBxIe",
                  "ChpPcHRpb25Db250ZXh0X0FjdGl2YXRlQ2FzdBAIEhwKGE9wdGlvbkNvbnRl",
                  "eHRfVHVybkZhY2VVcBAJKmUKDk9wdGlvblJlc3BvbnNlEhcKE09wdGlvblJl",
                  "c3BvbnNlX05vbmUQABIcChhPcHRpb25SZXNwb25zZV9BbGxvd19ZZXMQARIc",
                  "ChhPcHRpb25SZXNwb25zZV9DYW5jZWxfTm8QAirrAwoKT3B0aW9uVHlwZRIT",
                  "Cg9PcHRpb25UeXBlX05vbmUQABIUChBPcHRpb25UeXBlX01vZGFsEAESFQoR",
                  "T3B0aW9uVHlwZV9TcGxpY2UQAhIeChpPcHRpb25UeXBlX0FsdGVybmF0aXZl",
                  "Q29zdBADEhYKEk9wdGlvblR5cGVfTnVtZXJpYxAEEhsKF09wdGlvblR5cGVf",
                  "VmFyaWFibGVDb3N0EAUSFwoTT3B0aW9uVHlwZV9NYW5hVHlwZRAGEhQKEE9w",
                  "dGlvblR5cGVfT3JkZXIQBxIVChFPcHRpb25UeXBlX1NlYXJjaBAIEhQKEE9w",
                  "dGlvblR5cGVfR3JvdXAQCRIVChFPcHRpb25UeXBlX1NlbGVjdBAKEhoKFk9w",
                  "dGlvblR5cGVfU2VsZWN0R3JvdXAQCxIbChdPcHRpb25UeXBlX0Rpc3RyaWJ1",
                  "dGlvbhAMEh0KGU9wdGlvblR5cGVfT3B0aW9uYWxBY3Rpb24QDRIfChtPcHRp",
                  "b25UeXBlX0FjdGlvbnNBdmFpbGFibGUQDhIfChtPcHRpb25UeXBlX1NlbGVj",
                  "dEZyb21Hcm91cHMQDxIfChtPcHRpb25UeXBlX1NlYXJjaEZyb21Hcm91cHMQ",
                  "EBIYChRPcHRpb25UeXBlX0dhdGhlcmluZxARKn4KFU9yZGVyQ29tYmF0RGFt",
                  "YWdlVHlwZRIeChpPcmRlckNvbWJhdERhbWFnZVR5cGVfTm9uZRAAEiIKHk9y",
                  "ZGVyQ29tYmF0RGFtYWdlVHlwZV9BdHRhY2tlchABEiEKHU9yZGVyQ29tYmF0",
                  "RGFtYWdlVHlwZV9CbG9ja2VyEAIqdgoPT3JkZXJpbmdDb250ZXh0EhgKFE9y",
                  "ZGVyaW5nQ29udGV4dF9Ob25lEAASJQohT3JkZXJpbmdDb250ZXh0X09yZGVy",
                  "aW5nRm9yQm90dG9tEAESIgoeT3JkZXJpbmdDb250ZXh0X09yZGVyaW5nRm9y",
                  "VG9wEAIqtQYKFE9yZGVyaW5nRnVuY3Rpb25UeXBlEh0KGU9yZGVyaW5nRnVu",
                  "Y3Rpb25UeXBlX05vbmUQABImCiJPcmRlcmluZ0Z1bmN0aW9uVHlwZV9Db25z",
                  "dGFudFZhbHVlEAESJAogT3JkZXJpbmdGdW5jdGlvblR5cGVfT2JqZWN0U2Nv",
                  "cmUQAhIqCiZPcmRlcmluZ0Z1bmN0aW9uVHlwZV9DaGVja0NhcmRNZWNoYW5p",
                  "YxADEiYKIk9yZGVyaW5nRnVuY3Rpb25UeXBlX0NoZWNrQmxvY2tlcnMQBBIn",
                  "CiNPcmRlcmluZ0Z1bmN0aW9uVHlwZV9DaGVja0F0dGFja2VycxAFEjcKM09y",
                  "ZGVyaW5nRnVuY3Rpb25UeXBlX0NoZWNrQ2FyZE1lY2hhbmljSWZOb0F0dGFj",
                  "a2VycxAGEi0KKU9yZGVyaW5nRnVuY3Rpb25UeXBlX0NoZWNrQWJpbGl0eU1l",
                  "Y2hhbmljEAcSOgo2T3JkZXJpbmdGdW5jdGlvblR5cGVfQ2hlY2tBYmlsaXR5",
                  "TWVjaGFuaWNJZk5vQXR0YWNrZXJzEAgSNQoxT3JkZXJpbmdGdW5jdGlvblR5",
                  "cGVfQ2hlY2tQcmVkZWZpbmVkQ2FyZE1lY2hhbmljcxAJEjgKNE9yZGVyaW5n",
                  "RnVuY3Rpb25UeXBlX0NoZWNrUHJlZGVmaW5lZEFiaWxpdHlNZWNoYW5pY3MQ",
                  "ChJCCj5PcmRlcmluZ0Z1bmN0aW9uVHlwZV9DaGVja1ByZWRlZmluZWRDYXJk",
                  "TWVjaGFuaWNzSWZOb0F0dGFja2VycxALEkUKQU9yZGVyaW5nRnVuY3Rpb25U",
                  "eXBlX0NoZWNrUHJlZGVmaW5lZEFiaWxpdHlNZWNoYW5pY3NJZk5vQXR0YWNr",
                  "ZXJzEAwSIQodT3JkZXJpbmdGdW5jdGlvblR5cGVfTXVsbGlnYW4QDRIhCh1P",
                  "cmRlcmluZ0Z1bmN0aW9uVHlwZV9QbGF5TGFuZBAOEigKJE9yZGVyaW5nRnVu",
                  "Y3Rpb25UeXBlX0NoZWNrSGFzQWJpbGl0eRAPEiMKH09yZGVyaW5nRnVuY3Rp",
                  "b25UeXBlX01hbmFTZWxlY3QQECqLBAoTT3JkZXJpbmdQYXJhbWV0ZXJJZBIc",
                  "ChhPcmRlcmluZ1BhcmFtZXRlcklkX05vbmUQABInCiNPcmRlcmluZ1BhcmFt",
                  "ZXRlcklkX0Jlc3RTaW5nbGVCbG9jaxABEicKI09yZGVyaW5nUGFyYW1ldGVy",
                  "SWRfR29vZFNpbmdsZUJsb2NrEAISJwojT3JkZXJpbmdQYXJhbWV0ZXJJZF9H",
                  "b29kU2luZ2xlVHJhZGUQAxImCiJPcmRlcmluZ1BhcmFtZXRlcklkX0dvb2RN",
                  "dWx0aVRyYWRlEAQSIgoeT3JkZXJpbmdQYXJhbWV0ZXJJZF9DaHVtcEJsb2Nr",
                  "EAUSIwofT3JkZXJpbmdQYXJhbWV0ZXJJZF9QbGF5ZXJEZWF0aBAGEiEKHU9y",
                  "ZGVyaW5nUGFyYW1ldGVySWRfTXVzdEJsb2NrEAcSKQolT3JkZXJpbmdQYXJh",
                  "bWV0ZXJJZF9BdHRhY2tXaXRoRXZhc2lvbhAJEiIKHk9yZGVyaW5nUGFyYW1l",
                  "dGVySWRfTXVzdEF0dGFjaxAKEiYKIk9yZGVyaW5nUGFyYW1ldGVySWRfRmF2",
                  "b3JhYmxlVHJhZGUQCxIoCiRPcmRlcmluZ1BhcmFtZXRlcklkX1VuZmF2b3Jh",
                  "YmxlVHJhZGUQDBImCiJPcmRlcmluZ1BhcmFtZXRlcklkX09wcG9uZW50RGFt",
                  "YWdlEA0qswEKDE9yZGVyaW5nVHlwZRIVChFPcmRlcmluZ1R5cGVfTm9uZRAA",
                  "EiEKHU9yZGVyaW5nVHlwZV9PcmRlckFzSW5kaWNhdGVkEAESIwofT3JkZXJp",
                  "bmdUeXBlX09yZGVyQXJiaXRyYXJ5T25jZRACEiUKIU9yZGVyaW5nVHlwZV9P",
                  "cmRlckFyYml0cmFyeUFsd2F5cxADEh0KGU9yZGVyaW5nVHlwZV9Qcm9tcHRB",
                  "bHdheXMQBCreAQoNUGFyYW1ldGVyVHlwZRIWChJQYXJhbWV0ZXJUeXBlX05v",
                  "bmUQABIkCiBQYXJhbWV0ZXJUeXBlX05vbkxvY2FsaXplZFN0cmluZxABEhgK",
                  "FFBhcmFtZXRlclR5cGVfTnVtYmVyEAISGwoXUGFyYW1ldGVyVHlwZV9SZWZl",
                  "cmVuY2UQAxIgChxQYXJhbWV0ZXJUeXBlX1JlcGVhdGVkTnVtYmVyEAQSGgoW",
                  "UGFyYW1ldGVyVHlwZV9Qcm9tcHRJZBAFEhoKFlBhcmFtZXRlclR5cGVfUHJp",
                  "b3JpdHkQBipRChBQZXJmb3JtQWN0aW9uRm9yEh4KGlBlcmZvcm1BY3Rpb25G",
                  "b3JfQXR0YWNrZXJzEAASHQoZUGVyZm9ybUFjdGlvbkZvcl9CbG9ja2VycxAB",
                  "KnIKBVBoYXNlEg4KClBoYXNlX05vbmUQABITCg9QaGFzZV9CZWdpbm5pbmcQ",
                  "ARIPCgtQaGFzZV9NYWluMRACEhAKDFBoYXNlX0NvbWJhdBADEg8KC1BoYXNl",
                  "X01haW4yEAQSEAoMUGhhc2VfRW5kaW5nEAUqXAoIUGxheWVySXMSEQoNUGxh",
                  "eWVySXNfTm9uZRAAEhUKEVBsYXllcklzX0RvbnRDYXJlEAESDwoLUGxheWVy",
                  "SXNfQUkQAhIVChFQbGF5ZXJJc19PcHBvbmVudBADKj4KDFBsYXllck9yVGVh",
                  "bRIXChNQbGF5ZXJPclRlYW1fUGxheWVyEAASFQoRUGxheWVyT3JUZWFtX1Rl",
                  "YW0QASpfCg1QcmVzZW5jZVN0YXRlEhkKFVByZXNlbmNlU3RhdGVfSW52YWxp",
                  "ZBAAEhkKFVByZXNlbmNlU3RhdGVfT2ZmbGluZRABEhgKFFByZXNlbmNlU3Rh",
                  "dGVfT25saW5lEAIqtCoKDVByb21wdE1lc3NhZ2USFgoSUHJvbXB0TWVzc2Fn",
                  "ZV9Ob25lEAASIgoeUHJvbXB0TWVzc2FnZV9HYW1lU3RhdGVNZXNzYWdlEAES",
                  "JQohUHJvbXB0TWVzc2FnZV9BY3Rpb25zQXZhaWxhYmxlUmVxEAISIAocUHJv",
                  "bXB0TWVzc2FnZV9JbGxlZ2FsUmVxdWVzdBADEhwKGFByb21wdE1lc3NhZ2Vf",
                  "TWF0Y2hTdGF0ZRAEEhsKF1Byb21wdE1lc3NhZ2VfT3B0aW9uUmVxEAUSJQoh",
                  "UHJvbXB0TWVzc2FnZV9EZWNsYXJlQXR0YWNrZXJzUmVxEAYSJAogUHJvbXB0",
                  "TWVzc2FnZV9EZWNsYXJlQmxvY2tlcnNSZXEQBxIhCh1Qcm9tcHRNZXNzYWdl",
                  "X0Fzc2lnbkRhbWFnZVJlcRAIEiYKIlByb21wdE1lc3NhZ2VfT3JkZXJDb21i",
                  "YXREYW1hZ2VSZXEQCRIiCh5Qcm9tcHRNZXNzYWdlX1NlbGVjdFRhcmdldHNS",
                  "ZXEQChIcChhQcm9tcHRNZXNzYWdlX1BheUNvc3RSZXEQCxIiCh5Qcm9tcHRN",
                  "ZXNzYWdlX0ludmFsaWRTZWxlY3Rpb24QDBIhCh1Qcm9tcHRNZXNzYWdlX0lu",
                  "dmFsaWRPcmRlcmluZxANEhkKFVByb21wdE1lc3NhZ2VfRGlzY2FyZBAOEi8K",
                  "K1Byb21wdE1lc3NhZ2VfV2FpdGluZ0ZvckFjdGlvbnNBdmFpbGFibGVSZXEQ",
                  "DxIvCitQcm9tcHRNZXNzYWdlX1dhaXRpbmdGb3JEZWNsYXJlQXR0YWNrZXJz",
                  "UmVxEBASLgoqUHJvbXB0TWVzc2FnZV9XYWl0aW5nRm9yRGVjbGFyZUJsb2Nr",
                  "ZXJzUmVxEBESKwonUHJvbXB0TWVzc2FnZV9XYWl0aW5nRm9yQXNzaWduRGFt",
                  "YWdlUmVxEBISMAosUHJvbXB0TWVzc2FnZV9XYWl0aW5nRm9yT3JkZXJDb21i",
                  "YXREYW1hZ2VSZXEQExIsCihQcm9tcHRNZXNzYWdlX1dhaXRpbmdGb3JTZWxl",
                  "Y3RUYXJnZXRzUmVxEBQSJgoiUHJvbXB0TWVzc2FnZV9XYWl0aW5nRm9yUGF5",
                  "Q29zdFJlcRAVEiMKH1Byb21wdE1lc3NhZ2VfV2FpdGluZ0ZvckRpc2NhcmQQ",
                  "FhIiCh5Qcm9tcHRNZXNzYWdlX1NlbGVjdE9wdGlvbnNSZXEQFxIsCihQcm9t",
                  "cHRNZXNzYWdlX1dhaXRpbmdGb3JTZWxlY3RPcHRpb25zUmVxEBgSIwofUHJv",
                  "bXB0TWVzc2FnZV9HYW1lUmVzdWx0V2luTG9zcxAZEiAKHFByb21wdE1lc3Nh",
                  "Z2VfR2FtZVJlc3VsdERyYXcQGhIkCiBQcm9tcHRNZXNzYWdlX01hdGNoUmVz",
                  "dWx0V2luTG9zcxAbEiEKHVByb21wdE1lc3NhZ2VfTWF0Y2hSZXN1bHREcmF3",
                  "EBwSKAokUHJvbXB0TWVzc2FnZV9JbnRlcm1pc3Npb25SZXZlYWxIYW5kEB0S",
                  "JgoiUHJvbXB0TWVzc2FnZV9JbnRlcm1pc3Npb25EcmF3Q2FyZBAeEi8KK1By",
                  "b21wdE1lc3NhZ2VfSW50ZXJtaXNzaW9uQmVnaW5TaWRlYm9hcmRpbmcQHxIg",
                  "ChxQcm9tcHRNZXNzYWdlX0Nob29zZVN0YXJ0aW5nECASKgomUHJvbXB0TWVz",
                  "c2FnZV9XYWl0aW5nRm9yQ2hvb3NlU3RhcnRpbmcQIRImCiJQcm9tcHRNZXNz",
                  "YWdlX011bGxpZ2FuT3JBY2NlcHRIYW5kECISMAosUHJvbXB0TWVzc2FnZV9X",
                  "YWl0aW5nRm9yTXVsbGlnYW5PckFjY2VwdEhhbmQQIxIcChhQcm9tcHRNZXNz",
                  "YWdlX011bGxpZ2FuZWQQJBIeChpQcm9tcHRNZXNzYWdlX0FjY2VwdGVkSGFu",
                  "ZBAlEiAKHFByb21wdE1lc3NhZ2VfQ2hvaWNlTXVsbGlnYW4QJhIcChhQcm9t",
                  "cHRNZXNzYWdlX0Nob2ljZUtlZXAQJxIaChZQcm9tcHRNZXNzYWdlX0dyb3Vw",
                  "UmVxECgSJAogUHJvbXB0TWVzc2FnZV9XYWl0aW5nRm9yR3JvdXBSZXEQKRIa",
                  "ChZQcm9tcHRNZXNzYWdlX09yZGVyUmVxECoSJAogUHJvbXB0TWVzc2FnZV9X",
                  "YWl0aW5nRm9yT3JkZXJSZXEQKxIhCh1Qcm9tcHRNZXNzYWdlX1NlbGVjdE5H",
                  "cm91cFJlcRAsEisKJ1Byb21wdE1lc3NhZ2VfV2FpdGluZ0ZvclNlbGVjdE5H",
                  "cm91cFJlcRAtEhoKFlByb21wdE1lc3NhZ2VfQ29pbkZsaXAQLhIdChlQcm9t",
                  "cHRNZXNzYWdlX0Nob2ljZUhlYWRzEC8SHQoZUHJvbXB0TWVzc2FnZV9DaG9p",
                  "Y2VUYWlscxAwEiUKIVByb21wdE1lc3NhZ2VfV2FpdGluZ0ZvclNlYXJjaFJl",
                  "cRAxEi0KKVByb21wdE1lc3NhZ2VfV2FpdGluZ0Zvck9wdGlvbmFsQWN0aW9u",
                  "UmVxEDISGgoWUHJvbXB0TWVzc2FnZV9YQ29zdFJlcRAzEiYKIlByb21wdE1l",
                  "c3NhZ2VfV2FpdGluZ0Zvck51bWVyaWNSZXEQNBInCiNQcm9tcHRNZXNzYWdl",
                  "X01pbmltdW1CbG9ja2Vyc05vdE1ldBA1EiIKHlByb21wdE1lc3NhZ2VfRG9N",
                  "b2R1bGFyQWJpbGl0eRA2EiwKKFByb21wdE1lc3NhZ2VfV2FpdGluZ0ZvckRv",
                  "TW9kdWxhckFiaWxpdHkQNxIlCiFQcm9tcHRNZXNzYWdlX01vdmVDb3VudGVy",
                  "c01lc3NhZ2UQOBIoCiRQcm9tcHRNZXNzYWdlX1dhaXRpbmdGb3JNb3ZlQ291",
                  "bnRlcnMQORIbChdQcm9tcHRNZXNzYWdlX0RvUmVjb3ZlchA6EiUKIVByb21w",
                  "dE1lc3NhZ2VfV2FpdGluZ0ZvckRvUmVjb3ZlchA7Eh8KG1Byb21wdE1lc3Nh",
                  "Z2VfRG9FY2hvUGF5bWVudBA8EikKJVByb21wdE1lc3NhZ2VfV2FpdGluZ0Zv",
                  "ckRvRWNob1BheW1lbnQQPRIiCh5Qcm9tcHRNZXNzYWdlX0RvUHJvdm9rZUFi",
                  "aWxpdHkQPhIsCihQcm9tcHRNZXNzYWdlX1dhaXRpbmdGb3JEb1Byb3Zva2VB",
                  "YmlsaXR5ED8SIgoeUHJvbXB0TWVzc2FnZV9Eb0Nhc2NhZGVBYmlsaXR5EEAS",
                  "LAooUHJvbXB0TWVzc2FnZV9XYWl0aW5nRm9yRG9DYXNjYWRlQWJpbGl0eRBB",
                  "Eh0KGVByb21wdE1lc3NhZ2VfRG9Tb3Vsc2hpZnQQQhIlCiFQcm9tcHRNZXNz",
                  "YWdlX1dhaXRpbmdGb3JTb3Vsc2hpZnQQQxIuCipQcm9tcHRNZXNzYWdlX0Fw",
                  "cGx5UGxhbmVzd2Fsa2VyUmVkaXJlY3Rpb24QRBI1CjFQcm9tcHRNZXNzYWdl",
                  "X1dhaXRpbmdGb3JBcHBseVBsYW5lc3dhbGtlclJlZGlyZWN0EEUSKAokUHJv",
                  "bXB0TWVzc2FnZV9QbGFuZXN3YWxrZXJVbmlxdWVuZXNzEEYSMgouUHJvbXB0",
                  "TWVzc2FnZV9XYWl0aW5nRm9yUGxhbmVzd2Fsa2VyVW5pcXVlbmVzcxBHEhwK",
                  "GFByb21wdE1lc3NhZ2VfTGVnZW5kUnVsZRBIEiYKIlByb21wdE1lc3NhZ2Vf",
                  "V2FpdGluZ0ZvckxlZ2VuZFJ1bGUQSRIjCh9Qcm9tcHRNZXNzYWdlX1NlbGVj",
                  "dFJlcGxhY2VtZW50EEoSLQopUHJvbXB0TWVzc2FnZV9XYWl0aW5nRm9yU2Vs",
                  "ZWN0UmVwbGFjZW1lbnQQSxIeChpQcm9tcHRNZXNzYWdlX0FwcGx5VW5sZWFz",
                  "aBBMEiMKH1Byb21wdE1lc3NhZ2VfV2FpdGluZ0ZvclVubGVhc2gQTRIkCiBQ",
                  "cm9tcHRNZXNzYWdlX0Nob29zZU9iamVjdFRvQ29weRBOEi4KKlByb21wdE1l",
                  "c3NhZ2VfV2FpdGluZ0ZvckNob29zZU9iamVjdFRvQ29weRBPEiMKH1Byb21w",
                  "dE1lc3NhZ2VfU2VsZWN0TWFuYVR5cGVSZXEQUBItCilQcm9tcHRNZXNzYWdl",
                  "X1dhaXRpbmdGb3JTZWxlY3RNYW5hVHlwZVJlcRBREisKJ1Byb21wdE1lc3Nh",
                  "Z2VfV2FpdGluZ0ZvckRpc3RyaWJ1dGlvblJlcRBSEiAKHFByb21wdE1lc3Nh",
                  "Z2VfQ2hvb3NlTW9kYWxSZXEQUxIqCiZQcm9tcHRNZXNzYWdlX1dhaXRpbmdG",
                  "b3JDaG9vc2VNb2RhbFJlcRBUEi4KKlByb21wdE1lc3NhZ2VfT3JkZXJPYmpl",
                  "Y3RFbnRlcmluZ0dyYXZleWFyZBBVEiwKKFByb21wdE1lc3NhZ2VfT3JkZXJP",
                  "YmplY3RFbnRlcmluZ0xpYnJhcnkQVhIzCi9Qcm9tcHRNZXNzYWdlX1dhaXRp",
                  "bmdGb3JPcmRlck9iamVjdEVudGVyaW5nWm9uZRBXEiwKKFByb21wdE1lc3Nh",
                  "Z2VfQ2hvb3NlQ3JlYXR1cmVzRm9yQ29uc3BpcmUQWBIdChlQcm9tcHRNZXNz",
                  "YWdlX0FwcGx5RHJlZGdlEFkSIgoeUHJvbXB0TWVzc2FnZV9XYWl0aW5nRm9y",
                  "RHJlZGdlEFoSMAosUHJvbXB0TWVzc2FnZV9PcmRlck9iamVjdEVudGVyaW5n",
                  "QmF0dGxlZmllbGQQWxIWChJQcm9tcHRNZXNzYWdlX1NjcnkQXBIgChxQcm9t",
                  "cHRNZXNzYWdlX1dhaXRpbmdGb3JTY3J5EF0SHwobUHJvbXB0TWVzc2FnZV9V",
                  "bnBheWFibGVDb3N0EF4SJAogUHJvbXB0TWVzc2FnZV9DYXN0Rm9yTWFkbmVz",
                  "c0Nvc3QQXxIfChtQcm9tcHRNZXNzYWdlX1NhY3JpZmljZUNsdWUQYBIlCiFQ",
                  "cm9tcHRNZXNzYWdlX1NlbGVjdEZyb21Hcm91cHNSZXEQYRIvCitQcm9tcHRN",
                  "ZXNzYWdlX1dhaXRpbmdGb3JTZWxlY3RGcm9tR3JvdXBzUmVxEGISKQolUHJv",
                  "bXB0TWVzc2FnZV9TZWxlY3RQZXJtYW5lbnRzVG9VbnRhcBBjEjMKL1Byb21w",
                  "dE1lc3NhZ2VfV2FpdGluZ0ZvclNlbGVjdFBlcm1hbmVudHNUb1VudGFwEGQS",
                  "LQopUHJvbXB0TWVzc2FnZV9VbmJvdW5kZWRMb29wRGV0ZWN0ZWRBY3RpdmUQ",
                  "ZRIwCixQcm9tcHRNZXNzYWdlX1VuYm91bmRlZExvb3BEZXRlY3RlZE5vdEFj",
                  "dGl2ZRBmEiYKIlByb21wdE1lc3NhZ2VfSW5maW5pdGVMb29wRGV0ZWN0ZWQQ",
                  "ZxIjCh9Qcm9tcHRNZXNzYWdlX0NsaWNrT0tUb0NvbnRpbnVlEGgSIgoeUHJv",
                  "bXB0TWVzc2FnZV9XYWl0aW5nRm9yUGxheWVyEGkSGwoXUHJvbXB0TWVzc2Fn",
                  "ZV9HYXRoZXJSZXEQahIlCiFQcm9tcHRNZXNzYWdlX1dhaXRpbmdGb3JHYXRo",
                  "ZXJSZXEQaxI9CjlQcm9tcHRNZXNzYWdlX1NlbGVjdFpvbmVGb3JNdXR1YWxs",
                  "eUV4Y2x1c2l2ZVpvbmVUcmFuc2ZlcnMQbBI/CjtQcm9tcHRNZXNzYWdlX1dh",
                  "aXRpbmdGb3JQbGF5ZXJUb1NlbGVjdE11dHVhbGx5RXhjbHVzaXZlWm9uZRBt",
                  "EiUKIVByb21wdE1lc3NhZ2VfUHV0T3JSZW1vdmVDb3VudGVycxBuEiUKIVBy",
                  "b21wdE1lc3NhZ2VfU2VsZWN0Wm9uZXNUb1NlYXJjaBBvEh4KGlByb21wdE1l",
                  "c3NhZ2VfQ2hvb3NlQWN0aW9uEHASKQolUHJvbXB0TWVzc2FnZV9DaG9vc2VU",
                  "YXJnZXRGb3JOZXh0Q29weRBxEisKJ1Byb21wdE1lc3NhZ2VfUGVyZm9ybU9w",
                  "ZW5pbmdIYW5kQWN0aW9ucxByEi0KKVByb21wdE1lc3NhZ2VfRG9FeHBsb3Jl",
                  "UHV0Q2FyZEluR3JhdmV5YXJkEHMSNQoxUHJvbXB0TWVzc2FnZV9XYWl0aW5n",
                  "Rm9yRXhwbG9yZVB1dENhcmRJbkdyYXZleWFyZBB0Ei4KKlByb21wdE1lc3Nh",
                  "Z2VfV2FybmluZ19JbnN1ZmZpY2llbnRCbG9ja2VycxB1Eh4KGlByb21wdE1l",
                  "c3NhZ2VfQ2hvb3NlQUNvbG9yEHYSMQotUHJvbXB0TWVzc2FnZV9XYXJuaW5n",
                  "X0Jsb2NrZXJDYW5ub3RCbG9ja0Fsb25lEHcSMwovUHJvbXB0TWVzc2FnZV9X",
                  "YXJuaW5nX0F0dGFja2VyQ2Fubm90QXR0YWNrQWxvbmUQeBIvCitQcm9tcHRN",
                  "ZXNzYWdlX1dhcm5pbmdfQXR0YWNrZXJNdXN0QmVCbG9ja2VkEHkSMgouUHJv",
                  "bXB0TWVzc2FnZV9XYXJuaW5nX011c3RBdHRhY2tXaXRoQXRMZWFzdE9uZRB6",
                  "EiIKHlByb21wdE1lc3NhZ2VfU2VsZWN0QW5BdHRhY2tlZRB7EiQKIFByb21w",
                  "dE1lc3NhZ2VfV2FybmluZ19NdXN0QXR0YWNrEHwSIwofUHJvbXB0TWVzc2Fn",
                  "ZV9XYXJuaW5nX011c3RCbG9jaxB9EioKJlByb21wdE1lc3NhZ2VfQ2l0eXNC",
                  "bGVzc2luZ0Rlc2lnbmF0aW9uEH4SMgouUHJvbXB0TWVzc2FnZV9Bc3NpZ25E",
                  "YW1hZ2VSZXFDYW5JZ25vcmVCbG9ja2VycxB/EiMKHlByb21wdE1lc3NhZ2Vf",
                  "U2VsZWN0QW5BdHRhY2hlZRCAARIaChVQcm9tcHRNZXNzYWdlX1N1cnZlaWwQ",
                  "gQESNQowUHJvbXB0TWVzc2FnZV9XYXJuaW5nX0F0dGFja2VyTXVzdEJlQmxv",
                  "Y2tlZEJ5QWxsEIIBEh8KGlByb21wdE1lc3NhZ2VfUGxhY2Vob2xkZXIxEIMB",
                  "Eh8KGlByb21wdE1lc3NhZ2VfUGxhY2Vob2xkZXIyEIQBEh8KGlByb21wdE1l",
                  "c3NhZ2VfUGxhY2Vob2xkZXIzEIUBEh8KGlByb21wdE1lc3NhZ2VfUGxhY2Vo",
                  "b2xkZXI0EIYBEh8KGlByb21wdE1lc3NhZ2VfUGxhY2Vob2xkZXI1EIcBKkUK",
                  "DlByb21wdFByaW9yaXR5EhcKE1Byb21wdFByaW9yaXR5X05vbmUQABIaChZQ",
                  "cm9tcHRQcmlvcml0eV9QZXJzaXN0EAEqrgcKDFByb3RvVmVyc2lvbhIVChFQ",
                  "cm90b1ZlcnNpb25fTm9uZRAAEh8KG1Byb3RvVmVyc2lvbl9IaUZpR2FtZVN0",
                  "YXRlcxABEiQKIFByb3RvVmVyc2lvbl9QcmV2aW91c0dhbWVTdGF0ZUlkEAIS",
                  "FwoTUHJvdG9WZXJzaW9uX1RpbWVycxADEiAKHFByb3RvVmVyc2lvbl9NYW5h",
                  "UmVxdWlyZW1lbnQQBBIfChtQcm90b1ZlcnNpb25fQXV0b1RhcEFjdGlvbnMQ",
                  "BRIbChdQcm90b1ZlcnNpb25fVUlNZXNzYWdlcxAGEiQKIFByb3RvVmVyc2lv",
                  "bl9BdXRvVGFwU3RvcHNTZXR0aW5nEAcSHQoZUHJvdG9WZXJzaW9uX1NpZGVi",
                  "b2FyZGluZxAIEjcKM1Byb3RvVmVyc2lvbl9BdXRvT3B0aW9uYWxQYXltZW50",
                  "Q2FuY2VsbGF0aW9uU2V0dGluZxAJEh0KGVByb3RvVmVyc2lvbl9Db3N0Q2F0",
                  "ZWdvcnkQChIZChVQcm90b1ZlcnNpb25fVGltZXJzVjIQCxIYChRQcm90b1Zl",
                  "cnNpb25fQ29udHJvbBAMEhkKFVByb3RvVmVyc2lvbl9UaW1lcnNWMxANEh8K",
                  "G1Byb3RvVmVyc2lvbl9BdXRvQWNjZXB0SGFuZBAOEhkKFVByb3RvVmVyc2lv",
                  "bl9UaW1lcnNWNBAPEhkKFVByb3RvVmVyc2lvbl9UaW1lcnNWNRAQEigKJFBy",
                  "b3RvVmVyc2lvbl9NYW5hUGF5bWVudFN0cmF0ZWd5VHlwZRAREhkKFVByb3Rv",
                  "VmVyc2lvbl9UaW1lcnNWNhASEhkKFVByb3RvVmVyc2lvbl9UaW1lcnNWNxAT",
                  "EhkKFVByb3RvVmVyc2lvbl9UaW1lcnNWOBAUEh8KG1Byb3RvVmVyc2lvbl9U",
                  "cmFuc2llbnRTdG9wcxAVEhoKFlByb3RvVmVyc2lvbl9Db3NtZXRpY3MQFhIb",
                  "ChdQcm90b1ZlcnNpb25fUmVzdWx0U3BlYxAXEh0KGVByb3RvVmVyc2lvbl9S",
                  "ZXN1bHRSZWFzb24QGBIcChhQcm90b1ZlcnNpb25fU3VwZXJGb3JtYXQQGRIt",
                  "CilQcm90b1ZlcnNpb25fQXV0b1NlbGVjdFJlcGxhY2VtZW50U2V0dGluZxAa",
                  "Eh0KGVByb3RvVmVyc2lvbl9NdWxsaWdhblR5cGUQGxIjCh9Qcm90b1ZlcnNp",
                  "b25fUGVuZGluZ01lc3NhZ2VUeXBlEBwqhBAKEVF1YWxpZmljYXRpb25UeXBl",
                  "EhoKFlF1YWxpZmljYXRpb25UeXBlX05vbmUQABIgChxRdWFsaWZpY2F0aW9u",
                  "VHlwZV9Db3N0VG9DYXN0EAESJQohUXVhbGlmaWNhdGlvblR5cGVfQ2FudEJl",
                  "Q291bnRlcmVkEAoSJQohUXVhbGlmaWNhdGlvblR5cGVfQ2FudEJlQWN0aXZh",
                  "dGVkEAsSJwojUXVhbGlmaWNhdGlvblR5cGVfQ2FudEJlUmVnZW5lcmF0ZWQQ",
                  "DBIlCiFRdWFsaWZpY2F0aW9uVHlwZV9DYW50QmVFbmNoYW50ZWQQDRIkCiBR",
                  "dWFsaWZpY2F0aW9uVHlwZV9DYW50QmVFcXVpcHBlZBAOEiUKIVF1YWxpZmlj",
                  "YXRpb25UeXBlX0NhbnRCZURlc3Ryb3llZBAPEiUKIVF1YWxpZmljYXRpb25U",
                  "eXBlX0NhbnRCZVByZXZlbnRlZBAQEicKI1F1YWxpZmljYXRpb25UeXBlX0Nh",
                  "bnRCZVRoZVRhcmdldE9mEBESJgoiUXVhbGlmaWNhdGlvblR5cGVfQ2FudEJl",
                  "U2FjcmlmaWNlZBATEicKI1F1YWxpZmljYXRpb25UeXBlX0NhbnRHZW5lcmlj",
                  "RWZmZWN0EBQSHwobUXVhbGlmaWNhdGlvblR5cGVfQ2FudFVudGFwEBUSHgoa",
                  "UXVhbGlmaWNhdGlvblR5cGVfQ2FudERyYXcQFhIeChpRdWFsaWZpY2F0aW9u",
                  "VHlwZV9DYW50UGxheRAXEh8KG1F1YWxpZmljYXRpb25UeXBlX0NhbnRDeWNs",
                  "ZRAYEh4KGlF1YWxpZmljYXRpb25UeXBlX0NhbnRDYXN0EBkSIAocUXVhbGlm",
                  "aWNhdGlvblR5cGVfQ2FudFNlYXJjaBAaEh4KGlF1YWxpZmljYXRpb25UeXBl",
                  "X0NhbnRIYXZlEBsSHwobUXVhbGlmaWNhdGlvblR5cGVfQ2FudEVudGVyEBwS",
                  "IAocUXVhbGlmaWNhdGlvblR5cGVfQ2FudEF0dGFjaxAeEh8KG1F1YWxpZmlj",
                  "YXRpb25UeXBlX0NhbnRCbG9jaxAfEiMKH1F1YWxpZmljYXRpb25UeXBlX0Nh",
                  "bnRCZUJsb2NrZWQQIBInCiNRdWFsaWZpY2F0aW9uVHlwZV9NdXN0QmxvY2tB",
                  "dHRhY2tlchAhEiAKHFF1YWxpZmljYXRpb25UeXBlX011c3RBdHRhY2sQIhIn",
                  "CiNRdWFsaWZpY2F0aW9uVHlwZV9CbG9ja2VkQnlNYXhDb3VudBAnEicKI1F1",
                  "YWxpZmljYXRpb25UeXBlX0Jsb2NrZWRCeU1pbkNvdW50ECgSKAokUXVhbGlm",
                  "aWNhdGlvblR5cGVfTXVzdEF0dGFja1NwZWNpZmljECkSIQodUXVhbGlmaWNh",
                  "dGlvblR5cGVfQmxvY2tJZkFibGUQKhIiCh5RdWFsaWZpY2F0aW9uVHlwZV9B",
                  "YmxlVG9BdHRhY2sQKxIsCihRdWFsaWZpY2F0aW9uVHlwZV9BdHRhY2tUaGF0",
                  "Q29tYmF0SWZBYmxlECwSHQoZUXVhbGlmaWNhdGlvblR5cGVfTWF5UGxheRAv",
                  "EiMKH1F1YWxpZmljYXRpb25UeXBlX0NhbnRUcmFuc2Zvcm0QMBIfChtRdWFs",
                  "aWZpY2F0aW9uVHlwZV9DYW5BdHRhY2sQMRIeChpRdWFsaWZpY2F0aW9uVHlw",
                  "ZV9DYW50Q3JldxAyEikKJVF1YWxpZmljYXRpb25UeXBlX0NhbnRCbG9ja1Vu",
                  "bGVzc0Fsc28QNBIiCh5RdWFsaWZpY2F0aW9uVHlwZV9DYW50QWN0aXZhdGUQ",
                  "NRIiCh5RdWFsaWZpY2F0aW9uVHlwZV9NYXhBdHRhY2tlcnMQNhIhCh1RdWFs",
                  "aWZpY2F0aW9uVHlwZV9NYXhCbG9ja2VycxA3EioKJlF1YWxpZmljYXRpb25U",
                  "eXBlX0NhbnRBdHRhY2tVbmxlc3NBbHNvEDgSKAokUXVhbGlmaWNhdGlvblR5",
                  "cGVfQ2FuT25seUF0dGFja0Fsb25lEDkSHwobUXVhbGlmaWNhdGlvblR5cGVf",
                  "SWZBdHRhY2tzEDoSIAocUXVhbGlmaWNhdGlvblR5cGVfQXR0YWNrQ29zdBA7",
                  "Eh8KG1F1YWxpZmljYXRpb25UeXBlX0Jsb2NrQ29zdBA8EjEKLVF1YWxpZmlj",
                  "YXRpb25UeXBlX0NhbnRDYXVzZUFiaWxpdGllc1RvVHJpZ2dlchA9EjUKMVF1",
                  "YWxpZmljYXRpb25UeXBlX0Fzc2lnbkNvbWJhdERhbWFnZVdpdGhUb3VnaG5l",
                  "c3MQPhI0CjBRdWFsaWZpY2F0aW9uVHlwZV9QbGF5ZXJNdXN0QXR0YWNrRWxl",
                  "bWVudHNPZkxpc3QQPxIlCiFRdWFsaWZpY2F0aW9uVHlwZV9DYW50TG9zZVRo",
                  "ZUdhbWUQQBIiCh5RdWFsaWZpY2F0aW9uVHlwZV9DYW50TG9zZU1hbmEQQRIs",
                  "CihRdWFsaWZpY2F0aW9uVHlwZV9NYXlQbGF5QWRkaXRpb25hbExhbmRzEEIS",
                  "PQo5UXVhbGlmaWNhdGlvblR5cGVfQXNzaWduQ29tYmF0RGFtYWdlQXNUaG91",
                  "Z2hXZXJlbnRCbG9ja2VkEEMSJwojUXVhbGlmaWNhdGlvblR5cGVfTWF5UGxh",
                  "eVZhbGlkSXRlbXMQRBImCiJRdWFsaWZpY2F0aW9uVHlwZV9DYW5CZVRoZVRh",
                  "cmdldE9mEEUqVgoJUXVldWVUeXBlEhUKEVF1ZXVlVHlwZV9JbnZhbGlkEAAS",
                  "GAoUUXVldWVUeXBlX01hdGNoUXVldWUQARIYChRRdWV1ZVR5cGVfRHJhZnRR",
                  "dWV1ZRACKqUBCg5SZWFzb25GYWNlRG93bhIXChNSZWFzb25GYWNlRG93bl9O",
                  "b25lEAASIAocUmVhc29uRmFjZURvd25fTW92ZWRGYWNlRG93bhABEhgKFFJl",
                  "YXNvbkZhY2VEb3duX01vcnBoEAISGwoXUmVhc29uRmFjZURvd25fTWFuaWZl",
                  "c3QQAxIhCh1SZWFzb25GYWNlRG93bl9UdXJuZWRGYWNlRG93bhAEKqQBCg1S",
                  "ZWZlcmVuY2VUeXBlEhYKElJlZmVyZW5jZVR5cGVfTm9uZRAAEhwKGFJlZmVy",
                  "ZW5jZVR5cGVfSW5zdGFuY2VJZBABEhsKF1JlZmVyZW5jZVR5cGVfQ2F0YWxv",
                  "Z0lkEAISIAocUmVmZXJlbmNlVHlwZV9Mb2NhbGl6YXRpb25JZBADEh4KGlJl",
                  "ZmVyZW5jZVR5cGVfUGxheWVyU2VhdElkEAQqdQocUmVwbGFjZW1lbnRFZmZl",
                  "Y3RTcGF3bmVyVHlwZRIlCiFSZXBsYWNlbWVudEVmZmVjdFNwYXduZXJUeXBl",
                  "X05vbmUQABIuCipSZXBsYWNlbWVudEVmZmVjdFNwYXduZXJUeXBlX1ByZXZl",
                  "bnREYW1hZ2UQASqoAgoUUmVxdWlyZXNDb25maXJtYXRpb24SHQoZUmVxdWly",
                  "ZXNDb25maXJtYXRpb25fTm9uZRAAEiIKHlJlcXVpcmVzQ29uZmlybWF0aW9u",
                  "X1NhY3JpZmljZRABEiAKHFJlcXVpcmVzQ29uZmlybWF0aW9uX1BheUxpZmUQ",
                  "AhIgChxSZXF1aXJlc0NvbmZpcm1hdGlvbl9EaXNjYXJkEAMSHgoaUmVxdWly",
                  "ZXNDb25maXJtYXRpb25fRXhpbGUQBBIfChtSZXF1aXJlc0NvbmZpcm1hdGlv",
                  "bl9UYXJnZXQQBRIiCh5SZXF1aXJlc0NvbmZpcm1hdGlvbl9TZWxlY3Rpb24Q",
                  "BhIkCiBSZXF1aXJlc0NvbmZpcm1hdGlvbl9Gb3JPcHBvbmVudBAHKpoECgpS",
                  "ZXN1bHRDb2RlEhMKD1Jlc3VsdENvZGVfTm9uZRAAEhYKElJlc3VsdENvZGVf",
                  "U3VjY2VzcxABEhYKElJlc3VsdENvZGVfRmFpbHVyZRACEhsKF1Jlc3VsdENv",
                  "ZGVfQ2Fubm90QXR0YWNrEAMSHwobUmVzdWx0Q29kZV9BdHRhY2tDb3N0VW5w",
                  "YWlkEAQSGgoWUmVzdWx0Q29kZV9DYW5ub3RCbG9jaxAFEhsKF1Jlc3VsdENv",
                  "ZGVfSWxsZWdhbEJsb2NrEAYSHAoYUmVzdWx0Q29kZV9PcmRlck1pc21hdGNo",
                  "EAcSIgoeUmVzdWx0Q29kZV9NaXNzaW5nRGFtYWdlU291cmNlEAgSIgoeUmVz",
                  "dWx0Q29kZV9JbnZhbGlkRGFtYWdlU291cmNlEAkSIgoeUmVzdWx0Q29kZV9O",
                  "b25sZXRoYWxBc3NpZ25tZW50EAoSIAocUmVzdWx0Q29kZV9JbnZhbGlkQXNz",
                  "aWdubWVudBALEh0KGVJlc3VsdENvZGVfVG9vTWFueVRhcmdldHMQDBIfChtS",
                  "ZXN1bHRDb2RlX05vdEVub3VnaFRhcmdldHMQDRIcChhSZXN1bHRDb2RlX0ls",
                  "bGVnYWxUYXJnZXQQDhIiCh5SZXN1bHRDb2RlX1Jlc3RyaWN0aW9uVmlvbGF0",
                  "ZWQQDxIiCh5SZXN1bHRDb2RlX1JlcXVpcmVtZW50VmlvbGF0ZWQQECqfAQoM",
                  "UmVzdWx0UmVhc29uEhUKEVJlc3VsdFJlYXNvbl9Ob25lEAASFQoRUmVzdWx0",
                  "UmVhc29uX0dhbWUQARIYChRSZXN1bHRSZWFzb25fQ29uY2VkZRACEhgKFFJl",
                  "c3VsdFJlYXNvbl9UaW1lb3V0EAMSFQoRUmVzdWx0UmVhc29uX0xvb3AQBBIW",
                  "ChJSZXN1bHRSZWFzb25fRm9yY2UQBSpoCgpSZXN1bHRUeXBlEhMKD1Jlc3Vs",
                  "dFR5cGVfTm9uZRAAEhgKFFJlc3VsdFR5cGVfU3VzcGVuZGVkEAESEwoPUmVz",
                  "dWx0VHlwZV9EcmF3EAISFgoSUmVzdWx0VHlwZV9XaW5Mb3NzEAMqWQoMU2Vs",
                  "ZWN0QWN0aW9uEhUKEVNlbGVjdEFjdGlvbl9Ob25lEAASFwoTU2VsZWN0QWN0",
                  "aW9uX1NlbGVjdBABEhkKFVNlbGVjdEFjdGlvbl9VbnNlbGVjdBACKrwCChBT",
                  "ZWxlY3Rpb25Db250ZXh0EhkKFVNlbGVjdGlvbkNvbnRleHRfTm9uZRAAEhwK",
                  "GFNlbGVjdGlvbkNvbnRleHRfRGlzY2FyZBABEh0KGVNlbGVjdGlvbkNvbnRl",
                  "eHRfTWFuYVBvb2wQAhIfChtTZWxlY3Rpb25Db250ZXh0X1Jlc29sdXRpb24Q",
                  "AxIlCiFTZWxlY3Rpb25Db250ZXh0X1RyaWdnZXJlZEFiaWxpdHkQBBIaChZT",
                  "ZWxlY3Rpb25Db250ZXh0X01vZGFsEAUSIAocU2VsZWN0aW9uQ29udGV4dF9S",
                  "ZXBsYWNlbWVudBAGEiQKIFNlbGVjdGlvbkNvbnRleHRfTm9uTWFuYV9QYXlt",
                  "ZW50EAcSJAogU2VsZWN0aW9uQ29udGV4dF9NYW5hRnJvbUFiaWxpdHkQCCqQ",
                  "AQoRU2VsZWN0aW9uTGlzdFR5cGUSGgoWU2VsZWN0aW9uTGlzdFR5cGVfTm9u",
                  "ZRAAEhwKGFNlbGVjdGlvbkxpc3RUeXBlX1N0YXRpYxABEh0KGVNlbGVjdGlv",
                  "bkxpc3RUeXBlX0R5bmFtaWMQAhIiCh5TZWxlY3Rpb25MaXN0VHlwZV9TdGF0",
                  "aWNTdWJzZXQQAypECgdTZXR0aW5nEhAKDFNldHRpbmdfTm9uZRAAEhIKDlNl",
                  "dHRpbmdfRW5hYmxlEAESEwoPU2V0dGluZ19EaXNhYmxlEAIqVwoKU2V0dGlu",
                  "Z0tleRITCg9TZXR0aW5nS2V5X05vbmUQABIYChRTZXR0aW5nS2V5X0J5QWJp",
                  "bGl0eRABEhoKFlNldHRpbmdLZXlfQnlDYXJkVGl0bGUQAip0CgxTZXR0aW5n",
                  "U2NvcGUSFQoRU2V0dGluZ1Njb3BlX05vbmUQABIaChZTZXR0aW5nU2NvcGVf",
                  "QW55UGxheWVyEAESGgoWU2V0dGluZ1Njb3BlX09wcG9uZW50cxACEhUKEVNl",
                  "dHRpbmdTY29wZV9UZWFtEAMqVwoNU2V0dGluZ1N0YXR1cxIWChJTZXR0aW5n",
                  "U3RhdHVzX05vbmUQABIVChFTZXR0aW5nU3RhdHVzX1NldBABEhcKE1NldHRp",
                  "bmdTdGF0dXNfQ2xlYXIQAipxChJTaHVmZmxlUmVzdHJpY3Rpb24SGwoXU2h1",
                  "ZmZsZVJlc3RyaWN0aW9uX05vbmUQABIiCh5TaHVmZmxlUmVzdHJpY3Rpb25f",
                  "T3BlbmluZ0hhbmQQARIaChZTaHVmZmxlUmVzdHJpY3Rpb25fQWxsEAIqbAoR",
                  "U21hcnRTdG9wc1NldHRpbmcSGgoWU21hcnRTdG9wc1NldHRpbmdfTm9uZRAA",
                  "EhwKGFNtYXJ0U3RvcHNTZXR0aW5nX0VuYWJsZRABEh0KGVNtYXJ0U3RvcHNT",
                  "ZXR0aW5nX0Rpc2FibGUQAipFCgZTb3J0QnkSDwoLU29ydEJ5X05vbmUQABIU",
                  "ChBTb3J0QnlfSGlnaFRvTG93EAESFAoQU29ydEJ5X0xvd1RvSGlnaBACKv0C",
                  "CgpTdGF0aWNMaXN0EhMKD1N0YXRpY0xpc3RfTm9uZRAAEhkKFVN0YXRpY0xp",
                  "c3RfQ2FyZENvbG9ycxABEhkKFVN0YXRpY0xpc3RfTWFuYUNvbG9ycxACEhkK",
                  "FVN0YXRpY0xpc3RfU3VwZXJUeXBlcxADEhgKFFN0YXRpY0xpc3RfQ2FyZFR5",
                  "cGVzEAQSFwoTU3RhdGljTGlzdF9TdWJUeXBlcxAFEhUKEVN0YXRpY0xpc3Rf",
                  "Q29sb3JzEAYSGAoUU3RhdGljTGlzdF9Db2luRmFjZXMQBxIYChRTdGF0aWNM",
                  "aXN0X1dpc2hDYXJkcxAIEh0KGVN0YXRpY0xpc3RfQmFzaWNMYW5kVHlwZXMQ",
                  "CRIcChhTdGF0aWNMaXN0X0NyZWF0dXJlVHlwZXMQChIbChdTdGF0aWNMaXN0",
                  "X0NvdW50ZXJUeXBlcxALEhcKE1N0YXRpY0xpc3RfS2V5d29yZHMQDBIYChRT",
                  "dGF0aWNMaXN0X0NhcmROYW1lcxANKvEBCgRTdGVwEg0KCVN0ZXBfTm9uZRAA",
                  "Eg4KClN0ZXBfVW50YXAQARIPCgtTdGVwX1Vwa2VlcBACEg0KCVN0ZXBfRHJh",
                  "dxADEhQKEFN0ZXBfQmVnaW5Db21iYXQQBBIWChJTdGVwX0RlY2xhcmVBdHRh",
                  "Y2sQBRIVChFTdGVwX0RlY2xhcmVCbG9jaxAGEhUKEVN0ZXBfQ29tYmF0RGFt",
                  "YWdlEAcSEgoOU3RlcF9FbmRDb21iYXQQCBIMCghTdGVwX0VuZBAJEhAKDFN0",
                  "ZXBfQ2xlYW51cBAKEhoKFlN0ZXBfRmlyc3RTdHJpa2VEYW1hZ2UQCyroAgoI",
                  "U3RvcFR5cGUSEQoNU3RvcFR5cGVfTm9uZRAAEhcKE1N0b3BUeXBlX1Vwa2Vl",
                  "cFN0ZXAQARIVChFTdG9wVHlwZV9EcmF3U3RlcBACEh8KG1N0b3BUeXBlX1By",
                  "ZWNvbWJhdE1haW5QaGFzZRADEhwKGFN0b3BUeXBlX0JlZ2luQ29tYmF0U3Rl",
                  "cBAEEiEKHVN0b3BUeXBlX0RlY2xhcmVBdHRhY2tlcnNTdGVwEAUSIAocU3Rv",
                  "cFR5cGVfRGVjbGFyZUJsb2NrZXJzU3RlcBAGEh0KGVN0b3BUeXBlX0NvbWJh",
                  "dERhbWFnZVN0ZXAQBxIaChZTdG9wVHlwZV9FbmRDb21iYXRTdGVwEAgSIAoc",
                  "U3RvcFR5cGVfUG9zdGNvbWJhdE1haW5QaGFzZRAJEhQKEFN0b3BUeXBlX0Vu",
                  "ZFN0ZXAQChIiCh5TdG9wVHlwZV9GaXJzdFN0cmlrZURhbWFnZVN0ZXAQCyrh",
                  "OgoHU3ViVHlwZRIQCgxTdWJUeXBlX05vbmUQABIRCg1TdWJUeXBlX0FuZ2Vs",
                  "EAESEgoOU3ViVHlwZV9BcmNoZXIQAhISCg5TdWJUeXBlX0FyY2hvbhADEhUK",
                  "EVN1YlR5cGVfQXJ0aWZpY2VyEAQSFAoQU3ViVHlwZV9Bc3Nhc3NpbhAFEhAK",
                  "DFN1YlR5cGVfQXVyYRAGEhQKEFN1YlR5cGVfQmFzaWxpc2sQBxIPCgtTdWJU",
                  "eXBlX0JhdBAIEhAKDFN1YlR5cGVfQmVhchAJEhEKDVN1YlR5cGVfQmVhc3QQ",
                  "ChIVChFTdWJUeXBlX0JlcnNlcmtlchALEhAKDFN1YlR5cGVfQmlyZBAMEhAK",
                  "DFN1YlR5cGVfQm9hchANEg8KC1N1YlR5cGVfQ2F0EA4SEwoPU3ViVHlwZV9D",
                  "aGFuZHJhEA8SEgoOU3ViVHlwZV9DbGVyaWMQEBIVChFTdWJUeXBlX0NvbnN0",
                  "cnVjdBAREhUKEVN1YlR5cGVfQ3JvY29kaWxlEBISEQoNU3ViVHlwZV9EZW1v",
                  "bhATEhEKDVN1YlR5cGVfRGppbm4QFBISCg5TdWJUeXBlX0RyYWdvbhAVEhEK",
                  "DVN1YlR5cGVfRHJha2UQFhIRCg1TdWJUeXBlX0RydWlkEBcSEAoMU3ViVHlw",
                  "ZV9GaXNoEBgSFQoRU3ViVHlwZV9FbGVtZW50YWwQGRIUChBTdWJUeXBlX0Vs",
                  "ZXBoYW50EBoSDwoLU3ViVHlwZV9FbGYQGxIVChFTdWJUeXBlX0VxdWlwbWVu",
                  "dBAcEhIKDlN1YlR5cGVfRm9yZXN0EB0SEgoOU3ViVHlwZV9HYXJydWsQHhIQ",
                  "CgxTdWJUeXBlX0dhdGUQHxIRCg1TdWJUeXBlX0dpYW50ECASEgoOU3ViVHlw",
                  "ZV9HaWRlb24QIRISCg5TdWJUeXBlX0dvYmxpbhAiEhEKDVN1YlR5cGVfR29s",
                  "ZW0QIxITCg9TdWJUeXBlX0dyaWZmaW4QJBIRCg1TdWJUeXBlX0hvcnNlECUS",
                  "EQoNU3ViVHlwZV9Ib3VuZBAmEhEKDVN1YlR5cGVfSHVtYW4QJxIRCg1TdWJU",
                  "eXBlX0h5ZHJhECgSFAoQU3ViVHlwZV9JbGx1c2lvbhApEhIKDlN1YlR5cGVf",
                  "SW5zZWN0ECoSEgoOU3ViVHlwZV9Jc2xhbmQQKxIQCgxTdWJUeXBlX0phY2UQ",
                  "LBISCg5TdWJUeXBlX0tuaWdodBAtEhMKD1N1YlR5cGVfTWVyZm9saxAuEhQK",
                  "EFN1YlR5cGVfTWlub3RhdXIQLxIQCgxTdWJUeXBlX01vbmsQMBIUChBTdWJU",
                  "eXBlX01vdW50YWluEDESEAoMU3ViVHlwZV9PZ3JlEDISEAoMU3ViVHlwZV9P",
                  "b3plEDMSEwoPU3ViVHlwZV9QZWdhc3VzEDQSEwoPU3ViVHlwZV9QaG9lbml4",
                  "EDUSEgoOU3ViVHlwZV9QbGFpbnMQNhIRCg1TdWJUeXBlX1JoaW5vEDcSEQoN",
                  "U3ViVHlwZV9Sb2d1ZRA4EhYKElN1YlR5cGVfU2FsYW1hbmRlchA5EhEKDVN1",
                  "YlR5cGVfU2NvdXQQOhITCg9TdWJUeXBlX1NlcnBlbnQQOxIRCg1TdWJUeXBl",
                  "X1NoYWRlEDwSEgoOU3ViVHlwZV9TaGFtYW4QPRIRCg1TdWJUeXBlX1NpcmVu",
                  "ED4SFAoQU3ViVHlwZV9Ta2VsZXRvbhA/EhMKD1N1YlR5cGVfU29sZGllchBA",
                  "EhEKDVN1YlR5cGVfU29yaW4QQRISCg5TdWJUeXBlX1NwaGlueBBCEhIKDlN1",
                  "YlR5cGVfU3BpZGVyEEMSEgoOU3ViVHlwZV9TcGlyaXQQRBIRCg1TdWJUeXBl",
                  "X1N3YW1wEEUSEQoNU3ViVHlwZV9Ub3dlchBGEhQKEFN1YlR5cGVfVHJlZWZv",
                  "bGsQRxIRCg1TdWJUeXBlX1Ryb2xsEEgSEQoNU3ViVHlwZV9VcnphcxBJEhMK",
                  "D1N1YlR5cGVfVmFtcGlyZRBKEhQKEFN1YlR5cGVfVmVkYWxrZW4QSxIQCgxT",
                  "dWJUeXBlX1dhbGwQTBITCg9TdWJUeXBlX1dhcnJpb3IQTRISCg5TdWJUeXBl",
                  "X1dpemFyZBBOEhAKDFN1YlR5cGVfV29sZhBPEhAKDFN1YlR5cGVfV3VybRBQ",
                  "EhIKDlN1YlR5cGVfWm9tYmllEFESEAoMU3ViVHlwZV9NaW5lEFISFwoTU3Vi",
                  "VHlwZV9Qb3dlcl9QbGFudBBTEhUKEVN1YlR5cGVfU2Fwcm9saW5nEFQSEgoO",
                  "U3ViVHlwZV9BdmF0YXIQVRISCg5TdWJUeXBlX1NsaXZlchBWEhMKD1N1YlR5",
                  "cGVfU2FtdXJhaRBXEhAKDFN1YlR5cGVfUGVzdBBYEhQKEFN1YlR5cGVfVGhh",
                  "bGFrb3MQWRISCg5TdWJUeXBlX0RhdXRoaRBaEhIKDlN1YlR5cGVfTWluaW9u",
                  "EFsSEwoPU3ViVHlwZV9BZHZpc29yEFwSEQoNU3ViVHlwZV9BamFuaRBdEhEK",
                  "DVN1YlR5cGVfQWxhcmEQXhIQCgxTdWJUeXBlX0FsbHkQXxIUChBTdWJUeXBl",
                  "X0FudGVsb3BlEGESDwoLU3ViVHlwZV9BcGUQYhISCg5TdWJUeXBlX0FyY2Fu",
                  "ZRBjEhIKDlN1YlR5cGVfQXJraG9zEGQSEgoOU3ViVHlwZV9Bc2hpb2sQZRIa",
                  "ChZTdWJUeXBlX0Fzc2VtYmx5V29ya2VyEGYSEAoMU3ViVHlwZV9BdG9nEGcS",
                  "EwoPU3ViVHlwZV9BdXJvY2hzEGgSEQoNU3ViVHlwZV9BemdvbBBpEhIKDlN1",
                  "YlR5cGVfQmFkZ2VyEGoSFQoRU3ViVHlwZV9CYXJiYXJpYW4QaxISCg5TdWJU",
                  "eXBlX0JlZWJsZRBsEhMKD1N1YlR5cGVfQmVsZW5vbhBtEhEKDVN1YlR5cGVf",
                  "Qm9sYXMQbhISCg5TdWJUeXBlX0JvbGFzcxBvEhMKD1N1YlR5cGVfQnJpbmdl",
                  "chBwEhUKEVN1YlR5cGVfQnJ1c2h3YWdnEHESEQoNU3ViVHlwZV9DYW1lbBBy",
                  "EhMKD1N1YlR5cGVfQ2FycmllchBzEhMKD1N1YlR5cGVfQ2VudGF1chB0EhQK",
                  "EFN1YlR5cGVfQ2VwaGFsaWQQdRITCg9TdWJUeXBlX0NoaW1lcmEQdhIWChJT",
                  "dWJUeXBlX0NvY2thdHJpY2UQdxIQCgxTdWJUeXBlX0NyYWIQeBIRCg1TdWJU",
                  "eXBlX0N1cnNlEHkSEwoPU3ViVHlwZV9DeWNsb3BzEHoSEgoOU3ViVHlwZV9E",
                  "ZXNlcnQQexIRCg1TdWJUeXBlX0RldmlsEHwSFQoRU3ViVHlwZV9Eb21pbmFy",
                  "aWEQfRIRCg1TdWJUeXBlX0RvbXJpEH4SFwoTU3ViVHlwZV9EcmVhZG5vdWdo",
                  "dBB/EhIKDVN1YlR5cGVfRHJvbmUQgAESEgoNU3ViVHlwZV9EcnlhZBCBARIS",
                  "Cg1TdWJUeXBlX0R3YXJmEIIBEhMKDlN1YlR5cGVfRWZyZWV0EIMBEhIKDVN1",
                  "YlR5cGVfRWxkZXIQhAESFAoPU3ViVHlwZV9FbGRyYXppEIUBEhAKC1N1YlR5",
                  "cGVfRWxrEIYBEhQKD1N1YlR5cGVfRWxzcGV0aBCHARIUCg9TdWJUeXBlX0Vx",
                  "dWlsb3IQiAESFAoPU3ViVHlwZV9FcmdhbW9uEIkBEhAKC1N1YlR5cGVfRXll",
                  "EIoBEhQKD1N1YlR5cGVfRmFiYWNpbhCLARITCg5TdWJUeXBlX0ZhZXJpZRCM",
                  "ARITCg5TdWJUeXBlX0ZlcnJldBCNARIXChJTdWJUeXBlX0ZsYWdiZWFyZXIQ",
                  "jgESGgoVU3ViVHlwZV9Gb3J0aWZpY2F0aW9uEI8BEhAKC1N1YlR5cGVfRm94",
                  "EJABEhEKDFN1YlR5cGVfRnJvZxCRARITCg5TdWJUeXBlX0Z1bmd1cxCSARIV",
                  "ChBTdWJUeXBlX0dhcmdveWxlEJMBEhIKDVN1YlR5cGVfR25vbWUQlAESEQoM",
                  "U3ViVHlwZV9Hb2F0EJUBEhAKC1N1YlR5cGVfR29kEJYBEhMKDlN1YlR5cGVf",
                  "R29yZ29uEJcBEhQKD1N1YlR5cGVfR3JlbWxpbhCYARIQCgtTdWJUeXBlX0hh",
                  "ZxCZARISCg1TdWJUeXBlX0hhcnB5EJoBEhQKD1N1YlR5cGVfSGVsbGlvbhCb",
                  "ARISCg1TdWJUeXBlX0hpcHBvEJwBEhcKElN1YlR5cGVfSGlwcG9ncmlmZhCd",
                  "ARIUCg9TdWJUeXBlX0hvbWFyaWQQngESFwoSU3ViVHlwZV9Ib211bmN1bHVz",
                  "EJ8BEhMKDlN1YlR5cGVfSG9ycm9yEKABEhIKDVN1YlR5cGVfSHllbmEQoQES",
                  "EAoLU3ViVHlwZV9JbXAQogESGAoTU3ViVHlwZV9JbmNhcm5hdGlvbhCjARIW",
                  "ChFTdWJUeXBlX0lubmlzdHJhZBCkARIVChBTdWJUeXBlX0lxdWF0YW5hEKUB",
                  "Eg8KClN1YlR5cGVfSXIQpgESFgoRU3ViVHlwZV9KZWxseWZpc2gQpwESFwoS",
                  "U3ViVHlwZV9KdWdnZXJuYXV0EKgBEhUKEFN1YlR5cGVfS2FsZGhlaW0QqQES",
                  "FQoQU3ViVHlwZV9LYW1pZ2F3YRCqARIRCgxTdWJUeXBlX0thcm4QqwESEwoO",
                  "U3ViVHlwZV9LYXJzdXMQrAESEQoMU3ViVHlwZV9LYXZ1EK0BEhUKEFN1YlR5",
                  "cGVfS2VwaGFsYWkQrgESEgoNU3ViVHlwZV9LaXJpbhCvARIUCg9TdWJUeXBl",
                  "X0tpdGhraW4QsAESEwoOU3ViVHlwZV9Lb2JvbGQQsQESFQoQU3ViVHlwZV9L",
                  "b2xiYWhhbhCyARIQCgtTdWJUeXBlX0tvchCzARIRCgxTdWJUeXBlX0tvdGgQ",
                  "tAESEwoOU3ViVHlwZV9LcmFrZW4QtQESEwoOU3ViVHlwZV9LeW5ldGgQtgES",
                  "EQoMU3ViVHlwZV9MYWlyELcBEhQKD1N1YlR5cGVfTGFtbWFzdRC4ARISCg1T",
                  "dWJUeXBlX0xlZWNoELkBEhYKEVN1YlR5cGVfTGV2aWF0aGFuELoBEhUKEFN1",
                  "YlR5cGVfTGh1cmdveWYQuwESEgoNU3ViVHlwZV9MaWNpZBC8ARIUCg9TdWJU",
                  "eXBlX0xpbGlhbmEQvQESEwoOU3ViVHlwZV9MaXphcmQQvgESEgoNU3ViVHlw",
                  "ZV9Mb2N1cxC/ARITCg5TdWJUeXBlX0xvcnd5bhDAARITCg5TdWJUeXBlX0x1",
                  "dmlvbhDBARIWChFTdWJUeXBlX01hbnRpY29yZRDCARIWChFTdWJUeXBlX01h",
                  "c3RpY29yZRDDARIXChJTdWJUeXBlX01lZGl0YXRpb24QxAESFQoQU3ViVHlw",
                  "ZV9NZXJjYWRpYRDFARIWChFTdWJUeXBlX01lcmNlbmFyeRDGARIWChFTdWJU",
                  "eXBlX01ldGF0aHJhbhDHARIVChBTdWJUeXBlX01pcnJvZGluEMgBEhEKDFN1",
                  "YlR5cGVfTW9hZxDJARITCg5TdWJUeXBlX01vbmdlchDKARIVChBTdWJUeXBl",
                  "X01vbmdvb3NlEMsBEhUKEFN1YlR5cGVfTW9uZ3NlbmcQzAESFQoQU3ViVHlw",
                  "ZV9Nb29uZm9saxDNARIWChFTdWJUeXBlX011cmFnYW5kYRDOARITCg5TdWJU",
                  "eXBlX011dGFudBDPARIQCgtTdWJUeXBlX015chDQARITCg5TdWJUeXBlX015",
                  "c3RpYxDRARIVChBTdWJUeXBlX05hdXRpbHVzENIBEhUKEFN1YlR5cGVfTmVw",
                  "aGlsaW0Q0wESEAoLU3ViVHlwZV9OZXcQ1AESFgoRU3ViVHlwZV9OaWdodG1h",
                  "cmUQ1QESGQoUU3ViVHlwZV9OaWdodHN0YWxrZXIQ1gESEgoNU3ViVHlwZV9O",
                  "aW5qYRDXARISCg1TdWJUeXBlX05pc3NhENgBEhMKDlN1YlR5cGVfTm9nZ2xl",
                  "ENkBEhIKDVN1YlR5cGVfTm9tYWQQ2gESEgoNU3ViVHlwZV9OeW1waBDbARIU",
                  "Cg9TdWJUeXBlX09jdG9wdXMQ3AESEAoLU3ViVHlwZV9PcmMQ3QESEQoMU3Vi",
                  "VHlwZV9PcmdnEN4BEhIKDVN1YlR5cGVfT3VwaGUQ3wESDwoKU3ViVHlwZV9P",
                  "eBDgARITCg5TdWJUeXBlX095c3RlchDhARIYChNTdWJUeXBlX1BoZWxkZGFn",
                  "cmlmEOIBEhUKEFN1YlR5cGVfUGh5cmV4aWEQ4wESEwoOU3ViVHlwZV9QaXJh",
                  "dGUQ5AESEgoNU3ViVHlwZV9QbGFudBDlARIUCg9TdWJUeXBlX1ByYWV0b3IQ",
                  "5gESFAoPU3ViVHlwZV9QeXJ1bGVhEOcBEhMKDlN1YlR5cGVfUmFiYml0EOgB",
                  "EhMKDlN1YlR5cGVfUmFiaWFoEOkBEhAKC1N1YlR5cGVfUmFsEOoBEhAKC1N1",
                  "YlR5cGVfUmF0EOsBEhEKDFN1YlR5cGVfUmF0aBDsARIUCg9TdWJUeXBlX1Jh",
                  "dm5pY2EQ7QESEgoNU3ViVHlwZV9SZWFsbRDuARISCg1TdWJUeXBlX1JlYmVs",
                  "EO8BEhQKD1N1YlR5cGVfUmVnYXRoYRDwARITCg5TdWJUeXBlX1JpZ2dlchDx",
                  "ARISCg1TdWJUeXBlX1NhYmxlEPIBEhQKD1N1YlR5cGVfU2Fya2hhbhDzARIS",
                  "Cg1TdWJUeXBlX1NhdHlyEPQBEhYKEVN1YlR5cGVfU2NhcmVjcm93EPUBEhUK",
                  "EFN1YlR5cGVfU2NvcnBpb24Q9gESFAoPU3ViVHlwZV9TZWdvdmlhEPcBEhMK",
                  "DlN1YlR5cGVfU2VycmFzEPgBEhcKElN1YlR5cGVfU2hhZG93bW9vchD5ARIW",
                  "ChFTdWJUeXBlX1NoYW5kYWxhchD6ARIZChRTdWJUeXBlX1NoYXBlc2hpZnRl",
                  "chD7ARISCg1TdWJUeXBlX1NoZWVwEPwBEhMKDlN1YlR5cGVfU2hyaW5lEP0B",
                  "EhIKDVN1YlR5cGVfU2xpdGgQ/gESEQoMU3ViVHlwZV9TbHVnEP8BEhIKDVN1",
                  "YlR5cGVfU25ha2UQgAISFAoPU3ViVHlwZV9Tb2x0YXJpEIECEhIKDVN1YlR5",
                  "cGVfU3Bhd24QggISFAoPU3ViVHlwZV9TcGVjdGVyEIMCEhgKE1N1YlR5cGVf",
                  "U3BlbGxzaGFwZXIQhAISEgoNU3ViVHlwZV9TcGlrZRCFAhITCg5TdWJUeXBl",
                  "X1Nwb25nZRCGAhISCg1TdWJUeXBlX1NxdWlkEIcCEhUKEFN1YlR5cGVfU3F1",
                  "aXJyZWwQiAISFQoQU3ViVHlwZV9TdGFyZmlzaBCJAhIVChBTdWJUeXBlX1N1",
                  "cnJha2FyEIoCEhMKDlN1YlR5cGVfVGFtaXlvEIsCEhUKEFN1YlR5cGVfVGV6",
                  "emVyZXQQjAISFAoPU3ViVHlwZV9UaG9wdGVyEI0CEhMKDlN1YlR5cGVfVGhy",
                  "dWxsEI4CEhMKDlN1YlR5cGVfVGliYWx0EI8CEhEKDFN1YlR5cGVfVHJhcBCQ",
                  "AhITCg5TdWJUeXBlX1R1cnRsZRCRAhIVChBTdWJUeXBlX1VsZ3JvdGhhEJIC",
                  "EhQKD1N1YlR5cGVfVW5pY29ybhCTAhISCg1TdWJUeXBlX1ZhbGxhEJQCEhMK",
                  "DlN1YlR5cGVfVmVuc2VyEJUCEhUKEFN1YlR5cGVfVmlhc2hpbm8QlgISEwoO",
                  "U3ViVHlwZV9Wb2x2ZXIQlwISEwoOU3ViVHlwZV9WcmFza2EQmAISEQoMU3Vi",
                  "VHlwZV9WcnluEJkCEhIKDVN1YlR5cGVfV2VpcmQQmgISFQoQU3ViVHlwZV9X",
                  "ZXJld29sZhCbAhISCg1TdWJUeXBlX1doYWxlEJwCEhUKEFN1YlR5cGVfV2ls",
                  "ZGZpcmUQnQISFgoRU3ViVHlwZV9Xb2x2ZXJpbmUQngISEwoOU3ViVHlwZV9X",
                  "b21iYXQQnwISEQoMU3ViVHlwZV9Xb3JtEKACEhMKDlN1YlR5cGVfV3JhaXRo",
                  "EKECEhQKD1N1YlR5cGVfWGVuYWdvcxCiAhISCg1TdWJUeXBlX1hlcmV4EKMC",
                  "EhEKDFN1YlR5cGVfWWV0aRCkAhIVChBTdWJUeXBlX1plbmRpa2FyEKUCEhMK",
                  "DlN1YlR5cGVfWnViZXJhEKYCEhEKDFN1YlR5cGVfR2VybRCnAhIYChNTdWJU",
                  "eXBlX0NvbnRyYXB0aW9uEKgCEhQKD1N1YlR5cGVfQ2l0aXplbhCpAhITCg5T",
                  "dWJUeXBlX0Nvd2FyZBCqAhIVChBTdWJUeXBlX0Rlc2VydGVyEKsCEhIKDVN1",
                  "YlR5cGVfUHJpc20QrAISFwoSU3ViVHlwZV9SZWZsZWN0aW9uEK0CEhEKDFN1",
                  "YlR5cGVfU2FuZBCuAhIRCgxTdWJUeXBlX1NlcmYQrwISEQoMU3ViVHlwZV9E",
                  "YWNrELACEhIKDVN1YlR5cGVfS2lvcmEQsQISHQoYU3ViVHlwZV9BbGxDcmVh",
                  "dHVyZVR5cGVzELICEhYKEVN1YlR5cGVfQmxpbmttb3RoELMCEhQKD1N1YlR5",
                  "cGVfQ2FtYXJpZBC0AhIUCg9TdWJUeXBlX0Nhcmlib3UQtQISFgoRU3ViVHlw",
                  "ZV9HcmF2ZWJvcm4QtgISEgoNU3ViVHlwZV9MYW1pYRC3AhIQCgtTdWJUeXBl",
                  "X09yYhC4AhIWChFTdWJUeXBlX1BlbnRhdml0ZRC5AhIUCg9TdWJUeXBlX1Bp",
                  "bmNoZXIQugISFQoQU3ViVHlwZV9TcGxpbnRlchC7AhIVChBTdWJUeXBlX1N1",
                  "cnZpdm9yELwCEhYKEVN1YlR5cGVfVGV0cmF2aXRlEL0CEhkKFFN1YlR5cGVf",
                  "VHJpc2tlbGF2aXRlEL4CEhIKDVN1YlR5cGVfU2Npb24QvwISFgoRU3ViVHlw",
                  "ZV9Qcm9jZXNzb3IQwAISEwoOU3ViVHlwZV9Bcmxpbm4QwQISEQoMU3ViVHlw",
                  "ZV9Nb2xlEMICEhMKDlN1YlR5cGVfTmFoaXJpEMMCEhEKDFN1YlR5cGVfQ2x1",
                  "ZRDEAhITCg5TdWJUeXBlX1RlZmVyaRDFAhIUCg9TdWJUeXBlX0RhcmV0dGkQ",
                  "xgISFgoRU3ViVHlwZV9GcmV5YWxpc2UQxwISFAoPU3ViVHlwZV9OaXhpbGlz",
                  "EMgCEhMKDlN1YlR5cGVfTmFyc2V0EMkCEhEKDFN1YlR5cGVfVWdpbhDKAhIU",
                  "Cg9TdWJUeXBlX1ZlaGljbGUQywISEgoNU3ViVHlwZV9TZXJ2bxDMAhISCg1T",
                  "dWJUeXBlX0RvdmluEM0CEhQKD1N1YlR5cGVfU2FoZWVsaRDOAhITCg5TdWJU",
                  "eXBlX01vbmtleRDPAhIXChJTdWJUeXBlX0FldGhlcmJvcm4Q0AISEgoNU3Vi",
                  "VHlwZV9QaWxvdBDRAhITCg5TdWJUeXBlX0phY2thbBDSAhIRCgxTdWJUeXBl",
                  "X05hZ2EQ0wISFgoRU3ViVHlwZV9DYXJ0b3VjaGUQ1AISEgoNU3ViVHlwZV9T",
                  "YW11dBDVAhIVChBTdWJUeXBlX0Rpbm9zYXVyENYCEhUKEFN1YlR5cGVfVHJl",
                  "YXN1cmUQ1wISEwoOU3ViVHlwZV9IdWF0bGkQ2AISFAoPU3ViVHlwZV9Bbmdy",
                  "YXRoENkCEhYKEVN1YlR5cGVfVHJpbG9iaXRlENoCEhEKDFN1YlR5cGVfU2Fn",
                  "YRDbAhIRCgxTdWJUeXBlX0pheWEQ3AISEwoOU3ViVHlwZV9WaXZpZW4Q3QIS",
                  "EAoLU3ViVHlwZV9FZ2cQ3gISIAobU3ViVHlwZV9QbGFjZWhvbGRlclN1YlR5",
                  "cGUxEN8CEiAKG1N1YlR5cGVfUGxhY2Vob2xkZXJTdWJUeXBlMhDgAhIgChtT",
                  "dWJUeXBlX1BsYWNlaG9sZGVyU3ViVHlwZTMQ4QISIAobU3ViVHlwZV9QbGFj",
                  "ZWhvbGRlclN1YlR5cGU0EOICEiAKG1N1YlR5cGVfUGxhY2Vob2xkZXJTdWJU",
                  "eXBlNRDjAipQCgtTdWJab25lVHlwZRIUChBTdWJab25lVHlwZV9Ob25lEAAS",
                  "EwoPU3ViWm9uZVR5cGVfVG9wEAESFgoSU3ViWm9uZVR5cGVfQm90dG9tEAIq",
                  "WQoLU3VwZXJGb3JtYXQSFAoQU3VwZXJGb3JtYXRfTm9uZRAAEhcKE1N1cGVy",
                  "Rm9ybWF0X0xpbWl0ZWQQARIbChdTdXBlckZvcm1hdF9Db25zdHJ1Y3RlZBAC",
                  "Ko0BCglTdXBlclR5cGUSEgoOU3VwZXJUeXBlX05vbmUQABITCg9TdXBlclR5",
                  "cGVfQmFzaWMQARIXChNTdXBlclR5cGVfTGVnZW5kYXJ5EAISFQoRU3VwZXJU",
                  "eXBlX09uZ29pbmcQAxISCg5TdXBlclR5cGVfU25vdxAEEhMKD1N1cGVyVHlw",
                  "ZV9Xb3JsZBAFKlMKClRhcmdldFR5cGUSEwoPVGFyZ2V0VHlwZV9Ob25lEAAS",
                  "FQoRVGFyZ2V0VHlwZV9QbGF5ZXIQARIZChVUYXJnZXRUeXBlX0dhbWVPYmpl",
                  "Y3QQAipPCghUZWFtVHlwZRIRCg1UZWFtVHlwZV9Ob25lEAASFwoTVGVhbVR5",
                  "cGVfSW5kaXZpZHVhbBABEhcKE1RlYW1UeXBlX1NoYXJlZFRlYW0QAipbCgtU",
                  "aW1lb3V0VHlwZRIUChBUaW1lb3V0VHlwZV9Ob25lEAASGgoWVGltZW91dFR5",
                  "cGVfQ2hlc3NDbG9jaxABEhoKFlRpbWVvdXRUeXBlX0luYWN0aXZpdHkQAirB",
                  "AgoNVGltZXJCZWhhdmlvchIWChJUaW1lckJlaGF2aW9yX05vbmUQABIZChVU",
                  "aW1lckJlaGF2aW9yX1RpbWVvdXQQARIdChlUaW1lckJlaGF2aW9yX0F1dG9S",
                  "ZXNwb25kEAISHQoZVGltZXJCZWhhdmlvcl9UYWtlQ29udHJvbBADEiAKHFRp",
                  "bWVyQmVoYXZpb3JfUmVsZWFzZUNvbnRyb2wQBBIXChNUaW1lckJlaGF2aW9y",
                  "X1N0YXJ0EAUSGQoVVGltZXJCZWhhdmlvcl9SZXN0YXJ0EAYSFgoSVGltZXJC",
                  "ZWhhdmlvcl9TdG9wEAcSFwoTVGltZXJCZWhhdmlvcl9SZXNldBAIEhoKFlRp",
                  "bWVyQmVoYXZpb3JfQWN0aXZhdGUQCRIcChhUaW1lckJlaGF2aW9yX0RlYWN0",
                  "aXZhdGUQCirFBgoKVGltZXJFdmVudBITCg9UaW1lckV2ZW50X05vbmUQABIc",
                  "ChhUaW1lckV2ZW50X09uUmVxdWVzdFNlbnQQARIhCh1UaW1lckV2ZW50X09u",
                  "UmVzcG9uc2VSZWNlaXZlZBACEhsKF1RpbWVyRXZlbnRfT25FeHBpcmF0aW9u",
                  "EAMSGwoXVGltZXJFdmVudF9Pbk1hdGNoU3RhcnQQBBIaChZUaW1lckV2ZW50",
                  "X09uR2FtZVN0YXJ0EAUSGgoWVGltZXJFdmVudF9PblBsYXlTdGFydBAGEhwK",
                  "GFRpbWVyRXZlbnRfT25UdXJuQ2hhbmdlZBAHEh0KGVRpbWVyRXZlbnRfT25B",
                  "Y3RpdmVQbGF5ZXIQCBIgChxUaW1lckV2ZW50X09uTm9uQWN0aXZlUGxheWVy",
                  "EAkSGAoUVGltZXJFdmVudF9CZWdpbm5pbmcQChIUChBUaW1lckV2ZW50X01h",
                  "aW4xEAsSFQoRVGltZXJFdmVudF9Db21iYXQQDBIUChBUaW1lckV2ZW50X01h",
                  "aW4yEA0SFQoRVGltZXJFdmVudF9FbmRpbmcQDhIUChBUaW1lckV2ZW50X09u",
                  "V2luEA8SFQoRVGltZXJFdmVudF9Pbkxvc3MQEBIVChFUaW1lckV2ZW50X09u",
                  "RHJhdxAREhkKFVRpbWVyRXZlbnRfT25HYW1lT3ZlchASEhoKFlRpbWVyRXZl",
                  "bnRfT25NYXRjaE92ZXIQExIZChVUaW1lckV2ZW50X09uVHVybk92ZXIQFBIV",
                  "ChFUaW1lckV2ZW50X1Vwa2VlcBAVEhMKD1RpbWVyRXZlbnRfRHJhdxAWEhoK",
                  "FlRpbWVyRXZlbnRfQmVnaW5Db21iYXQQFxIcChhUaW1lckV2ZW50X0RlY2xh",
                  "cmVBdHRhY2sQGBIbChdUaW1lckV2ZW50X0RlY2xhcmVCbG9jaxAZEhsKF1Rp",
                  "bWVyRXZlbnRfQ29tYmF0RGFtYWdlEBoSGAoUVGltZXJFdmVudF9FbmRDb21i",
                  "YXQQGxISCg5UaW1lckV2ZW50X0VuZBAcEhYKElRpbWVyRXZlbnRfQ2xlYW51",
                  "cBAdEiAKHFRpbWVyRXZlbnRfRmlyc3RTdHJpa2VEYW1hZ2UQHiqOAQoMVGlt",
                  "ZXJQYWNrYWdlEhUKEVRpbWVyUGFja2FnZV9Ob25lEAASEwoPVGltZXJQYWNr",
                  "YWdlX1YxEAESEwoPVGltZXJQYWNrYWdlX1YyEAISEwoPVGltZXJQYWNrYWdl",
                  "X1YzEAMSEwoPVGltZXJQYWNrYWdlX1Y0EAQSEwoPVGltZXJQYWNrYWdlX1Y1",
                  "EAUqvAEKCVRpbWVyVHlwZRISCg5UaW1lclR5cGVfTm9uZRAAEhYKElRpbWVy",
                  "VHlwZV9EZWNpc2lvbhABEhgKFFRpbWVyVHlwZV9JbmFjdGl2aXR5EAISGgoW",
                  "VGltZXJUeXBlX0FjdGl2ZVBsYXllchADEh0KGVRpbWVyVHlwZV9Ob25BY3Rp",
                  "dmVQbGF5ZXIQBBIWChJUaW1lclR5cGVfUHJvbG9ndWUQBRIWChJUaW1lclR5",
                  "cGVfRXBpbG9ndWUQBiqOAQoMVHlwZUNhdGVnb3J5EhUKEVR5cGVDYXRlZ29y",
                  "eV9Ob25lEAASFgoSVHlwZUNhdGVnb3J5X0NvbG9yEAMSGQoVVHlwZUNhdGVn",
                  "b3J5X0NhcmRUeXBlEAUSGAoUVHlwZUNhdGVnb3J5X1N1YlR5cGUQBhIaChZU",
                  "eXBlQ2F0ZWdvcnlfU3VwZXJUeXBlEAcqZwoKVmlzaWJpbGl0eRITCg9WaXNp",
                  "YmlsaXR5X05vbmUQABIVChFWaXNpYmlsaXR5X1B1YmxpYxABEhYKElZpc2li",
                  "aWxpdHlfUHJpdmF0ZRACEhUKEVZpc2liaWxpdHlfSGlkZGVuEAMq7AEKEldl",
                  "bGxLbm93bkNhdGFsb2dJZBIbChdXZWxsS25vd25DYXRhbG9nSWRfTm9uZRAA",
                  "EhwKGFdlbGxLbm93bkNhdGFsb2dJZF9Ub2tlbhABEh0KGVdlbGxLbm93bkNh",
                  "dGFsb2dJZF9FbWJsZW0QAhInCiNXZWxsS25vd25DYXRhbG9nSWRfU3RhbmRh",
                  "cmRDYXJkQmFjaxADEh8KG1dlbGxLbm93bkNhdGFsb2dJZF9PYnNjdXJlZBAE",
                  "EjIKLldlbGxLbm93bkNhdGFsb2dJZF9EZWxheWVkVHJpZ2dlckFiaWxpdHlI",
                  "b2xkZXIQBSrUAQoJV2lzaENhcmRzEhIKDldpc2hDYXJkc19Ob25lEAASHwoZ",
                  "V2lzaENhcmRzX0dyaWZmaW5TZW50aW5lbBDwwQISGgoUV2lzaENhcmRzX0Rp",
                  "dmluYXRpb24Q8sECEh0KF1dpc2hDYXJkc19Eamlubk9mV2lzaGVzEPTBAhIZ",
                  "ChNXaXNoQ2FyZHNfRG9vbUJsYWRlEPXBAhIdChdXaXNoQ2FyZHNfWm9tYmll",
                  "R29saWF0aBD6wQISHQoXV2lzaENhcmRzX1dvcmRPZlNlaXppbmcQk54DKnsK",
                  "D1pvbmVQZXJtaXNzaW9ucxIYChRab25lUGVybWlzc2lvbnNfTm9uZRAAEhgK",
                  "FFpvbmVQZXJtaXNzaW9uc19IYW5kEAESGwoXWm9uZVBlcm1pc3Npb25zX0xp",
                  "YnJhcnkQAhIXChNab25lUGVybWlzc2lvbnNfQWxsEAMqpwIKCFpvbmVUeXBl",
                  "EhEKDVpvbmVUeXBlX05vbmUQABIUChBab25lVHlwZV9MaWJyYXJ5EAESEQoN",
                  "Wm9uZVR5cGVfSGFuZBACEhgKFFpvbmVUeXBlX0JhdHRsZWZpZWxkEAMSEgoO",
                  "Wm9uZVR5cGVfU3RhY2sQBBIWChJab25lVHlwZV9HcmF2ZXlhcmQQBRISCg5a",
                  "b25lVHlwZV9FeGlsZRAGEhQKEFpvbmVUeXBlX0NvbW1hbmQQBxIVChFab25l",
                  "VHlwZV9SZXZlYWxlZBAIEhIKDlpvbmVUeXBlX0xpbWJvEAkSFgoSWm9uZVR5",
                  "cGVfU2lkZWJvYXJkEAoSFAoQWm9uZVR5cGVfUGVuZGluZxALEhYKElpvbmVU",
                  "eXBlX1BoYXNlZE91dBAMYgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(AIConfigOption), typeof(AIConfigYesNo), typeof(AIMode), typeof(AbilityCategory), typeof(AbilityGameAdjustments), typeof(AbilityPaymentType), typeof(AbilitySubCategory), typeof(AbilityType), typeof(AbilityWord), typeof(ActionCostType), typeof(ActionType), typeof(AllowCancel), typeof(AnnotationType), typeof(Answer), typeof(AttackState), typeof(AttackWarningType), typeof(AuthenticationType), typeof(AutoPassOption), typeof(AutoPassPriority), typeof(AutoTapStopsSetting), typeof(BasicLandType), typeof(BlockState), typeof(BlockWarningType), typeof(CardColor), typeof(CardMechanicType), typeof(CardType), typeof(CastingTimeOptionType), typeof(ChoicePersistence), typeof(ClientMessageType), typeof(ClientToMatchServiceMessageType), typeof(ClientType), typeof(CoinFace), typeof(Color), typeof(ConnectionState), typeof(ConnectionStateChangedEventType), typeof(ConnectionStatus), typeof(ConstructedMatchType), typeof(ControllerType), typeof(CostCategory), typeof(CostType), typeof(CounterType), typeof(DamageRecType), typeof(DamageType), typeof(Designations), typeof(DetermineOptionsState), typeof(DifficultyLevel), typeof(DropMatchmakingResponseCode), typeof(FailureReason), typeof(GREMessageType), typeof(GRETHHostEmulatorErrorCodes), typeof(GRETHHostErrorCode), typeof(GRETHHostOperationMode), typeof(GameFormat), typeof(GameObjectType), typeof(GameRoomType), typeof(GameStage), typeof(GameStateType), typeof(GameStateUpdate), typeof(GameType), typeof(GameVariant), typeof(GroupType), typeof(Grouping), typeof(GroupingContext), typeof(GroupingStyle), typeof(HeuristicPriority), typeof(HighlightType), typeof(IRFormat), typeof(IdType), typeof(JoinMatchmakingResponseCode), typeof(KeyValuePairValueType), typeof(LinkType), typeof(LinkedFace), typeof(LobbyErrorCode), typeof(LobbyUserStateType), typeof(ManaColor), typeof(ManaPaymentStrategyType), typeof(ManaSelectionType), typeof(ManaSpecType), typeof(MatchCompletedReasonType), typeof(MatchControllerEventType), typeof(MatchControllerState), typeof(MatchGameRoomStateType), typeof(MatchScope), typeof(MatchServiceErrorCode), typeof(MatchState), typeof(MatchWinCondition), typeof(MayCast), typeof(MayPlay), typeof(MechanicType), typeof(MessageIdType), typeof(MiscellaneousTerm), typeof(MulliganOption), typeof(MulliganType), typeof(OptionContext), typeof(OptionResponse), typeof(OptionType), typeof(OrderCombatDamageType), typeof(OrderingContext), typeof(OrderingFunctionType), typeof(OrderingParameterId), typeof(OrderingType), typeof(ParameterType), typeof(PerformActionFor), typeof(Phase), typeof(PlayerIs), typeof(PlayerOrTeam), typeof(PresenceState), typeof(PromptMessage), typeof(PromptPriority), typeof(ProtoVersion), typeof(QualificationType), typeof(QueueType), typeof(ReasonFaceDown), typeof(ReferenceType), typeof(ReplacementEffectSpawnerType), typeof(RequiresConfirmation), typeof(ResultCode), typeof(ResultReason), typeof(ResultType), typeof(SelectAction), typeof(SelectionContext), typeof(SelectionListType), typeof(Setting), typeof(SettingKey), typeof(SettingScope), typeof(SettingStatus), typeof(ShuffleRestriction), typeof(SmartStopsSetting), typeof(SortBy), typeof(StaticList), typeof(Step), typeof(StopType), typeof(SubType), typeof(SubZoneType), typeof(SuperFormat), typeof(SuperType), typeof(TargetType), typeof(TeamType), typeof(TimeoutType), typeof(TimerBehavior), typeof(TimerEvent), typeof(TimerPackage), typeof(TimerType), typeof(TypeCategory), typeof(Visibility), typeof(WellKnownCatalogId), typeof(WishCards), typeof(ZonePermissions), typeof(ZoneType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(AIConfigData), AIConfigData.Parser, new[]{ "ConfigureValueHeuristics", "ConfigureOrderingHeuristics", "ValueHeuristicParameters", "OrderingHeuristicParameters", "Mode", "TracingEnabled", "ViewOpponentHand", "ViewOpponentLibrary", "MaximumDepth", "MaximumBreadth", "MaximumNodeExpansion", "TimeoutInMilliseconds", "TranspositionTableSizeInKB", "RandomSeed", "ConfigureHistoryOn", "AllowOpponentUndo", "AllowOpponentControl", "DiagnosticMode", "RandomOrderingRange", "TransEnable", "ConcedeOnException" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AIConfigureRequest), AIConfigureRequest.Parser, new[]{ "AiID", "AiConfigData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AIConfigureResponse), AIConfigureResponse.Parser, new[]{ "AiID", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AICreateRequest), AICreateRequest.Parser, new[]{ "MatchID", "AiID", "SystemSeatId", "GameID", "MajorVer", "MinorVer", "RevisionVer", "BuildVer" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AICreateResponse), AICreateResponse.Parser, new[]{ "AiID", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AIDestroyRequest), AIDestroyRequest.Parser, new[]{ "AiID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AIDestroyResponse), AIDestroyResponse.Parser, new[]{ "AiID", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AIFatalError), AIFatalError.Parser, new[]{ "ErrorMessage", "AiID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AIReconfigureData), AIReconfigureData.Parser, new[]{ "ConfigureValueHeuristics", "ConfigureOrderingHeuristics", "ValueHeuristicParameters", "OrderingHeuristicParameters", "TracingEnabled", "MaximumDepth", "MaximumBreadth", "MaximumNodeExpansion", "TranspositionTableSizeInKB", "RandomSeed", "TransEnable", "ConcedeOnException" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Action), Action.Parser, new[]{ "AutoTapActions", "ManaPaymentOptions", "ManaCost", "HoldSources", "ActionType", "GrpId", "InstanceId", "Grouping", "AbilityGrpId", "SourceId", "AlternativeGrpId", "ShouldStop", "DisqualifyingSourceId", "SelectionType", "Selection", "AlternativeSourceZcid", "IsHidden" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ActionCostReq), ActionCostReq.Parser, new[]{ "Index", "ActionCostType", "CostSelection", "CounterSelection" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ActionCostResp), ActionCostResp.Parser, new[]{ "Index", "ActionCostType", "CostSelection", "CounterSelection" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ActionInfo), ActionInfo.Parser, new[]{ "ActionId", "SeatId", "Action" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ActionsAvailableReq), ActionsAvailableReq.Parser, new[]{ "Actions", "InactiveActions" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AlternativeCost), AlternativeCost.Parser, new[]{ "ManaCost", "Index", "GrpId", "LocalizationId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AlternativeCostReq), AlternativeCostReq.Parser, new[]{ "Costs", "InstanceId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AlternativeCostResp), AlternativeCostResp.Parser, new[]{ "Index" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AnnotationInfo), AnnotationInfo.Parser, new[]{ "AffectedIds", "Type", "Details", "IgnoreForSeatIds", "Id", "AffectorId", "AllowRedaction" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AnyLobbyMessage), AnyLobbyMessage.Parser, new[]{ "ClientToLobbyMessage", "LobbyToClientMessage" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AnyMessage), AnyMessage.Parser, new[]{ "Timestamp", "ServerToGREMessage", "GREToServerMessage", "ClientToGREMessage", "GREToClientMessage" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AnyServiceMessage), AnyServiceMessage.Parser, new[]{ "UserContext", "ClientToMatchServiceMessage", "MatchServiceToClientMessage", "ClientToLobbyMessage", "LobbyToClientMessage" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AnyServiceMessageTypesRequestContext), AnyServiceMessageTypesRequestContext.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AnyServiceMessageTypesUserContext), AnyServiceMessageTypesUserContext.Parser, new[]{ "UserId", "UserRoles", "AuthenticationType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AnyToGREMessage), AnyToGREMessage.Parser, new[]{ "Timestamp", "ServerToGREMessage", "ClientToGREMessage" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AssignDamageConfirmation), AssignDamageConfirmation.Parser, new[]{ "InvalidAssignments", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AssignDamageReq), AssignDamageReq.Parser, new[]{ "DamageAssigners" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AssignDamageResp), AssignDamageResp.Parser, new[]{ "Assigners" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AttackInfo), AttackInfo.Parser, new[]{ "OrderedBlockers", "TargetId", "DamageOrdered", "DamageAssigned", "AlternativeGrpId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AttackWarning), AttackWarning.Parser, new[]{ "InstanceId", "Type", "WarningPromptId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Attacker), Attacker.Parser, new[]{ "LegalDamageRecipients", "AttackerInstanceId", "SelectedDamageRecipient", "AlternativeGrpId", "AutoAttacked", "MustAttack" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AuthenticateRequest), AuthenticateRequest.Parser, new[]{ "ClientId", "ClientAuthToken", "PlayerName", "PlayFabSessionTicket", "ClientInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AuthenticateResponse), AuthenticateResponse.Parser, new[]{ "ClientId", "SessionId", "ScreenName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AutoAnswer), AutoAnswer.Parser, new[]{ "PromptGrpId", "AbilityGrpId", "CardTitleId", "AppliesTo", "Status", "Answer" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AutoTapAction), AutoTapAction.Parser, new[]{ "InstanceId", "AbilityGrpId", "ManaId", "ManaPaymentOption", "CostCategory" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(AutoYield), AutoYield.Parser, new[]{ "AbilityGrpId", "CardTitleId", "AppliesTo", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(BehaviorTree), BehaviorTree.Parser, new[]{ "Root" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(BinaryGameState), BinaryGameState.Parser, new[]{ "InstanceData", "ClientActions", "InternalGREData", "GameStateMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(BlockInfo), BlockInfo.Parser, new[]{ "AttackerIds", "OrderedAttackers", "DamageOrdered", "DamageAssigned" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(BlockWarning), BlockWarning.Parser, new[]{ "InstanceId", "Type", "WarningPromptId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Blocker), Blocker.Parser, new[]{ "AttackerInstanceIds", "SelectedAttackerInstanceIds", "BlockerInstanceId", "MinAttackers", "MaxAttackers", "MustBlock" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CLIPSConfiguration), CLIPSConfiguration.Parser, new[]{ "InitFile", "MetricsFile", "LogFile", "EnableWatch", "EnableMetrics", "EnableLogging", "MaxFiringLimit", "WarningFiringLimit" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CancelActionReq), CancelActionReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CastingTimeOptionReq), CastingTimeOptionReq.Parser, new[]{ "ManaCost", "AutoTapActions", "CtoId", "CastingTimeOptionType", "AffectedId", "AffectorId", "GrpId", "PlayerIdToPrompt", "IsRequired", "Prompt", "NumericInputReq", "SelectManaTypeReq", "ModalReq", "SelectNReq" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CastingTimeOptionResp), CastingTimeOptionResp.Parser, new[]{ "CtoId", "CastingTimeOptionType", "NumericInputResp", "SelectManaTypeResp", "ChooseModalResp", "SelectNResp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CastingTimeOptionsReq), CastingTimeOptionsReq.Parser, new[]{ "CastingTimeOptionReq" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CastingTimeOptionsResp), CastingTimeOptionsResp.Parser, new[]{ "CastingTimeOptionResp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CheckpointConfiguration), CheckpointConfiguration.Parser, new[]{ "Enabled" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Choice), Choice.Parser, new[]{ "Parameters", "ChoiceId", "ResponseValue" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ChooseModalResp), ChooseModalResp.Parser, new[]{ "GrpIds", "AbilityGrpId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ChooseStartingPlayerReq), ChooseStartingPlayerReq.Parser, new[]{ "SystemSeatIds", "TeamIds", "TeamType", "Prompt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ChooseStartingPlayerResp), ChooseStartingPlayerResp.Parser, new[]{ "TeamType", "SystemSeatId", "TeamId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ClearLobbyUserStatusRequest), ClearLobbyUserStatusRequest.Parser, new[]{ "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ClearLobbyUserStatusResponse), ClearLobbyUserStatusResponse.Parser, new[]{ "UserInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ClientInfo), ClientInfo.Parser, new[]{ "ClientId", "ClientVersion", "ClientLocation", "ClientLanguage", "ClientType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ClientSessionInfo), ClientSessionInfo.Parser, new[]{ "ClientId", "SessionId", "Roles", "UserName", "ScreenName", "ClientInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ClientSync), ClientSync.Parser, new[]{ "SystemSeatId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ClientToFrontDoorMessage), ClientToFrontDoorMessage.Parser, new[]{ "ClientToLobbyMessage", "ClientToLapaMessage" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ClientToGREMessage), ClientToGREMessage.Parser, new[]{ "Type", "SystemSeatId", "GameStateId", "RespId", "ConnectReq", "CancelActionReq", "ChooseModalResp", "ConcedeReq", "ForceDrawReq", "GroupResp", "MulliganResp", "OptionalResp", "OrderResp", "PerformActionResp", "SelectNResp", "SetSettingsReq", "ChooseStartingPlayerResp", "DeclareAttackersResp", "DeclareBlockersResp", "OrderCombatDamageResp", "AssignDamageResp", "SelectTargetsResp", "SelectReplacementResp", "SelectNGroupResp", "AlternativeCostResp", "DistributionResp", "NumericInputResp", "SearchResp", "ActionCostResp", "CastingTimeOptionsResp", "SelectManaTypeResp", "SelectFromGroupsResp", "SearchFromGroupsResp", "GatherResp", "SubmitPaymentResp", "UiMessage", "SubmitDeckResp", "ControlReq", "TimerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ClientToLapaMessage), ClientToLapaMessage.Parser, new[]{ "Payload" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ClientToLobbyMessage), ClientToLobbyMessage.Parser, new[]{ "ClientId", "RequestId", "Timestamp", "CorrelationInfo", "AuthenticateRequest", "ServiceInfoRequest", "ClientSessionInfo", "GetUserIdsRequest", "GetUserInfoRequest", "ClearLobbyUserStatusRequest", "JoinQueueRequest", "DropQueueRequest", "DeleteQueueRequest", "JoinMatchmakingRequestV2", "DropMatchmakingRequestV2", "JoinConstructedMatchmakingRequest", "DropConstructedMatchmakingRequest", "MatchServiceToClientMessage", "EchoRequest" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ClientToMatchDoorConnectRequest), ClientToMatchDoorConnectRequest.Parser, new[]{ "MatchId", "McFabricUri", "ClientToGreMessageBytes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ClientToMatchServiceMessage), ClientToMatchServiceMessage.Parser, new[]{ "TransactionId", "Payload", "RequestId", "ClientToMatchServiceMessageType", "Timestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CombatDamageOrder), CombatDamageOrder.Parser, new[]{ "InstanceId", "Recipients", "DecisionPrompt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CombatDamageOrderAssignment), CombatDamageOrderAssignment.Parser, new[]{ "InstanceId", "Recipients", "DecisionPrompt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Composite), Composite.Parser, new[]{ "Sequence", "Selector", "Parallel" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ConcedeReq), ConcedeReq.Parser, new[]{ "Scope", "GameNumber" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ConfigureRequest), ConfigureRequest.Parser, new[]{ "General" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ConfigureResponse), ConfigureResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ConnectReq), ConnectReq.Parser, new[]{ "MajorVer", "MinorVer", "RevisionVer", "BuildVer", "DefaultSettings", "ProtoVer", "SeatId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ConnectResp), ConnectResp.Parser, new[]{ "Status", "MajorVer", "MinorVer", "RevisionVer", "BuildVer", "ProtoVer", "SeatId", "Settings" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ContinuationToken), ContinuationToken.Parser, new[]{ "Timestamp" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ControlReq), ControlReq.Parser, new[]{ "Type", "ControllerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CorrelationInfo), CorrelationInfo.Parser, new[]{ "CorrelationId", "CorrelationContext" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(CosmeticConfig), CosmeticConfig.Parser, new[]{ "Data", "SeatId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CosmeticInfo), CosmeticInfo.Parser, new[]{ "Data", "SeatId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Counter), Counter.Parser, new[]{ "Type", "Count", "Id", "MarkedObject" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CreateMatchGameRoomRequest), CreateMatchGameRoomRequest.Parser, new[]{ "GameRoomConfig" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CreateMatchGameRoomResponse), CreateMatchGameRoomResponse.Parser, new[]{ "GameRoomInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(CreateMatchGameRoomResponseV2), CreateMatchGameRoomResponseV2.Parser, new[]{ "McFabricUri" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DamageAssigner), DamageAssigner.Parser, new[]{ "Assignments", "InstanceId", "TotalDamage", "DecisionPrompt", "CanIgnoreBlockers" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DamageAssignment), DamageAssignment.Parser, new[]{ "InstanceId", "MinDamage", "MaxDamage", "AssignedDamage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DamageRecipient), DamageRecipient.Parser, new[]{ "Type", "TeamId", "PlayerSystemSeatId", "PlaneswalkerInstanceId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DeckInfo), DeckInfo.Parser, new[]{ "DeckId", "UserId", "CourseId", "DeckName", "LibraryCardIds", "SideboardCardIds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DeckMessage), DeckMessage.Parser, new[]{ "DeckCards", "SideboardCards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DeclareAttackersReq), DeclareAttackersReq.Parser, new[]{ "Attackers", "AttackWarnings", "ManaCost", "HasRequirements", "HasRestrictions" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DeclareAttackersResp), DeclareAttackersResp.Parser, new[]{ "SelectedAttackers" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DeclareBlockersReq), DeclareBlockersReq.Parser, new[]{ "Blockers", "BlockWarnings", "HasRequirements", "HasRestrictions" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DeclareBlockersResp), DeclareBlockersResp.Parser, new[]{ "SelectedBlockers" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Decorator), Decorator.Parser, new[]{ "Loop", "Inverter" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DeleteQueueRequest), DeleteQueueRequest.Parser, new[]{ "EventId", "QueueType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DeleteQueueResponse), DeleteQueueResponse.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DieRollResultsResp), DieRollResultsResp.Parser, new[]{ "PlayerDieRolls" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Distribution), Distribution.Parser, new[]{ "InstanceId", "Amount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DistributionReq), DistributionReq.Parser, new[]{ "TargetIds", "ExistingDistributionValues", "OptionIndex", "MinAmount", "MaxAmount", "MinPerTarget" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DistributionResp), DistributionResp.Parser, new[]{ "Distributions", "OptionIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DraftGameRoomConfig), DraftGameRoomConfig.Parser, new[]{ "GameRoomId", "EventId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DraftGameRoomInfo), DraftGameRoomInfo.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DropConstructedMatchmakingRequest), DropConstructedMatchmakingRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DropMatchmakingRequestV2), DropMatchmakingRequestV2.Parser, new[]{ "EventId", "CourseId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DropMatchmakingResponse), DropMatchmakingResponse.Parser, new[]{ "ResponseCode" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DropMatchmakingResponseV2), DropMatchmakingResponseV2.Parser, new[]{ "ResponseCode" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DropQueueRequest), DropQueueRequest.Parser, new[]{ "EventId", "QueueType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DropQueueResponse), DropQueueResponse.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(DummyResponse), DummyResponse.Parser, new[]{ "Dummy" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(EchoRequest), EchoRequest.Parser, new[]{ "Message" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(EchoResponse), EchoResponse.Parser, new[]{ "Message" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(EdictalMessage), EdictalMessage.Parser, new[]{ "EdictMessage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(EffectViolationBlocking), EffectViolationBlocking.Parser, new[]{ "Blocker", "AffectedInstanceId", "Prompt", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(EndTurn), EndTurn.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(FinalMatchResult), FinalMatchResult.Parser, new[]{ "MatchId", "ResultList", "ErrorMessage", "MatchForceResult", "MatchCompletedReason" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ForceDrawReq), ForceDrawReq.Parser, new[]{ "Scope" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(FrontDoorToClientMessage), FrontDoorToClientMessage.Parser, new[]{ "LobbyToClientMessage" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GRECancelScheduledMessage), GRECancelScheduledMessage.Parser, new[]{ "TimerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREConfigRequest), GREConfigRequest.Parser, new[]{ "GreConfiguration" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREConfiguration), GREConfiguration.Parser, new[]{ "GameStateRedactorConfiguration", "ClipsConfiguration", "CheckpointConfiguration" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GRECreateRequest), GRECreateRequest.Parser, new[]{ "MatchID", "GreID", "GameID", "MajorVer", "MinorVer", "RevisionVer", "BuildVer" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GRECreateResponse), GRECreateResponse.Parser, new[]{ "GreID", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREDestroyRequest), GREDestroyRequest.Parser, new[]{ "GreID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREDestroyResponse), GREDestroyResponse.Parser, new[]{ "GreID", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREExpireTimerRequest), GREExpireTimerRequest.Parser, new[]{ "TimerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREFatalError), GREFatalError.Parser, new[]{ "ErrorMessage", "GreID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREForceResultRequest), GREForceResultRequest.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREGameLoggerConfigureRequest), GREGameLoggerConfigureRequest.Parser, new[]{ "LoadFilename", "LoadPath", "SaveFilename", "SavePath" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREInterpretRequest), GREInterpretRequest.Parser, new[]{ "Clips" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREReplacePlayer), GREReplacePlayer.Parser, new[]{ "SystemSeatId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREResumeMatchRequest), GREResumeMatchRequest.Parser, new[]{ "BinaryGameState" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREScheduledMessage), GREScheduledMessage.Parser, new[]{ "TimerId", "DelayMs", "Message" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREStartMatchRequest), GREStartMatchRequest.Parser, new[]{ "MatchConfig" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GRESubmitDeckRequest), GRESubmitDeckRequest.Parser, new[]{ "DeckCards", "SideboardCards", "SystemSeatId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GRETHHostEmulatorLaunch), GRETHHostEmulatorLaunch.Parser, new[]{ "ProgramName", "ExecutablePath", "SharedLibraryFilename", "GreIRFilename", "LogFilename", "SyslogIPAddress", "SyslogTCPPort", "SyslogProcID", "OutFilename", "LinkID", "HostID", "SutID", "EnableRedaction" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GRETHHostEmulatorLaunchResp), GRETHHostEmulatorLaunchResp.Parser, new[]{ "Result", "HostID", "PID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GRETHHostEmulatorShutdown), GRETHHostEmulatorShutdown.Parser, new[]{ "ShutdownHostID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GRETHHostEmulatorShutdownResp), GRETHHostEmulatorShutdownResp.Parser, new[]{ "Result", "ShutdownHostID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GRETickMessage), GRETickMessage.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GRETimeoutMessage), GRETimeoutMessage.Parser, new[]{ "SeatId", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GRETimerExpiredMessage), GRETimerExpiredMessage.Parser, new[]{ "ExpiredTimerId", "ServerToGREMessage", "ClientToGREMessage" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GRETimerExpiredNotification), GRETimerExpiredNotification.Parser, new[]{ "TimerID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREToAnyMessage), GREToAnyMessage.Parser, new[]{ "Timestamp", "GREToServerMessage", "GREToClientMessage" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREToClientMessage), GREToClientMessage.Parser, new[]{ "SystemSeatIds", "Type", "MsgId", "GameStateId", "GameStateMessage", "Prompt", "ChooseStartingPlayerReq", "OptionalActionMessage", "ActionsAvailableReq", "OrderReq", "GroupReq", "SelectNReq", "ModalReq", "GetSettingsResp", "SetSettingsResp", "ConnectResp", "IllegalRequestMessage", "BinaryGameState", "DeclareAttackersReq", "SubmitAttackersResp", "DeclareBlockersReq", "SubmitBlockersResp", "AssignDamageReq", "AssignDamageConfirmation", "OrderCombatDamageReq", "OrderDamageConfirmation", "SelectTargetsReq", "SubmitTargetsResp", "PayCostsReq", "NonDecisionPlayerPrompt", "IntermissionReq", "DieRollResultsResp", "SelectReplacementReq", "SelectNGroupReq", "AlternativeCostReq", "DistributionReq", "NumericInputReq", "SearchReq", "CastingTimeOptionsReq", "InformationalUseOnly", "SelectManaTypeReq", "SelectFromGroupsReq", "SearchFromGroupsReq", "GatherReq", "AllowCancel", "UiMessage", "SubmitDeckReq", "EdictalMessage", "TimeoutMessage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GREToServerMessage), GREToServerMessage.Parser, new[]{ "MsgId", "BinaryGameState", "ReportResultMessage", "ScheduledMessage", "CancelScheduledMessage", "GameMetrics" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GameInfo), GameInfo.Parser, new[]{ "MatchID", "Results", "GameNumber", "Stage", "Type", "Variant", "MatchState", "MatchWinCondition", "MaxTimeoutCount", "MaxPipCount", "TimeoutDurationSec", "SuperFormat", "MulliganType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GameMetrics), GameMetrics.Parser, new[]{ "PlayerMetrics" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GameObjectInfo), GameObjectInfo.Parser, new[]{ "SuperTypes", "CardTypes", "Subtypes", "Color", "Viewers", "Abilities", "InstanceId", "GrpId", "GroupId", "Type", "ZoneId", "Visibility", "OwnerSeatId", "ControllerSeatId", "Power", "Toughness", "IsCopy", "IsTapped", "HasSummoningSickness", "AttackState", "BlockState", "Damage", "AttackInfo", "BlockInfo", "Loyalty", "ObjectSourceGrpId", "Name", "ParentId", "OverlayGrpId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GameStateMessage), GameStateMessage.Parser, new[]{ "Teams", "Players", "Zones", "GameObjects", "Annotations", "DiffDeletedInstanceIds", "Timers", "Actions", "Type", "GameStateId", "GameInfo", "TurnInfo", "PendingMessageCount", "PrevGameStateId", "Update" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GameStateRedactorConfiguration), GameStateRedactorConfiguration.Parser, new[]{ "EnableRedaction", "EnableForceDiff" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GatherReq), GatherReq.Parser, new[]{ "Sources", "OptionIndex", "DestinationId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GatherResp), GatherResp.Parser, new[]{ "Gatherings", "OptionIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GatherSource), GatherSource.Parser, new[]{ "SourceId", "MinAmount", "MaxAmount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Gathering), Gathering.Parser, new[]{ "InstanceId", "Amount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GeneralConfiguration), GeneralConfiguration.Parser, new[]{ "OperationMode", "MaxLogLevel" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GetGameRoomIdsRequest), GetGameRoomIdsRequest.Parser, new[]{ "EventId", "GameRoomStateTypeFilter", "GameRoomType", "IncludeInvisibleRooms", "IncludeReservedRooms", "SortFilterPagingOptions" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GetGameRoomIdsResponse), GetGameRoomIdsResponse.Parser, new[]{ "GameRoomIds", "ContinuationToken" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GetGameRoomInfoRequest), GetGameRoomInfoRequest.Parser, new[]{ "GameRoomId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GetGameRoomInfoResponse), GetGameRoomInfoResponse.Parser, new[]{ "MatchRoomInfo", "DraftRoomInfo" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GetLobbyUserIdsRequest), GetLobbyUserIdsRequest.Parser, new[]{ "SortFilterPagingOptions" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GetLobbyUserIdsResponse), GetLobbyUserIdsResponse.Parser, new[]{ "UserIds", "ContinuationToken" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GetLobbyUserInfoRequest), GetLobbyUserInfoRequest.Parser, new[]{ "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GetLobbyUserInfoResponse), GetLobbyUserInfoResponse.Parser, new[]{ "UserInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GetSettingsResp), GetSettingsResp.Parser, new[]{ "Settings" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GreToClientEvent), GreToClientEvent.Parser, new[]{ "GreToClientMessages" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Group), Group.Parser, new[]{ "Ids", "GroupId", "ZoneType", "SubZoneType", "MinSelect", "MaxSelect" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GroupReq), GroupReq.Parser, new[]{ "InstanceIds", "GroupSpecs", "TotalSelected", "Idx", "GroupType", "Context" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GroupResp), GroupResp.Parser, new[]{ "Groups", "Idx", "GroupType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(GroupSpecification), GroupSpecification.Parser, new[]{ "LowerBound", "UpperBound", "ZoneType", "SubZoneType", "Prompt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(IRLoaderConfiguration), IRLoaderConfiguration.Parser, new[]{ "EnableLimitedIRLoading" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(IllegalRequestMessage), IllegalRequestMessage.Parser, new[]{ "InvalidMessage", "Reason" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Int32Value), Int32Value.Parser, new[]{ "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(IntermissionReq), IntermissionReq.Parser, new[]{ "Options", "IntermissionPrompt", "GameResultType", "WinningTeamId", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(InvalidAttacker), InvalidAttacker.Parser, new[]{ "Result", "Attack", "DecisionPrompt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(InvalidBlocker), InvalidBlocker.Parser, new[]{ "Result", "Block", "DecisionPrompt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(InvalidCombatDamageOrderAssignment), InvalidCombatDamageOrderAssignment.Parser, new[]{ "Result", "Order" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(InvalidDamageAssignment), InvalidDamageAssignment.Parser, new[]{ "Result", "Assignment" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(InvalidTargetSelection), InvalidTargetSelection.Parser, new[]{ "Target", "Result", "DecisionPrompt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Inverter), Inverter.Parser, new[]{ "Child" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(JoinConstructedMatchmakingRequest), JoinConstructedMatchmakingRequest.Parser, new[]{ "DeckId", "MatchType", "NumberOfGames" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(JoinMatchGameRoomRequest), JoinMatchGameRoomRequest.Parser, new[]{ "GameRoomId", "GameRoomPassword" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(JoinMatchGameRoomResponse), JoinMatchGameRoomResponse.Parser, new[]{ "GameRoomInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(JoinMatchGameRoomResponseV2), JoinMatchGameRoomResponseV2.Parser, new[]{ "SeatId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(JoinMatchmakingRequestV2), JoinMatchmakingRequestV2.Parser, new[]{ "EventId", "CourseId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(JoinMatchmakingResponse), JoinMatchmakingResponse.Parser, new[]{ "ResponseCode" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(JoinMatchmakingResponseV2), JoinMatchmakingResponseV2.Parser, new[]{ "ResponseCode" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(JoinQueueRequest), JoinQueueRequest.Parser, new[]{ "EventId", "DeckId", "CourseId", "MatchmakingFilter", "QueueType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(JoinQueueResponse), JoinQueueResponse.Parser, new[]{ "QueueInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(KeyValuePairInfo), KeyValuePairInfo.Parser, new[]{ "Key", "ValueUint32", "ValueInt32", "ValueUint64", "ValueInt64", "ValueBool", "ValueString", "ValueFloat", "ValueDouble", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LobbyDraftInfo), LobbyDraftInfo.Parser, new[]{ "UserId", "EventId", "DraftId", "DraftStartedTimestamp", "DraftCompletedTimestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LobbyError), LobbyError.Parser, new[]{ "ErrorMessage", "LobbyErrorCode" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LobbyMatchCompletedEvent), LobbyMatchCompletedEvent.Parser, new[]{ "MatchInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LobbyMatchConfig), LobbyMatchConfig.Parser, new[]{ "MatchId", "EventId", "MatchGatewayUrl", "McFabricUri", "Players" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LobbyMatchCreatePendingEvent), LobbyMatchCreatePendingEvent.Parser, new[]{ "MatchCreatePendingTimestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LobbyMatchCreatedEvent), LobbyMatchCreatedEvent.Parser, new[]{ "MatchConfig", "MatchCreatedTimestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LobbyMatchInfo), LobbyMatchInfo.Parser, new[]{ "Config", "MatchGameRoomInfo", "MatchCreatedTimestamp", "MatchStartedTimestamp", "MatchCompletedTimestamp", "MatchResultsSavedTimestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LobbyMatchPlayerInfo), LobbyMatchPlayerInfo.Parser, new[]{ "PlayerName", "SystemSeatId", "TeamId", "IsWotc" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LobbyServiceInfo), LobbyServiceInfo.Parser, new[]{ "EnvironmentId", "ServiceFabricServiceInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LobbyToClientMessage), LobbyToClientMessage.Parser, new[]{ "Error", "RequestId", "Timestamp", "CorrelationInfo", "AuthenticateResponse", "ServiceInfoResponse", "GetUserIdsResponse", "GetUserInfoResponse", "ClearLobbyUserStatusResponse", "JoinQueueResponse", "DropQueueResponse", "DeleteQueueResponse", "JoinMatchmakingResponseV2", "DropMatchmakingResponseV2", "JoinMatchmakingResponse", "DropMatchmakingResponse", "ClientToMatchServiceMessage", "MatchCreatedEvent", "MatchCompletedEvent", "MatchCreatePendingEvent", "EchoResponse" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LobbyUserInfo), LobbyUserInfo.Parser, new[]{ "UserId", "StateType", "StateUpdatedTimestamp", "UserConnectionInfo", "PresenceState", "QueueInfo", "DraftInfo", "MatchInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LobbyUserQueueInfo), LobbyUserQueueInfo.Parser, new[]{ "UserId", "EventId", "JoinQueueRequest", "JoinQueueResponse" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Loop), Loop.Parser, new[]{ "Child" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LoopbackRequest), LoopbackRequest.Parser, new[]{ "Contents" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(LoopbackResponse), LoopbackResponse.Parser, new[]{ "Contents", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ManaInfo), ManaInfo.Parser, new[]{ "Specs", "ManaId", "Color", "SrcInstanceId", "AbilityGrpId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ManaInfoTypesSpec), ManaInfoTypesSpec.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ManaPayment), ManaPayment.Parser, new[]{ "Color", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ManaPaymentOption), ManaPaymentOption.Parser, new[]{ "Payments", "Mana", "MaxActivations", "OptionIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ManaRequirement), ManaRequirement.Parser, new[]{ "Color", "Count", "CostId", "ObjectId", "AbilityGrpId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchConfig), MatchConfig.Parser, new[]{ "Teams", "TimerConfigs", "CosmeticConfigs", "GameType", "GameVariant", "WinCondition", "MatchOptionBitmask", "MaxPlayerHandSize", "MatchTimeLimitSec", "InactivityTimeLimitSec", "TestConfig", "MulliganType", "TimerPackage", "TimeoutConfig", "SuperFormat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchControllerClientSessionSettings), MatchControllerClientSessionSettings.Parser, new[]{ "SubscribedEventTypes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchControllerGetSettingsRequest), MatchControllerGetSettingsRequest.Parser, new[]{ "PropertyNames" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchControllerGetSettingsResponse), MatchControllerGetSettingsResponse.Parser, new[]{ "MatchControllerSettings", "ClientSessionSettings" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchControllerHealthReport), MatchControllerHealthReport.Parser, new[]{ "ServiceInfo", "Timestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchControllerServiceInfo), MatchControllerServiceInfo.Parser, new[]{ "EnvironmentId", "ServiceFabricServiceInfo", "MatchControllerState" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchControllerSetSettingsRequest), MatchControllerSetSettingsRequest.Parser, new[]{ "Settings", "ClientSessionSettings" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchControllerSetSettingsResponse), MatchControllerSetSettingsResponse.Parser, new[]{ "Settings", "ClientSessionSettings" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchControllerSettings), MatchControllerSettings.Parser, new[]{ "GreIrBin", "GrpdXml", "CurrentSeason" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchControllerStateChangedEvent), MatchControllerStateChangedEvent.Parser, new[]{ "ServiceInfo", "Timestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchGameRoomConfig), MatchGameRoomConfig.Parser, new[]{ "GameRoomId", "EventId", "ReservedPlayers", "MatchId", "Password", "GreIrBinPath", "GreHostLoggerLevel", "GreRecorderConfig", "MatchConfig", "GreConfig", "IsVisible", "JoinRoomTimeoutSecs", "PlayerDisconnectTimeoutSecs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchGameRoomInfo), MatchGameRoomInfo.Parser, new[]{ "GameRoomId", "InterimMatchResultList", "Players", "PlayerMetrics", "MatchControllerUri", "MatchClusterUri", "CreatorId", "GameRoomConfig", "StateType", "FinalMatchResult", "CreatedTimestamp", "UpdatedTimestamp", "MatchResultSavedTimestamp", "CreatorClientType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchGameRoomOpponentConnectionStateChangedEvent), MatchGameRoomOpponentConnectionStateChangedEvent.Parser, new[]{ "MatchId", "SystemSeatId", "EventType", "Timestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchGameRoomPlayerInfo), MatchGameRoomPlayerInfo.Parser, new[]{ "UserId", "PlayerName", "CourseId", "DeckId", "ClientAuthToken", "SystemSeatId", "TeamId", "ConnectionInfo", "JoinTimestamp", "InactivityTimeoutTimestamp", "DisconnectTimeoutTimestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchGameRoomStateChangedEvent), MatchGameRoomStateChangedEvent.Parser, new[]{ "GameRoomInfo", "Timestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchPlayerMetrics), MatchPlayerMetrics.Parser, new[]{ "UserId", "Metrics" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchResultSaved), MatchResultSaved.Parser, new[]{ "MatchId", "Timestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchServiceError), MatchServiceError.Parser, new[]{ "ErrorMessage", "ErrorCode" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MatchServiceToClientMessage), MatchServiceToClientMessage.Parser, new[]{ "TransactionId", "RequestId", "Timestamp", "Error", "GreToClientEvent", "MatchGameRoomStateChangedEvent", "MatchControllerStateChangedEvent", "MatchControllerHealthReport", "OpponentConnectionStateChangedEvent", "AuthenticateResponse", "ServiceInfoResponse", "GetSettingsResponse", "SetSettingsResponse", "CreateMatchGameRoomResponse", "CreateMatchGameRoomResponseV2", "JoinMatchGameRoomResponse", "JoinMatchGameRoomResponseV2", "GetGameRoomIdsResponse", "GetGameRoomInfoResponse", "EchoResponse" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ModalOption), ModalOption.Parser, new[]{ "GrpId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ModalReq), ModalReq.Parser, new[]{ "ModalOptions", "ExcludedOptions", "AbilityGrpId", "MinSel", "MaxSel", "RepeatedSelectAllowed" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(MulliganResp), MulliganResp.Parser, new[]{ "Decision" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Node), Node.Parser, new[]{ "Composite", "Decorator", "Task" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(NumericInputReq), NumericInputReq.Parser, new[]{ "OptionIndex", "MinValue", "MaxValue", "StepSize" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(NumericInputResp), NumericInputResp.Parser, new[]{ "OptionIndex", "NumericInputValue" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OnChat), OnChat.Parser, new[]{ "Text" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OnHover), OnHover.Parser, new[]{ "ObjectId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OnSelect), OnSelect.Parser, new[]{ "ObjectId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OnShuffle), OnShuffle.Parser, new[]{ "ObjectIds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OptionalActionMessage), OptionalActionMessage.Parser, new[]{ "OptionalActionTypes", "Prompt", "SystemSeatId", "SourceId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OptionalResp), OptionalResp.Parser, new[]{ "Response", "Persistence", "AppliesTo", "MapTo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OrderCombatDamageReq), OrderCombatDamageReq.Parser, new[]{ "Orders", "OrderDamageType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OrderCombatDamageResp), OrderCombatDamageResp.Parser, new[]{ "Orders", "OrderDamageType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OrderDamageConfirmation), OrderDamageConfirmation.Parser, new[]{ "InvalidOrders", "Result", "OrderDamageType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OrderKey), OrderKey.Parser, new[]{ "ActivePlayer", "TurnPhase", "PhaseStep", "RequestType", "Context" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OrderReq), OrderReq.Parser, new[]{ "Ids", "Idx", "OrderingContext" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OrderResp), OrderResp.Parser, new[]{ "Ids", "Ordering", "Idx" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OrderedDamageAssignment), OrderedDamageAssignment.Parser, new[]{ "InstanceId", "AssignedDamage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OrderingHeuristicDefinition), OrderingHeuristicDefinition.Parser, new[]{ "Id", "Priority", "Weight", "OrderKey", "FunctionType", "MechanicType", "WithMechanic", "AbilityType", "SortOrder" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(OrderingHeuristicParameter), OrderingHeuristicParameter.Parser, new[]{ "ParamId", "ParamValue" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Parallel), Parallel.Parser, new[]{ "Children" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Pass), Pass.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(PayCostsReq), PayCostsReq.Parser, new[]{ "ManaCost", "PaymentActions", "PaymentSelection", "ActionCostReq", "SubmitPaymentReq" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(PerformActionResp), PerformActionResp.Parser, new[]{ "Actions", "AutoPassPriority", "SetYield", "AppliesTo", "MapTo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(PlayerConfig), PlayerConfig.Parser, new[]{ "DeckCards", "SideboardCards", "CommandEmblems", "SystemSeatId", "UndoPermissionBitmask", "ControlPermissionBitmask", "StartingLifeTotal", "StartingHandSizeSpecified", "StartingHandSize" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(PlayerDieRoll), PlayerDieRoll.Parser, new[]{ "SystemSeatId", "RollValue" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(PlayerInfo), PlayerInfo.Parser, new[]{ "ManaPool", "TimerIds", "LifeTotal", "SystemSeatNumber", "MaxHandSize", "TurnNumber", "TeamId", "ControllerSeatId", "ControllerType", "TimeoutCount", "PipCount", "PendingMessageType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(PlayerMetricKeyValuePair), PlayerMetricKeyValuePair.Parser, new[]{ "Key", "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(PlayerMetrics), PlayerMetrics.Parser, new[]{ "Metrics", "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Prompt), Prompt.Parser, new[]{ "Parameters", "Choices", "PromptId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(PromptParameter), PromptParameter.Parser, new[]{ "ParameterName", "StringValue", "RepeatedNumbers", "Type", "Reference", "NumberValue", "PromptId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(QueueInfo), QueueInfo.Parser, new[]{ "EventId", "QueueServiceBaseUri", "QueueServiceErrorCallbackUri", "QueueServiceOutputCallbackUri", "QueueType", "MinimumPlayerCount", "PlayerBatchSize", "TriggerCadenceMs", "CreatedTimestamp", "UpdatedTimestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Reference), Reference.Parser, new[]{ "Field", "DebugValue", "Type", "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ReplacementEffect), ReplacementEffect.Parser, new[]{ "ObjectInstance", "AbilityInstance", "AbilityGrpId", "AffectedObject", "ReplacementEffectId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ReportResultMessage), ReportResultMessage.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ResultSpec), ResultSpec.Parser, new[]{ "Scope", "Result", "WinningTeamId", "Reason" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SearchFromGroupsReq), SearchFromGroupsReq.Parser, new[]{ "ZonesToSearch", "Groups", "OptionIndex", "MinFind", "MaxFind", "GroupingStyle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SearchFromGroupsResp), SearchFromGroupsResp.Parser, new[]{ "ItemsFound", "OptionIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SearchReq), SearchReq.Parser, new[]{ "ZonesToSearch", "ItemsToSearch", "ItemsSought", "OptionIndex", "MinFind", "MaxFind" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SearchResp), SearchResp.Parser, new[]{ "ItemsFound", "OptionIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectCountersReq), SelectCountersReq.Parser, new[]{ "Counters", "MinSel", "MaxSel", "Context" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectCountersResp), SelectCountersResp.Parser, new[]{ "Counters", "Context" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectFromGroupsReq), SelectFromGroupsReq.Parser, new[]{ "Groups", "Idx", "MinTotalSel", "MaxTotalSel", "GroupingStyle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectFromGroupsResp), SelectFromGroupsResp.Parser, new[]{ "Ids", "Idx" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectManaTypeReq), SelectManaTypeReq.Parser, new[]{ "ManaColors", "Index" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectManaTypeResp), SelectManaTypeResp.Parser, new[]{ "ManaColors", "Index", "ManaColor" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectNGroupReq), SelectNGroupReq.Parser, new[]{ "Groups", "MinSel", "MaxSel", "Idx" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectNGroupResp), SelectNGroupResp.Parser, new[]{ "Selectedgroupids", "Idx" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectNReq), SelectNReq.Parser, new[]{ "Ids", "Weights", "UnfilteredIds", "MinSel", "MaxSel", "Context", "OptionType", "OptionContext", "ListType", "StaticList", "Idx", "Prompt", "IdType", "ChoicesAreRepeatable", "SourceId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectNResp), SelectNResp.Parser, new[]{ "Ids", "Idx", "Context", "OptionContext", "OptionType", "UseArbitrary" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectReplacementReq), SelectReplacementReq.Parser, new[]{ "Replacements", "IsOptional" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectReplacementResp), SelectReplacementResp.Parser, new[]{ "Replacement" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectTargetsReq), SelectTargetsReq.Parser, new[]{ "Targets" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SelectTargetsResp), SelectTargetsResp.Parser, new[]{ "Target", "Action" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Selector), Selector.Parser, new[]{ "Children" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Sequence), Sequence.Parser, new[]{ "Children" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ServerToGREMessage), ServerToGREMessage.Parser, new[]{ "CreateRequest", "ConfigRequest", "StartMatchRequest", "ResumeMatchRequest", "SubmitDeckRequest", "ForceResultRequest", "DestroyRequest", "TimerExpired", "Tick", "Timeout", "InterpretRequest", "ExpireTimerRequest" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ServiceFabricConfigPackageInfo), ServiceFabricConfigPackageInfo.Parser, new[]{ "PackageName", "PackageVersion" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ServiceFabricServiceInfo), ServiceFabricServiceInfo.Parser, new[]{ "ServiceName", "ServiceTypeName", "PartitionId", "NodeName", "CodePackageVersion", "ConfigPackages", "ExeAssemblyVersion", "GatewayUrl", "ReplicaOrInstanceId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ServiceInfoRequest), ServiceInfoRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SetSettingsReq), SetSettingsReq.Parser, new[]{ "Settings" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SetSettingsResp), SetSettingsResp.Parser, new[]{ "Settings" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SettingsMessage), SettingsMessage.Parser, new[]{ "Stops", "Yields", "Answers", "TransientStops", "Cosmetics", "AutoPassOption", "GraveyardOrder", "ClearAllStops", "ClearAllYields", "ClearAllAnswers", "ManaSelectionType", "DefaultAutoPassOption", "SmartStopsSetting", "AutoTapStopsSetting", "AutoOptionalPaymentCancellationSetting", "ManaPaymentStrategyType", "AutoSelectReplacementSetting" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SortFilterPagingOptions), SortFilterPagingOptions.Parser, new[]{ "Sort", "Filter", "Top", "Skip", "ContinuationToken" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Stop), Stop.Parser, new[]{ "StopType", "AppliesTo", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SubmitAttackersResp), SubmitAttackersResp.Parser, new[]{ "InvalidAttackers", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SubmitBlockersResp), SubmitBlockersResp.Parser, new[]{ "InvalidBlockers", "EffectViolationBlocking", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SubmitDeckReq), SubmitDeckReq.Parser, new[]{ "Deck" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SubmitDeckResp), SubmitDeckResp.Parser, new[]{ "Deck" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SubmitPaymentReq), SubmitPaymentReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SubmitPaymentResp), SubmitPaymentResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(SubmitTargetsResp), SubmitTargetsResp.Parser, new[]{ "InvalidSelections", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Target), Target.Parser, new[]{ "TargetInstanceId", "LegalAction", "Highlight" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(TargetInfo), TargetInfo.Parser, new[]{ "TargetType", "TargetId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(TargetSelection), TargetSelection.Parser, new[]{ "Targets", "TargetIdx", "MinTargets", "MaxTargets", "SelectedTargets", "Prompt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Task), Task.Parser, new[]{ "Timeout", "EndTurn", "Pass" }, new[]{ "Message" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(TeamConfig), TeamConfig.Parser, new[]{ "Players", "TeamID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(TeamInfo), TeamInfo.Parser, new[]{ "PlayerIds", "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(TestConfig), TestConfig.Parser, new[]{ "RandomSeeds", "ShuffleRestriction", "StartingPlayer", "UseSpecifiedSeed", "RandomSeed", "UseZeroManaCostForCasting", "UseMaxLandsPerTurn", "TreeOfCongress", "UseLibraryRNG", "DisableGameStateQueueingDuringCancelableActions", "DisableHiFiGameStates", "DisableTimers", "FreeMulliganCount", "RandomDrawCount", "MinRandomDrawDistance", "MaxRandomDrawDistance", "EnableAutoAcceptHand", "EnableAutoPlay", "DisableUnexpectedMessageRecovery", "DisableSideboarding" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(Timeout), Timeout.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(TimeoutConfig), TimeoutConfig.Parser, new[]{ "MaxTimeoutCount", "StartingTimeoutCount", "MaxPipCount", "StartingPipCount", "DurationSec" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(TimeoutMessage), TimeoutMessage.Parser, new[]{ "SeatId", "TimeoutCount", "Timer" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(TimerConfig), TimerConfig.Parser, new[]{ "Controls", "Type", "DurationSec", "Behavior", "WarningThresholdSec", "MaxDurationSec" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(TimerControl), TimerControl.Parser, new[]{ "Event", "Behavior" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(TimerInfo), TimerInfo.Parser, new[]{ "TimerId", "Type", "DurationSec", "ElapsedSec", "Running", "Behavior", "WarningThresholdSec", "ElapsedMs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(TreeOfCongress), TreeOfCongress.Parser, new[]{ "SystemSeatId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(TurnInfo), TurnInfo.Parser, new[]{ "Phase", "Step", "TurnNumber", "ActivePlayer", "PriorityPlayer", "DecisionPlayer", "StormCount", "NextPhase", "NextStep" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(UIMessage), UIMessage.Parser, new[]{ "SeatIds", "OnSelect", "OnHover", "OnShuffle", "OnChat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(UInt32Value), UInt32Value.Parser, new[]{ "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(UserConnectionInfo), UserConnectionInfo.Parser, new[]{ "ConnectionState", "LastConnectTimestamp", "LastDisconnectTimestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(UserOption), UserOption.Parser, new[]{ "OptionPrompt", "ResponseType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ValueHeuristicDefinition), ValueHeuristicDefinition.Parser, new[]{ "Id", "Priority", "Weight" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ValueHeuristicParameter), ValueHeuristicParameter.Parser, new[]{ "Id", "ParamValue" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(ZoneInfo), ZoneInfo.Parser, new[]{ "ObjectInstanceIds", "Viewers", "ZoneId", "Type", "Visibility", "OwnerSeatId" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum AIConfigOption
    {
        [pbr::OriginalName("AIConfigOption_None")] None = 0,
        [pbr::OriginalName("AIConfigOption_Inactive")] Inactive = 1,
        [pbr::OriginalName("AIConfigOption_Active")] Active = 2,
    }

    public enum AIConfigYesNo
    {
        [pbr::OriginalName("AIConfigYesNo_None")] None = 0,
        [pbr::OriginalName("AIConfigYesNo_No")] No = 1,
        [pbr::OriginalName("AIConfigYesNo_Yes")] Yes = 2,
    }

    public enum AIMode
    {
        [pbr::OriginalName("AIMode_None")] None = 0,
        [pbr::OriginalName("AIMode_Goldfish")] Goldfish = 1,
        [pbr::OriginalName("AIMode_Gameplay")] Gameplay = 2,
        [pbr::OriginalName("AIMode_Random")] Random = 3,
    }

    public enum AbilityCategory
    {
        [pbr::OriginalName("AbilityCategory_None")] None = 0,
        [pbr::OriginalName("AbilityCategory_Activated")] Activated = 1,
        [pbr::OriginalName("AbilityCategory_Triggered")] Triggered = 2,
        [pbr::OriginalName("AbilityCategory_Static")] Static = 3,
        [pbr::OriginalName("AbilityCategory_Spell")] Spell = 4,
        [pbr::OriginalName("AbilityCategory_AdditionalCost")] AdditionalCost = 5,
        [pbr::OriginalName("AbilityCategory_ActivatedTest")] ActivatedTest = 6,
        [pbr::OriginalName("AbilityCategory_Chained")] Chained = 7,
        [pbr::OriginalName("AbilityCategory_AlternativeCost")] AlternativeCost = 8,
        [pbr::OriginalName("AbilityCategory_OpeningHandAction")] OpeningHandAction = 9,
    }

    public enum AbilityGameAdjustments
    {
        [pbr::OriginalName("AbilityGameAdjustments_None")] None = 0,
        [pbr::OriginalName("AbilityGameAdjustments_LoadSideboards")] LoadSideboards = 1,
    }

    public enum AbilityPaymentType
    {
        [pbr::OriginalName("AbilityPaymentType_None")] None = 0,
        [pbr::OriginalName("AbilityPaymentType_TapSymbol")] TapSymbol = 1,
        [pbr::OriginalName("AbilityPaymentType_Loyalty")] Loyalty = 2,
    }

    public enum AbilitySubCategory
    {
        [pbr::OriginalName("AbilitySubCategory_None")] None = 0,
        [pbr::OriginalName("AbilitySubCategory_Mana")] Mana = 1,
        [pbr::OriginalName("AbilitySubCategory_Loyalty")] Loyalty = 2,
        [pbr::OriginalName("AbilitySubCategory_Payment")] Payment = 3,
        [pbr::OriginalName("AbilitySubCategory_Crew")] Crew = 4,
        [pbr::OriginalName("AbilitySubCategory_Embalm")] Embalm = 5,
        [pbr::OriginalName("AbilitySubCategory_Cycling")] Cycling = 6,
        [pbr::OriginalName("AbilitySubCategory_Transform")] Transform = 7,
        [pbr::OriginalName("AbilitySubCategory_Explore")] Explore = 8,
        [pbr::OriginalName("AbilitySubCategory_Eternalize")] Eternalize = 9,
        [pbr::OriginalName("AbilitySubCategory_EnterTheBattlefield")] EnterTheBattlefield = 10,
        [pbr::OriginalName("AbilitySubCategory_Surveil")] Surveil = 11,
    }

    public enum AbilityType
    {
        [pbr::OriginalName("AbilityType_None")] None = 0,
        [pbr::OriginalName("AbilityType_Deathtouch")] Deathtouch = 1,
        [pbr::OriginalName("AbilityType_Defender")] Defender = 2,
        [pbr::OriginalName("AbilityType_DoubleStrike")] DoubleStrike = 3,
        [pbr::OriginalName("AbilityType_Enchant")] Enchant = 4,
        [pbr::OriginalName("AbilityType_Equip")] Equip = 5,
        [pbr::OriginalName("AbilityType_FirstStrike")] FirstStrike = 6,
        [pbr::OriginalName("AbilityType_Flash")] Flash = 7,
        [pbr::OriginalName("AbilityType_Flying")] Flying = 8,
        [pbr::OriginalName("AbilityType_Haste")] Haste = 9,
        [pbr::OriginalName("AbilityType_Hexproof")] Hexproof = 10,
        [pbr::OriginalName("AbilityType_Intimidate")] Intimidate = 11,
        [pbr::OriginalName("AbilityType_Lifelink")] Lifelink = 12,
        [pbr::OriginalName("AbilityType_Reach")] Reach = 13,
        [pbr::OriginalName("AbilityType_Trample")] Trample = 14,
        [pbr::OriginalName("AbilityType_Vigilance")] Vigilance = 15,
        [pbr::OriginalName("AbilityType_Landwalk")] Landwalk = 16,
        [pbr::OriginalName("AbilityType_ProtectionFrom")] ProtectionFrom = 21,
        [pbr::OriginalName("AbilityType_Shroud")] Shroud = 22,
        [pbr::OriginalName("AbilityType_Banding")] Banding = 23,
        [pbr::OriginalName("AbilityType_Rampage")] Rampage = 24,
        [pbr::OriginalName("AbilityType_CumulativeUpkeep")] CumulativeUpkeep = 25,
        [pbr::OriginalName("AbilityType_Flanking")] Flanking = 26,
        [pbr::OriginalName("AbilityType_Phasing")] Phasing = 27,
        [pbr::OriginalName("AbilityType_Buyback")] Buyback = 28,
        [pbr::OriginalName("AbilityType_Shadow")] Shadow = 29,
        [pbr::OriginalName("AbilityType_Cycling")] Cycling = 30,
        [pbr::OriginalName("AbilityType_Echo")] Echo = 31,
        [pbr::OriginalName("AbilityType_Horsemanship")] Horsemanship = 32,
        [pbr::OriginalName("AbilityType_Fading")] Fading = 33,
        [pbr::OriginalName("AbilityType_Kicker")] Kicker = 34,
        [pbr::OriginalName("AbilityType_Flashback")] Flashback = 35,
        [pbr::OriginalName("AbilityType_Madness")] Madness = 36,
        [pbr::OriginalName("AbilityType_Morph")] Morph = 37,
        [pbr::OriginalName("AbilityType_Fear")] Fear = 38,
        [pbr::OriginalName("AbilityType_Amplify")] Amplify = 39,
        [pbr::OriginalName("AbilityType_Provoke")] Provoke = 40,
        [pbr::OriginalName("AbilityType_Storm")] Storm = 41,
        [pbr::OriginalName("AbilityType_AffinityFor")] AffinityFor = 42,
        [pbr::OriginalName("AbilityType_Entwine")] Entwine = 43,
        [pbr::OriginalName("AbilityType_Modular")] Modular = 44,
        [pbr::OriginalName("AbilityType_Sunburst")] Sunburst = 45,
        [pbr::OriginalName("AbilityType_Bushido")] Bushido = 46,
        [pbr::OriginalName("AbilityType_Soulshift")] Soulshift = 47,
        [pbr::OriginalName("AbilityType_Splice")] Splice = 48,
        [pbr::OriginalName("AbilityType_Offering")] Offering = 49,
        [pbr::OriginalName("AbilityType_Ninjitsu")] Ninjitsu = 50,
        [pbr::OriginalName("AbilityType_Epic")] Epic = 51,
        [pbr::OriginalName("AbilityType_Convoke")] Convoke = 52,
        [pbr::OriginalName("AbilityType_Dredge")] Dredge = 53,
        [pbr::OriginalName("AbilityType_Transmute")] Transmute = 54,
        [pbr::OriginalName("AbilityType_Bloodthirst")] Bloodthirst = 55,
        [pbr::OriginalName("AbilityType_Haunt")] Haunt = 56,
        [pbr::OriginalName("AbilityType_Replicate")] Replicate = 57,
        [pbr::OriginalName("AbilityType_Forecast")] Forecast = 58,
        [pbr::OriginalName("AbilityType_Graft")] Graft = 59,
        [pbr::OriginalName("AbilityType_Recover")] Recover = 60,
        [pbr::OriginalName("AbilityType_Ripple")] Ripple = 61,
        [pbr::OriginalName("AbilityType_SplitSecond")] SplitSecond = 62,
        [pbr::OriginalName("AbilityType_Suspend")] Suspend = 63,
        [pbr::OriginalName("AbilityType_Vanishing")] Vanishing = 64,
        [pbr::OriginalName("AbilityType_Absorb")] Absorb = 65,
        [pbr::OriginalName("AbilityType_AuraSwap")] AuraSwap = 66,
        [pbr::OriginalName("AbilityType_Delve")] Delve = 67,
        [pbr::OriginalName("AbilityType_Fortify")] Fortify = 68,
        [pbr::OriginalName("AbilityType_Frenzy")] Frenzy = 69,
        [pbr::OriginalName("AbilityType_Gravestorm")] Gravestorm = 70,
        [pbr::OriginalName("AbilityType_Poisonous")] Poisonous = 71,
        [pbr::OriginalName("AbilityType_Transfigure")] Transfigure = 72,
        [pbr::OriginalName("AbilityType_Champion")] Champion = 73,
        [pbr::OriginalName("AbilityType_Changeling")] Changeling = 74,
        [pbr::OriginalName("AbilityType_Evoke")] Evoke = 75,
        [pbr::OriginalName("AbilityType_Hideaway")] Hideaway = 76,
        [pbr::OriginalName("AbilityType_Prowl")] Prowl = 77,
        [pbr::OriginalName("AbilityType_Reinforce")] Reinforce = 78,
        [pbr::OriginalName("AbilityType_Conspire")] Conspire = 79,
        [pbr::OriginalName("AbilityType_Persist")] Persist = 80,
        [pbr::OriginalName("AbilityType_Wither")] Wither = 81,
        [pbr::OriginalName("AbilityType_Retrace")] Retrace = 82,
        [pbr::OriginalName("AbilityType_Devour")] Devour = 83,
        [pbr::OriginalName("AbilityType_Exalted")] Exalted = 84,
        [pbr::OriginalName("AbilityType_Unearth")] Unearth = 85,
        [pbr::OriginalName("AbilityType_Cascade")] Cascade = 86,
        [pbr::OriginalName("AbilityType_Annihilator")] Annihilator = 87,
        [pbr::OriginalName("AbilityType_LevelUp")] LevelUp = 88,
        [pbr::OriginalName("AbilityType_Rebound")] Rebound = 89,
        [pbr::OriginalName("AbilityType_TotemArmor")] TotemArmor = 90,
        [pbr::OriginalName("AbilityType_Infect")] Infect = 91,
        [pbr::OriginalName("AbilityType_BattleCry")] BattleCry = 92,
        [pbr::OriginalName("AbilityType_LivingWeapon")] LivingWeapon = 93,
        [pbr::OriginalName("AbilityType_Undying")] Undying = 94,
        [pbr::OriginalName("AbilityType_Miracle")] Miracle = 95,
        [pbr::OriginalName("AbilityType_Soulbond")] Soulbond = 96,
        [pbr::OriginalName("AbilityType_Overload")] Overload = 97,
        [pbr::OriginalName("AbilityType_Scavenge")] Scavenge = 98,
        [pbr::OriginalName("AbilityType_Unleash")] Unleash = 99,
        [pbr::OriginalName("AbilityType_Cipher")] Cipher = 100,
        [pbr::OriginalName("AbilityType_Evolve")] Evolve = 101,
        [pbr::OriginalName("AbilityType_Extort")] Extort = 102,
        [pbr::OriginalName("AbilityType_Fuse")] Fuse = 103,
        [pbr::OriginalName("AbilityType_Indestructible")] Indestructible = 104,
        [pbr::OriginalName("AbilityType_Regenerate")] Regenerate = 105,
        [pbr::OriginalName("AbilityType_EnterZone_Tapped")] EnterZoneTapped = 106,
        [pbr::OriginalName("AbilityType_EnterZone_Controlled")] EnterZoneControlled = 107,
        [pbr::OriginalName("AbilityType_EnterZone_Attached")] EnterZoneAttached = 108,
        [pbr::OriginalName("AbilityType_Level")] Level = 109,
        [pbr::OriginalName("AbilityType_EnterZone_WithCounters")] EnterZoneWithCounters = 110,
        [pbr::OriginalName("AbilityType_TurnFaceUp_WithCounters")] TurnFaceUpWithCounters = 111,
        [pbr::OriginalName("AbilityType_PlaneswalkerLoyaltyReplacement")] PlaneswalkerLoyaltyReplacement = 114,
        [pbr::OriginalName("AbilityType_Multikicker")] Multikicker = 122,
        [pbr::OriginalName("AbilityType_BasicLandcycling")] BasicLandcycling = 123,
        [pbr::OriginalName("AbilityType_Forestcycling")] Forestcycling = 124,
        [pbr::OriginalName("AbilityType_Islandcycling")] Islandcycling = 125,
        [pbr::OriginalName("AbilityType_Mountaincycling")] Mountaincycling = 126,
        [pbr::OriginalName("AbilityType_Plainscycling")] Plainscycling = 127,
        [pbr::OriginalName("AbilityType_Slivercycling")] Slivercycling = 128,
        [pbr::OriginalName("AbilityType_Swampcycling")] Swampcycling = 129,
        [pbr::OriginalName("AbilityType_Wizardcycling")] Wizardcycling = 130,
        [pbr::OriginalName("AbilityType_Monstrosity")] Monstrosity = 134,
        [pbr::OriginalName("AbilityType_Tribute")] Tribute = 135,
        [pbr::OriginalName("AbilityType_Outlast")] Outlast = 136,
        [pbr::OriginalName("AbilityType_Prowess")] Prowess = 137,
        [pbr::OriginalName("AbilityType_Bolster")] Bolster = 138,
        [pbr::OriginalName("AbilityType_PlaneswalkerDamageRedirection")] PlaneswalkerDamageRedirection = 139,
        [pbr::OriginalName("AbilityType_OrderObjectsEnteringGraveyard")] OrderObjectsEnteringGraveyard = 140,
        [pbr::OriginalName("AbilityType_OrderObjectsEnteringLibrary")] OrderObjectsEnteringLibrary = 141,
        [pbr::OriginalName("AbilityType_Menace")] Menace = 142,
        [pbr::OriginalName("AbilityType_Skulk")] Skulk = 143,
        [pbr::OriginalName("AbilityType_Ingest")] Ingest = 144,
        [pbr::OriginalName("AbilityType_Manifest")] Manifest = 145,
        [pbr::OriginalName("AbilityType_Emerge")] Emerge = 147,
        [pbr::OriginalName("AbilityType_Deliverance")] Deliverance = 148,
        [pbr::OriginalName("AbilityType_CastWithoutPayingManaCost")] CastWithoutPayingManaCost = 149,
        [pbr::OriginalName("AbilityType_Megamorph")] Megamorph = 150,
        [pbr::OriginalName("AbilityType_Devoid")] Devoid = 151,
        [pbr::OriginalName("AbilityType_SacrificeClue")] SacrificeClue = 152,
        [pbr::OriginalName("AbilityType_Escalate")] Escalate = 153,
        [pbr::OriginalName("AbilityType_Fabricate")] Fabricate = 154,
        [pbr::OriginalName("AbilityType_Crew")] Crew = 156,
        [pbr::OriginalName("AbilityType_Improvise")] Improvise = 157,
        [pbr::OriginalName("AbilityType_ChooseZoneForMutuallyExclusiveZoneTransfers")] ChooseZoneForMutuallyExclusiveZoneTransfers = 158,
        [pbr::OriginalName("AbilityType_Aftermath")] Aftermath = 159,
        [pbr::OriginalName("AbilityType_Embalm")] Embalm = 160,
        [pbr::OriginalName("AbilityType_TapForImprovise")] TapForImprovise = 161,
        [pbr::OriginalName("AbilityType_Exert")] Exert = 162,
        [pbr::OriginalName("AbilityType_Eternalize")] Eternalize = 163,
        [pbr::OriginalName("AbilityType_Afflict")] Afflict = 164,
        [pbr::OriginalName("AbilityType_Ascend")] Ascend = 165,
        [pbr::OriginalName("AbilityType_SagaChapter")] SagaChapter = 166,
        [pbr::OriginalName("AbilityType_SagaLoreReplacement")] SagaLoreReplacement = 167,
        [pbr::OriginalName("AbilityType_SagaLoreTurn")] SagaLoreTurn = 168,
        [pbr::OriginalName("AbilityType_Surveil")] Surveil = 169,
        [pbr::OriginalName("AbilityType_Jumpstart")] Jumpstart = 170,
        [pbr::OriginalName("AbilityType_Mentor")] Mentor = 171,
        [pbr::OriginalName("AbilityType_TapForConvoke")] TapForConvoke = 172,
        [pbr::OriginalName("AbilityType_Placeholder1")] Placeholder1 = 173,
        [pbr::OriginalName("AbilityType_Placeholder2")] Placeholder2 = 174,
        [pbr::OriginalName("AbilityType_Placeholder3")] Placeholder3 = 175,
        [pbr::OriginalName("AbilityType_Placeholder4")] Placeholder4 = 176,
        [pbr::OriginalName("AbilityType_Placeholder5")] Placeholder5 = 177,
        [pbr::OriginalName("AbilityType_Twiddle_Test")] TwiddleTest = 989,
        [pbr::OriginalName("AbilityType_Donate_Test")] DonateTest = 990,
        [pbr::OriginalName("AbilityType_Bounce_Test")] BounceTest = 991,
        [pbr::OriginalName("AbilityType_DrawCard_Test")] DrawCardTest = 992,
        [pbr::OriginalName("AbilityType_AddCost_Test")] AddCostTest = 993,
        [pbr::OriginalName("AbilityType_DeployBears_Test")] DeployBearsTest = 994,
        [pbr::OriginalName("AbilityType_EndTurn_Test")] EndTurnTest = 995,
        [pbr::OriginalName("AbilityType_Wish_Test")] WishTest = 996,
        [pbr::OriginalName("AbilityType_PutLibrary_Test")] PutLibraryTest = 997,
        [pbr::OriginalName("AbilityType_GainHaste_Test")] GainHasteTest = 998,
        [pbr::OriginalName("AbilityType_AddWUBRG_Test")] AddWubrgTest = 999,
        [pbr::OriginalName("AbilityType_IntrinsicMana_W")] IntrinsicManaW = 1001,
        [pbr::OriginalName("AbilityType_IntrinsicMana_U")] IntrinsicManaU = 1002,
        [pbr::OriginalName("AbilityType_IntrinsicMana_B")] IntrinsicManaB = 1003,
        [pbr::OriginalName("AbilityType_IntrinsicMana_R")] IntrinsicManaR = 1004,
        [pbr::OriginalName("AbilityType_IntrinsicMana_G")] IntrinsicManaG = 1005,
        [pbr::OriginalName("AbilityType_AutoGen")] AutoGen = 1006,
    }

    public enum AbilityWord
    {
        [pbr::OriginalName("AbilityWord_None")] None = 0,
        [pbr::OriginalName("AbilityWord_Battalion")] Battalion = 1,
        [pbr::OriginalName("AbilityWord_Bloodrush")] Bloodrush = 2,
        [pbr::OriginalName("AbilityWord_Channel")] Channel = 3,
        [pbr::OriginalName("AbilityWord_Chroma")] Chroma = 4,
        [pbr::OriginalName("AbilityWord_Cohort")] Cohort = 5,
        [pbr::OriginalName("AbilityWord_Constellation")] Constellation = 6,
        [pbr::OriginalName("AbilityWord_Converge")] Converge = 7,
        [pbr::OriginalName("AbilityWord_CouncilsDilemma")] CouncilsDilemma = 8,
        [pbr::OriginalName("AbilityWord_Delirium")] Delirium = 9,
        [pbr::OriginalName("AbilityWord_Domain")] Domain = 10,
        [pbr::OriginalName("AbilityWord_FatefulHour")] FatefulHour = 11,
        [pbr::OriginalName("AbilityWord_Ferocious")] Ferocious = 12,
        [pbr::OriginalName("AbilityWord_Formidable")] Formidable = 13,
        [pbr::OriginalName("AbilityWord_Grandeur")] Grandeur = 14,
        [pbr::OriginalName("AbilityWord_Hellbent")] Hellbent = 15,
        [pbr::OriginalName("AbilityWord_Heroic")] Heroic = 16,
        [pbr::OriginalName("AbilityWord_Imprint")] Imprint = 17,
        [pbr::OriginalName("AbilityWord_Inspired")] Inspired = 18,
        [pbr::OriginalName("AbilityWord_JoinForces")] JoinForces = 19,
        [pbr::OriginalName("AbilityWord_Kinship")] Kinship = 20,
        [pbr::OriginalName("AbilityWord_Landfall")] Landfall = 21,
        [pbr::OriginalName("AbilityWord_Lieutenant")] Lieutenant = 22,
        [pbr::OriginalName("AbilityWord_Metalcraft")] Metalcraft = 23,
        [pbr::OriginalName("AbilityWord_Morbid")] Morbid = 24,
        [pbr::OriginalName("AbilityWord_Parley")] Parley = 25,
        [pbr::OriginalName("AbilityWord_Radiance")] Radiance = 26,
        [pbr::OriginalName("AbilityWord_Raid")] Raid = 27,
        [pbr::OriginalName("AbilityWord_Rally")] Rally = 28,
        [pbr::OriginalName("AbilityWord_SpellMastery")] SpellMastery = 29,
        [pbr::OriginalName("AbilityWord_Strive")] Strive = 30,
        [pbr::OriginalName("AbilityWord_Sweep")] Sweep = 31,
        [pbr::OriginalName("AbilityWord_TemptingOffer")] TemptingOffer = 32,
        [pbr::OriginalName("AbilityWord_Threshold")] Threshold = 33,
        [pbr::OriginalName("AbilityWord_WillOfTheCouncil")] WillOfTheCouncil = 34,
        [pbr::OriginalName("AbilityWord_Revolt")] Revolt = 35,
        [pbr::OriginalName("AbilityWord_Enrage")] Enrage = 36,
        [pbr::OriginalName("AbilityWord_Historic")] Historic = 37,
        [pbr::OriginalName("AbilityWord_Undergrowth")] Undergrowth = 38,
    }

    public enum ActionCostType
    {
        [pbr::OriginalName("ActionCostType_None")] None = 0,
        [pbr::OriginalName("ActionCostType_Select")] Select = 1,
        [pbr::OriginalName("ActionCostType_SelectCounter")] SelectCounter = 2,
        [pbr::OriginalName("ActionCostType_Autoselect")] Autoselect = 3,
    }

    public enum ActionType
    {
        [pbr::OriginalName("ActionType_None")] None = 0,
        [pbr::OriginalName("ActionType_Cast")] Cast = 1,
        [pbr::OriginalName("ActionType_Activate")] Activate = 2,
        [pbr::OriginalName("ActionType_Play")] Play = 3,
        [pbr::OriginalName("ActionType_Activate_Mana")] ActivateMana = 4,
        [pbr::OriginalName("ActionType_Pass")] Pass = 5,
        [pbr::OriginalName("ActionType_Activate_Test")] ActivateTest = 6,
        [pbr::OriginalName("ActionType_Mode")] Mode = 7,
        [pbr::OriginalName("ActionType_Special_TurnFaceUp")] SpecialTurnFaceUp = 8,
        [pbr::OriginalName("ActionType_ResolutionCost")] ResolutionCost = 9,
        [pbr::OriginalName("ActionType_CastLeft")] CastLeft = 10,
        [pbr::OriginalName("ActionType_CastRight")] CastRight = 11,
        [pbr::OriginalName("ActionType_Make_Payment")] MakePayment = 12,
        [pbr::OriginalName("ActionType_CastingTimeOption")] CastingTimeOption = 13,
        [pbr::OriginalName("ActionType_CombatCost")] CombatCost = 14,
        [pbr::OriginalName("ActionType_OpeningHandAction")] OpeningHandAction = 15,
    }

    public enum AllowCancel
    {
        [pbr::OriginalName("AllowCancel_None")] None = 0,
        [pbr::OriginalName("AllowCancel_Continue")] Continue = 1,
        [pbr::OriginalName("AllowCancel_Abort")] Abort = 2,
        [pbr::OriginalName("AllowCancel_No")] No = 3,
    }

    public enum AnnotationType
    {
        [pbr::OriginalName("AnnotationType_None")] None = 0,
        [pbr::OriginalName("AnnotationType_ZoneTransfer")] ZoneTransfer = 1,
        [pbr::OriginalName("AnnotationType_LossOfGame")] LossOfGame = 2,
        [pbr::OriginalName("AnnotationType_DamageDealt")] DamageDealt = 3,
        [pbr::OriginalName("AnnotationType_TappedUntappedPermanent")] TappedUntappedPermanent = 4,
        [pbr::OriginalName("AnnotationType_ModifiedPower")] ModifiedPower = 5,
        [pbr::OriginalName("AnnotationType_ModifiedToughness")] ModifiedToughness = 6,
        [pbr::OriginalName("AnnotationType_ModifiedColor")] ModifiedColor = 7,
        [pbr::OriginalName("AnnotationType_PhaseOrStepModified")] PhaseOrStepModified = 8,
        [pbr::OriginalName("AnnotationType_AddAbility")] AddAbility = 9,
        [pbr::OriginalName("AnnotationType_ModifiedLife")] ModifiedLife = 10,
        [pbr::OriginalName("AnnotationType_CreateAttachment")] CreateAttachment = 11,
        [pbr::OriginalName("AnnotationType_RemoveAttachment")] RemoveAttachment = 12,
        [pbr::OriginalName("AnnotationType_ObjectIdChanged")] ObjectIdChanged = 13,
        [pbr::OriginalName("AnnotationType_Counter")] Counter = 14,
        [pbr::OriginalName("AnnotationType_ControllerChanged")] ControllerChanged = 15,
        [pbr::OriginalName("AnnotationType_CounterAdded")] CounterAdded = 16,
        [pbr::OriginalName("AnnotationType_CounterRemoved")] CounterRemoved = 17,
        [pbr::OriginalName("AnnotationType_LayeredEffectCreated")] LayeredEffectCreated = 18,
        [pbr::OriginalName("AnnotationType_LayeredEffectDestroyed")] LayeredEffectDestroyed = 19,
        [pbr::OriginalName("AnnotationType_Attachment")] Attachment = 20,
        [pbr::OriginalName("AnnotationType_Haunt")] Haunt = 21,
        [pbr::OriginalName("AnnotationType_CopiedObject")] CopiedObject = 22,
        [pbr::OriginalName("AnnotationType_RemoveAbility")] RemoveAbility = 23,
        [pbr::OriginalName("AnnotationType_WinTheGame")] WinTheGame = 24,
        [pbr::OriginalName("AnnotationType_ModifiedType")] ModifiedType = 25,
        [pbr::OriginalName("AnnotationType_TargetSpec")] TargetSpec = 26,
        [pbr::OriginalName("AnnotationType_TextChange")] TextChange = 27,
        [pbr::OriginalName("AnnotationType_FaceDown")] FaceDown = 28,
        [pbr::OriginalName("AnnotationType_TurnPermanent")] TurnPermanent = 29,
        [pbr::OriginalName("AnnotationType_DynamicAbility")] DynamicAbility = 30,
        [pbr::OriginalName("AnnotationType_ObjectsSelected")] ObjectsSelected = 31,
        [pbr::OriginalName("AnnotationType_TriggeringObject")] TriggeringObject = 32,
        [pbr::OriginalName("AnnotationType_DamageSource")] DamageSource = 33,
        [pbr::OriginalName("AnnotationType_ManaPaid")] ManaPaid = 34,
        [pbr::OriginalName("AnnotationType_TokenCreated")] TokenCreated = 35,
        [pbr::OriginalName("AnnotationType_AbilityInstanceCreated")] AbilityInstanceCreated = 36,
        [pbr::OriginalName("AnnotationType_AbilityInstanceDeleted")] AbilityInstanceDeleted = 37,
        [pbr::OriginalName("AnnotationType_DisplayCardUnderCard")] DisplayCardUnderCard = 38,
        [pbr::OriginalName("AnnotationType_AbilityWordActive")] AbilityWordActive = 39,
        [pbr::OriginalName("AnnotationType_LinkInfo")] LinkInfo = 40,
        [pbr::OriginalName("AnnotationType_TokenDeleted")] TokenDeleted = 41,
        [pbr::OriginalName("AnnotationType_Qualification")] Qualification = 42,
        [pbr::OriginalName("AnnotationType_ResolutionStart")] ResolutionStart = 43,
        [pbr::OriginalName("AnnotationType_ResolutionComplete")] ResolutionComplete = 44,
        [pbr::OriginalName("AnnotationType_Designation")] Designation = 45,
        [pbr::OriginalName("AnnotationType_GainDesignation")] GainDesignation = 46,
        [pbr::OriginalName("AnnotationType_CardRevealed")] CardRevealed = 47,
        [pbr::OriginalName("AnnotationType_NewTurnStarted")] NewTurnStarted = 48,
        [pbr::OriginalName("AnnotationType_ManaDetails")] ManaDetails = 49,
        [pbr::OriginalName("AnnotationType_DisqualifiedEffect")] DisqualifiedEffect = 50,
        [pbr::OriginalName("AnnotationType_LayeredEffect")] LayeredEffect = 51,
        [pbr::OriginalName("AnnotationType_PendingEffect")] PendingEffect = 52,
        [pbr::OriginalName("AnnotationType_ShouldntPlay")] ShouldntPlay = 53,
        [pbr::OriginalName("AnnotationType_UseOrCostsManaCost")] UseOrCostsManaCost = 54,
        [pbr::OriginalName("AnnotationType_RemainingSelections")] RemainingSelections = 55,
        [pbr::OriginalName("AnnotationType_Shuffle")] Shuffle = 56,
        [pbr::OriginalName("AnnotationType_CoinFlip")] CoinFlip = 57,
        [pbr::OriginalName("AnnotationType_ChooseRandom")] ChooseRandom = 58,
        [pbr::OriginalName("AnnotationType_RevealedCardCreated")] RevealedCardCreated = 59,
        [pbr::OriginalName("AnnotationType_RevealedCardDeleted")] RevealedCardDeleted = 60,
        [pbr::OriginalName("AnnotationType_SuspendLike")] SuspendLike = 61,
        [pbr::OriginalName("AnnotationType_ReplacementEffect")] ReplacementEffect = 62,
        [pbr::OriginalName("AnnotationType_EnteredZoneThisTurn")] EnteredZoneThisTurn = 63,
        [pbr::OriginalName("AnnotationType_CastingTimeOption")] CastingTimeOption = 64,
        [pbr::OriginalName("AnnotationType_Scry")] Scry = 65,
        [pbr::OriginalName("AnnotationType_PredictedDirectDamage")] PredictedDirectDamage = 66,
        [pbr::OriginalName("AnnotationType_SwitchPowerToughness")] SwitchPowerToughness = 67,
        [pbr::OriginalName("AnnotationType_SupplementalText")] SupplementalText = 68,
    }

    public enum Answer
    {
        [pbr::OriginalName("Answer_None")] None = 0,
        [pbr::OriginalName("Answer_Yes")] Yes = 1,
        [pbr::OriginalName("Answer_No")] No = 2,
    }

    public enum AttackState
    {
        [pbr::OriginalName("AttackState_None")] None = 0,
        [pbr::OriginalName("AttackState_Declared")] Declared = 1,
        [pbr::OriginalName("AttackState_Attacking")] Attacking = 2,
    }

    public enum AttackWarningType
    {
        [pbr::OriginalName("AttackWarningType_None")] None = 0,
        [pbr::OriginalName("AttackWarningType_MustAttackWithAtLeastOne")] MustAttackWithAtLeastOne = 1,
        [pbr::OriginalName("AttackWarningType_CannotAttackAlone")] CannotAttackAlone = 2,
        [pbr::OriginalName("AttackWarningType_MustAttack")] MustAttack = 3,
    }

    public enum AuthenticationType
    {
        [pbr::OriginalName("AuthenticationType_Invalid")] Invalid = 0,
        [pbr::OriginalName("AuthenticationType_PlayFabImpersonation")] PlayFabImpersonation = 1,
        [pbr::OriginalName("AuthenticationType_Service")] Service = 2,
    }

    public enum AutoPassOption
    {
        [pbr::OriginalName("AutoPassOption_None")] None = 0,
        [pbr::OriginalName("AutoPassOption_Turn")] Turn = 1,
        [pbr::OriginalName("AutoPassOption_UnlessAction")] UnlessAction = 2,
        [pbr::OriginalName("AutoPassOption_EndStep")] EndStep = 3,
        [pbr::OriginalName("AutoPassOption_Clear")] Clear = 4,
        [pbr::OriginalName("AutoPassOption_UnlessOpponentAction")] UnlessOpponentAction = 5,
        [pbr::OriginalName("AutoPassOption_ResolveMyStackEffects")] ResolveMyStackEffects = 6,
        [pbr::OriginalName("AutoPassOption_FullControl")] FullControl = 7,
    }

    public enum AutoPassPriority
    {
        [pbr::OriginalName("AutoPassPriority_None")] None = 0,
        [pbr::OriginalName("AutoPassPriority_No")] No = 1,
        [pbr::OriginalName("AutoPassPriority_Yes")] Yes = 2,
    }

    public enum AutoTapStopsSetting
    {
        [pbr::OriginalName("AutoTapStopsSetting_None")] None = 0,
        [pbr::OriginalName("AutoTapStopsSetting_Enable")] Enable = 1,
        [pbr::OriginalName("AutoTapStopsSetting_Disable")] Disable = 2,
    }

    public enum BasicLandType
    {
        [pbr::OriginalName("BasicLandType_None")] None = 0,
        [pbr::OriginalName("BasicLandType_Plains")] Plains = 1,
        [pbr::OriginalName("BasicLandType_Island")] Island = 2,
        [pbr::OriginalName("BasicLandType_Swamp")] Swamp = 3,
        [pbr::OriginalName("BasicLandType_Mountain")] Mountain = 4,
        [pbr::OriginalName("BasicLandType_Forest")] Forest = 5,
    }

    public enum BlockState
    {
        [pbr::OriginalName("BlockState_None")] None = 0,
        [pbr::OriginalName("BlockState_Declared")] Declared = 1,
        [pbr::OriginalName("BlockState_Blocking")] Blocking = 2,
        [pbr::OriginalName("BlockState_Blocked")] Blocked = 3,
        [pbr::OriginalName("BlockState_Unblocked")] Unblocked = 4,
    }

    public enum BlockWarningType
    {
        [pbr::OriginalName("BlockWarningType_None")] None = 0,
        [pbr::OriginalName("BlockWarningType_InsufficientBlockers")] InsufficientBlockers = 1,
        [pbr::OriginalName("BlockWarningType_CannotBlockAlone")] CannotBlockAlone = 2,
        [pbr::OriginalName("BlockWarningType_MustBeBlocked")] MustBeBlocked = 3,
        [pbr::OriginalName("BlockWarningType_MustBlock")] MustBlock = 4,
        [pbr::OriginalName("BlockWarningType_MustBeBlockedByAll")] MustBeBlockedByAll = 5,
    }

    public enum CardColor
    {
        [pbr::OriginalName("CardColor_Colorless")] Colorless = 0,
        [pbr::OriginalName("CardColor_White")] White = 1,
        [pbr::OriginalName("CardColor_Blue")] Blue = 2,
        [pbr::OriginalName("CardColor_Black")] Black = 3,
        [pbr::OriginalName("CardColor_Red")] Red = 4,
        [pbr::OriginalName("CardColor_Green")] Green = 5,
        [pbr::OriginalName("CardColor_Land")] Land = 6,
        [pbr::OriginalName("CardColor_Artifact")] Artifact = 7,
    }

    public enum CardMechanicType
    {
        [pbr::OriginalName("CardMechanicType_None")] None = 0,
        [pbr::OriginalName("CardMechanicType_AddAbility")] AddAbility = 2,
        [pbr::OriginalName("CardMechanicType_AddAttachment")] AddAttachment = 3,
        [pbr::OriginalName("CardMechanicType_DealDamage")] DealDamage = 4,
        [pbr::OriginalName("CardMechanicType_DestroyPermanent")] DestroyPermanent = 5,
        [pbr::OriginalName("CardMechanicType_Discard")] Discard = 6,
        [pbr::OriginalName("CardMechanicType_DrawCard")] DrawCard = 7,
        [pbr::OriginalName("CardMechanicType_LossOfGame")] LossOfGame = 8,
        [pbr::OriginalName("CardMechanicType_SetColor")] SetColor = 9,
        [pbr::OriginalName("CardMechanicType_ModifyLife")] ModifyLife = 10,
        [pbr::OriginalName("CardMechanicType_ModifyPower")] ModifyPower = 11,
        [pbr::OriginalName("CardMechanicType_ModifyToughness")] ModifyToughness = 12,
        [pbr::OriginalName("CardMechanicType_PhaseOrStepTransition")] PhaseOrStepTransition = 13,
        [pbr::OriginalName("CardMechanicType_PutCounterOnObject")] PutCounterOnObject = 14,
        [pbr::OriginalName("CardMechanicType_CreateToken")] CreateToken = 15,
        [pbr::OriginalName("CardMechanicType_RemoveCounterFromObject")] RemoveCounterFromObject = 16,
        [pbr::OriginalName("CardMechanicType_ResolveAbility")] ResolveAbility = 17,
        [pbr::OriginalName("CardMechanicType_Reveal")] Reveal = 18,
        [pbr::OriginalName("CardMechanicType_TapPermanent")] TapPermanent = 19,
        [pbr::OriginalName("CardMechanicType_UntapPermanent")] UntapPermanent = 21,
        [pbr::OriginalName("CardMechanicType_ZoneTransfer")] ZoneTransfer = 22,
        [pbr::OriginalName("CardMechanicType_RegeneratePermanent")] RegeneratePermanent = 23,
        [pbr::OriginalName("CardMechanicType_SacrificePermanent")] SacrificePermanent = 24,
        [pbr::OriginalName("CardMechanicType_SetController")] SetController = 25,
        [pbr::OriginalName("CardMechanicType_DeclaredAttacker")] DeclaredAttacker = 26,
        [pbr::OriginalName("CardMechanicType_DeclaredBlocker")] DeclaredBlocker = 27,
        [pbr::OriginalName("CardMechanicType_BecomeTarget")] BecomeTarget = 28,
        [pbr::OriginalName("CardMechanicType_AddToManaPool")] AddToManaPool = 29,
        [pbr::OriginalName("CardMechanicType_EnterZone")] EnterZone = 30,
        [pbr::OriginalName("CardMechanicType_ShuffleLibrary")] ShuffleLibrary = 31,
        [pbr::OriginalName("CardMechanicType_CounterObjectOnStack")] CounterObjectOnStack = 32,
        [pbr::OriginalName("CardMechanicType_ExileGameObject")] ExileGameObject = 33,
        [pbr::OriginalName("CardMechanicType_DamageDealt")] DamageDealt = 34,
        [pbr::OriginalName("CardMechanicType_PhaseInPermanent")] PhaseInPermanent = 35,
        [pbr::OriginalName("CardMechanicType_PhaseOutPermanent")] PhaseOutPermanent = 36,
        [pbr::OriginalName("CardMechanicType_AttackerBlocked")] AttackerBlocked = 37,
        [pbr::OriginalName("CardMechanicType_AttackersSubmitted")] AttackersSubmitted = 38,
        [pbr::OriginalName("CardMechanicType_BlockersDetermined")] BlockersDetermined = 39,
        [pbr::OriginalName("CardMechanicType_SetPower")] SetPower = 40,
        [pbr::OriginalName("CardMechanicType_SetToughness")] SetToughness = 41,
        [pbr::OriginalName("CardMechanicType_BeginTurn")] BeginTurn = 42,
        [pbr::OriginalName("CardMechanicType_TurnFaceUp")] TurnFaceUp = 43,
        [pbr::OriginalName("CardMechanicType_Transform")] Transform = 44,
        [pbr::OriginalName("CardMechanicType_Dredge")] Dredge = 45,
        [pbr::OriginalName("CardMechanicType_Explore")] Explore = 46,
        [pbr::OriginalName("CardMechanicType_Provoke")] Provoke = 47,
    }

    public enum CardType
    {
        [pbr::OriginalName("CardType_None")] None = 0,
        [pbr::OriginalName("CardType_Artifact")] Artifact = 1,
        [pbr::OriginalName("CardType_Creature")] Creature = 2,
        [pbr::OriginalName("CardType_Enchantment")] Enchantment = 3,
        [pbr::OriginalName("CardType_Instant")] Instant = 4,
        [pbr::OriginalName("CardType_Land")] Land = 5,
        [pbr::OriginalName("CardType_Phenomenon")] Phenomenon = 6,
        [pbr::OriginalName("CardType_Plane")] Plane = 7,
        [pbr::OriginalName("CardType_Planeswalker")] Planeswalker = 8,
        [pbr::OriginalName("CardType_Scheme")] Scheme = 9,
        [pbr::OriginalName("CardType_Sorcery")] Sorcery = 10,
        [pbr::OriginalName("CardType_Tribal")] Tribal = 11,
        [pbr::OriginalName("CardType_Vanguard")] Vanguard = 12,
    }

    public enum CastingTimeOptionType
    {
        [pbr::OriginalName("CastingTimeOptionType_None")] None = 0,
        [pbr::OriginalName("CastingTimeOptionType_Done")] Done = 1,
        [pbr::OriginalName("CastingTimeOptionType_ChooseX")] ChooseX = 2,
        [pbr::OriginalName("CastingTimeOptionType_Kicker")] Kicker = 3,
        [pbr::OriginalName("CastingTimeOptionType_Multikicker")] Multikicker = 4,
        [pbr::OriginalName("CastingTimeOptionType_AdditionalCost")] AdditionalCost = 5,
        [pbr::OriginalName("CastingTimeOptionType_OptionalCost")] OptionalCost = 6,
        [pbr::OriginalName("CastingTimeOptionType_Replicate")] Replicate = 7,
        [pbr::OriginalName("CastingTimeOptionType_Conspire")] Conspire = 8,
        [pbr::OriginalName("CastingTimeOptionType_ManaType")] ManaType = 9,
        [pbr::OriginalName("CastingTimeOptionType_Modal")] Modal = 10,
        [pbr::OriginalName("CastingTimeOptionType_ChooseOrCost")] ChooseOrCost = 11,
        [pbr::OriginalName("CastingTimeOptionType_Selection")] Selection = 12,
    }

    public enum ChoicePersistence
    {
        [pbr::OriginalName("ChoicePersistence_None")] None = 0,
        [pbr::OriginalName("ChoicePersistence_ChooseOnce")] ChooseOnce = 1,
        [pbr::OriginalName("ChoicePersistence_ChooseAlways")] ChooseAlways = 2,
    }

    public enum ClientMessageType
    {
        [pbr::OriginalName("ClientMessageType_None")] None = 0,
        [pbr::OriginalName("ClientMessageType_ConnectReq")] ConnectReq = 1,
        [pbr::OriginalName("ClientMessageType_CancelActionReq")] CancelActionReq = 5,
        [pbr::OriginalName("ClientMessageType_ChooseModalResp")] ChooseModalResp = 6,
        [pbr::OriginalName("ClientMessageType_ConcedeReq")] ConcedeReq = 7,
        [pbr::OriginalName("ClientMessageType_EnterSideboardingReq")] EnterSideboardingReq = 8,
        [pbr::OriginalName("ClientMessageType_ForceDrawReq")] ForceDrawReq = 9,
        [pbr::OriginalName("ClientMessageType_GetSettingsReq")] GetSettingsReq = 11,
        [pbr::OriginalName("ClientMessageType_GroupResp")] GroupResp = 12,
        [pbr::OriginalName("ClientMessageType_MulliganResp")] MulliganResp = 13,
        [pbr::OriginalName("ClientMessageType_OrderResp")] OrderResp = 14,
        [pbr::OriginalName("ClientMessageType_PerformActionResp")] PerformActionResp = 15,
        [pbr::OriginalName("ClientMessageType_ControlReq")] ControlReq = 17,
        [pbr::OriginalName("ClientMessageType_SelectNResp")] SelectNresp = 18,
        [pbr::OriginalName("ClientMessageType_SetSettingsReq")] SetSettingsReq = 20,
        [pbr::OriginalName("ClientMessageType_UndoReq")] UndoReq = 22,
        [pbr::OriginalName("ClientMessageType_ChooseStartingPlayerResp")] ChooseStartingPlayerResp = 24,
        [pbr::OriginalName("ClientMessageType_OptionalActionResp")] OptionalActionResp = 25,
        [pbr::OriginalName("ClientMessageType_AllowForceDrawResp")] AllowForceDrawResp = 26,
        [pbr::OriginalName("ClientMessageType_RevealHandResp")] RevealHandResp = 28,
        [pbr::OriginalName("ClientMessageType_DeclareAttackersResp")] DeclareAttackersResp = 30,
        [pbr::OriginalName("ClientMessageType_SubmitAttackersReq")] SubmitAttackersReq = 31,
        [pbr::OriginalName("ClientMessageType_DeclareBlockersResp")] DeclareBlockersResp = 32,
        [pbr::OriginalName("ClientMessageType_SubmitBlockersReq")] SubmitBlockersReq = 33,
        [pbr::OriginalName("ClientMessageType_OrderCombatDamageResp")] OrderCombatDamageResp = 34,
        [pbr::OriginalName("ClientMessageType_AssignDamageResp")] AssignDamageResp = 35,
        [pbr::OriginalName("ClientMessageType_SelectTargetsResp")] SelectTargetsResp = 36,
        [pbr::OriginalName("ClientMessageType_SubmitTargetsReq")] SubmitTargetsReq = 37,
        [pbr::OriginalName("ClientMessageType_DrawCardResp")] DrawCardResp = 38,
        [pbr::OriginalName("ClientMessageType_SelectReplacementResp")] SelectReplacementResp = 39,
        [pbr::OriginalName("ClientMessageType_SelectNGroupResp")] SelectNgroupResp = 40,
        [pbr::OriginalName("ClientMessageType_AlternativeCostResp")] AlternativeCostResp = 41,
        [pbr::OriginalName("ClientMessageType_DistributionResp")] DistributionResp = 42,
        [pbr::OriginalName("ClientMessageType_NumericInputResp")] NumericInputResp = 43,
        [pbr::OriginalName("ClientMessageType_SearchResp")] SearchResp = 44,
        [pbr::OriginalName("ClientMessageType_ActionCostResp")] ActionCostResp = 45,
        [pbr::OriginalName("ClientMessageType_CastingTimeOptionsResp")] CastingTimeOptionsResp = 46,
        [pbr::OriginalName("ClientMessageType_SelectManaTypeResp")] SelectManaTypeResp = 47,
        [pbr::OriginalName("ClientMessageType_SelectFromGroupsResp")] SelectFromGroupsResp = 48,
        [pbr::OriginalName("ClientMessageType_SearchFromGroupsResp")] SearchFromGroupsResp = 49,
        [pbr::OriginalName("ClientMessageType_GatherResp")] GatherResp = 50,
        [pbr::OriginalName("ClientMessageType_SubmitPaymentResp")] SubmitPaymentResp = 51,
        [pbr::OriginalName("ClientMessageType_AutoResp")] AutoResp = 52,
        [pbr::OriginalName("ClientMessageType_UIMessage")] Uimessage = 53,
        [pbr::OriginalName("ClientMessageType_SubmitDeckResp")] SubmitDeckResp = 54,
        [pbr::OriginalName("ClientMessageType_TakeTimeoutReq")] TakeTimeoutReq = 55,
    }

    public enum ClientToMatchServiceMessageType
    {
        [pbr::OriginalName("ClientToMatchServiceMessageType_None")] None = 0,
        [pbr::OriginalName("ClientToMatchServiceMessageType_ClientToMatchDoorConnectRequest")] ClientToMatchDoorConnectRequest = 1,
        [pbr::OriginalName("ClientToMatchServiceMessageType_ClientToGREMessage")] ClientToGremessage = 2,
        [pbr::OriginalName("ClientToMatchServiceMessageType_ClientToGREUIMessage")] ClientToGreuimessage = 3,
        [pbr::OriginalName("ClientToMatchServiceMessageType_AuthenticateRequest")] AuthenticateRequest = 4,
        [pbr::OriginalName("ClientToMatchServiceMessageType_CreateMatchGameRoomRequest")] CreateMatchGameRoomRequest = 5,
        [pbr::OriginalName("ClientToMatchServiceMessageType_EchoRequest")] EchoRequest = 8,
    }

    public enum ClientType
    {
        [pbr::OriginalName("ClientType_Invalid")] Invalid = 0,
        [pbr::OriginalName("ClientType_User")] User = 1,
        [pbr::OriginalName("ClientType_Service")] Service = 2,
        [pbr::OriginalName("ClientType_Familiar")] Familiar = 3,
    }

    public enum CoinFace
    {
        [pbr::OriginalName("CoinFace_None")] None = 0,
        [pbr::OriginalName("CoinFace_Heads")] Heads = 1,
        [pbr::OriginalName("CoinFace_Tails")] Tails = 2,
    }

    public enum Color
    {
        [pbr::OriginalName("Color_None")] None = 0,
        [pbr::OriginalName("Color_White")] White = 1,
        [pbr::OriginalName("Color_Blue")] Blue = 2,
        [pbr::OriginalName("Color_Black")] Black = 3,
        [pbr::OriginalName("Color_Red")] Red = 4,
        [pbr::OriginalName("Color_Green")] Green = 5,
    }

    public enum ConnectionState
    {
        [pbr::OriginalName("ConnectionState_Invalid")] Invalid = 0,
        [pbr::OriginalName("ConnectionState_Open")] Open = 1,
        [pbr::OriginalName("ConnectionState_Closed")] Closed = 2,
        [pbr::OriginalName("ConnectionState_Connecting")] Connecting = 3,
        [pbr::OriginalName("ConnectionState_Closing")] Closing = 4,
    }

    public enum ConnectionStateChangedEventType
    {
        [pbr::OriginalName("ConnectionStateChangedEventType_Invalid")] Invalid = 0,
        [pbr::OriginalName("ConnectionStateChangedEventType_Connected")] Connected = 1,
        [pbr::OriginalName("ConnectionStateChangedEventType_Disconnected")] Disconnected = 2,
    }

    public enum ConnectionStatus
    {
        [pbr::OriginalName("ConnectionStatus_None")] None = 0,
        [pbr::OriginalName("ConnectionStatus_Success")] Success = 1,
        [pbr::OriginalName("ConnectionStatus_AlreadyConnected")] AlreadyConnected = 2,
        [pbr::OriginalName("ConnectionStatus_GameOver")] GameOver = 3,
        [pbr::OriginalName("ConnectionStatus_GRPVersionIncompat")] GrpversionIncompat = 4,
    }

    public enum ConstructedMatchType
    {
        [pbr::OriginalName("Precon")] Precon = 0,
        [pbr::OriginalName("Unranked")] Unranked = 1,
        [pbr::OriginalName("Ranked")] Ranked = 2,
    }

    public enum ControllerType
    {
        [pbr::OriginalName("ControllerType_None")] None = 0,
        [pbr::OriginalName("ControllerType_Player")] Player = 1,
        [pbr::OriginalName("ControllerType_AI")] Ai = 2,
        [pbr::OriginalName("ControllerType_AI_Goldfish")] AiGoldfish = 3,
        [pbr::OriginalName("ControllerType_AI_PetRock")] AiPetRock = 4,
    }

    public enum CostCategory
    {
        [pbr::OriginalName("CostCategory_None")] None = 0,
        [pbr::OriginalName("CostCategory_Executable")] Executable = 1,
        [pbr::OriginalName("CostCategory_Predictable")] Predictable = 2,
    }

    public enum CostType
    {
        [pbr::OriginalName("CostType_None")] None = 0,
        [pbr::OriginalName("CostType_Mana")] Mana = 1,
        [pbr::OriginalName("CostType_TapSelf")] TapSelf = 2,
        [pbr::OriginalName("CostType_SacSelf")] SacSelf = 3,
        [pbr::OriginalName("CostType_Action")] Action = 4,
        [pbr::OriginalName("CostType_Loyalty")] Loyalty = 5,
        [pbr::OriginalName("CostType_DiscardSelf")] DiscardSelf = 6,
        [pbr::OriginalName("CostType_Life")] Life = 7,
        [pbr::OriginalName("CostType_ExileSelf")] ExileSelf = 8,
        [pbr::OriginalName("CostType_UntapSelf")] UntapSelf = 9,
        [pbr::OriginalName("CostType_Or")] Or = 10,
    }

    public enum CounterType
    {
        [pbr::OriginalName("CounterType_None")] None = 0,
        [pbr::OriginalName("CounterType_P1P1")] P1P1 = 1,
        [pbr::OriginalName("CounterType_M1M1")] M1M1 = 2,
        [pbr::OriginalName("CounterType_Poison")] Poison = 3,
        [pbr::OriginalName("CounterType_Wind")] Wind = 4,
        [pbr::OriginalName("CounterType_Time")] Time = 5,
        [pbr::OriginalName("CounterType_Fade")] Fade = 6,
        [pbr::OriginalName("CounterType_Loyalty")] Loyalty = 7,
        [pbr::OriginalName("CounterType_Wish")] Wish = 8,
        [pbr::OriginalName("CounterType_Age")] Age = 9,
        [pbr::OriginalName("CounterType_Aim")] Aim = 10,
        [pbr::OriginalName("CounterType_Arrow")] Arrow = 11,
        [pbr::OriginalName("CounterType_Arrowhead")] Arrowhead = 12,
        [pbr::OriginalName("CounterType_Awakening")] Awakening = 13,
        [pbr::OriginalName("CounterType_Blaze")] Blaze = 14,
        [pbr::OriginalName("CounterType_Blood")] Blood = 15,
        [pbr::OriginalName("CounterType_Bounty")] Bounty = 16,
        [pbr::OriginalName("CounterType_Bribery")] Bribery = 17,
        [pbr::OriginalName("CounterType_Carrion")] Carrion = 18,
        [pbr::OriginalName("CounterType_Charge")] Charge = 19,
        [pbr::OriginalName("CounterType_Control")] Control = 20,
        [pbr::OriginalName("CounterType_Corpse")] Corpse = 21,
        [pbr::OriginalName("CounterType_Credit")] Credit = 22,
        [pbr::OriginalName("CounterType_Cube")] Cube = 23,
        [pbr::OriginalName("CounterType_Currency")] Currency = 24,
        [pbr::OriginalName("CounterType_Death")] Death = 25,
        [pbr::OriginalName("CounterType_Delay")] Delay = 26,
        [pbr::OriginalName("CounterType_Depletion")] Depletion = 27,
        [pbr::OriginalName("CounterType_Despair")] Despair = 28,
        [pbr::OriginalName("CounterType_Devotion")] Devotion = 29,
        [pbr::OriginalName("CounterType_Divinity")] Divinity = 30,
        [pbr::OriginalName("CounterType_Doom")] Doom = 31,
        [pbr::OriginalName("CounterType_Dream")] Dream = 32,
        [pbr::OriginalName("CounterType_Echo")] Echo = 33,
        [pbr::OriginalName("CounterType_Elixir")] Elixir = 34,
        [pbr::OriginalName("CounterType_Energy")] Energy = 35,
        [pbr::OriginalName("CounterType_Eon")] Eon = 36,
        [pbr::OriginalName("CounterType_Eyeball")] Eyeball = 37,
        [pbr::OriginalName("CounterType_Fate")] Fate = 38,
        [pbr::OriginalName("CounterType_Feather")] Feather = 39,
        [pbr::OriginalName("CounterType_Filibuster")] Filibuster = 40,
        [pbr::OriginalName("CounterType_Flame")] Flame = 41,
        [pbr::OriginalName("CounterType_Flood")] Flood = 42,
        [pbr::OriginalName("CounterType_Fungus")] Fungus = 43,
        [pbr::OriginalName("CounterType_Fuse")] Fuse = 44,
        [pbr::OriginalName("CounterType_Glyph")] Glyph = 45,
        [pbr::OriginalName("CounterType_Gold")] Gold = 46,
        [pbr::OriginalName("CounterType_Growth")] Growth = 47,
        [pbr::OriginalName("CounterType_Hatchling")] Hatchling = 48,
        [pbr::OriginalName("CounterType_Healing")] Healing = 49,
        [pbr::OriginalName("CounterType_Hoofprint")] Hoofprint = 50,
        [pbr::OriginalName("CounterType_Hourglass")] Hourglass = 51,
        [pbr::OriginalName("CounterType_Hunger")] Hunger = 52,
        [pbr::OriginalName("CounterType_Ice")] Ice = 53,
        [pbr::OriginalName("CounterType_Infection")] Infection = 54,
        [pbr::OriginalName("CounterType_Intervention")] Intervention = 55,
        [pbr::OriginalName("CounterType_Javelin")] Javelin = 56,
        [pbr::OriginalName("CounterType_Ki")] Ki = 57,
        [pbr::OriginalName("CounterType_Level")] Level = 58,
        [pbr::OriginalName("CounterType_Luck")] Luck = 59,
        [pbr::OriginalName("CounterType_Magnet")] Magnet = 60,
        [pbr::OriginalName("CounterType_Mannequin")] Mannequin = 61,
        [pbr::OriginalName("CounterType_Matrix")] Matrix = 62,
        [pbr::OriginalName("CounterType_May")] May = 63,
        [pbr::OriginalName("CounterType_Mine")] Mine = 64,
        [pbr::OriginalName("CounterType_Mining")] Mining = 65,
        [pbr::OriginalName("CounterType_Mire")] Mire = 66,
        [pbr::OriginalName("CounterType_Muster")] Muster = 67,
        [pbr::OriginalName("CounterType_Net")] Net = 68,
        [pbr::OriginalName("CounterType_Omen")] Omen = 69,
        [pbr::OriginalName("CounterType_Ore")] Ore = 70,
        [pbr::OriginalName("CounterType_Page")] Page = 71,
        [pbr::OriginalName("CounterType_Pain")] Pain = 72,
        [pbr::OriginalName("CounterType_Paralyzation")] Paralyzation = 73,
        [pbr::OriginalName("CounterType_Petal")] Petal = 74,
        [pbr::OriginalName("CounterType_Petrification")] Petrification = 75,
        [pbr::OriginalName("CounterType_Phylactery")] Phylactery = 76,
        [pbr::OriginalName("CounterType_Pin")] Pin = 77,
        [pbr::OriginalName("CounterType_Plague")] Plague = 78,
        [pbr::OriginalName("CounterType_Polyp")] Polyp = 79,
        [pbr::OriginalName("CounterType_Pressure")] Pressure = 80,
        [pbr::OriginalName("CounterType_Pupa")] Pupa = 81,
        [pbr::OriginalName("CounterType_Quest")] Quest = 82,
        [pbr::OriginalName("CounterType_Scream")] Scream = 83,
        [pbr::OriginalName("CounterType_Scroll")] Scroll = 84,
        [pbr::OriginalName("CounterType_Shell")] Shell = 85,
        [pbr::OriginalName("CounterType_Shield")] Shield = 86,
        [pbr::OriginalName("CounterType_Shred")] Shred = 87,
        [pbr::OriginalName("CounterType_Sleep")] Sleep = 88,
        [pbr::OriginalName("CounterType_Sleight")] Sleight = 89,
        [pbr::OriginalName("CounterType_Slime")] Slime = 90,
        [pbr::OriginalName("CounterType_Soot")] Soot = 91,
        [pbr::OriginalName("CounterType_Spell")] Spell = 92,
        [pbr::OriginalName("CounterType_Spore")] Spore = 93,
        [pbr::OriginalName("CounterType_Storage")] Storage = 94,
        [pbr::OriginalName("CounterType_Strife")] Strife = 95,
        [pbr::OriginalName("CounterType_Study")] Study = 96,
        [pbr::OriginalName("CounterType_Theft")] Theft = 97,
        [pbr::OriginalName("CounterType_Tide")] Tide = 98,
        [pbr::OriginalName("CounterType_Tower")] Tower = 100,
        [pbr::OriginalName("CounterType_Training")] Training = 101,
        [pbr::OriginalName("CounterType_Trap")] Trap = 102,
        [pbr::OriginalName("CounterType_Treasure")] Treasure = 103,
        [pbr::OriginalName("CounterType_Verse")] Verse = 104,
        [pbr::OriginalName("CounterType_Vitality")] Vitality = 105,
        [pbr::OriginalName("CounterType_Wage")] Wage = 106,
        [pbr::OriginalName("CounterType_Winch")] Winch = 107,
        [pbr::OriginalName("CounterType_Lore")] Lore = 108,
        [pbr::OriginalName("CounterType_P1P2")] P1P2 = 109,
        [pbr::OriginalName("CounterType_P0P1")] P0P1 = 110,
        [pbr::OriginalName("CounterType_P0P2")] P0P2 = 111,
        [pbr::OriginalName("CounterType_P1P0")] P1P0 = 112,
        [pbr::OriginalName("CounterType_P2P2")] P2P2 = 113,
        [pbr::OriginalName("CounterType_M0M1")] M0M1 = 114,
        [pbr::OriginalName("CounterType_M0M2")] M0M2 = 115,
        [pbr::OriginalName("CounterType_M1M0")] M1M0 = 116,
        [pbr::OriginalName("CounterType_M2M1")] M2M1 = 117,
        [pbr::OriginalName("CounterType_M2M2")] M2M2 = 118,
        [pbr::OriginalName("CounterType_Manifestation")] Manifestation = 119,
        [pbr::OriginalName("CounterType_Gem")] Gem = 120,
        [pbr::OriginalName("CounterType_Crystal")] Crystal = 121,
        [pbr::OriginalName("CounterType_Isolation")] Isolation = 122,
        [pbr::OriginalName("CounterType_Hour")] Hour = 123,
        [pbr::OriginalName("CounterType_Unity")] Unity = 124,
        [pbr::OriginalName("CounterType_Velocity")] Velocity = 125,
        [pbr::OriginalName("CounterType_Brick")] Brick = 126,
        [pbr::OriginalName("CounterType_Landmark")] Landmark = 127,
        [pbr::OriginalName("CounterType_Prey")] Prey = 128,
        [pbr::OriginalName("CounterType_Silver")] Silver = 129,
        [pbr::OriginalName("CounterType_Egg")] Egg = 130,
        [pbr::OriginalName("CounterType_Hit")] Hit = 131,
        [pbr::OriginalName("CounterType_PlaceholderCounterType1")] PlaceholderCounterType1 = 132,
        [pbr::OriginalName("CounterType_PlaceholderCounterType2")] PlaceholderCounterType2 = 133,
        [pbr::OriginalName("CounterType_PlaceholderCounterType3")] PlaceholderCounterType3 = 134,
        [pbr::OriginalName("CounterType_PlaceholderCounterType4")] PlaceholderCounterType4 = 135,
        [pbr::OriginalName("CounterType_PlaceholderCounterType5")] PlaceholderCounterType5 = 136,
    }

    public enum DamageRecType
    {
        [pbr::OriginalName("DamageRecType_None")] None = 0,
        [pbr::OriginalName("DamageRecType_Team")] Team = 1,
        [pbr::OriginalName("DamageRecType_Player")] Player = 2,
        [pbr::OriginalName("DamageRecType_PlanesWalker")] PlanesWalker = 3,
    }

    public enum DamageType
    {
        [pbr::OriginalName("DamageType_None")] None = 0,
        [pbr::OriginalName("DamageType_Combat")] Combat = 1,
        [pbr::OriginalName("DamageType_Direct")] Direct = 2,
        [pbr::OriginalName("DamageType_Fight")] Fight = 3,
    }

    public enum Designations
    {
        [pbr::OriginalName("Designation_Commander")] DesignationCommander = 0,
        [pbr::OriginalName("Designation_Monarch")] DesignationMonarch = 1,
        [pbr::OriginalName("Designation_Monstrous")] DesignationMonstrous = 2,
        [pbr::OriginalName("Designation_PlanarController")] DesignationPlanarController = 3,
        [pbr::OriginalName("Designation_Renowned")] DesignationRenowned = 4,
        [pbr::OriginalName("Designation_CitysBlessing")] DesignationCitysBlessing = 5,
    }

    public enum DetermineOptionsState
    {
        [pbr::OriginalName("DetermineOptionsState_None")] None = 0,
        [pbr::OriginalName("DetermineOptionsState_Modal")] Modal = 1,
        [pbr::OriginalName("DetermineOptionsState_TargetLimiting")] TargetLimiting = 2,
        [pbr::OriginalName("DetermineOptionsState_NonMana")] NonMana = 3,
        [pbr::OriginalName("DetermineOptionsState_Mana")] Mana = 4,
    }

    public enum DifficultyLevel
    {
        [pbr::OriginalName("DifficultyLevel_None")] None = 0,
        [pbr::OriginalName("DifficultyLevel_Easy")] Easy = 1,
        [pbr::OriginalName("DifficultyLevel_Moderate")] Moderate = 2,
        [pbr::OriginalName("DifficultyLevel_Hard")] Hard = 3,
    }

    public enum DropMatchmakingResponseCode
    {
        [pbr::OriginalName("DropUnknownError")] DropUnknownError = 0,
        [pbr::OriginalName("DropSuccess")] DropSuccess = 1,
        [pbr::OriginalName("DropErrorNotJoined")] DropErrorNotJoined = 2,
        [pbr::OriginalName("DropErrorEventNotFound")] DropErrorEventNotFound = 3,
        [pbr::OriginalName("DropErrorCourseNotFound")] DropErrorCourseNotFound = 4,
        [pbr::OriginalName("DropServiceError")] DropServiceError = 5,
        [pbr::OriginalName("DropErrorUnavailable")] DropErrorUnavailable = 6,
    }

    public enum FailureReason
    {
        [pbr::OriginalName("FailureReason_None")] None = 0,
        [pbr::OriginalName("FailureReason_Expired")] Expired = 1,
        [pbr::OriginalName("FailureReason_OutOfTurn")] OutOfTurn = 2,
        [pbr::OriginalName("FailureReason_ReqRespMismatch")] ReqRespMismatch = 3,
        [pbr::OriginalName("FailureReason_ActionNotBatchable")] ActionNotBatchable = 4,
        [pbr::OriginalName("FailureReason_ActionInvalid")] ActionInvalid = 5,
        [pbr::OriginalName("FailureReason_IncompleteMessage")] IncompleteMessage = 6,
        [pbr::OriginalName("FailureReason_IllegalOption")] IllegalOption = 7,
        [pbr::OriginalName("FailureReason_UnrecognizedValue")] UnrecognizedValue = 8,
        [pbr::OriginalName("FailureReason_TargetsUnavailable")] TargetsUnavailable = 9,
        [pbr::OriginalName("FailureReason_TargetIndexOutOfRange")] TargetIndexOutOfRange = 10,
        [pbr::OriginalName("FailureReason_TargetIllegal")] TargetIllegal = 11,
        [pbr::OriginalName("FailureReason_UnrecognizedManaId")] UnrecognizedManaId = 12,
        [pbr::OriginalName("FailureReason_InvalidOptionSelection")] InvalidOptionSelection = 13,
        [pbr::OriginalName("FailureReason_UnexpectedMessage")] UnexpectedMessage = 14,
        [pbr::OriginalName("FailureReason_LimitViolation")] LimitViolation = 15,
        [pbr::OriginalName("FailureReason_RestrictionViolated")] RestrictionViolated = 16,
        [pbr::OriginalName("FailureReason_RequirementViolated")] RequirementViolated = 17,
        [pbr::OriginalName("FailureReason_UnpayableCost")] UnpayableCost = 18,
        [pbr::OriginalName("FailureReason_InvalidSeatId")] InvalidSeatId = 19,
        [pbr::OriginalName("FailureReason_InvalidTeamId")] InvalidTeamId = 20,
        [pbr::OriginalName("FailureReason_InvalidMatchState")] InvalidMatchState = 21,
        [pbr::OriginalName("FailureReason_InvalidMatchScope")] InvalidMatchScope = 22,
        [pbr::OriginalName("FailureReason_InvalidDeck")] InvalidDeck = 23,
        [pbr::OriginalName("FailureReason_InvalidCancelState")] InvalidCancelState = 24,
        [pbr::OriginalName("FailureReason_InvalidUndoState")] InvalidUndoState = 25,
        [pbr::OriginalName("FailureReason_PermissionDenied")] PermissionDenied = 26,
        [pbr::OriginalName("FailureReason_NoTimeout")] NoTimeout = 27,
        [pbr::OriginalName("FailureReason_InvalidColor")] InvalidColor = 28,
        [pbr::OriginalName("FailureReason_InvalidManaColor")] InvalidManaColor = 29,
        [pbr::OriginalName("FailureReason_InvalidCoinFace")] InvalidCoinFace = 30,
        [pbr::OriginalName("FailureReason_InvalidCard")] InvalidCard = 31,
        [pbr::OriginalName("FailureReason_InvalidCardName")] InvalidCardName = 32,
        [pbr::OriginalName("FailureReason_InvalidCardType")] InvalidCardType = 33,
        [pbr::OriginalName("FailureReason_InvalidSubType")] InvalidSubType = 34,
        [pbr::OriginalName("FailureReason_InvalidSuperType")] InvalidSuperType = 35,
        [pbr::OriginalName("FailureReason_InvalidCounterType")] InvalidCounterType = 36,
        [pbr::OriginalName("FailureReason_InvalidAbilityType")] InvalidAbilityType = 37,
        [pbr::OriginalName("FailureReason_InvalidBasicLandType")] InvalidBasicLandType = 38,
        [pbr::OriginalName("FailureReason_InvalidOptionIndex")] InvalidOptionIndex = 39,
        [pbr::OriginalName("FailureReason_InvalidOptionContext")] InvalidOptionContext = 40,
    }

    public enum GREMessageType
    {
        [pbr::OriginalName("GREMessageType_None")] None = 0,
        [pbr::OriginalName("GREMessageType_GameStateMessage")] GameStateMessage = 1,
        [pbr::OriginalName("GREMessageType_ActionsAvailableReq")] ActionsAvailableReq = 2,
        [pbr::OriginalName("GREMessageType_ChooseStartingPlayerReq")] ChooseStartingPlayerReq = 6,
        [pbr::OriginalName("GREMessageType_ConnectResp")] ConnectResp = 7,
        [pbr::OriginalName("GREMessageType_GetSettingsResp")] GetSettingsResp = 9,
        [pbr::OriginalName("GREMessageType_SetSettingsResp")] SetSettingsResp = 10,
        [pbr::OriginalName("GREMessageType_GroupReq")] GroupReq = 11,
        [pbr::OriginalName("GREMessageType_IllegalRequest")] IllegalRequest = 12,
        [pbr::OriginalName("GREMessageType_ModalReq")] ModalReq = 14,
        [pbr::OriginalName("GREMessageType_MulliganReq")] MulliganReq = 15,
        [pbr::OriginalName("GREMessageType_OptionReq")] OptionReq = 16,
        [pbr::OriginalName("GREMessageType_OrderReq")] OrderReq = 17,
        [pbr::OriginalName("GREMessageType_PromptReq")] PromptReq = 18,
        [pbr::OriginalName("GREMessageType_RevealHandReq")] RevealHandReq = 21,
        [pbr::OriginalName("GREMessageType_SelectNReq")] SelectNreq = 22,
        [pbr::OriginalName("GREMessageType_AllowForceDraw")] AllowForceDraw = 24,
        [pbr::OriginalName("GREMessageType_BinaryGameState")] BinaryGameState = 25,
        [pbr::OriginalName("GREMessageType_DeclareAttackersReq")] DeclareAttackersReq = 26,
        [pbr::OriginalName("GREMessageType_SubmitAttackersResp")] SubmitAttackersResp = 27,
        [pbr::OriginalName("GREMessageType_DeclareBlockersReq")] DeclareBlockersReq = 28,
        [pbr::OriginalName("GREMessageType_SubmitBlockersResp")] SubmitBlockersResp = 29,
        [pbr::OriginalName("GREMessageType_AssignDamageReq")] AssignDamageReq = 30,
        [pbr::OriginalName("GREMessageType_AssignDamageConfirmation")] AssignDamageConfirmation = 31,
        [pbr::OriginalName("GREMessageType_OrderCombatDamageReq")] OrderCombatDamageReq = 32,
        [pbr::OriginalName("GREMessageType_OrderDamageConfirmation")] OrderDamageConfirmation = 33,
        [pbr::OriginalName("GREMessageType_SelectTargetsReq")] SelectTargetsReq = 34,
        [pbr::OriginalName("GREMessageType_SubmitTargetsResp")] SubmitTargetsResp = 35,
        [pbr::OriginalName("GREMessageType_PayCostsReq")] PayCostsReq = 36,
        [pbr::OriginalName("GREMessageType_IntermissionReq")] IntermissionReq = 37,
        [pbr::OriginalName("GREMessageType_DieRollResultsResp")] DieRollResultsResp = 38,
        [pbr::OriginalName("GREMessageType_SelectReplacementReq")] SelectReplacementReq = 39,
        [pbr::OriginalName("GREMessageType_SelectNGroupReq")] SelectNgroupReq = 40,
        [pbr::OriginalName("GREMessageType_AlternativeCostReq")] AlternativeCostReq = 41,
        [pbr::OriginalName("GREMessageType_DistributionReq")] DistributionReq = 42,
        [pbr::OriginalName("GREMessageType_NumericInputReq")] NumericInputReq = 43,
        [pbr::OriginalName("GREMessageType_SearchReq")] SearchReq = 44,
        [pbr::OriginalName("GREMessageType_OptionalActionMessage")] OptionalActionMessage = 45,
        [pbr::OriginalName("GREMessageType_CastingTimeOptionsReq")] CastingTimeOptionsReq = 46,
        [pbr::OriginalName("GREMessageType_SelectManaTypeReq")] SelectManaTypeReq = 47,
        [pbr::OriginalName("GREMessageType_SelectFromGroupsReq")] SelectFromGroupsReq = 48,
        [pbr::OriginalName("GREMessageType_SearchFromGroupsReq")] SearchFromGroupsReq = 49,
        [pbr::OriginalName("GREMessageType_GatherReq")] GatherReq = 50,
        [pbr::OriginalName("GREMessageType_QueuedGameStateMessage")] QueuedGameStateMessage = 51,
        [pbr::OriginalName("GREMessageType_UIMessage")] Uimessage = 52,
        [pbr::OriginalName("GREMessageType_SubmitDeckReq")] SubmitDeckReq = 53,
        [pbr::OriginalName("GREMessageType_EdictalMessage")] EdictalMessage = 54,
        [pbr::OriginalName("GREMessageType_TimeoutMessage")] TimeoutMessage = 55,
    }

    public enum GRETHHostEmulatorErrorCodes
    {
        [pbr::OriginalName("GRETHHostEmulatorErrorCode_Success")] Uccess = 0,
        [pbr::OriginalName("GRETHHostEmulatorErrorCode_Timeout")] GrethhostEmulatorErrorCodeTimeout = 1,
        [pbr::OriginalName("GRETHHostEmulatorErrorCode_UnknownID")] GrethhostEmulatorErrorCodeUnknownId = 2,
        [pbr::OriginalName("GRETHHostEmulatorErrorCode_IDInUse")] GrethhostEmulatorErrorCodeIdinUse = 3,
    }

    public enum GRETHHostErrorCode
    {
        [pbr::OriginalName("GRETHHostErrorCode_Success")] Success = 0,
        [pbr::OriginalName("GRETHHostErrorCode_NullPayload")] NullPayload = 1,
        [pbr::OriginalName("GRETHHostErrorCode_ParseFailed")] ParseFailed = 2,
        [pbr::OriginalName("GRETHHostErrorCode_IncompletePayload")] IncompletePayload = 3,
        [pbr::OriginalName("GRETHHostErrorCode_GreCreateFailed")] GreCreateFailed = 4,
        [pbr::OriginalName("GRETHHostErrorCode_GreDestroyFailed")] GreDestroyFailed = 5,
        [pbr::OriginalName("GRETHHostErrorCode_AICreateFailed")] AicreateFailed = 6,
        [pbr::OriginalName("GRETHHostErrorCode_AIDestroyFailed")] AidestroyFailed = 7,
        [pbr::OriginalName("GRETHHostErrorCode_UnrecognizedGreID")] UnrecognizedGreId = 8,
        [pbr::OriginalName("GRETHHostErrorCode_InvalidPointer")] InvalidPointer = 9,
        [pbr::OriginalName("GRETHHostErrorCode_UnknownError")] UnknownError = 10,
    }

    public enum GRETHHostOperationMode
    {
        [pbr::OriginalName("GRETHHostOperationMode_Normal")] Normal = 0,
        [pbr::OriginalName("GRETHHostOperationMode_Loopback")] Loopback = 1,
    }

    public enum GameFormat
    {
        [pbr::OriginalName("GameFormat_None")] None = 0,
        [pbr::OriginalName("GameFormat_Block")] Block = 1,
        [pbr::OriginalName("GameFormat_Standard")] Standard = 2,
        [pbr::OriginalName("GameFormat_Modern")] Modern = 3,
        [pbr::OriginalName("GameFormat_Legacy")] Legacy = 4,
        [pbr::OriginalName("GameFormat_Vintage")] Vintage = 5,
        [pbr::OriginalName("GameFormat_Draft")] Draft = 7,
        [pbr::OriginalName("GameFormat_Sealed")] Sealed = 8,
    }

    public enum GameObjectType
    {
        [pbr::OriginalName("GameObjectType_None")] None = 0,
        [pbr::OriginalName("GameObjectType_Card")] Card = 1,
        [pbr::OriginalName("GameObjectType_Token")] Token = 2,
        [pbr::OriginalName("GameObjectType_Ability")] Ability = 3,
        [pbr::OriginalName("GameObjectType_Emblem")] Emblem = 4,
        [pbr::OriginalName("GameObjectType_SplitCard")] SplitCard = 5,
        [pbr::OriginalName("GameObjectType_SplitLeft")] SplitLeft = 6,
        [pbr::OriginalName("GameObjectType_SplitRight")] SplitRight = 7,
        [pbr::OriginalName("GameObjectType_RevealedCard")] RevealedCard = 8,
    }

    public enum GameRoomType
    {
        [pbr::OriginalName("GameRoomType_Invalid")] Invalid = 0,
        [pbr::OriginalName("GameRoomType_Match")] Match = 1,
        [pbr::OriginalName("GameRoomType_Draft")] Draft = 2,
    }

    public enum GameStage
    {
        [pbr::OriginalName("GameStage_None")] None = 0,
        [pbr::OriginalName("GameStage_Start")] Start = 1,
        [pbr::OriginalName("GameStage_Play")] Play = 2,
        [pbr::OriginalName("GameStage_GameOver")] GameOver = 3,
    }

    public enum GameStateType
    {
        [pbr::OriginalName("GameStateType_None")] None = 0,
        [pbr::OriginalName("GameStateType_Full")] Full = 1,
        [pbr::OriginalName("GameStateType_Diff")] Diff = 2,
        [pbr::OriginalName("GameStateType_Binary")] Binary = 3,
    }

    public enum GameStateUpdate
    {
        [pbr::OriginalName("GameStateUpdate_None")] None = 0,
        [pbr::OriginalName("GameStateUpdate_Send")] Send = 1,
        [pbr::OriginalName("GameStateUpdate_SendAndRecord")] SendAndRecord = 2,
        [pbr::OriginalName("GameStateUpdate_SendHiFi")] SendHiFi = 3,
        [pbr::OriginalName("GameStateUpdate_Undo")] Undo = 4,
        [pbr::OriginalName("GameStateUpdate_Restore")] Restore = 5,
    }

    public enum GameType
    {
        [pbr::OriginalName("GameType_None")] None = 0,
        [pbr::OriginalName("GameType_Duel")] Duel = 1,
        [pbr::OriginalName("GameType_MultiPlayer")] MultiPlayer = 2,
        [pbr::OriginalName("GameType_Solitaire")] Solitaire = 3,
    }

    public enum GameVariant
    {
        [pbr::OriginalName("GameVariant_None")] None = 0,
        [pbr::OriginalName("GameVariant_Normal")] Normal = 1,
        [pbr::OriginalName("GameVariant_Planechase")] Planechase = 2,
        [pbr::OriginalName("GameVariant_Vanguard")] Vanguard = 3,
        [pbr::OriginalName("GameVariant_Commander")] Commander = 4,
        [pbr::OriginalName("GameVariant_Archenemy")] Archenemy = 5,
        [pbr::OriginalName("GameVariant_TeamVsTeam")] TeamVsTeam = 6,
        [pbr::OriginalName("GameVariant_TwoHeadedGiant")] TwoHeadedGiant = 7,
    }

    public enum GroupType
    {
        [pbr::OriginalName("GroupType_None")] None = 0,
        [pbr::OriginalName("GroupType_Ordered")] Ordered = 1,
        [pbr::OriginalName("GroupType_Arbitrary")] Arbitrary = 2,
    }

    public enum Grouping
    {
        [pbr::OriginalName("Grouping_None")] None = 0,
        [pbr::OriginalName("Grouping_Single")] Single = 1,
        [pbr::OriginalName("Grouping_Batchable")] Batchable = 2,
    }

    public enum GroupingContext
    {
        [pbr::OriginalName("GroupingContext_None")] None = 0,
        [pbr::OriginalName("GroupingContext_Scry")] Scry = 1,
        [pbr::OriginalName("GroupingContext_Surveil")] Surveil = 2,
    }

    public enum GroupingStyle
    {
        [pbr::OriginalName("GroupingStyle_None")] None = 0,
        [pbr::OriginalName("GroupingStyle_SingleGroup")] SingleGroup = 1,
        [pbr::OriginalName("GroupingStyle_AllGroups")] AllGroups = 2,
        [pbr::OriginalName("GroupingStyle_Mixed")] Mixed = 3,
    }

    public enum HeuristicPriority
    {
        [pbr::OriginalName("HeuristicPriority_None")] None = 0,
        [pbr::OriginalName("HeuristicPriority_TargetCreature")] TargetCreature = 10,
        [pbr::OriginalName("HeuristicPriority_TargetPlaneswalker")] TargetPlaneswalker = 11,
        [pbr::OriginalName("HeuristicPriority_TargetPlayer")] TargetPlayer = 12,
        [pbr::OriginalName("HeuristicPriority_ObjectScore")] ObjectScore = 13,
    }

    public enum HighlightType
    {
        [pbr::OriginalName("HighlightType_None")] None = 0,
        [pbr::OriginalName("HighlightType_Cold")] Cold = 1,
        [pbr::OriginalName("HighlightType_Tepid")] Tepid = 2,
        [pbr::OriginalName("HighlightType_Hot")] Hot = 3,
    }

    public enum IRFormat
    {
        [pbr::OriginalName("IRFormat_None")] None = 0,
        [pbr::OriginalName("IRFormat_SuperTypes")] SuperTypes = 1,
        [pbr::OriginalName("IRFormat_SideboardCards")] SideboardCards = 2,
    }

    public enum IdType
    {
        [pbr::OriginalName("IdType_None")] None = 0,
        [pbr::OriginalName("IdType_InstanceId")] InstanceId = 1,
        [pbr::OriginalName("IdType_PromptParameterIndex")] PromptParameterIndex = 2,
    }

    public enum JoinMatchmakingResponseCode
    {
        [pbr::OriginalName("JoinUnknownError")] JoinUnknownError = 0,
        [pbr::OriginalName("JoinSuccess")] JoinSuccess = 1,
        [pbr::OriginalName("JoinErrorAlreadyJoined")] JoinErrorAlreadyJoined = 2,
        [pbr::OriginalName("JoinErrorEventNotFound")] JoinErrorEventNotFound = 3,
        [pbr::OriginalName("JoinErrorCourseNotFound")] JoinErrorCourseNotFound = 4,
        [pbr::OriginalName("JoinServiceError")] JoinServiceError = 5,
        [pbr::OriginalName("JoinErrorUnavailable")] JoinErrorUnavailable = 6,
        [pbr::OriginalName("JoinErrorNoValidDeck")] JoinErrorNoValidDeck = 7,
        [pbr::OriginalName("JoinErrorCourseNotActive")] JoinErrorCourseNotActive = 8,
    }

    public enum KeyValuePairValueType
    {
        [pbr::OriginalName("KeyValuePairValueType_None")] None = 0,
        [pbr::OriginalName("KeyValuePairValueType_uint32")] Uint32 = 1,
        [pbr::OriginalName("KeyValuePairValueType_int32")] Int32 = 2,
        [pbr::OriginalName("KeyValuePairValueType_uint64")] Uint64 = 3,
        [pbr::OriginalName("KeyValuePairValueType_int64")] Int64 = 4,
        [pbr::OriginalName("KeyValuePairValueType_bool")] Bool = 5,
        [pbr::OriginalName("KeyValuePairValueType_string")] String = 6,
        [pbr::OriginalName("KeyValuePairValueType_float")] Float = 7,
        [pbr::OriginalName("KeyValuePairValueType_double")] Double = 8,
    }

    public enum LinkType
    {
        [pbr::OriginalName("LinkType_None")] None = 0,
        [pbr::OriginalName("LinkType_Exile")] Exile = 1,
        [pbr::OriginalName("LinkType_Sacrifice")] Sacrifice = 2,
        [pbr::OriginalName("LinkType_Choose")] Choose = 3,
        [pbr::OriginalName("LinkType_Haunt")] Haunt = 4,
        [pbr::OriginalName("LinkType_Reveal")] Reveal = 5,
        [pbr::OriginalName("LinkType_Kicker")] Kicker = 6,
        [pbr::OriginalName("LinkType_Target")] Target = 7,
    }

    public enum LinkedFace
    {
        [pbr::OriginalName("LinkedFace_None")] None = 0,
        [pbr::OriginalName("LinkedFace_DFC_Front")] DfcFront = 1,
        [pbr::OriginalName("LinkedFace_DFC_Back")] DfcBack = 2,
        [pbr::OriginalName("LinkedFace_MeldCard")] MeldCard = 3,
        [pbr::OriginalName("LinkedFace_MeldedPermanent")] MeldedPermanent = 4,
        [pbr::OriginalName("LinkedFace_SplitCard")] SplitCard = 5,
        [pbr::OriginalName("LinkedFace_SplitHalf")] SplitHalf = 6,
    }

    public enum LobbyErrorCode
    {
        [pbr::OriginalName("LobbyErrorCode_Invalid")] Invalid = 0,
        [pbr::OriginalName("LobbyErrorCode_Success")] Success = 1,
        [pbr::OriginalName("LobbyErrorCode_ProtobufParseError")] ProtobufParseError = 11,
        [pbr::OriginalName("LobbyErrorCode_InvalidMessageType")] InvalidMessageType = 12,
        [pbr::OriginalName("LobbyErrorCode_InvalidMessageField")] InvalidMessageField = 13,
        [pbr::OriginalName("LobbyErrorCode_BufferOverflow")] BufferOverflow = 14,
        [pbr::OriginalName("LobbyErrorCode_Unauthorized")] Unauthorized = 20,
        [pbr::OriginalName("LobbyErrorCode_Forbidden")] Forbidden = 21,
        [pbr::OriginalName("LobbyErrorCode_OperationCanceled")] OperationCanceled = 30,
        [pbr::OriginalName("LobbyErrorCode_RequestTimeout")] RequestTimeout = 31,
        [pbr::OriginalName("LobbyErrorCode_InvalidOperation")] InvalidOperation = 32,
        [pbr::OriginalName("LobbyErrorCode_NotFound")] NotFound = 40,
        [pbr::OriginalName("LobbyErrorCode_UserNotFound")] UserNotFound = 41,
        [pbr::OriginalName("LobbyErrorCode_QueueNotFound")] QueueNotFound = 42,
        [pbr::OriginalName("LobbyErrorCode_DeckNotFound")] DeckNotFound = 43,
        [pbr::OriginalName("LobbyErrorCode_EventNotFound")] EventNotFound = 44,
        [pbr::OriginalName("LobbyErrorCode_AlreadyInQueue")] AlreadyInQueue = 50,
        [pbr::OriginalName("LobbyErrorCode_AlreadyInMatch")] AlreadyInMatch = 51,
        [pbr::OriginalName("LobbyErrorCode_DraftStartError")] DraftStartError = 60,
        [pbr::OriginalName("LobbyErrorCode_InternalServerError")] InternalServerError = 500,
        [pbr::OriginalName("LobbyErrorCode_NotImplemented")] NotImplemented = 501,
        [pbr::OriginalName("LobbyErrorCode_ServiceUnavailable")] ServiceUnavailable = 503,
    }

    public enum LobbyUserStateType
    {
        [pbr::OriginalName("LobbyUserStateType_Invalid")] Invalid = 0,
        [pbr::OriginalName("LobbyUserStateType_Idle")] Idle = 1,
        [pbr::OriginalName("LobbyUserStateType_JoiningQueue")] JoiningQueue = 2,
        [pbr::OriginalName("LobbyUserStateType_JoinedQueue")] JoinedQueue = 3,
        [pbr::OriginalName("LobbyUserStateType_DroppingQueue")] DroppingQueue = 4,
        [pbr::OriginalName("LobbyUserStateType_Matchmade")] Matchmade = 10,
        [pbr::OriginalName("LobbyUserStateType_InDraft")] InDraft = 15,
        [pbr::OriginalName("LobbyUserStateType_CreatingMatch")] CreatingMatch = 20,
        [pbr::OriginalName("LobbyUserStateType_PlayingMatch")] PlayingMatch = 21,
    }

    public enum ManaColor
    {
        [pbr::OriginalName("ManaColor_None")] None = 0,
        [pbr::OriginalName("ManaColor_White")] White = 1,
        [pbr::OriginalName("ManaColor_Blue")] Blue = 2,
        [pbr::OriginalName("ManaColor_Black")] Black = 3,
        [pbr::OriginalName("ManaColor_Red")] Red = 4,
        [pbr::OriginalName("ManaColor_Green")] Green = 5,
        [pbr::OriginalName("ManaColor_Phyrexian")] Phyrexian = 6,
        [pbr::OriginalName("ManaColor_Generic")] Generic = 7,
        [pbr::OriginalName("ManaColor_X")] X = 8,
        [pbr::OriginalName("ManaColor_Y")] Y = 9,
        [pbr::OriginalName("ManaColor_TwoGeneric")] TwoGeneric = 10,
        [pbr::OriginalName("ManaColor_AnyColor")] AnyColor = 11,
        [pbr::OriginalName("ManaColor_Colorless")] Colorless = 12,
    }

    public enum ManaPaymentStrategyType
    {
        [pbr::OriginalName("ManaPaymentStrategyType_None")] None = 0,
        [pbr::OriginalName("ManaPaymentStrategyType_Auto")] Auto = 1,
        [pbr::OriginalName("ManaPaymentStrategyType_Manual")] Manual = 2,
        [pbr::OriginalName("ManaPaymentStrategyType_Legacy")] Legacy = 3,
    }

    public enum ManaSelectionType
    {
        [pbr::OriginalName("ManaSelectionType_None")] None = 0,
        [pbr::OriginalName("ManaSelectionType_Auto")] Auto = 1,
        [pbr::OriginalName("ManaSelectionType_Manual")] Manual = 2,
    }

    public enum ManaSpecType
    {
        [pbr::OriginalName("ManaSpecType_None")] None = 0,
        [pbr::OriginalName("ManaSpecType_FromBasic")] FromBasic = 1,
        [pbr::OriginalName("ManaSpecType_Predictive")] Predictive = 2,
        [pbr::OriginalName("ManaSpecType_Restricted")] Restricted = 3,
        [pbr::OriginalName("ManaSpecType_Trigger")] Trigger = 4,
        [pbr::OriginalName("ManaSpecType_FromCreature")] FromCreature = 5,
        [pbr::OriginalName("ManaSpecType_FromSnow")] FromSnow = 6,
        [pbr::OriginalName("ManaSpecType_DoesNotEmpty")] DoesNotEmpty = 7,
        [pbr::OriginalName("ManaSpecType_AdditionalEffect")] AdditionalEffect = 8,
    }

    public enum MatchCompletedReasonType
    {
        [pbr::OriginalName("MatchCompletedReasonType_Invalid")] Invalid = 0,
        [pbr::OriginalName("MatchCompletedReasonType_Success")] Success = 1,
        [pbr::OriginalName("MatchCompletedReasonType_ForceResultRequest")] ForceResultRequest = 2,
        [pbr::OriginalName("MatchCompletedReasonType_Canceled")] Canceled = 3,
        [pbr::OriginalName("MatchCompletedReasonType_PlayerJoinTimeout")] PlayerJoinTimeout = 10,
        [pbr::OriginalName("MatchCompletedReasonType_PlayerInactivityTimeout")] PlayerInactivityTimeout = 11,
        [pbr::OriginalName("MatchCompletedReasonType_PlayerDisconnectTimeout")] PlayerDisconnectTimeout = 12,
        [pbr::OriginalName("MatchCompletedReasonType_SystemShutdown")] SystemShutdown = 30,
        [pbr::OriginalName("MatchCompletedReasonType_GreError")] GreError = 31,
        [pbr::OriginalName("MatchCompletedReasonType_ServiceFabricError")] ServiceFabricError = 33,
        [pbr::OriginalName("MatchCompletedReasonType_CodeContractError")] CodeContractError = 34,
        [pbr::OriginalName("MatchCompletedReasonType_UnknownServerError")] UnknownServerError = 40,
    }

    public enum MatchControllerEventType
    {
        [pbr::OriginalName("MatchControllerEventType_Invalid")] Invalid = 0,
        [pbr::OriginalName("MatchControllerEventType_MatchGameRoomStateChanged")] MatchGameRoomStateChanged = 1,
        [pbr::OriginalName("MatchControllerEventType_MatchControllerStateChanged")] MatchControllerStateChanged = 2,
        [pbr::OriginalName("MatchControllerEventType_MatchControllerHealthReport")] MatchControllerHealthReport = 3,
    }

    public enum MatchControllerState
    {
        [pbr::OriginalName("MatchControllerState_Invalid")] Invalid = 0,
        [pbr::OriginalName("MatchControllerState_Opening")] Opening = 1,
        [pbr::OriginalName("MatchControllerState_Running")] Running = 2,
        [pbr::OriginalName("MatchControllerState_Recovering")] Recovering = 3,
        [pbr::OriginalName("MatchControllerState_Draining")] Draining = 4,
        [pbr::OriginalName("MatchControllerState_Closing")] Closing = 20,
        [pbr::OriginalName("MatchControllerState_Closed")] Closed = 21,
    }

    public enum MatchGameRoomStateType
    {
        [pbr::OriginalName("MatchGameRoomStateType_Invalid")] Invalid = 0,
        [pbr::OriginalName("MatchGameRoomStateType_WaitingForPlayersToJoin")] WaitingForPlayersToJoin = 1,
        [pbr::OriginalName("MatchGameRoomStateType_StartPending")] StartPending = 2,
        [pbr::OriginalName("MatchGameRoomStateType_WaitingForGreConnections")] WaitingForGreConnections = 3,
        [pbr::OriginalName("MatchGameRoomStateType_Playing")] Playing = 5,
        [pbr::OriginalName("MatchGameRoomStateType_MatchCompleted")] MatchCompleted = 15,
        [pbr::OriginalName("MatchGameRoomStateType_MatchResultsProcessed")] MatchResultsProcessed = 20,
        [pbr::OriginalName("MatchGameRoomStateType_GameRoomClosing")] GameRoomClosing = 21,
        [pbr::OriginalName("MatchGameRoomStateType_GameRoomClosed")] GameRoomClosed = 22,
    }

    public enum MatchScope
    {
        [pbr::OriginalName("MatchScope_None")] None = 0,
        [pbr::OriginalName("MatchScope_Game")] Game = 1,
        [pbr::OriginalName("MatchScope_Match")] Match = 2,
    }

    public enum MatchServiceErrorCode
    {
        [pbr::OriginalName("MatchServiceErrorCode_Invalid")] Invalid = 0,
        [pbr::OriginalName("MatchServiceErrorCode_Success")] Success = 1,
        [pbr::OriginalName("MatchServiceErrorCode_GreError")] GreError = 100,
        [pbr::OriginalName("MatchServiceErrorCode_OperationCanceled")] OperationCanceled = 101,
        [pbr::OriginalName("MatchServiceErrorCode_InvalidUser")] InvalidUser = 102,
        [pbr::OriginalName("MatchServiceErrorCode_InvalidState")] InvalidState = 103,
        [pbr::OriginalName("MatchServiceErrorCode_CreateRoomFailed")] CreateRoomFailed = 104,
        [pbr::OriginalName("MatchServiceErrorCode_AuthRequired")] AuthRequired = 105,
        [pbr::OriginalName("MatchServiceErrorCode_NotFound")] NotFound = 106,
        [pbr::OriginalName("MatchServiceErrorCode_ServiceFabricTransactionError")] ServiceFabricTransactionError = 107,
        [pbr::OriginalName("MatchServiceErrorCode_BadRequest")] BadRequest = 108,
        [pbr::OriginalName("MatchServiceErrorCode_GameRoomFull")] GameRoomFull = 110,
        [pbr::OriginalName("MatchServiceErrorCode_NotAuthorized")] NotAuthorized = 111,
        [pbr::OriginalName("MatchServiceErrorCode_BufferOverflow")] BufferOverflow = 112,
        [pbr::OriginalName("MatchServiceErrorCode_ImmutableProperty")] ImmutableProperty = 113,
        [pbr::OriginalName("MatchServiceErrorCode_ServerBusy")] ServerBusy = 114,
        [pbr::OriginalName("MatchServiceErrorCode_RequestQueueOverflow")] RequestQueueOverflow = 115,
        [pbr::OriginalName("MatchServiceErrorCode_UnknownServerError")] UnknownServerError = 500,
    }

    public enum MatchState
    {
        [pbr::OriginalName("MatchState_None")] None = 0,
        [pbr::OriginalName("MatchState_GameInProgress")] GameInProgress = 1,
        [pbr::OriginalName("MatchState_GameComplete")] GameComplete = 2,
        [pbr::OriginalName("MatchState_MatchComplete")] MatchComplete = 3,
        [pbr::OriginalName("MatchState_Sideboarding")] Sideboarding = 4,
    }

    public enum MatchWinCondition
    {
        [pbr::OriginalName("MatchWinCondition_None")] None = 0,
        [pbr::OriginalName("MatchWinCondition_SingleElimination")] SingleElimination = 1,
        [pbr::OriginalName("MatchWinCondition_Best2of3")] Best2Of3 = 2,
        [pbr::OriginalName("MatchWinCondition_Best3of5")] Best3Of5 = 3,
    }

    public enum MayCast
    {
        [pbr::OriginalName("MayCast_InstantsOnly")] InstantsOnly = 0,
        [pbr::OriginalName("MayCast_AnySpell")] AnySpell = 1,
    }

    public enum MayPlay
    {
        [pbr::OriginalName("MayPlay_Spells")] Spells = 0,
        [pbr::OriginalName("MayPlay_SpellsAndLands")] SpellsAndLands = 1,
    }

    public enum MechanicType
    {
        [pbr::OriginalName("MechanicType_None")] None = 0,
        [pbr::OriginalName("MechanicType_CombatEnhancingSorcery")] CombatEnhancingSorcery = 1,
        [pbr::OriginalName("MechanicType_CombatEnhancingInstant")] CombatEnhancingInstant = 2,
        [pbr::OriginalName("MechanicType_Haste")] Haste = 3,
        [pbr::OriginalName("MechanicType_Flash")] Flash = 4,
        [pbr::OriginalName("MechanicType_ReplaceOpponentBeginningPhase")] ReplaceOpponentBeginningPhase = 5,
        [pbr::OriginalName("MechanicType_ReplaceAIBeginningPhase")] ReplaceAibeginningPhase = 6,
        [pbr::OriginalName("MechanicType_DirectDamagePlayer")] DirectDamagePlayer = 7,
        [pbr::OriginalName("MechanicType_Evasion")] Evasion = 9,
        [pbr::OriginalName("MechanicType_MustAttack")] MustAttack = 10,
        [pbr::OriginalName("MechanicType_MustBlock")] MustBlock = 11,
        [pbr::OriginalName("MechanicType_CombatEnhancingAbility")] CombatEnhancingAbility = 12,
        [pbr::OriginalName("MechanicType_Main2Creature")] Main2Creature = 13,
        [pbr::OriginalName("MechanicType_DirectDamageCreature_Sorcery")] DirectDamageCreatureSorcery = 14,
        [pbr::OriginalName("MechanicType_DirectDamageCreature_Instant")] DirectDamageCreatureInstant = 15,
    }

    public enum MessageIdType
    {
        [pbr::OriginalName("MessageIdType_None")] None = 0,
        [pbr::OriginalName("MessageIdType_Prompt")] Prompt = 1,
        [pbr::OriginalName("MessageIdType_Choice")] Choice = 2,
        [pbr::OriginalName("MessageIdType_LocalizationId")] LocalizationId = 3,
    }

    public enum MiscellaneousTerm
    {
        [pbr::OriginalName("MiscellaneousTerm_None")] None = 0,
        [pbr::OriginalName("MiscellaneousTerm_Scry")] Scry = 1,
        [pbr::OriginalName("MiscellaneousTerm_Historic")] Historic = 2,
        [pbr::OriginalName("MiscellaneousTerm_Surveil")] Surveil = 3,
    }

    public enum MulliganOption
    {
        [pbr::OriginalName("MulliganOption_None")] None = 0,
        [pbr::OriginalName("MulliganOption_Mulligan")] Mulligan = 1,
        [pbr::OriginalName("MulliganOption_AcceptHand")] AcceptHand = 2,
    }

    public enum MulliganType
    {
        [pbr::OriginalName("MulliganType_None")] None = 0,
        [pbr::OriginalName("MulliganType_Paris")] Paris = 1,
        [pbr::OriginalName("MulliganType_Vancouver")] Vancouver = 2,
    }

    public enum OptionContext
    {
        [pbr::OriginalName("OptionContext_None")] None = 0,
        [pbr::OriginalName("OptionContext_ManaAbility")] ManaAbility = 1,
        [pbr::OriginalName("OptionContext_Payment")] Payment = 2,
        [pbr::OriginalName("OptionContext_Stacking")] Stacking = 3,
        [pbr::OriginalName("OptionContext_Targeting")] Targeting = 4,
        [pbr::OriginalName("OptionContext_Resolution")] Resolution = 5,
        [pbr::OriginalName("OptionContext_TurnBased")] TurnBased = 6,
        [pbr::OriginalName("OptionContext_Replacement")] Replacement = 7,
        [pbr::OriginalName("OptionContext_ActivateCast")] ActivateCast = 8,
        [pbr::OriginalName("OptionContext_TurnFaceUp")] TurnFaceUp = 9,
    }

    public enum OptionResponse
    {
        [pbr::OriginalName("OptionResponse_None")] None = 0,
        [pbr::OriginalName("OptionResponse_Allow_Yes")] AllowYes = 1,
        [pbr::OriginalName("OptionResponse_Cancel_No")] CancelNo = 2,
    }

    public enum OptionType
    {
        [pbr::OriginalName("OptionType_None")] None = 0,
        [pbr::OriginalName("OptionType_Modal")] Modal = 1,
        [pbr::OriginalName("OptionType_Splice")] Splice = 2,
        [pbr::OriginalName("OptionType_AlternativeCost")] AlternativeCost = 3,
        [pbr::OriginalName("OptionType_Numeric")] Numeric = 4,
        [pbr::OriginalName("OptionType_VariableCost")] VariableCost = 5,
        [pbr::OriginalName("OptionType_ManaType")] ManaType = 6,
        [pbr::OriginalName("OptionType_Order")] Order = 7,
        [pbr::OriginalName("OptionType_Search")] Search = 8,
        [pbr::OriginalName("OptionType_Group")] Group = 9,
        [pbr::OriginalName("OptionType_Select")] Select = 10,
        [pbr::OriginalName("OptionType_SelectGroup")] SelectGroup = 11,
        [pbr::OriginalName("OptionType_Distribution")] Distribution = 12,
        [pbr::OriginalName("OptionType_OptionalAction")] OptionalAction = 13,
        [pbr::OriginalName("OptionType_ActionsAvailable")] ActionsAvailable = 14,
        [pbr::OriginalName("OptionType_SelectFromGroups")] SelectFromGroups = 15,
        [pbr::OriginalName("OptionType_SearchFromGroups")] SearchFromGroups = 16,
        [pbr::OriginalName("OptionType_Gathering")] Gathering = 17,
    }

    public enum OrderCombatDamageType
    {
        [pbr::OriginalName("OrderCombatDamageType_None")] None = 0,
        [pbr::OriginalName("OrderCombatDamageType_Attacker")] Attacker = 1,
        [pbr::OriginalName("OrderCombatDamageType_Blocker")] Blocker = 2,
    }

    public enum OrderingContext
    {
        [pbr::OriginalName("OrderingContext_None")] None = 0,
        [pbr::OriginalName("OrderingContext_OrderingForBottom")] OrderingForBottom = 1,
        [pbr::OriginalName("OrderingContext_OrderingForTop")] OrderingForTop = 2,
    }

    public enum OrderingFunctionType
    {
        [pbr::OriginalName("OrderingFunctionType_None")] None = 0,
        [pbr::OriginalName("OrderingFunctionType_ConstantValue")] ConstantValue = 1,
        [pbr::OriginalName("OrderingFunctionType_ObjectScore")] ObjectScore = 2,
        [pbr::OriginalName("OrderingFunctionType_CheckCardMechanic")] CheckCardMechanic = 3,
        [pbr::OriginalName("OrderingFunctionType_CheckBlockers")] CheckBlockers = 4,
        [pbr::OriginalName("OrderingFunctionType_CheckAttackers")] CheckAttackers = 5,
        [pbr::OriginalName("OrderingFunctionType_CheckCardMechanicIfNoAttackers")] CheckCardMechanicIfNoAttackers = 6,
        [pbr::OriginalName("OrderingFunctionType_CheckAbilityMechanic")] CheckAbilityMechanic = 7,
        [pbr::OriginalName("OrderingFunctionType_CheckAbilityMechanicIfNoAttackers")] CheckAbilityMechanicIfNoAttackers = 8,
        [pbr::OriginalName("OrderingFunctionType_CheckPredefinedCardMechanics")] CheckPredefinedCardMechanics = 9,
        [pbr::OriginalName("OrderingFunctionType_CheckPredefinedAbilityMechanics")] CheckPredefinedAbilityMechanics = 10,
        [pbr::OriginalName("OrderingFunctionType_CheckPredefinedCardMechanicsIfNoAttackers")] CheckPredefinedCardMechanicsIfNoAttackers = 11,
        [pbr::OriginalName("OrderingFunctionType_CheckPredefinedAbilityMechanicsIfNoAttackers")] CheckPredefinedAbilityMechanicsIfNoAttackers = 12,
        [pbr::OriginalName("OrderingFunctionType_Mulligan")] Mulligan = 13,
        [pbr::OriginalName("OrderingFunctionType_PlayLand")] PlayLand = 14,
        [pbr::OriginalName("OrderingFunctionType_CheckHasAbility")] CheckHasAbility = 15,
        [pbr::OriginalName("OrderingFunctionType_ManaSelect")] ManaSelect = 16,
    }

    public enum OrderingParameterId
    {
        [pbr::OriginalName("OrderingParameterId_None")] None = 0,
        [pbr::OriginalName("OrderingParameterId_BestSingleBlock")] BestSingleBlock = 1,
        [pbr::OriginalName("OrderingParameterId_GoodSingleBlock")] GoodSingleBlock = 2,
        [pbr::OriginalName("OrderingParameterId_GoodSingleTrade")] GoodSingleTrade = 3,
        [pbr::OriginalName("OrderingParameterId_GoodMultiTrade")] GoodMultiTrade = 4,
        [pbr::OriginalName("OrderingParameterId_ChumpBlock")] ChumpBlock = 5,
        [pbr::OriginalName("OrderingParameterId_PlayerDeath")] PlayerDeath = 6,
        [pbr::OriginalName("OrderingParameterId_MustBlock")] MustBlock = 7,
        [pbr::OriginalName("OrderingParameterId_AttackWithEvasion")] AttackWithEvasion = 9,
        [pbr::OriginalName("OrderingParameterId_MustAttack")] MustAttack = 10,
        [pbr::OriginalName("OrderingParameterId_FavorableTrade")] FavorableTrade = 11,
        [pbr::OriginalName("OrderingParameterId_UnfavorableTrade")] UnfavorableTrade = 12,
        [pbr::OriginalName("OrderingParameterId_OpponentDamage")] OpponentDamage = 13,
    }

    public enum OrderingType
    {
        [pbr::OriginalName("OrderingType_None")] None = 0,
        [pbr::OriginalName("OrderingType_OrderAsIndicated")] OrderAsIndicated = 1,
        [pbr::OriginalName("OrderingType_OrderArbitraryOnce")] OrderArbitraryOnce = 2,
        [pbr::OriginalName("OrderingType_OrderArbitraryAlways")] OrderArbitraryAlways = 3,
        [pbr::OriginalName("OrderingType_PromptAlways")] PromptAlways = 4,
    }

    public enum ParameterType
    {
        [pbr::OriginalName("ParameterType_None")] None = 0,
        [pbr::OriginalName("ParameterType_NonLocalizedString")] NonLocalizedString = 1,
        [pbr::OriginalName("ParameterType_Number")] Number = 2,
        [pbr::OriginalName("ParameterType_Reference")] Reference = 3,
        [pbr::OriginalName("ParameterType_RepeatedNumber")] RepeatedNumber = 4,
        [pbr::OriginalName("ParameterType_PromptId")] PromptId = 5,
        [pbr::OriginalName("ParameterType_Priority")] Priority = 6,
    }

    public enum PerformActionFor
    {
        [pbr::OriginalName("PerformActionFor_Attackers")] Attackers = 0,
        [pbr::OriginalName("PerformActionFor_Blockers")] Blockers = 1,
    }

    public enum Phase
    {
        [pbr::OriginalName("Phase_None")] None = 0,
        [pbr::OriginalName("Phase_Beginning")] Beginning = 1,
        [pbr::OriginalName("Phase_Main1")] Main1 = 2,
        [pbr::OriginalName("Phase_Combat")] Combat = 3,
        [pbr::OriginalName("Phase_Main2")] Main2 = 4,
        [pbr::OriginalName("Phase_Ending")] Ending = 5,
    }

    public enum PlayerIs
    {
        [pbr::OriginalName("PlayerIs_None")] None = 0,
        [pbr::OriginalName("PlayerIs_DontCare")] DontCare = 1,
        [pbr::OriginalName("PlayerIs_AI")] Ai = 2,
        [pbr::OriginalName("PlayerIs_Opponent")] Opponent = 3,
    }

    public enum PlayerOrTeam
    {
        [pbr::OriginalName("PlayerOrTeam_Player")] Player = 0,
        [pbr::OriginalName("PlayerOrTeam_Team")] Team = 1,
    }

    public enum PresenceState
    {
        [pbr::OriginalName("PresenceState_Invalid")] Invalid = 0,
        [pbr::OriginalName("PresenceState_Offline")] Offline = 1,
        [pbr::OriginalName("PresenceState_Online")] Online = 2,
    }

    public enum PromptMessage
    {
        [pbr::OriginalName("PromptMessage_None")] None = 0,
        [pbr::OriginalName("PromptMessage_GameStateMessage")] GameStateMessage = 1,
        [pbr::OriginalName("PromptMessage_ActionsAvailableReq")] ActionsAvailableReq = 2,
        [pbr::OriginalName("PromptMessage_IllegalRequest")] IllegalRequest = 3,
        [pbr::OriginalName("PromptMessage_MatchState")] MatchState = 4,
        [pbr::OriginalName("PromptMessage_OptionReq")] OptionReq = 5,
        [pbr::OriginalName("PromptMessage_DeclareAttackersReq")] DeclareAttackersReq = 6,
        [pbr::OriginalName("PromptMessage_DeclareBlockersReq")] DeclareBlockersReq = 7,
        [pbr::OriginalName("PromptMessage_AssignDamageReq")] AssignDamageReq = 8,
        [pbr::OriginalName("PromptMessage_OrderCombatDamageReq")] OrderCombatDamageReq = 9,
        [pbr::OriginalName("PromptMessage_SelectTargetsReq")] SelectTargetsReq = 10,
        [pbr::OriginalName("PromptMessage_PayCostReq")] PayCostReq = 11,
        [pbr::OriginalName("PromptMessage_InvalidSelection")] InvalidSelection = 12,
        [pbr::OriginalName("PromptMessage_InvalidOrdering")] InvalidOrdering = 13,
        [pbr::OriginalName("PromptMessage_Discard")] Discard = 14,
        [pbr::OriginalName("PromptMessage_WaitingForActionsAvailableReq")] WaitingForActionsAvailableReq = 15,
        [pbr::OriginalName("PromptMessage_WaitingForDeclareAttackersReq")] WaitingForDeclareAttackersReq = 16,
        [pbr::OriginalName("PromptMessage_WaitingForDeclareBlockersReq")] WaitingForDeclareBlockersReq = 17,
        [pbr::OriginalName("PromptMessage_WaitingForAssignDamageReq")] WaitingForAssignDamageReq = 18,
        [pbr::OriginalName("PromptMessage_WaitingForOrderCombatDamageReq")] WaitingForOrderCombatDamageReq = 19,
        [pbr::OriginalName("PromptMessage_WaitingForSelectTargetsReq")] WaitingForSelectTargetsReq = 20,
        [pbr::OriginalName("PromptMessage_WaitingForPayCostReq")] WaitingForPayCostReq = 21,
        [pbr::OriginalName("PromptMessage_WaitingForDiscard")] WaitingForDiscard = 22,
        [pbr::OriginalName("PromptMessage_SelectOptionsReq")] SelectOptionsReq = 23,
        [pbr::OriginalName("PromptMessage_WaitingForSelectOptionsReq")] WaitingForSelectOptionsReq = 24,
        [pbr::OriginalName("PromptMessage_GameResultWinLoss")] GameResultWinLoss = 25,
        [pbr::OriginalName("PromptMessage_GameResultDraw")] GameResultDraw = 26,
        [pbr::OriginalName("PromptMessage_MatchResultWinLoss")] MatchResultWinLoss = 27,
        [pbr::OriginalName("PromptMessage_MatchResultDraw")] MatchResultDraw = 28,
        [pbr::OriginalName("PromptMessage_IntermissionRevealHand")] IntermissionRevealHand = 29,
        [pbr::OriginalName("PromptMessage_IntermissionDrawCard")] IntermissionDrawCard = 30,
        [pbr::OriginalName("PromptMessage_IntermissionBeginSideboarding")] IntermissionBeginSideboarding = 31,
        [pbr::OriginalName("PromptMessage_ChooseStarting")] ChooseStarting = 32,
        [pbr::OriginalName("PromptMessage_WaitingForChooseStarting")] WaitingForChooseStarting = 33,
        [pbr::OriginalName("PromptMessage_MulliganOrAcceptHand")] MulliganOrAcceptHand = 34,
        [pbr::OriginalName("PromptMessage_WaitingForMulliganOrAcceptHand")] WaitingForMulliganOrAcceptHand = 35,
        [pbr::OriginalName("PromptMessage_Mulliganed")] Mulliganed = 36,
        [pbr::OriginalName("PromptMessage_AcceptedHand")] AcceptedHand = 37,
        [pbr::OriginalName("PromptMessage_ChoiceMulligan")] ChoiceMulligan = 38,
        [pbr::OriginalName("PromptMessage_ChoiceKeep")] ChoiceKeep = 39,
        [pbr::OriginalName("PromptMessage_GroupReq")] GroupReq = 40,
        [pbr::OriginalName("PromptMessage_WaitingForGroupReq")] WaitingForGroupReq = 41,
        [pbr::OriginalName("PromptMessage_OrderReq")] OrderReq = 42,
        [pbr::OriginalName("PromptMessage_WaitingForOrderReq")] WaitingForOrderReq = 43,
        [pbr::OriginalName("PromptMessage_SelectNGroupReq")] SelectNgroupReq = 44,
        [pbr::OriginalName("PromptMessage_WaitingForSelectNGroupReq")] WaitingForSelectNgroupReq = 45,
        [pbr::OriginalName("PromptMessage_CoinFlip")] CoinFlip = 46,
        [pbr::OriginalName("PromptMessage_ChoiceHeads")] ChoiceHeads = 47,
        [pbr::OriginalName("PromptMessage_ChoiceTails")] ChoiceTails = 48,
        [pbr::OriginalName("PromptMessage_WaitingForSearchReq")] WaitingForSearchReq = 49,
        [pbr::OriginalName("PromptMessage_WaitingForOptionalActionReq")] WaitingForOptionalActionReq = 50,
        [pbr::OriginalName("PromptMessage_XCostReq")] XcostReq = 51,
        [pbr::OriginalName("PromptMessage_WaitingForNumericReq")] WaitingForNumericReq = 52,
        [pbr::OriginalName("PromptMessage_MinimumBlockersNotMet")] MinimumBlockersNotMet = 53,
        [pbr::OriginalName("PromptMessage_DoModularAbility")] DoModularAbility = 54,
        [pbr::OriginalName("PromptMessage_WaitingForDoModularAbility")] WaitingForDoModularAbility = 55,
        [pbr::OriginalName("PromptMessage_MoveCountersMessage")] MoveCountersMessage = 56,
        [pbr::OriginalName("PromptMessage_WaitingForMoveCounters")] WaitingForMoveCounters = 57,
        [pbr::OriginalName("PromptMessage_DoRecover")] DoRecover = 58,
        [pbr::OriginalName("PromptMessage_WaitingForDoRecover")] WaitingForDoRecover = 59,
        [pbr::OriginalName("PromptMessage_DoEchoPayment")] DoEchoPayment = 60,
        [pbr::OriginalName("PromptMessage_WaitingForDoEchoPayment")] WaitingForDoEchoPayment = 61,
        [pbr::OriginalName("PromptMessage_DoProvokeAbility")] DoProvokeAbility = 62,
        [pbr::OriginalName("PromptMessage_WaitingForDoProvokeAbility")] WaitingForDoProvokeAbility = 63,
        [pbr::OriginalName("PromptMessage_DoCascadeAbility")] DoCascadeAbility = 64,
        [pbr::OriginalName("PromptMessage_WaitingForDoCascadeAbility")] WaitingForDoCascadeAbility = 65,
        [pbr::OriginalName("PromptMessage_DoSoulshift")] DoSoulshift = 66,
        [pbr::OriginalName("PromptMessage_WaitingForSoulshift")] WaitingForSoulshift = 67,
        [pbr::OriginalName("PromptMessage_ApplyPlaneswalkerRedirection")] ApplyPlaneswalkerRedirection = 68,
        [pbr::OriginalName("PromptMessage_WaitingForApplyPlaneswalkerRedirect")] WaitingForApplyPlaneswalkerRedirect = 69,
        [pbr::OriginalName("PromptMessage_PlaneswalkerUniqueness")] PlaneswalkerUniqueness = 70,
        [pbr::OriginalName("PromptMessage_WaitingForPlaneswalkerUniqueness")] WaitingForPlaneswalkerUniqueness = 71,
        [pbr::OriginalName("PromptMessage_LegendRule")] LegendRule = 72,
        [pbr::OriginalName("PromptMessage_WaitingForLegendRule")] WaitingForLegendRule = 73,
        [pbr::OriginalName("PromptMessage_SelectReplacement")] SelectReplacement = 74,
        [pbr::OriginalName("PromptMessage_WaitingForSelectReplacement")] WaitingForSelectReplacement = 75,
        [pbr::OriginalName("PromptMessage_ApplyUnleash")] ApplyUnleash = 76,
        [pbr::OriginalName("PromptMessage_WaitingForUnleash")] WaitingForUnleash = 77,
        [pbr::OriginalName("PromptMessage_ChooseObjectToCopy")] ChooseObjectToCopy = 78,
        [pbr::OriginalName("PromptMessage_WaitingForChooseObjectToCopy")] WaitingForChooseObjectToCopy = 79,
        [pbr::OriginalName("PromptMessage_SelectManaTypeReq")] SelectManaTypeReq = 80,
        [pbr::OriginalName("PromptMessage_WaitingForSelectManaTypeReq")] WaitingForSelectManaTypeReq = 81,
        [pbr::OriginalName("PromptMessage_WaitingForDistributionReq")] WaitingForDistributionReq = 82,
        [pbr::OriginalName("PromptMessage_ChooseModalReq")] ChooseModalReq = 83,
        [pbr::OriginalName("PromptMessage_WaitingForChooseModalReq")] WaitingForChooseModalReq = 84,
        [pbr::OriginalName("PromptMessage_OrderObjectEnteringGraveyard")] OrderObjectEnteringGraveyard = 85,
        [pbr::OriginalName("PromptMessage_OrderObjectEnteringLibrary")] OrderObjectEnteringLibrary = 86,
        [pbr::OriginalName("PromptMessage_WaitingForOrderObjectEnteringZone")] WaitingForOrderObjectEnteringZone = 87,
        [pbr::OriginalName("PromptMessage_ChooseCreaturesForConspire")] ChooseCreaturesForConspire = 88,
        [pbr::OriginalName("PromptMessage_ApplyDredge")] ApplyDredge = 89,
        [pbr::OriginalName("PromptMessage_WaitingForDredge")] WaitingForDredge = 90,
        [pbr::OriginalName("PromptMessage_OrderObjectEnteringBattlefield")] OrderObjectEnteringBattlefield = 91,
        [pbr::OriginalName("PromptMessage_Scry")] Scry = 92,
        [pbr::OriginalName("PromptMessage_WaitingForScry")] WaitingForScry = 93,
        [pbr::OriginalName("PromptMessage_UnpayableCost")] UnpayableCost = 94,
        [pbr::OriginalName("PromptMessage_CastForMadnessCost")] CastForMadnessCost = 95,
        [pbr::OriginalName("PromptMessage_SacrificeClue")] SacrificeClue = 96,
        [pbr::OriginalName("PromptMessage_SelectFromGroupsReq")] SelectFromGroupsReq = 97,
        [pbr::OriginalName("PromptMessage_WaitingForSelectFromGroupsReq")] WaitingForSelectFromGroupsReq = 98,
        [pbr::OriginalName("PromptMessage_SelectPermanentsToUntap")] SelectPermanentsToUntap = 99,
        [pbr::OriginalName("PromptMessage_WaitingForSelectPermanentsToUntap")] WaitingForSelectPermanentsToUntap = 100,
        [pbr::OriginalName("PromptMessage_UnboundedLoopDetectedActive")] UnboundedLoopDetectedActive = 101,
        [pbr::OriginalName("PromptMessage_UnboundedLoopDetectedNotActive")] UnboundedLoopDetectedNotActive = 102,
        [pbr::OriginalName("PromptMessage_InfiniteLoopDetected")] InfiniteLoopDetected = 103,
        [pbr::OriginalName("PromptMessage_ClickOKToContinue")] ClickOktoContinue = 104,
        [pbr::OriginalName("PromptMessage_WaitingForPlayer")] WaitingForPlayer = 105,
        [pbr::OriginalName("PromptMessage_GatherReq")] GatherReq = 106,
        [pbr::OriginalName("PromptMessage_WaitingForGatherReq")] WaitingForGatherReq = 107,
        [pbr::OriginalName("PromptMessage_SelectZoneForMutuallyExclusiveZoneTransfers")] SelectZoneForMutuallyExclusiveZoneTransfers = 108,
        [pbr::OriginalName("PromptMessage_WaitingForPlayerToSelectMutuallyExclusiveZone")] WaitingForPlayerToSelectMutuallyExclusiveZone = 109,
        [pbr::OriginalName("PromptMessage_PutOrRemoveCounters")] PutOrRemoveCounters = 110,
        [pbr::OriginalName("PromptMessage_SelectZonesToSearch")] SelectZonesToSearch = 111,
        [pbr::OriginalName("PromptMessage_ChooseAction")] ChooseAction = 112,
        [pbr::OriginalName("PromptMessage_ChooseTargetForNextCopy")] ChooseTargetForNextCopy = 113,
        [pbr::OriginalName("PromptMessage_PerformOpeningHandActions")] PerformOpeningHandActions = 114,
        [pbr::OriginalName("PromptMessage_DoExplorePutCardInGraveyard")] DoExplorePutCardInGraveyard = 115,
        [pbr::OriginalName("PromptMessage_WaitingForExplorePutCardInGraveyard")] WaitingForExplorePutCardInGraveyard = 116,
        [pbr::OriginalName("PromptMessage_Warning_InsufficientBlockers")] WarningInsufficientBlockers = 117,
        [pbr::OriginalName("PromptMessage_ChooseAColor")] ChooseAcolor = 118,
        [pbr::OriginalName("PromptMessage_Warning_BlockerCannotBlockAlone")] WarningBlockerCannotBlockAlone = 119,
        [pbr::OriginalName("PromptMessage_Warning_AttackerCannotAttackAlone")] WarningAttackerCannotAttackAlone = 120,
        [pbr::OriginalName("PromptMessage_Warning_AttackerMustBeBlocked")] WarningAttackerMustBeBlocked = 121,
        [pbr::OriginalName("PromptMessage_Warning_MustAttackWithAtLeastOne")] WarningMustAttackWithAtLeastOne = 122,
        [pbr::OriginalName("PromptMessage_SelectAnAttackee")] SelectAnAttackee = 123,
        [pbr::OriginalName("PromptMessage_Warning_MustAttack")] WarningMustAttack = 124,
        [pbr::OriginalName("PromptMessage_Warning_MustBlock")] WarningMustBlock = 125,
        [pbr::OriginalName("PromptMessage_CitysBlessingDesignation")] CitysBlessingDesignation = 126,
        [pbr::OriginalName("PromptMessage_AssignDamageReqCanIgnoreBlockers")] AssignDamageReqCanIgnoreBlockers = 127,
        [pbr::OriginalName("PromptMessage_SelectAnAttachee")] SelectAnAttachee = 128,
        [pbr::OriginalName("PromptMessage_Surveil")] Surveil = 129,
        [pbr::OriginalName("PromptMessage_Warning_AttackerMustBeBlockedByAll")] WarningAttackerMustBeBlockedByAll = 130,
        [pbr::OriginalName("PromptMessage_Placeholder1")] Placeholder1 = 131,
        [pbr::OriginalName("PromptMessage_Placeholder2")] Placeholder2 = 132,
        [pbr::OriginalName("PromptMessage_Placeholder3")] Placeholder3 = 133,
        [pbr::OriginalName("PromptMessage_Placeholder4")] Placeholder4 = 134,
        [pbr::OriginalName("PromptMessage_Placeholder5")] Placeholder5 = 135,
    }

    public enum PromptPriority
    {
        [pbr::OriginalName("PromptPriority_None")] None = 0,
        [pbr::OriginalName("PromptPriority_Persist")] Persist = 1,
    }

    public enum ProtoVersion
    {
        [pbr::OriginalName("ProtoVersion_None")] None = 0,
        [pbr::OriginalName("ProtoVersion_HiFiGameStates")] HiFiGameStates = 1,
        [pbr::OriginalName("ProtoVersion_PreviousGameStateId")] PreviousGameStateId = 2,
        [pbr::OriginalName("ProtoVersion_Timers")] Timers = 3,
        [pbr::OriginalName("ProtoVersion_ManaRequirement")] ManaRequirement = 4,
        [pbr::OriginalName("ProtoVersion_AutoTapActions")] AutoTapActions = 5,
        [pbr::OriginalName("ProtoVersion_UIMessages")] Uimessages = 6,
        [pbr::OriginalName("ProtoVersion_AutoTapStopsSetting")] AutoTapStopsSetting = 7,
        [pbr::OriginalName("ProtoVersion_Sideboarding")] Sideboarding = 8,
        [pbr::OriginalName("ProtoVersion_AutoOptionalPaymentCancellationSetting")] AutoOptionalPaymentCancellationSetting = 9,
        [pbr::OriginalName("ProtoVersion_CostCategory")] CostCategory = 10,
        [pbr::OriginalName("ProtoVersion_TimersV2")] TimersV2 = 11,
        [pbr::OriginalName("ProtoVersion_Control")] Control = 12,
        [pbr::OriginalName("ProtoVersion_TimersV3")] TimersV3 = 13,
        [pbr::OriginalName("ProtoVersion_AutoAcceptHand")] AutoAcceptHand = 14,
        [pbr::OriginalName("ProtoVersion_TimersV4")] TimersV4 = 15,
        [pbr::OriginalName("ProtoVersion_TimersV5")] TimersV5 = 16,
        [pbr::OriginalName("ProtoVersion_ManaPaymentStrategyType")] ManaPaymentStrategyType = 17,
        [pbr::OriginalName("ProtoVersion_TimersV6")] TimersV6 = 18,
        [pbr::OriginalName("ProtoVersion_TimersV7")] TimersV7 = 19,
        [pbr::OriginalName("ProtoVersion_TimersV8")] TimersV8 = 20,
        [pbr::OriginalName("ProtoVersion_TransientStops")] TransientStops = 21,
        [pbr::OriginalName("ProtoVersion_Cosmetics")] Cosmetics = 22,
        [pbr::OriginalName("ProtoVersion_ResultSpec")] ResultSpec = 23,
        [pbr::OriginalName("ProtoVersion_ResultReason")] ResultReason = 24,
        [pbr::OriginalName("ProtoVersion_SuperFormat")] SuperFormat = 25,
        [pbr::OriginalName("ProtoVersion_AutoSelectReplacementSetting")] AutoSelectReplacementSetting = 26,
        [pbr::OriginalName("ProtoVersion_MulliganType")] MulliganType = 27,
        [pbr::OriginalName("ProtoVersion_PendingMessageType")] PendingMessageType = 28,
    }

    public enum QualificationType
    {
        [pbr::OriginalName("QualificationType_None")] None = 0,
        [pbr::OriginalName("QualificationType_CostToCast")] CostToCast = 1,
        [pbr::OriginalName("QualificationType_CantBeCountered")] CantBeCountered = 10,
        [pbr::OriginalName("QualificationType_CantBeActivated")] CantBeActivated = 11,
        [pbr::OriginalName("QualificationType_CantBeRegenerated")] CantBeRegenerated = 12,
        [pbr::OriginalName("QualificationType_CantBeEnchanted")] CantBeEnchanted = 13,
        [pbr::OriginalName("QualificationType_CantBeEquipped")] CantBeEquipped = 14,
        [pbr::OriginalName("QualificationType_CantBeDestroyed")] CantBeDestroyed = 15,
        [pbr::OriginalName("QualificationType_CantBePrevented")] CantBePrevented = 16,
        [pbr::OriginalName("QualificationType_CantBeTheTargetOf")] CantBeTheTargetOf = 17,
        [pbr::OriginalName("QualificationType_CantBeSacrificed")] CantBeSacrificed = 19,
        [pbr::OriginalName("QualificationType_CantGenericEffect")] CantGenericEffect = 20,
        [pbr::OriginalName("QualificationType_CantUntap")] CantUntap = 21,
        [pbr::OriginalName("QualificationType_CantDraw")] CantDraw = 22,
        [pbr::OriginalName("QualificationType_CantPlay")] CantPlay = 23,
        [pbr::OriginalName("QualificationType_CantCycle")] CantCycle = 24,
        [pbr::OriginalName("QualificationType_CantCast")] CantCast = 25,
        [pbr::OriginalName("QualificationType_CantSearch")] CantSearch = 26,
        [pbr::OriginalName("QualificationType_CantHave")] CantHave = 27,
        [pbr::OriginalName("QualificationType_CantEnter")] CantEnter = 28,
        [pbr::OriginalName("QualificationType_CantAttack")] CantAttack = 30,
        [pbr::OriginalName("QualificationType_CantBlock")] CantBlock = 31,
        [pbr::OriginalName("QualificationType_CantBeBlocked")] CantBeBlocked = 32,
        [pbr::OriginalName("QualificationType_MustBlockAttacker")] MustBlockAttacker = 33,
        [pbr::OriginalName("QualificationType_MustAttack")] MustAttack = 34,
        [pbr::OriginalName("QualificationType_BlockedByMaxCount")] BlockedByMaxCount = 39,
        [pbr::OriginalName("QualificationType_BlockedByMinCount")] BlockedByMinCount = 40,
        [pbr::OriginalName("QualificationType_MustAttackSpecific")] MustAttackSpecific = 41,
        [pbr::OriginalName("QualificationType_BlockIfAble")] BlockIfAble = 42,
        [pbr::OriginalName("QualificationType_AbleToAttack")] AbleToAttack = 43,
        [pbr::OriginalName("QualificationType_AttackThatCombatIfAble")] AttackThatCombatIfAble = 44,
        [pbr::OriginalName("QualificationType_MayPlay")] MayPlay = 47,
        [pbr::OriginalName("QualificationType_CantTransform")] CantTransform = 48,
        [pbr::OriginalName("QualificationType_CanAttack")] CanAttack = 49,
        [pbr::OriginalName("QualificationType_CantCrew")] CantCrew = 50,
        [pbr::OriginalName("QualificationType_CantBlockUnlessAlso")] CantBlockUnlessAlso = 52,
        [pbr::OriginalName("QualificationType_CantActivate")] CantActivate = 53,
        [pbr::OriginalName("QualificationType_MaxAttackers")] MaxAttackers = 54,
        [pbr::OriginalName("QualificationType_MaxBlockers")] MaxBlockers = 55,
        [pbr::OriginalName("QualificationType_CantAttackUnlessAlso")] CantAttackUnlessAlso = 56,
        [pbr::OriginalName("QualificationType_CanOnlyAttackAlone")] CanOnlyAttackAlone = 57,
        [pbr::OriginalName("QualificationType_IfAttacks")] IfAttacks = 58,
        [pbr::OriginalName("QualificationType_AttackCost")] AttackCost = 59,
        [pbr::OriginalName("QualificationType_BlockCost")] BlockCost = 60,
        [pbr::OriginalName("QualificationType_CantCauseAbilitiesToTrigger")] CantCauseAbilitiesToTrigger = 61,
        [pbr::OriginalName("QualificationType_AssignCombatDamageWithToughness")] AssignCombatDamageWithToughness = 62,
        [pbr::OriginalName("QualificationType_PlayerMustAttackElementsOfList")] PlayerMustAttackElementsOfList = 63,
        [pbr::OriginalName("QualificationType_CantLoseTheGame")] CantLoseTheGame = 64,
        [pbr::OriginalName("QualificationType_CantLoseMana")] CantLoseMana = 65,
        [pbr::OriginalName("QualificationType_MayPlayAdditionalLands")] MayPlayAdditionalLands = 66,
        [pbr::OriginalName("QualificationType_AssignCombatDamageAsThoughWerentBlocked")] AssignCombatDamageAsThoughWerentBlocked = 67,
        [pbr::OriginalName("QualificationType_MayPlayValidItems")] MayPlayValidItems = 68,
        [pbr::OriginalName("QualificationType_CanBeTheTargetOf")] CanBeTheTargetOf = 69,
    }

    public enum QueueType
    {
        [pbr::OriginalName("QueueType_Invalid")] Invalid = 0,
        [pbr::OriginalName("QueueType_MatchQueue")] MatchQueue = 1,
        [pbr::OriginalName("QueueType_DraftQueue")] DraftQueue = 2,
    }

    public enum ReasonFaceDown
    {
        [pbr::OriginalName("ReasonFaceDown_None")] None = 0,
        [pbr::OriginalName("ReasonFaceDown_MovedFaceDown")] MovedFaceDown = 1,
        [pbr::OriginalName("ReasonFaceDown_Morph")] Morph = 2,
        [pbr::OriginalName("ReasonFaceDown_Manifest")] Manifest = 3,
        [pbr::OriginalName("ReasonFaceDown_TurnedFaceDown")] TurnedFaceDown = 4,
    }

    public enum ReferenceType
    {
        [pbr::OriginalName("ReferenceType_None")] None = 0,
        [pbr::OriginalName("ReferenceType_InstanceId")] InstanceId = 1,
        [pbr::OriginalName("ReferenceType_CatalogId")] CatalogId = 2,
        [pbr::OriginalName("ReferenceType_LocalizationId")] LocalizationId = 3,
        [pbr::OriginalName("ReferenceType_PlayerSeatId")] PlayerSeatId = 4,
    }

    public enum ReplacementEffectSpawnerType
    {
        [pbr::OriginalName("ReplacementEffectSpawnerType_None")] None = 0,
        [pbr::OriginalName("ReplacementEffectSpawnerType_PreventDamage")] PreventDamage = 1,
    }

    public enum RequiresConfirmation
    {
        [pbr::OriginalName("RequiresConfirmation_None")] None = 0,
        [pbr::OriginalName("RequiresConfirmation_Sacrifice")] Sacrifice = 1,
        [pbr::OriginalName("RequiresConfirmation_PayLife")] PayLife = 2,
        [pbr::OriginalName("RequiresConfirmation_Discard")] Discard = 3,
        [pbr::OriginalName("RequiresConfirmation_Exile")] Exile = 4,
        [pbr::OriginalName("RequiresConfirmation_Target")] Target = 5,
        [pbr::OriginalName("RequiresConfirmation_Selection")] Selection = 6,
        [pbr::OriginalName("RequiresConfirmation_ForOpponent")] ForOpponent = 7,
    }

    public enum ResultCode
    {
        [pbr::OriginalName("ResultCode_None")] None = 0,
        [pbr::OriginalName("ResultCode_Success")] Success = 1,
        [pbr::OriginalName("ResultCode_Failure")] Failure = 2,
        [pbr::OriginalName("ResultCode_CannotAttack")] CannotAttack = 3,
        [pbr::OriginalName("ResultCode_AttackCostUnpaid")] AttackCostUnpaid = 4,
        [pbr::OriginalName("ResultCode_CannotBlock")] CannotBlock = 5,
        [pbr::OriginalName("ResultCode_IllegalBlock")] IllegalBlock = 6,
        [pbr::OriginalName("ResultCode_OrderMismatch")] OrderMismatch = 7,
        [pbr::OriginalName("ResultCode_MissingDamageSource")] MissingDamageSource = 8,
        [pbr::OriginalName("ResultCode_InvalidDamageSource")] InvalidDamageSource = 9,
        [pbr::OriginalName("ResultCode_NonlethalAssignment")] NonlethalAssignment = 10,
        [pbr::OriginalName("ResultCode_InvalidAssignment")] InvalidAssignment = 11,
        [pbr::OriginalName("ResultCode_TooManyTargets")] TooManyTargets = 12,
        [pbr::OriginalName("ResultCode_NotEnoughTargets")] NotEnoughTargets = 13,
        [pbr::OriginalName("ResultCode_IllegalTarget")] IllegalTarget = 14,
        [pbr::OriginalName("ResultCode_RestrictionViolated")] RestrictionViolated = 15,
        [pbr::OriginalName("ResultCode_RequirementViolated")] RequirementViolated = 16,
    }

    public enum ResultReason
    {
        [pbr::OriginalName("ResultReason_None")] None = 0,
        [pbr::OriginalName("ResultReason_Game")] Game = 1,
        [pbr::OriginalName("ResultReason_Concede")] Concede = 2,
        [pbr::OriginalName("ResultReason_Timeout")] Timeout = 3,
        [pbr::OriginalName("ResultReason_Loop")] Loop = 4,
        [pbr::OriginalName("ResultReason_Force")] Force = 5,
    }

    public enum ResultType
    {
        [pbr::OriginalName("ResultType_None")] None = 0,
        [pbr::OriginalName("ResultType_Suspended")] Suspended = 1,
        [pbr::OriginalName("ResultType_Draw")] Draw = 2,
        [pbr::OriginalName("ResultType_WinLoss")] WinLoss = 3,
    }

    public enum SelectAction
    {
        [pbr::OriginalName("SelectAction_None")] None = 0,
        [pbr::OriginalName("SelectAction_Select")] Select = 1,
        [pbr::OriginalName("SelectAction_Unselect")] Unselect = 2,
    }

    public enum SelectionContext
    {
        [pbr::OriginalName("SelectionContext_None")] None = 0,
        [pbr::OriginalName("SelectionContext_Discard")] Discard = 1,
        [pbr::OriginalName("SelectionContext_ManaPool")] ManaPool = 2,
        [pbr::OriginalName("SelectionContext_Resolution")] Resolution = 3,
        [pbr::OriginalName("SelectionContext_TriggeredAbility")] TriggeredAbility = 4,
        [pbr::OriginalName("SelectionContext_Modal")] Modal = 5,
        [pbr::OriginalName("SelectionContext_Replacement")] Replacement = 6,
        [pbr::OriginalName("SelectionContext_NonMana_Payment")] NonManaPayment = 7,
        [pbr::OriginalName("SelectionContext_ManaFromAbility")] ManaFromAbility = 8,
    }

    public enum SelectionListType
    {
        [pbr::OriginalName("SelectionListType_None")] None = 0,
        [pbr::OriginalName("SelectionListType_Static")] Static = 1,
        [pbr::OriginalName("SelectionListType_Dynamic")] Dynamic = 2,
        [pbr::OriginalName("SelectionListType_StaticSubset")] StaticSubset = 3,
    }

    public enum Setting
    {
        [pbr::OriginalName("Setting_None")] None = 0,
        [pbr::OriginalName("Setting_Enable")] Enable = 1,
        [pbr::OriginalName("Setting_Disable")] Disable = 2,
    }

    public enum SettingKey
    {
        [pbr::OriginalName("SettingKey_None")] None = 0,
        [pbr::OriginalName("SettingKey_ByAbility")] ByAbility = 1,
        [pbr::OriginalName("SettingKey_ByCardTitle")] ByCardTitle = 2,
    }

    public enum SettingScope
    {
        [pbr::OriginalName("SettingScope_None")] None = 0,
        [pbr::OriginalName("SettingScope_AnyPlayer")] AnyPlayer = 1,
        [pbr::OriginalName("SettingScope_Opponents")] Opponents = 2,
        [pbr::OriginalName("SettingScope_Team")] Team = 3,
    }

    public enum SettingStatus
    {
        [pbr::OriginalName("SettingStatus_None")] None = 0,
        [pbr::OriginalName("SettingStatus_Set")] Set = 1,
        [pbr::OriginalName("SettingStatus_Clear")] Clear = 2,
    }

    public enum ShuffleRestriction
    {
        [pbr::OriginalName("ShuffleRestriction_None")] None = 0,
        [pbr::OriginalName("ShuffleRestriction_OpeningHand")] OpeningHand = 1,
        [pbr::OriginalName("ShuffleRestriction_All")] All = 2,
    }

    public enum SmartStopsSetting
    {
        [pbr::OriginalName("SmartStopsSetting_None")] None = 0,
        [pbr::OriginalName("SmartStopsSetting_Enable")] Enable = 1,
        [pbr::OriginalName("SmartStopsSetting_Disable")] Disable = 2,
    }

    public enum SortBy
    {
        [pbr::OriginalName("SortBy_None")] None = 0,
        [pbr::OriginalName("SortBy_HighToLow")] HighToLow = 1,
        [pbr::OriginalName("SortBy_LowToHigh")] LowToHigh = 2,
    }

    public enum StaticList
    {
        [pbr::OriginalName("StaticList_None")] None = 0,
        [pbr::OriginalName("StaticList_CardColors")] CardColors = 1,
        [pbr::OriginalName("StaticList_ManaColors")] ManaColors = 2,
        [pbr::OriginalName("StaticList_SuperTypes")] SuperTypes = 3,
        [pbr::OriginalName("StaticList_CardTypes")] CardTypes = 4,
        [pbr::OriginalName("StaticList_SubTypes")] SubTypes = 5,
        [pbr::OriginalName("StaticList_Colors")] Colors = 6,
        [pbr::OriginalName("StaticList_CoinFaces")] CoinFaces = 7,
        [pbr::OriginalName("StaticList_WishCards")] WishCards = 8,
        [pbr::OriginalName("StaticList_BasicLandTypes")] BasicLandTypes = 9,
        [pbr::OriginalName("StaticList_CreatureTypes")] CreatureTypes = 10,
        [pbr::OriginalName("StaticList_CounterTypes")] CounterTypes = 11,
        [pbr::OriginalName("StaticList_Keywords")] Keywords = 12,
        [pbr::OriginalName("StaticList_CardNames")] CardNames = 13,
    }

    public enum Step
    {
        [pbr::OriginalName("Step_None")] None = 0,
        [pbr::OriginalName("Step_Untap")] Untap = 1,
        [pbr::OriginalName("Step_Upkeep")] Upkeep = 2,
        [pbr::OriginalName("Step_Draw")] Draw = 3,
        [pbr::OriginalName("Step_BeginCombat")] BeginCombat = 4,
        [pbr::OriginalName("Step_DeclareAttack")] DeclareAttack = 5,
        [pbr::OriginalName("Step_DeclareBlock")] DeclareBlock = 6,
        [pbr::OriginalName("Step_CombatDamage")] CombatDamage = 7,
        [pbr::OriginalName("Step_EndCombat")] EndCombat = 8,
        [pbr::OriginalName("Step_End")] End = 9,
        [pbr::OriginalName("Step_Cleanup")] Cleanup = 10,
        [pbr::OriginalName("Step_FirstStrikeDamage")] FirstStrikeDamage = 11,
    }

    public enum StopType
    {
        [pbr::OriginalName("StopType_None")] None = 0,
        [pbr::OriginalName("StopType_UpkeepStep")] UpkeepStep = 1,
        [pbr::OriginalName("StopType_DrawStep")] DrawStep = 2,
        [pbr::OriginalName("StopType_PrecombatMainPhase")] PrecombatMainPhase = 3,
        [pbr::OriginalName("StopType_BeginCombatStep")] BeginCombatStep = 4,
        [pbr::OriginalName("StopType_DeclareAttackersStep")] DeclareAttackersStep = 5,
        [pbr::OriginalName("StopType_DeclareBlockersStep")] DeclareBlockersStep = 6,
        [pbr::OriginalName("StopType_CombatDamageStep")] CombatDamageStep = 7,
        [pbr::OriginalName("StopType_EndCombatStep")] EndCombatStep = 8,
        [pbr::OriginalName("StopType_PostcombatMainPhase")] PostcombatMainPhase = 9,
        [pbr::OriginalName("StopType_EndStep")] EndStep = 10,
        [pbr::OriginalName("StopType_FirstStrikeDamageStep")] FirstStrikeDamageStep = 11,
    }

    public enum SubType
    {
        [pbr::OriginalName("SubType_None")] None = 0,
        [pbr::OriginalName("SubType_Angel")] Angel = 1,
        [pbr::OriginalName("SubType_Archer")] Archer = 2,
        [pbr::OriginalName("SubType_Archon")] Archon = 3,
        [pbr::OriginalName("SubType_Artificer")] Artificer = 4,
        [pbr::OriginalName("SubType_Assassin")] Assassin = 5,
        [pbr::OriginalName("SubType_Aura")] Aura = 6,
        [pbr::OriginalName("SubType_Basilisk")] Basilisk = 7,
        [pbr::OriginalName("SubType_Bat")] Bat = 8,
        [pbr::OriginalName("SubType_Bear")] Bear = 9,
        [pbr::OriginalName("SubType_Beast")] Beast = 10,
        [pbr::OriginalName("SubType_Berserker")] Berserker = 11,
        [pbr::OriginalName("SubType_Bird")] Bird = 12,
        [pbr::OriginalName("SubType_Boar")] Boar = 13,
        [pbr::OriginalName("SubType_Cat")] Cat = 14,
        [pbr::OriginalName("SubType_Chandra")] Chandra = 15,
        [pbr::OriginalName("SubType_Cleric")] Cleric = 16,
        [pbr::OriginalName("SubType_Construct")] Construct = 17,
        [pbr::OriginalName("SubType_Crocodile")] Crocodile = 18,
        [pbr::OriginalName("SubType_Demon")] Demon = 19,
        [pbr::OriginalName("SubType_Djinn")] Djinn = 20,
        [pbr::OriginalName("SubType_Dragon")] Dragon = 21,
        [pbr::OriginalName("SubType_Drake")] Drake = 22,
        [pbr::OriginalName("SubType_Druid")] Druid = 23,
        [pbr::OriginalName("SubType_Fish")] Fish = 24,
        [pbr::OriginalName("SubType_Elemental")] Elemental = 25,
        [pbr::OriginalName("SubType_Elephant")] Elephant = 26,
        [pbr::OriginalName("SubType_Elf")] Elf = 27,
        [pbr::OriginalName("SubType_Equipment")] Equipment = 28,
        [pbr::OriginalName("SubType_Forest")] Forest = 29,
        [pbr::OriginalName("SubType_Garruk")] Garruk = 30,
        [pbr::OriginalName("SubType_Gate")] Gate = 31,
        [pbr::OriginalName("SubType_Giant")] Giant = 32,
        [pbr::OriginalName("SubType_Gideon")] Gideon = 33,
        [pbr::OriginalName("SubType_Goblin")] Goblin = 34,
        [pbr::OriginalName("SubType_Golem")] Golem = 35,
        [pbr::OriginalName("SubType_Griffin")] Griffin = 36,
        [pbr::OriginalName("SubType_Horse")] Horse = 37,
        [pbr::OriginalName("SubType_Hound")] Hound = 38,
        [pbr::OriginalName("SubType_Human")] Human = 39,
        [pbr::OriginalName("SubType_Hydra")] Hydra = 40,
        [pbr::OriginalName("SubType_Illusion")] Illusion = 41,
        [pbr::OriginalName("SubType_Insect")] Insect = 42,
        [pbr::OriginalName("SubType_Island")] Island = 43,
        [pbr::OriginalName("SubType_Jace")] Jace = 44,
        [pbr::OriginalName("SubType_Knight")] Knight = 45,
        [pbr::OriginalName("SubType_Merfolk")] Merfolk = 46,
        [pbr::OriginalName("SubType_Minotaur")] Minotaur = 47,
        [pbr::OriginalName("SubType_Monk")] Monk = 48,
        [pbr::OriginalName("SubType_Mountain")] Mountain = 49,
        [pbr::OriginalName("SubType_Ogre")] Ogre = 50,
        [pbr::OriginalName("SubType_Ooze")] Ooze = 51,
        [pbr::OriginalName("SubType_Pegasus")] Pegasus = 52,
        [pbr::OriginalName("SubType_Phoenix")] Phoenix = 53,
        [pbr::OriginalName("SubType_Plains")] Plains = 54,
        [pbr::OriginalName("SubType_Rhino")] Rhino = 55,
        [pbr::OriginalName("SubType_Rogue")] Rogue = 56,
        [pbr::OriginalName("SubType_Salamander")] Salamander = 57,
        [pbr::OriginalName("SubType_Scout")] Scout = 58,
        [pbr::OriginalName("SubType_Serpent")] Serpent = 59,
        [pbr::OriginalName("SubType_Shade")] Shade = 60,
        [pbr::OriginalName("SubType_Shaman")] Shaman = 61,
        [pbr::OriginalName("SubType_Siren")] Siren = 62,
        [pbr::OriginalName("SubType_Skeleton")] Skeleton = 63,
        [pbr::OriginalName("SubType_Soldier")] Soldier = 64,
        [pbr::OriginalName("SubType_Sorin")] Sorin = 65,
        [pbr::OriginalName("SubType_Sphinx")] Sphinx = 66,
        [pbr::OriginalName("SubType_Spider")] Spider = 67,
        [pbr::OriginalName("SubType_Spirit")] Spirit = 68,
        [pbr::OriginalName("SubType_Swamp")] Swamp = 69,
        [pbr::OriginalName("SubType_Tower")] Tower = 70,
        [pbr::OriginalName("SubType_Treefolk")] Treefolk = 71,
        [pbr::OriginalName("SubType_Troll")] Troll = 72,
        [pbr::OriginalName("SubType_Urzas")] Urzas = 73,
        [pbr::OriginalName("SubType_Vampire")] Vampire = 74,
        [pbr::OriginalName("SubType_Vedalken")] Vedalken = 75,
        [pbr::OriginalName("SubType_Wall")] Wall = 76,
        [pbr::OriginalName("SubType_Warrior")] Warrior = 77,
        [pbr::OriginalName("SubType_Wizard")] Wizard = 78,
        [pbr::OriginalName("SubType_Wolf")] Wolf = 79,
        [pbr::OriginalName("SubType_Wurm")] Wurm = 80,
        [pbr::OriginalName("SubType_Zombie")] Zombie = 81,
        [pbr::OriginalName("SubType_Mine")] Mine = 82,
        [pbr::OriginalName("SubType_Power_Plant")] PowerPlant = 83,
        [pbr::OriginalName("SubType_Saproling")] Saproling = 84,
        [pbr::OriginalName("SubType_Avatar")] Avatar = 85,
        [pbr::OriginalName("SubType_Sliver")] Sliver = 86,
        [pbr::OriginalName("SubType_Samurai")] Samurai = 87,
        [pbr::OriginalName("SubType_Pest")] Pest = 88,
        [pbr::OriginalName("SubType_Thalakos")] Thalakos = 89,
        [pbr::OriginalName("SubType_Dauthi")] Dauthi = 90,
        [pbr::OriginalName("SubType_Minion")] Minion = 91,
        [pbr::OriginalName("SubType_Advisor")] Advisor = 92,
        [pbr::OriginalName("SubType_Ajani")] Ajani = 93,
        [pbr::OriginalName("SubType_Alara")] Alara = 94,
        [pbr::OriginalName("SubType_Ally")] Ally = 95,
        [pbr::OriginalName("SubType_Antelope")] Antelope = 97,
        [pbr::OriginalName("SubType_Ape")] Ape = 98,
        [pbr::OriginalName("SubType_Arcane")] Arcane = 99,
        [pbr::OriginalName("SubType_Arkhos")] Arkhos = 100,
        [pbr::OriginalName("SubType_Ashiok")] Ashiok = 101,
        [pbr::OriginalName("SubType_AssemblyWorker")] AssemblyWorker = 102,
        [pbr::OriginalName("SubType_Atog")] Atog = 103,
        [pbr::OriginalName("SubType_Aurochs")] Aurochs = 104,
        [pbr::OriginalName("SubType_Azgol")] Azgol = 105,
        [pbr::OriginalName("SubType_Badger")] Badger = 106,
        [pbr::OriginalName("SubType_Barbarian")] Barbarian = 107,
        [pbr::OriginalName("SubType_Beeble")] Beeble = 108,
        [pbr::OriginalName("SubType_Belenon")] Belenon = 109,
        [pbr::OriginalName("SubType_Bolas")] Bolas = 110,
        [pbr::OriginalName("SubType_Bolass")] Bolass = 111,
        [pbr::OriginalName("SubType_Bringer")] Bringer = 112,
        [pbr::OriginalName("SubType_Brushwagg")] Brushwagg = 113,
        [pbr::OriginalName("SubType_Camel")] Camel = 114,
        [pbr::OriginalName("SubType_Carrier")] Carrier = 115,
        [pbr::OriginalName("SubType_Centaur")] Centaur = 116,
        [pbr::OriginalName("SubType_Cephalid")] Cephalid = 117,
        [pbr::OriginalName("SubType_Chimera")] Chimera = 118,
        [pbr::OriginalName("SubType_Cockatrice")] Cockatrice = 119,
        [pbr::OriginalName("SubType_Crab")] Crab = 120,
        [pbr::OriginalName("SubType_Curse")] Curse = 121,
        [pbr::OriginalName("SubType_Cyclops")] Cyclops = 122,
        [pbr::OriginalName("SubType_Desert")] Desert = 123,
        [pbr::OriginalName("SubType_Devil")] Devil = 124,
        [pbr::OriginalName("SubType_Dominaria")] Dominaria = 125,
        [pbr::OriginalName("SubType_Domri")] Domri = 126,
        [pbr::OriginalName("SubType_Dreadnought")] Dreadnought = 127,
        [pbr::OriginalName("SubType_Drone")] Drone = 128,
        [pbr::OriginalName("SubType_Dryad")] Dryad = 129,
        [pbr::OriginalName("SubType_Dwarf")] Dwarf = 130,
        [pbr::OriginalName("SubType_Efreet")] Efreet = 131,
        [pbr::OriginalName("SubType_Elder")] Elder = 132,
        [pbr::OriginalName("SubType_Eldrazi")] Eldrazi = 133,
        [pbr::OriginalName("SubType_Elk")] Elk = 134,
        [pbr::OriginalName("SubType_Elspeth")] Elspeth = 135,
        [pbr::OriginalName("SubType_Equilor")] Equilor = 136,
        [pbr::OriginalName("SubType_Ergamon")] Ergamon = 137,
        [pbr::OriginalName("SubType_Eye")] Eye = 138,
        [pbr::OriginalName("SubType_Fabacin")] Fabacin = 139,
        [pbr::OriginalName("SubType_Faerie")] Faerie = 140,
        [pbr::OriginalName("SubType_Ferret")] Ferret = 141,
        [pbr::OriginalName("SubType_Flagbearer")] Flagbearer = 142,
        [pbr::OriginalName("SubType_Fortification")] Fortification = 143,
        [pbr::OriginalName("SubType_Fox")] Fox = 144,
        [pbr::OriginalName("SubType_Frog")] Frog = 145,
        [pbr::OriginalName("SubType_Fungus")] Fungus = 146,
        [pbr::OriginalName("SubType_Gargoyle")] Gargoyle = 147,
        [pbr::OriginalName("SubType_Gnome")] Gnome = 148,
        [pbr::OriginalName("SubType_Goat")] Goat = 149,
        [pbr::OriginalName("SubType_God")] God = 150,
        [pbr::OriginalName("SubType_Gorgon")] Gorgon = 151,
        [pbr::OriginalName("SubType_Gremlin")] Gremlin = 152,
        [pbr::OriginalName("SubType_Hag")] Hag = 153,
        [pbr::OriginalName("SubType_Harpy")] Harpy = 154,
        [pbr::OriginalName("SubType_Hellion")] Hellion = 155,
        [pbr::OriginalName("SubType_Hippo")] Hippo = 156,
        [pbr::OriginalName("SubType_Hippogriff")] Hippogriff = 157,
        [pbr::OriginalName("SubType_Homarid")] Homarid = 158,
        [pbr::OriginalName("SubType_Homunculus")] Homunculus = 159,
        [pbr::OriginalName("SubType_Horror")] Horror = 160,
        [pbr::OriginalName("SubType_Hyena")] Hyena = 161,
        [pbr::OriginalName("SubType_Imp")] Imp = 162,
        [pbr::OriginalName("SubType_Incarnation")] Incarnation = 163,
        [pbr::OriginalName("SubType_Innistrad")] Innistrad = 164,
        [pbr::OriginalName("SubType_Iquatana")] Iquatana = 165,
        [pbr::OriginalName("SubType_Ir")] Ir = 166,
        [pbr::OriginalName("SubType_Jellyfish")] Jellyfish = 167,
        [pbr::OriginalName("SubType_Juggernaut")] Juggernaut = 168,
        [pbr::OriginalName("SubType_Kaldheim")] Kaldheim = 169,
        [pbr::OriginalName("SubType_Kamigawa")] Kamigawa = 170,
        [pbr::OriginalName("SubType_Karn")] Karn = 171,
        [pbr::OriginalName("SubType_Karsus")] Karsus = 172,
        [pbr::OriginalName("SubType_Kavu")] Kavu = 173,
        [pbr::OriginalName("SubType_Kephalai")] Kephalai = 174,
        [pbr::OriginalName("SubType_Kirin")] Kirin = 175,
        [pbr::OriginalName("SubType_Kithkin")] Kithkin = 176,
        [pbr::OriginalName("SubType_Kobold")] Kobold = 177,
        [pbr::OriginalName("SubType_Kolbahan")] Kolbahan = 178,
        [pbr::OriginalName("SubType_Kor")] Kor = 179,
        [pbr::OriginalName("SubType_Koth")] Koth = 180,
        [pbr::OriginalName("SubType_Kraken")] Kraken = 181,
        [pbr::OriginalName("SubType_Kyneth")] Kyneth = 182,
        [pbr::OriginalName("SubType_Lair")] Lair = 183,
        [pbr::OriginalName("SubType_Lammasu")] Lammasu = 184,
        [pbr::OriginalName("SubType_Leech")] Leech = 185,
        [pbr::OriginalName("SubType_Leviathan")] Leviathan = 186,
        [pbr::OriginalName("SubType_Lhurgoyf")] Lhurgoyf = 187,
        [pbr::OriginalName("SubType_Licid")] Licid = 188,
        [pbr::OriginalName("SubType_Liliana")] Liliana = 189,
        [pbr::OriginalName("SubType_Lizard")] Lizard = 190,
        [pbr::OriginalName("SubType_Locus")] Locus = 191,
        [pbr::OriginalName("SubType_Lorwyn")] Lorwyn = 192,
        [pbr::OriginalName("SubType_Luvion")] Luvion = 193,
        [pbr::OriginalName("SubType_Manticore")] Manticore = 194,
        [pbr::OriginalName("SubType_Masticore")] Masticore = 195,
        [pbr::OriginalName("SubType_Meditation")] Meditation = 196,
        [pbr::OriginalName("SubType_Mercadia")] Mercadia = 197,
        [pbr::OriginalName("SubType_Mercenary")] Mercenary = 198,
        [pbr::OriginalName("SubType_Metathran")] Metathran = 199,
        [pbr::OriginalName("SubType_Mirrodin")] Mirrodin = 200,
        [pbr::OriginalName("SubType_Moag")] Moag = 201,
        [pbr::OriginalName("SubType_Monger")] Monger = 202,
        [pbr::OriginalName("SubType_Mongoose")] Mongoose = 203,
        [pbr::OriginalName("SubType_Mongseng")] Mongseng = 204,
        [pbr::OriginalName("SubType_Moonfolk")] Moonfolk = 205,
        [pbr::OriginalName("SubType_Muraganda")] Muraganda = 206,
        [pbr::OriginalName("SubType_Mutant")] Mutant = 207,
        [pbr::OriginalName("SubType_Myr")] Myr = 208,
        [pbr::OriginalName("SubType_Mystic")] Mystic = 209,
        [pbr::OriginalName("SubType_Nautilus")] Nautilus = 210,
        [pbr::OriginalName("SubType_Nephilim")] Nephilim = 211,
        [pbr::OriginalName("SubType_New")] New = 212,
        [pbr::OriginalName("SubType_Nightmare")] Nightmare = 213,
        [pbr::OriginalName("SubType_Nightstalker")] Nightstalker = 214,
        [pbr::OriginalName("SubType_Ninja")] Ninja = 215,
        [pbr::OriginalName("SubType_Nissa")] Nissa = 216,
        [pbr::OriginalName("SubType_Noggle")] Noggle = 217,
        [pbr::OriginalName("SubType_Nomad")] Nomad = 218,
        [pbr::OriginalName("SubType_Nymph")] Nymph = 219,
        [pbr::OriginalName("SubType_Octopus")] Octopus = 220,
        [pbr::OriginalName("SubType_Orc")] Orc = 221,
        [pbr::OriginalName("SubType_Orgg")] Orgg = 222,
        [pbr::OriginalName("SubType_Ouphe")] Ouphe = 223,
        [pbr::OriginalName("SubType_Ox")] Ox = 224,
        [pbr::OriginalName("SubType_Oyster")] Oyster = 225,
        [pbr::OriginalName("SubType_Phelddagrif")] Phelddagrif = 226,
        [pbr::OriginalName("SubType_Phyrexia")] Phyrexia = 227,
        [pbr::OriginalName("SubType_Pirate")] Pirate = 228,
        [pbr::OriginalName("SubType_Plant")] Plant = 229,
        [pbr::OriginalName("SubType_Praetor")] Praetor = 230,
        [pbr::OriginalName("SubType_Pyrulea")] Pyrulea = 231,
        [pbr::OriginalName("SubType_Rabbit")] Rabbit = 232,
        [pbr::OriginalName("SubType_Rabiah")] Rabiah = 233,
        [pbr::OriginalName("SubType_Ral")] Ral = 234,
        [pbr::OriginalName("SubType_Rat")] Rat = 235,
        [pbr::OriginalName("SubType_Rath")] Rath = 236,
        [pbr::OriginalName("SubType_Ravnica")] Ravnica = 237,
        [pbr::OriginalName("SubType_Realm")] Realm = 238,
        [pbr::OriginalName("SubType_Rebel")] Rebel = 239,
        [pbr::OriginalName("SubType_Regatha")] Regatha = 240,
        [pbr::OriginalName("SubType_Rigger")] Rigger = 241,
        [pbr::OriginalName("SubType_Sable")] Sable = 242,
        [pbr::OriginalName("SubType_Sarkhan")] Sarkhan = 243,
        [pbr::OriginalName("SubType_Satyr")] Satyr = 244,
        [pbr::OriginalName("SubType_Scarecrow")] Scarecrow = 245,
        [pbr::OriginalName("SubType_Scorpion")] Scorpion = 246,
        [pbr::OriginalName("SubType_Segovia")] Segovia = 247,
        [pbr::OriginalName("SubType_Serras")] Serras = 248,
        [pbr::OriginalName("SubType_Shadowmoor")] Shadowmoor = 249,
        [pbr::OriginalName("SubType_Shandalar")] Shandalar = 250,
        [pbr::OriginalName("SubType_Shapeshifter")] Shapeshifter = 251,
        [pbr::OriginalName("SubType_Sheep")] Sheep = 252,
        [pbr::OriginalName("SubType_Shrine")] Shrine = 253,
        [pbr::OriginalName("SubType_Slith")] Slith = 254,
        [pbr::OriginalName("SubType_Slug")] Slug = 255,
        [pbr::OriginalName("SubType_Snake")] Snake = 256,
        [pbr::OriginalName("SubType_Soltari")] Soltari = 257,
        [pbr::OriginalName("SubType_Spawn")] Spawn = 258,
        [pbr::OriginalName("SubType_Specter")] Specter = 259,
        [pbr::OriginalName("SubType_Spellshaper")] Spellshaper = 260,
        [pbr::OriginalName("SubType_Spike")] Spike = 261,
        [pbr::OriginalName("SubType_Sponge")] Sponge = 262,
        [pbr::OriginalName("SubType_Squid")] Squid = 263,
        [pbr::OriginalName("SubType_Squirrel")] Squirrel = 264,
        [pbr::OriginalName("SubType_Starfish")] Starfish = 265,
        [pbr::OriginalName("SubType_Surrakar")] Surrakar = 266,
        [pbr::OriginalName("SubType_Tamiyo")] Tamiyo = 267,
        [pbr::OriginalName("SubType_Tezzeret")] Tezzeret = 268,
        [pbr::OriginalName("SubType_Thopter")] Thopter = 269,
        [pbr::OriginalName("SubType_Thrull")] Thrull = 270,
        [pbr::OriginalName("SubType_Tibalt")] Tibalt = 271,
        [pbr::OriginalName("SubType_Trap")] Trap = 272,
        [pbr::OriginalName("SubType_Turtle")] Turtle = 273,
        [pbr::OriginalName("SubType_Ulgrotha")] Ulgrotha = 274,
        [pbr::OriginalName("SubType_Unicorn")] Unicorn = 275,
        [pbr::OriginalName("SubType_Valla")] Valla = 276,
        [pbr::OriginalName("SubType_Venser")] Venser = 277,
        [pbr::OriginalName("SubType_Viashino")] Viashino = 278,
        [pbr::OriginalName("SubType_Volver")] Volver = 279,
        [pbr::OriginalName("SubType_Vraska")] Vraska = 280,
        [pbr::OriginalName("SubType_Vryn")] Vryn = 281,
        [pbr::OriginalName("SubType_Weird")] Weird = 282,
        [pbr::OriginalName("SubType_Werewolf")] Werewolf = 283,
        [pbr::OriginalName("SubType_Whale")] Whale = 284,
        [pbr::OriginalName("SubType_Wildfire")] Wildfire = 285,
        [pbr::OriginalName("SubType_Wolverine")] Wolverine = 286,
        [pbr::OriginalName("SubType_Wombat")] Wombat = 287,
        [pbr::OriginalName("SubType_Worm")] Worm = 288,
        [pbr::OriginalName("SubType_Wraith")] Wraith = 289,
        [pbr::OriginalName("SubType_Xenagos")] Xenagos = 290,
        [pbr::OriginalName("SubType_Xerex")] Xerex = 291,
        [pbr::OriginalName("SubType_Yeti")] Yeti = 292,
        [pbr::OriginalName("SubType_Zendikar")] Zendikar = 293,
        [pbr::OriginalName("SubType_Zubera")] Zubera = 294,
        [pbr::OriginalName("SubType_Germ")] Germ = 295,
        [pbr::OriginalName("SubType_Contraption")] Contraption = 296,
        [pbr::OriginalName("SubType_Citizen")] Citizen = 297,
        [pbr::OriginalName("SubType_Coward")] Coward = 298,
        [pbr::OriginalName("SubType_Deserter")] Deserter = 299,
        [pbr::OriginalName("SubType_Prism")] Prism = 300,
        [pbr::OriginalName("SubType_Reflection")] Reflection = 301,
        [pbr::OriginalName("SubType_Sand")] Sand = 302,
        [pbr::OriginalName("SubType_Serf")] Serf = 303,
        [pbr::OriginalName("SubType_Dack")] Dack = 304,
        [pbr::OriginalName("SubType_Kiora")] Kiora = 305,
        [pbr::OriginalName("SubType_AllCreatureTypes")] AllCreatureTypes = 306,
        [pbr::OriginalName("SubType_Blinkmoth")] Blinkmoth = 307,
        [pbr::OriginalName("SubType_Camarid")] Camarid = 308,
        [pbr::OriginalName("SubType_Caribou")] Caribou = 309,
        [pbr::OriginalName("SubType_Graveborn")] Graveborn = 310,
        [pbr::OriginalName("SubType_Lamia")] Lamia = 311,
        [pbr::OriginalName("SubType_Orb")] Orb = 312,
        [pbr::OriginalName("SubType_Pentavite")] Pentavite = 313,
        [pbr::OriginalName("SubType_Pincher")] Pincher = 314,
        [pbr::OriginalName("SubType_Splinter")] Splinter = 315,
        [pbr::OriginalName("SubType_Survivor")] Survivor = 316,
        [pbr::OriginalName("SubType_Tetravite")] Tetravite = 317,
        [pbr::OriginalName("SubType_Triskelavite")] Triskelavite = 318,
        [pbr::OriginalName("SubType_Scion")] Scion = 319,
        [pbr::OriginalName("SubType_Processor")] Processor = 320,
        [pbr::OriginalName("SubType_Arlinn")] Arlinn = 321,
        [pbr::OriginalName("SubType_Mole")] Mole = 322,
        [pbr::OriginalName("SubType_Nahiri")] Nahiri = 323,
        [pbr::OriginalName("SubType_Clue")] Clue = 324,
        [pbr::OriginalName("SubType_Teferi")] Teferi = 325,
        [pbr::OriginalName("SubType_Daretti")] Daretti = 326,
        [pbr::OriginalName("SubType_Freyalise")] Freyalise = 327,
        [pbr::OriginalName("SubType_Nixilis")] Nixilis = 328,
        [pbr::OriginalName("SubType_Narset")] Narset = 329,
        [pbr::OriginalName("SubType_Ugin")] Ugin = 330,
        [pbr::OriginalName("SubType_Vehicle")] Vehicle = 331,
        [pbr::OriginalName("SubType_Servo")] Servo = 332,
        [pbr::OriginalName("SubType_Dovin")] Dovin = 333,
        [pbr::OriginalName("SubType_Saheeli")] Saheeli = 334,
        [pbr::OriginalName("SubType_Monkey")] Monkey = 335,
        [pbr::OriginalName("SubType_Aetherborn")] Aetherborn = 336,
        [pbr::OriginalName("SubType_Pilot")] Pilot = 337,
        [pbr::OriginalName("SubType_Jackal")] Jackal = 338,
        [pbr::OriginalName("SubType_Naga")] Naga = 339,
        [pbr::OriginalName("SubType_Cartouche")] Cartouche = 340,
        [pbr::OriginalName("SubType_Samut")] Samut = 341,
        [pbr::OriginalName("SubType_Dinosaur")] Dinosaur = 342,
        [pbr::OriginalName("SubType_Treasure")] Treasure = 343,
        [pbr::OriginalName("SubType_Huatli")] Huatli = 344,
        [pbr::OriginalName("SubType_Angrath")] Angrath = 345,
        [pbr::OriginalName("SubType_Trilobite")] Trilobite = 346,
        [pbr::OriginalName("SubType_Saga")] Saga = 347,
        [pbr::OriginalName("SubType_Jaya")] Jaya = 348,
        [pbr::OriginalName("SubType_Vivien")] Vivien = 349,
        [pbr::OriginalName("SubType_Egg")] Egg = 350,
        [pbr::OriginalName("SubType_PlaceholderSubType1")] PlaceholderSubType1 = 351,
        [pbr::OriginalName("SubType_PlaceholderSubType2")] PlaceholderSubType2 = 352,
        [pbr::OriginalName("SubType_PlaceholderSubType3")] PlaceholderSubType3 = 353,
        [pbr::OriginalName("SubType_PlaceholderSubType4")] PlaceholderSubType4 = 354,
        [pbr::OriginalName("SubType_PlaceholderSubType5")] PlaceholderSubType5 = 355,
    }

    public enum SubZoneType
    {
        [pbr::OriginalName("SubZoneType_None")] None = 0,
        [pbr::OriginalName("SubZoneType_Top")] Top = 1,
        [pbr::OriginalName("SubZoneType_Bottom")] Bottom = 2,
    }

    public enum SuperFormat
    {
        [pbr::OriginalName("SuperFormat_None")] None = 0,
        [pbr::OriginalName("SuperFormat_Limited")] Limited = 1,
        [pbr::OriginalName("SuperFormat_Constructed")] Constructed = 2,
    }

    public enum SuperType
    {
        [pbr::OriginalName("SuperType_None")] None = 0,
        [pbr::OriginalName("SuperType_Basic")] Basic = 1,
        [pbr::OriginalName("SuperType_Legendary")] Legendary = 2,
        [pbr::OriginalName("SuperType_Ongoing")] Ongoing = 3,
        [pbr::OriginalName("SuperType_Snow")] Snow = 4,
        [pbr::OriginalName("SuperType_World")] World = 5,
    }

    public enum TargetType
    {
        [pbr::OriginalName("TargetType_None")] None = 0,
        [pbr::OriginalName("TargetType_Player")] Player = 1,
        [pbr::OriginalName("TargetType_GameObject")] GameObject = 2,
    }

    public enum TeamType
    {
        [pbr::OriginalName("TeamType_None")] None = 0,
        [pbr::OriginalName("TeamType_Individual")] Individual = 1,
        [pbr::OriginalName("TeamType_SharedTeam")] SharedTeam = 2,
    }

    public enum TimeoutType
    {
        [pbr::OriginalName("TimeoutType_None")] None = 0,
        [pbr::OriginalName("TimeoutType_ChessClock")] ChessClock = 1,
        [pbr::OriginalName("TimeoutType_Inactivity")] Inactivity = 2,
    }

    public enum TimerBehavior
    {
        [pbr::OriginalName("TimerBehavior_None")] None = 0,
        [pbr::OriginalName("TimerBehavior_Timeout")] Timeout = 1,
        [pbr::OriginalName("TimerBehavior_AutoRespond")] AutoRespond = 2,
        [pbr::OriginalName("TimerBehavior_TakeControl")] TakeControl = 3,
        [pbr::OriginalName("TimerBehavior_ReleaseControl")] ReleaseControl = 4,
        [pbr::OriginalName("TimerBehavior_Start")] Start = 5,
        [pbr::OriginalName("TimerBehavior_Restart")] Restart = 6,
        [pbr::OriginalName("TimerBehavior_Stop")] Stop = 7,
        [pbr::OriginalName("TimerBehavior_Reset")] Reset = 8,
        [pbr::OriginalName("TimerBehavior_Activate")] Activate = 9,
        [pbr::OriginalName("TimerBehavior_Deactivate")] Deactivate = 10,
    }

    public enum TimerEvent
    {
        [pbr::OriginalName("TimerEvent_None")] None = 0,
        [pbr::OriginalName("TimerEvent_OnRequestSent")] OnRequestSent = 1,
        [pbr::OriginalName("TimerEvent_OnResponseReceived")] OnResponseReceived = 2,
        [pbr::OriginalName("TimerEvent_OnExpiration")] OnExpiration = 3,
        [pbr::OriginalName("TimerEvent_OnMatchStart")] OnMatchStart = 4,
        [pbr::OriginalName("TimerEvent_OnGameStart")] OnGameStart = 5,
        [pbr::OriginalName("TimerEvent_OnPlayStart")] OnPlayStart = 6,
        [pbr::OriginalName("TimerEvent_OnTurnChanged")] OnTurnChanged = 7,
        [pbr::OriginalName("TimerEvent_OnActivePlayer")] OnActivePlayer = 8,
        [pbr::OriginalName("TimerEvent_OnNonActivePlayer")] OnNonActivePlayer = 9,
        [pbr::OriginalName("TimerEvent_Beginning")] Beginning = 10,
        [pbr::OriginalName("TimerEvent_Main1")] Main1 = 11,
        [pbr::OriginalName("TimerEvent_Combat")] Combat = 12,
        [pbr::OriginalName("TimerEvent_Main2")] Main2 = 13,
        [pbr::OriginalName("TimerEvent_Ending")] Ending = 14,
        [pbr::OriginalName("TimerEvent_OnWin")] OnWin = 15,
        [pbr::OriginalName("TimerEvent_OnLoss")] OnLoss = 16,
        [pbr::OriginalName("TimerEvent_OnDraw")] OnDraw = 17,
        [pbr::OriginalName("TimerEvent_OnGameOver")] OnGameOver = 18,
        [pbr::OriginalName("TimerEvent_OnMatchOver")] OnMatchOver = 19,
        [pbr::OriginalName("TimerEvent_OnTurnOver")] OnTurnOver = 20,
        [pbr::OriginalName("TimerEvent_Upkeep")] Upkeep = 21,
        [pbr::OriginalName("TimerEvent_Draw")] Draw = 22,
        [pbr::OriginalName("TimerEvent_BeginCombat")] BeginCombat = 23,
        [pbr::OriginalName("TimerEvent_DeclareAttack")] DeclareAttack = 24,
        [pbr::OriginalName("TimerEvent_DeclareBlock")] DeclareBlock = 25,
        [pbr::OriginalName("TimerEvent_CombatDamage")] CombatDamage = 26,
        [pbr::OriginalName("TimerEvent_EndCombat")] EndCombat = 27,
        [pbr::OriginalName("TimerEvent_End")] End = 28,
        [pbr::OriginalName("TimerEvent_Cleanup")] Cleanup = 29,
        [pbr::OriginalName("TimerEvent_FirstStrikeDamage")] FirstStrikeDamage = 30,
    }

    public enum TimerPackage
    {
        [pbr::OriginalName("TimerPackage_None")] None = 0,
        [pbr::OriginalName("TimerPackage_V1")] V1 = 1,
        [pbr::OriginalName("TimerPackage_V2")] V2 = 2,
        [pbr::OriginalName("TimerPackage_V3")] V3 = 3,
        [pbr::OriginalName("TimerPackage_V4")] V4 = 4,
        [pbr::OriginalName("TimerPackage_V5")] V5 = 5,
    }

    public enum TimerType
    {
        [pbr::OriginalName("TimerType_None")] None = 0,
        [pbr::OriginalName("TimerType_Decision")] Decision = 1,
        [pbr::OriginalName("TimerType_Inactivity")] Inactivity = 2,
        [pbr::OriginalName("TimerType_ActivePlayer")] ActivePlayer = 3,
        [pbr::OriginalName("TimerType_NonActivePlayer")] NonActivePlayer = 4,
        [pbr::OriginalName("TimerType_Prologue")] Prologue = 5,
        [pbr::OriginalName("TimerType_Epilogue")] Epilogue = 6,
    }

    public enum TypeCategory
    {
        [pbr::OriginalName("TypeCategory_None")] None = 0,
        [pbr::OriginalName("TypeCategory_Color")] Color = 3,
        [pbr::OriginalName("TypeCategory_CardType")] CardType = 5,
        [pbr::OriginalName("TypeCategory_SubType")] SubType = 6,
        [pbr::OriginalName("TypeCategory_SuperType")] SuperType = 7,
    }

    public enum Visibility
    {
        [pbr::OriginalName("Visibility_None")] None = 0,
        [pbr::OriginalName("Visibility_Public")] Public = 1,
        [pbr::OriginalName("Visibility_Private")] Private = 2,
        [pbr::OriginalName("Visibility_Hidden")] Hidden = 3,
    }

    public enum WellKnownCatalogId
    {
        [pbr::OriginalName("WellKnownCatalogId_None")] None = 0,
        [pbr::OriginalName("WellKnownCatalogId_Token")] Token = 1,
        [pbr::OriginalName("WellKnownCatalogId_Emblem")] Emblem = 2,
        [pbr::OriginalName("WellKnownCatalogId_StandardCardBack")] StandardCardBack = 3,
        [pbr::OriginalName("WellKnownCatalogId_Obscured")] Obscured = 4,
        [pbr::OriginalName("WellKnownCatalogId_DelayedTriggerAbilityHolder")] DelayedTriggerAbilityHolder = 5,
    }

    public enum WishCards
    {
        [pbr::OriginalName("WishCards_None")] None = 0,
        [pbr::OriginalName("WishCards_GriffinSentinel")] GriffinSentinel = 41200,
        [pbr::OriginalName("WishCards_Divination")] Divination = 41202,
        [pbr::OriginalName("WishCards_DjinnOfWishes")] DjinnOfWishes = 41204,
        [pbr::OriginalName("WishCards_DoomBlade")] DoomBlade = 41205,
        [pbr::OriginalName("WishCards_ZombieGoliath")] ZombieGoliath = 41210,
        [pbr::OriginalName("WishCards_WordOfSeizing")] WordOfSeizing = 53011,
    }

    public enum ZonePermissions
    {
        [pbr::OriginalName("ZonePermissions_None")] None = 0,
        [pbr::OriginalName("ZonePermissions_Hand")] Hand = 1,
        [pbr::OriginalName("ZonePermissions_Library")] Library = 2,
        [pbr::OriginalName("ZonePermissions_All")] All = 3,
    }

    public enum ZoneType
    {
        [pbr::OriginalName("ZoneType_None")] None = 0,
        [pbr::OriginalName("ZoneType_Library")] Library = 1,
        [pbr::OriginalName("ZoneType_Hand")] Hand = 2,
        [pbr::OriginalName("ZoneType_Battlefield")] Battlefield = 3,
        [pbr::OriginalName("ZoneType_Stack")] Stack = 4,
        [pbr::OriginalName("ZoneType_Graveyard")] Graveyard = 5,
        [pbr::OriginalName("ZoneType_Exile")] Exile = 6,
        [pbr::OriginalName("ZoneType_Command")] Command = 7,
        [pbr::OriginalName("ZoneType_Revealed")] Revealed = 8,
        [pbr::OriginalName("ZoneType_Limbo")] Limbo = 9,
        [pbr::OriginalName("ZoneType_Sideboard")] Sideboard = 10,
        [pbr::OriginalName("ZoneType_Pending")] Pending = 11,
        [pbr::OriginalName("ZoneType_PhasedOut")] PhasedOut = 12,
    }

    #endregion

    #region Messages
    public sealed partial class AIConfigData : pb::IMessage<AIConfigData>
    {
        private static readonly pb::MessageParser<AIConfigData> _parser = new pb::MessageParser<AIConfigData>(() => new AIConfigData());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AIConfigData> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[0]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigData()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigData(AIConfigData other) : this()
        {
            configureValueHeuristics_ = other.configureValueHeuristics_.Clone();
            configureOrderingHeuristics_ = other.configureOrderingHeuristics_.Clone();
            valueHeuristicParameters_ = other.valueHeuristicParameters_.Clone();
            orderingHeuristicParameters_ = other.orderingHeuristicParameters_.Clone();
            mode_ = other.mode_;
            tracingEnabled_ = other.tracingEnabled_;
            viewOpponentHand_ = other.viewOpponentHand_;
            viewOpponentLibrary_ = other.viewOpponentLibrary_;
            maximumDepth_ = other.maximumDepth_;
            maximumBreadth_ = other.maximumBreadth_;
            maximumNodeExpansion_ = other.maximumNodeExpansion_;
            timeoutInMilliseconds_ = other.timeoutInMilliseconds_;
            transpositionTableSizeInKB_ = other.transpositionTableSizeInKB_;
            randomSeed_ = other.randomSeed_;
            configureHistoryOn_ = other.configureHistoryOn_;
            allowOpponentUndo_ = other.allowOpponentUndo_;
            allowOpponentControl_ = other.allowOpponentControl_;
            diagnosticMode_ = other.diagnosticMode_;
            randomOrderingRange_ = other.randomOrderingRange_;
            transEnable_ = other.transEnable_;
            concedeOnException_ = other.concedeOnException_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigData Clone()
        {
            return new AIConfigData(this);
        }

        /// <summary>Field number for the "configureValueHeuristics" field.</summary>
        public const int ConfigureValueHeuristicsFieldNumber = 11;
        private static readonly pb::FieldCodec<ValueHeuristicDefinition> _repeated_configureValueHeuristics_codec
            = pb::FieldCodec.ForMessage(90, ValueHeuristicDefinition.Parser);
        private readonly pbc::RepeatedField<ValueHeuristicDefinition> configureValueHeuristics_ = new pbc::RepeatedField<ValueHeuristicDefinition>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ValueHeuristicDefinition> ConfigureValueHeuristics
        {
            get { return configureValueHeuristics_; }
        }

        /// <summary>Field number for the "configureOrderingHeuristics" field.</summary>
        public const int ConfigureOrderingHeuristicsFieldNumber = 12;
        private static readonly pb::FieldCodec<OrderingHeuristicDefinition> _repeated_configureOrderingHeuristics_codec
            = pb::FieldCodec.ForMessage(98, OrderingHeuristicDefinition.Parser);
        private readonly pbc::RepeatedField<OrderingHeuristicDefinition> configureOrderingHeuristics_ = new pbc::RepeatedField<OrderingHeuristicDefinition>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<OrderingHeuristicDefinition> ConfigureOrderingHeuristics
        {
            get { return configureOrderingHeuristics_; }
        }

        /// <summary>Field number for the "valueHeuristicParameters" field.</summary>
        public const int ValueHeuristicParametersFieldNumber = 16;
        private static readonly pb::FieldCodec<ValueHeuristicParameter> _repeated_valueHeuristicParameters_codec
            = pb::FieldCodec.ForMessage(130, ValueHeuristicParameter.Parser);
        private readonly pbc::RepeatedField<ValueHeuristicParameter> valueHeuristicParameters_ = new pbc::RepeatedField<ValueHeuristicParameter>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ValueHeuristicParameter> ValueHeuristicParameters
        {
            get { return valueHeuristicParameters_; }
        }

        /// <summary>Field number for the "orderingHeuristicParameters" field.</summary>
        public const int OrderingHeuristicParametersFieldNumber = 17;
        private static readonly pb::FieldCodec<OrderingHeuristicParameter> _repeated_orderingHeuristicParameters_codec
            = pb::FieldCodec.ForMessage(138, OrderingHeuristicParameter.Parser);
        private readonly pbc::RepeatedField<OrderingHeuristicParameter> orderingHeuristicParameters_ = new pbc::RepeatedField<OrderingHeuristicParameter>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<OrderingHeuristicParameter> OrderingHeuristicParameters
        {
            get { return orderingHeuristicParameters_; }
        }

        /// <summary>Field number for the "mode" field.</summary>
        public const int ModeFieldNumber = 1;
        private AIMode mode_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIMode Mode
        {
            get { return mode_; }
            set
            {
                mode_ = value;
            }
        }

        /// <summary>Field number for the "tracingEnabled" field.</summary>
        public const int TracingEnabledFieldNumber = 2;
        private AIConfigOption tracingEnabled_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigOption TracingEnabled
        {
            get { return tracingEnabled_; }
            set
            {
                tracingEnabled_ = value;
            }
        }

        /// <summary>Field number for the "viewOpponentHand" field.</summary>
        public const int ViewOpponentHandFieldNumber = 3;
        private AIConfigOption viewOpponentHand_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigOption ViewOpponentHand
        {
            get { return viewOpponentHand_; }
            set
            {
                viewOpponentHand_ = value;
            }
        }

        /// <summary>Field number for the "viewOpponentLibrary" field.</summary>
        public const int ViewOpponentLibraryFieldNumber = 4;
        private uint viewOpponentLibrary_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ViewOpponentLibrary
        {
            get { return viewOpponentLibrary_; }
            set
            {
                viewOpponentLibrary_ = value;
            }
        }

        /// <summary>Field number for the "maximumDepth" field.</summary>
        public const int MaximumDepthFieldNumber = 5;
        private uint maximumDepth_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaximumDepth
        {
            get { return maximumDepth_; }
            set
            {
                maximumDepth_ = value;
            }
        }

        /// <summary>Field number for the "maximumBreadth" field.</summary>
        public const int MaximumBreadthFieldNumber = 6;
        private uint maximumBreadth_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaximumBreadth
        {
            get { return maximumBreadth_; }
            set
            {
                maximumBreadth_ = value;
            }
        }

        /// <summary>Field number for the "maximumNodeExpansion" field.</summary>
        public const int MaximumNodeExpansionFieldNumber = 7;
        private uint maximumNodeExpansion_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaximumNodeExpansion
        {
            get { return maximumNodeExpansion_; }
            set
            {
                maximumNodeExpansion_ = value;
            }
        }

        /// <summary>Field number for the "timeoutInMilliseconds" field.</summary>
        public const int TimeoutInMillisecondsFieldNumber = 8;
        private uint timeoutInMilliseconds_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutInMilliseconds
        {
            get { return timeoutInMilliseconds_; }
            set
            {
                timeoutInMilliseconds_ = value;
            }
        }

        /// <summary>Field number for the "transpositionTableSizeInKB" field.</summary>
        public const int TranspositionTableSizeInKBFieldNumber = 9;
        private uint transpositionTableSizeInKB_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TranspositionTableSizeInKB
        {
            get { return transpositionTableSizeInKB_; }
            set
            {
                transpositionTableSizeInKB_ = value;
            }
        }

        /// <summary>Field number for the "randomSeed" field.</summary>
        public const int RandomSeedFieldNumber = 10;
        private uint randomSeed_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RandomSeed
        {
            get { return randomSeed_; }
            set
            {
                randomSeed_ = value;
            }
        }

        /// <summary>Field number for the "configureHistoryOn" field.</summary>
        public const int ConfigureHistoryOnFieldNumber = 13;
        private AIConfigOption configureHistoryOn_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigOption ConfigureHistoryOn
        {
            get { return configureHistoryOn_; }
            set
            {
                configureHistoryOn_ = value;
            }
        }

        /// <summary>Field number for the "allowOpponentUndo" field.</summary>
        public const int AllowOpponentUndoFieldNumber = 14;
        private AIConfigYesNo allowOpponentUndo_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigYesNo AllowOpponentUndo
        {
            get { return allowOpponentUndo_; }
            set
            {
                allowOpponentUndo_ = value;
            }
        }

        /// <summary>Field number for the "allowOpponentControl" field.</summary>
        public const int AllowOpponentControlFieldNumber = 15;
        private AIConfigYesNo allowOpponentControl_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigYesNo AllowOpponentControl
        {
            get { return allowOpponentControl_; }
            set
            {
                allowOpponentControl_ = value;
            }
        }

        /// <summary>Field number for the "diagnosticMode" field.</summary>
        public const int DiagnosticModeFieldNumber = 18;
        private uint diagnosticMode_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DiagnosticMode
        {
            get { return diagnosticMode_; }
            set
            {
                diagnosticMode_ = value;
            }
        }

        /// <summary>Field number for the "randomOrderingRange" field.</summary>
        public const int RandomOrderingRangeFieldNumber = 19;
        private uint randomOrderingRange_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RandomOrderingRange
        {
            get { return randomOrderingRange_; }
            set
            {
                randomOrderingRange_ = value;
            }
        }

        /// <summary>Field number for the "transEnable" field.</summary>
        public const int TransEnableFieldNumber = 20;
        private bool transEnable_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool TransEnable
        {
            get { return transEnable_; }
            set
            {
                transEnable_ = value;
            }
        }

        /// <summary>Field number for the "concedeOnException" field.</summary>
        public const int ConcedeOnExceptionFieldNumber = 21;
        private bool concedeOnException_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ConcedeOnException
        {
            get { return concedeOnException_; }
            set
            {
                concedeOnException_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AIConfigData);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AIConfigData other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!configureValueHeuristics_.Equals(other.configureValueHeuristics_)) return false;
            if (!configureOrderingHeuristics_.Equals(other.configureOrderingHeuristics_)) return false;
            if (!valueHeuristicParameters_.Equals(other.valueHeuristicParameters_)) return false;
            if (!orderingHeuristicParameters_.Equals(other.orderingHeuristicParameters_)) return false;
            if (Mode != other.Mode) return false;
            if (TracingEnabled != other.TracingEnabled) return false;
            if (ViewOpponentHand != other.ViewOpponentHand) return false;
            if (ViewOpponentLibrary != other.ViewOpponentLibrary) return false;
            if (MaximumDepth != other.MaximumDepth) return false;
            if (MaximumBreadth != other.MaximumBreadth) return false;
            if (MaximumNodeExpansion != other.MaximumNodeExpansion) return false;
            if (TimeoutInMilliseconds != other.TimeoutInMilliseconds) return false;
            if (TranspositionTableSizeInKB != other.TranspositionTableSizeInKB) return false;
            if (RandomSeed != other.RandomSeed) return false;
            if (ConfigureHistoryOn != other.ConfigureHistoryOn) return false;
            if (AllowOpponentUndo != other.AllowOpponentUndo) return false;
            if (AllowOpponentControl != other.AllowOpponentControl) return false;
            if (DiagnosticMode != other.DiagnosticMode) return false;
            if (RandomOrderingRange != other.RandomOrderingRange) return false;
            if (TransEnable != other.TransEnable) return false;
            if (ConcedeOnException != other.ConcedeOnException) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= configureValueHeuristics_.GetHashCode();
            hash ^= configureOrderingHeuristics_.GetHashCode();
            hash ^= valueHeuristicParameters_.GetHashCode();
            hash ^= orderingHeuristicParameters_.GetHashCode();
            if (Mode != 0) hash ^= Mode.GetHashCode();
            if (TracingEnabled != 0) hash ^= TracingEnabled.GetHashCode();
            if (ViewOpponentHand != 0) hash ^= ViewOpponentHand.GetHashCode();
            if (ViewOpponentLibrary != 0) hash ^= ViewOpponentLibrary.GetHashCode();
            if (MaximumDepth != 0) hash ^= MaximumDepth.GetHashCode();
            if (MaximumBreadth != 0) hash ^= MaximumBreadth.GetHashCode();
            if (MaximumNodeExpansion != 0) hash ^= MaximumNodeExpansion.GetHashCode();
            if (TimeoutInMilliseconds != 0) hash ^= TimeoutInMilliseconds.GetHashCode();
            if (TranspositionTableSizeInKB != 0) hash ^= TranspositionTableSizeInKB.GetHashCode();
            if (RandomSeed != 0) hash ^= RandomSeed.GetHashCode();
            if (ConfigureHistoryOn != 0) hash ^= ConfigureHistoryOn.GetHashCode();
            if (AllowOpponentUndo != 0) hash ^= AllowOpponentUndo.GetHashCode();
            if (AllowOpponentControl != 0) hash ^= AllowOpponentControl.GetHashCode();
            if (DiagnosticMode != 0) hash ^= DiagnosticMode.GetHashCode();
            if (RandomOrderingRange != 0) hash ^= RandomOrderingRange.GetHashCode();
            if (TransEnable != false) hash ^= TransEnable.GetHashCode();
            if (ConcedeOnException != false) hash ^= ConcedeOnException.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Mode != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Mode);
            }
            if (TracingEnabled != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)TracingEnabled);
            }
            if (ViewOpponentHand != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)ViewOpponentHand);
            }
            if (ViewOpponentLibrary != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(ViewOpponentLibrary);
            }
            if (MaximumDepth != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(MaximumDepth);
            }
            if (MaximumBreadth != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(MaximumBreadth);
            }
            if (MaximumNodeExpansion != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(MaximumNodeExpansion);
            }
            if (TimeoutInMilliseconds != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(TimeoutInMilliseconds);
            }
            if (TranspositionTableSizeInKB != 0)
            {
                output.WriteRawTag(72);
                output.WriteUInt32(TranspositionTableSizeInKB);
            }
            if (RandomSeed != 0)
            {
                output.WriteRawTag(80);
                output.WriteUInt32(RandomSeed);
            }
            configureValueHeuristics_.WriteTo(output, _repeated_configureValueHeuristics_codec);
            configureOrderingHeuristics_.WriteTo(output, _repeated_configureOrderingHeuristics_codec);
            if (ConfigureHistoryOn != 0)
            {
                output.WriteRawTag(104);
                output.WriteEnum((int)ConfigureHistoryOn);
            }
            if (AllowOpponentUndo != 0)
            {
                output.WriteRawTag(112);
                output.WriteEnum((int)AllowOpponentUndo);
            }
            if (AllowOpponentControl != 0)
            {
                output.WriteRawTag(120);
                output.WriteEnum((int)AllowOpponentControl);
            }
            valueHeuristicParameters_.WriteTo(output, _repeated_valueHeuristicParameters_codec);
            orderingHeuristicParameters_.WriteTo(output, _repeated_orderingHeuristicParameters_codec);
            if (DiagnosticMode != 0)
            {
                output.WriteRawTag(144, 1);
                output.WriteUInt32(DiagnosticMode);
            }
            if (RandomOrderingRange != 0)
            {
                output.WriteRawTag(152, 1);
                output.WriteUInt32(RandomOrderingRange);
            }
            if (TransEnable != false)
            {
                output.WriteRawTag(160, 1);
                output.WriteBool(TransEnable);
            }
            if (ConcedeOnException != false)
            {
                output.WriteRawTag(168, 1);
                output.WriteBool(ConcedeOnException);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += configureValueHeuristics_.CalculateSize(_repeated_configureValueHeuristics_codec);
            size += configureOrderingHeuristics_.CalculateSize(_repeated_configureOrderingHeuristics_codec);
            size += valueHeuristicParameters_.CalculateSize(_repeated_valueHeuristicParameters_codec);
            size += orderingHeuristicParameters_.CalculateSize(_repeated_orderingHeuristicParameters_codec);
            if (Mode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Mode);
            }
            if (TracingEnabled != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)TracingEnabled);
            }
            if (ViewOpponentHand != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ViewOpponentHand);
            }
            if (ViewOpponentLibrary != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ViewOpponentLibrary);
            }
            if (MaximumDepth != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumDepth);
            }
            if (MaximumBreadth != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumBreadth);
            }
            if (MaximumNodeExpansion != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumNodeExpansion);
            }
            if (TimeoutInMilliseconds != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutInMilliseconds);
            }
            if (TranspositionTableSizeInKB != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TranspositionTableSizeInKB);
            }
            if (RandomSeed != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandomSeed);
            }
            if (ConfigureHistoryOn != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ConfigureHistoryOn);
            }
            if (AllowOpponentUndo != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AllowOpponentUndo);
            }
            if (AllowOpponentControl != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AllowOpponentControl);
            }
            if (DiagnosticMode != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DiagnosticMode);
            }
            if (RandomOrderingRange != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RandomOrderingRange);
            }
            if (TransEnable != false)
            {
                size += 2 + 1;
            }
            if (ConcedeOnException != false)
            {
                size += 2 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AIConfigData other)
        {
            if (other == null)
            {
                return;
            }
            configureValueHeuristics_.Add(other.configureValueHeuristics_);
            configureOrderingHeuristics_.Add(other.configureOrderingHeuristics_);
            valueHeuristicParameters_.Add(other.valueHeuristicParameters_);
            orderingHeuristicParameters_.Add(other.orderingHeuristicParameters_);
            if (other.Mode != 0)
            {
                Mode = other.Mode;
            }
            if (other.TracingEnabled != 0)
            {
                TracingEnabled = other.TracingEnabled;
            }
            if (other.ViewOpponentHand != 0)
            {
                ViewOpponentHand = other.ViewOpponentHand;
            }
            if (other.ViewOpponentLibrary != 0)
            {
                ViewOpponentLibrary = other.ViewOpponentLibrary;
            }
            if (other.MaximumDepth != 0)
            {
                MaximumDepth = other.MaximumDepth;
            }
            if (other.MaximumBreadth != 0)
            {
                MaximumBreadth = other.MaximumBreadth;
            }
            if (other.MaximumNodeExpansion != 0)
            {
                MaximumNodeExpansion = other.MaximumNodeExpansion;
            }
            if (other.TimeoutInMilliseconds != 0)
            {
                TimeoutInMilliseconds = other.TimeoutInMilliseconds;
            }
            if (other.TranspositionTableSizeInKB != 0)
            {
                TranspositionTableSizeInKB = other.TranspositionTableSizeInKB;
            }
            if (other.RandomSeed != 0)
            {
                RandomSeed = other.RandomSeed;
            }
            if (other.ConfigureHistoryOn != 0)
            {
                ConfigureHistoryOn = other.ConfigureHistoryOn;
            }
            if (other.AllowOpponentUndo != 0)
            {
                AllowOpponentUndo = other.AllowOpponentUndo;
            }
            if (other.AllowOpponentControl != 0)
            {
                AllowOpponentControl = other.AllowOpponentControl;
            }
            if (other.DiagnosticMode != 0)
            {
                DiagnosticMode = other.DiagnosticMode;
            }
            if (other.RandomOrderingRange != 0)
            {
                RandomOrderingRange = other.RandomOrderingRange;
            }
            if (other.TransEnable != false)
            {
                TransEnable = other.TransEnable;
            }
            if (other.ConcedeOnException != false)
            {
                ConcedeOnException = other.ConcedeOnException;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            mode_ = (AIMode)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            tracingEnabled_ = (AIConfigOption)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            viewOpponentHand_ = (AIConfigOption)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            ViewOpponentLibrary = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            MaximumDepth = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            MaximumBreadth = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            MaximumNodeExpansion = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            TimeoutInMilliseconds = input.ReadUInt32();
                            break;
                        }
                    case 72:
                        {
                            TranspositionTableSizeInKB = input.ReadUInt32();
                            break;
                        }
                    case 80:
                        {
                            RandomSeed = input.ReadUInt32();
                            break;
                        }
                    case 90:
                        {
                            configureValueHeuristics_.AddEntriesFrom(input, _repeated_configureValueHeuristics_codec);
                            break;
                        }
                    case 98:
                        {
                            configureOrderingHeuristics_.AddEntriesFrom(input, _repeated_configureOrderingHeuristics_codec);
                            break;
                        }
                    case 104:
                        {
                            configureHistoryOn_ = (AIConfigOption)input.ReadEnum();
                            break;
                        }
                    case 112:
                        {
                            allowOpponentUndo_ = (AIConfigYesNo)input.ReadEnum();
                            break;
                        }
                    case 120:
                        {
                            allowOpponentControl_ = (AIConfigYesNo)input.ReadEnum();
                            break;
                        }
                    case 130:
                        {
                            valueHeuristicParameters_.AddEntriesFrom(input, _repeated_valueHeuristicParameters_codec);
                            break;
                        }
                    case 138:
                        {
                            orderingHeuristicParameters_.AddEntriesFrom(input, _repeated_orderingHeuristicParameters_codec);
                            break;
                        }
                    case 144:
                        {
                            DiagnosticMode = input.ReadUInt32();
                            break;
                        }
                    case 152:
                        {
                            RandomOrderingRange = input.ReadUInt32();
                            break;
                        }
                    case 160:
                        {
                            TransEnable = input.ReadBool();
                            break;
                        }
                    case 168:
                        {
                            ConcedeOnException = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AIConfigureRequest : pb::IMessage<AIConfigureRequest>
    {
        private static readonly pb::MessageParser<AIConfigureRequest> _parser = new pb::MessageParser<AIConfigureRequest>(() => new AIConfigureRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AIConfigureRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[1]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigureRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigureRequest(AIConfigureRequest other) : this()
        {
            aiID_ = other.aiID_;
            aiConfigData_ = other.aiConfigData_ != null ? other.aiConfigData_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigureRequest Clone()
        {
            return new AIConfigureRequest(this);
        }

        /// <summary>Field number for the "aiID" field.</summary>
        public const int AiIDFieldNumber = 1;
        private uint aiID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AiID
        {
            get { return aiID_; }
            set
            {
                aiID_ = value;
            }
        }

        /// <summary>Field number for the "aiConfigData" field.</summary>
        public const int AiConfigDataFieldNumber = 2;
        private AIConfigData aiConfigData_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigData AiConfigData
        {
            get { return aiConfigData_; }
            set
            {
                aiConfigData_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AIConfigureRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AIConfigureRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AiID != other.AiID) return false;
            if (!object.Equals(AiConfigData, other.AiConfigData)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (AiID != 0) hash ^= AiID.GetHashCode();
            if (aiConfigData_ != null) hash ^= AiConfigData.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AiID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AiID);
            }
            if (aiConfigData_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(AiConfigData);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (AiID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AiID);
            }
            if (aiConfigData_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(AiConfigData);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AIConfigureRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.AiID != 0)
            {
                AiID = other.AiID;
            }
            if (other.aiConfigData_ != null)
            {
                if (aiConfigData_ == null)
                {
                    aiConfigData_ = new AIConfigData();
                }
                AiConfigData.MergeFrom(other.AiConfigData);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AiID = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            if (aiConfigData_ == null)
                            {
                                aiConfigData_ = new AIConfigData();
                            }
                            input.ReadMessage(aiConfigData_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AIConfigureResponse : pb::IMessage<AIConfigureResponse>
    {
        private static readonly pb::MessageParser<AIConfigureResponse> _parser = new pb::MessageParser<AIConfigureResponse>(() => new AIConfigureResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AIConfigureResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[2]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigureResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigureResponse(AIConfigureResponse other) : this()
        {
            aiID_ = other.aiID_;
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigureResponse Clone()
        {
            return new AIConfigureResponse(this);
        }

        /// <summary>Field number for the "aiID" field.</summary>
        public const int AiIDFieldNumber = 1;
        private uint aiID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AiID
        {
            get { return aiID_; }
            set
            {
                aiID_ = value;
            }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private GRETHHostErrorCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostErrorCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AIConfigureResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AIConfigureResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AiID != other.AiID) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (AiID != 0) hash ^= AiID.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AiID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AiID);
            }
            if (Result != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (AiID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AiID);
            }
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AIConfigureResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.AiID != 0)
            {
                AiID = other.AiID;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AiID = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            result_ = (GRETHHostErrorCode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AICreateRequest : pb::IMessage<AICreateRequest>
    {
        private static readonly pb::MessageParser<AICreateRequest> _parser = new pb::MessageParser<AICreateRequest>(() => new AICreateRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AICreateRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[3]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AICreateRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AICreateRequest(AICreateRequest other) : this()
        {
            matchID_ = other.matchID_;
            aiID_ = other.aiID_;
            systemSeatId_ = other.systemSeatId_;
            gameID_ = other.gameID_;
            majorVer_ = other.majorVer_;
            minorVer_ = other.minorVer_;
            revisionVer_ = other.revisionVer_;
            buildVer_ = other.buildVer_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AICreateRequest Clone()
        {
            return new AICreateRequest(this);
        }

        /// <summary>Field number for the "matchID" field.</summary>
        public const int MatchIDFieldNumber = 3;
        private string matchID_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchID
        {
            get { return matchID_; }
            set
            {
                matchID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "aiID" field.</summary>
        public const int AiIDFieldNumber = 1;
        private uint aiID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AiID
        {
            get { return aiID_; }
            set
            {
                aiID_ = value;
            }
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 2;
        private uint systemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SystemSeatId
        {
            get { return systemSeatId_; }
            set
            {
                systemSeatId_ = value;
            }
        }

        /// <summary>Field number for the "gameID" field.</summary>
        public const int GameIDFieldNumber = 4;
        private uint gameID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameID
        {
            get { return gameID_; }
            set
            {
                gameID_ = value;
            }
        }

        /// <summary>Field number for the "majorVer" field.</summary>
        public const int MajorVerFieldNumber = 5;
        private uint majorVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MajorVer
        {
            get { return majorVer_; }
            set
            {
                majorVer_ = value;
            }
        }

        /// <summary>Field number for the "minorVer" field.</summary>
        public const int MinorVerFieldNumber = 6;
        private uint minorVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinorVer
        {
            get { return minorVer_; }
            set
            {
                minorVer_ = value;
            }
        }

        /// <summary>Field number for the "revisionVer" field.</summary>
        public const int RevisionVerFieldNumber = 7;
        private uint revisionVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RevisionVer
        {
            get { return revisionVer_; }
            set
            {
                revisionVer_ = value;
            }
        }

        /// <summary>Field number for the "buildVer" field.</summary>
        public const int BuildVerFieldNumber = 8;
        private uint buildVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BuildVer
        {
            get { return buildVer_; }
            set
            {
                buildVer_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AICreateRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AICreateRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchID != other.MatchID) return false;
            if (AiID != other.AiID) return false;
            if (SystemSeatId != other.SystemSeatId) return false;
            if (GameID != other.GameID) return false;
            if (MajorVer != other.MajorVer) return false;
            if (MinorVer != other.MinorVer) return false;
            if (RevisionVer != other.RevisionVer) return false;
            if (BuildVer != other.BuildVer) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchID.Length != 0) hash ^= MatchID.GetHashCode();
            if (AiID != 0) hash ^= AiID.GetHashCode();
            if (SystemSeatId != 0) hash ^= SystemSeatId.GetHashCode();
            if (GameID != 0) hash ^= GameID.GetHashCode();
            if (MajorVer != 0) hash ^= MajorVer.GetHashCode();
            if (MinorVer != 0) hash ^= MinorVer.GetHashCode();
            if (RevisionVer != 0) hash ^= RevisionVer.GetHashCode();
            if (BuildVer != 0) hash ^= BuildVer.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AiID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AiID);
            }
            if (SystemSeatId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(SystemSeatId);
            }
            if (MatchID.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(MatchID);
            }
            if (GameID != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(GameID);
            }
            if (MajorVer != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(MajorVer);
            }
            if (MinorVer != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(MinorVer);
            }
            if (RevisionVer != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(RevisionVer);
            }
            if (BuildVer != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(BuildVer);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchID);
            }
            if (AiID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AiID);
            }
            if (SystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SystemSeatId);
            }
            if (GameID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
            }
            if (MajorVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MajorVer);
            }
            if (MinorVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinorVer);
            }
            if (RevisionVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RevisionVer);
            }
            if (BuildVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuildVer);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AICreateRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchID.Length != 0)
            {
                MatchID = other.MatchID;
            }
            if (other.AiID != 0)
            {
                AiID = other.AiID;
            }
            if (other.SystemSeatId != 0)
            {
                SystemSeatId = other.SystemSeatId;
            }
            if (other.GameID != 0)
            {
                GameID = other.GameID;
            }
            if (other.MajorVer != 0)
            {
                MajorVer = other.MajorVer;
            }
            if (other.MinorVer != 0)
            {
                MinorVer = other.MinorVer;
            }
            if (other.RevisionVer != 0)
            {
                RevisionVer = other.RevisionVer;
            }
            if (other.BuildVer != 0)
            {
                BuildVer = other.BuildVer;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AiID = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            SystemSeatId = input.ReadUInt32();
                            break;
                        }
                    case 26:
                        {
                            MatchID = input.ReadString();
                            break;
                        }
                    case 32:
                        {
                            GameID = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            MajorVer = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            MinorVer = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            RevisionVer = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            BuildVer = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AICreateResponse : pb::IMessage<AICreateResponse>
    {
        private static readonly pb::MessageParser<AICreateResponse> _parser = new pb::MessageParser<AICreateResponse>(() => new AICreateResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AICreateResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[4]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AICreateResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AICreateResponse(AICreateResponse other) : this()
        {
            aiID_ = other.aiID_;
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AICreateResponse Clone()
        {
            return new AICreateResponse(this);
        }

        /// <summary>Field number for the "aiID" field.</summary>
        public const int AiIDFieldNumber = 1;
        private uint aiID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AiID
        {
            get { return aiID_; }
            set
            {
                aiID_ = value;
            }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private GRETHHostErrorCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostErrorCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AICreateResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AICreateResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AiID != other.AiID) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (AiID != 0) hash ^= AiID.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AiID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AiID);
            }
            if (Result != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (AiID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AiID);
            }
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AICreateResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.AiID != 0)
            {
                AiID = other.AiID;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AiID = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            result_ = (GRETHHostErrorCode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AIDestroyRequest : pb::IMessage<AIDestroyRequest>
    {
        private static readonly pb::MessageParser<AIDestroyRequest> _parser = new pb::MessageParser<AIDestroyRequest>(() => new AIDestroyRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AIDestroyRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[5]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIDestroyRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIDestroyRequest(AIDestroyRequest other) : this()
        {
            aiID_ = other.aiID_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIDestroyRequest Clone()
        {
            return new AIDestroyRequest(this);
        }

        /// <summary>Field number for the "aiID" field.</summary>
        public const int AiIDFieldNumber = 1;
        private uint aiID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AiID
        {
            get { return aiID_; }
            set
            {
                aiID_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AIDestroyRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AIDestroyRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AiID != other.AiID) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (AiID != 0) hash ^= AiID.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AiID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AiID);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (AiID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AiID);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AIDestroyRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.AiID != 0)
            {
                AiID = other.AiID;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AiID = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AIDestroyResponse : pb::IMessage<AIDestroyResponse>
    {
        private static readonly pb::MessageParser<AIDestroyResponse> _parser = new pb::MessageParser<AIDestroyResponse>(() => new AIDestroyResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AIDestroyResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[6]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIDestroyResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIDestroyResponse(AIDestroyResponse other) : this()
        {
            aiID_ = other.aiID_;
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIDestroyResponse Clone()
        {
            return new AIDestroyResponse(this);
        }

        /// <summary>Field number for the "aiID" field.</summary>
        public const int AiIDFieldNumber = 1;
        private uint aiID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AiID
        {
            get { return aiID_; }
            set
            {
                aiID_ = value;
            }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private GRETHHostErrorCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostErrorCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AIDestroyResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AIDestroyResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AiID != other.AiID) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (AiID != 0) hash ^= AiID.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AiID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AiID);
            }
            if (Result != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (AiID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AiID);
            }
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AIDestroyResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.AiID != 0)
            {
                AiID = other.AiID;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AiID = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            result_ = (GRETHHostErrorCode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AIFatalError : pb::IMessage<AIFatalError>
    {
        private static readonly pb::MessageParser<AIFatalError> _parser = new pb::MessageParser<AIFatalError>(() => new AIFatalError());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AIFatalError> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[7]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIFatalError()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIFatalError(AIFatalError other) : this()
        {
            errorMessage_ = other.errorMessage_;
            aiID_ = other.aiID_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIFatalError Clone()
        {
            return new AIFatalError(this);
        }

        /// <summary>Field number for the "errorMessage" field.</summary>
        public const int ErrorMessageFieldNumber = 2;
        private pb::ByteString errorMessage_ = pb::ByteString.Empty;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ErrorMessage
        {
            get { return errorMessage_; }
            set
            {
                errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "aiID" field.</summary>
        public const int AiIDFieldNumber = 1;
        private uint aiID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AiID
        {
            get { return aiID_; }
            set
            {
                aiID_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AIFatalError);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AIFatalError other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ErrorMessage != other.ErrorMessage) return false;
            if (AiID != other.AiID) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
            if (AiID != 0) hash ^= AiID.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AiID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AiID);
            }
            if (ErrorMessage.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(ErrorMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ErrorMessage.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(ErrorMessage);
            }
            if (AiID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AiID);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AIFatalError other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ErrorMessage.Length != 0)
            {
                ErrorMessage = other.ErrorMessage;
            }
            if (other.AiID != 0)
            {
                AiID = other.AiID;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AiID = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            ErrorMessage = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AIReconfigureData : pb::IMessage<AIReconfigureData>
    {
        private static readonly pb::MessageParser<AIReconfigureData> _parser = new pb::MessageParser<AIReconfigureData>(() => new AIReconfigureData());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AIReconfigureData> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[8]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIReconfigureData()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIReconfigureData(AIReconfigureData other) : this()
        {
            configureValueHeuristics_ = other.configureValueHeuristics_.Clone();
            configureOrderingHeuristics_ = other.configureOrderingHeuristics_.Clone();
            valueHeuristicParameters_ = other.valueHeuristicParameters_.Clone();
            orderingHeuristicParameters_ = other.orderingHeuristicParameters_.Clone();
            tracingEnabled_ = other.tracingEnabled_;
            maximumDepth_ = other.maximumDepth_;
            maximumBreadth_ = other.maximumBreadth_;
            maximumNodeExpansion_ = other.maximumNodeExpansion_;
            transpositionTableSizeInKB_ = other.transpositionTableSizeInKB_;
            randomSeed_ = other.randomSeed_;
            transEnable_ = other.transEnable_;
            concedeOnException_ = other.concedeOnException_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIReconfigureData Clone()
        {
            return new AIReconfigureData(this);
        }

        /// <summary>Field number for the "configureValueHeuristics" field.</summary>
        public const int ConfigureValueHeuristicsFieldNumber = 7;
        private static readonly pb::FieldCodec<ValueHeuristicDefinition> _repeated_configureValueHeuristics_codec
            = pb::FieldCodec.ForMessage(58, ValueHeuristicDefinition.Parser);
        private readonly pbc::RepeatedField<ValueHeuristicDefinition> configureValueHeuristics_ = new pbc::RepeatedField<ValueHeuristicDefinition>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ValueHeuristicDefinition> ConfigureValueHeuristics
        {
            get { return configureValueHeuristics_; }
        }

        /// <summary>Field number for the "configureOrderingHeuristics" field.</summary>
        public const int ConfigureOrderingHeuristicsFieldNumber = 8;
        private static readonly pb::FieldCodec<OrderingHeuristicDefinition> _repeated_configureOrderingHeuristics_codec
            = pb::FieldCodec.ForMessage(66, OrderingHeuristicDefinition.Parser);
        private readonly pbc::RepeatedField<OrderingHeuristicDefinition> configureOrderingHeuristics_ = new pbc::RepeatedField<OrderingHeuristicDefinition>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<OrderingHeuristicDefinition> ConfigureOrderingHeuristics
        {
            get { return configureOrderingHeuristics_; }
        }

        /// <summary>Field number for the "valueHeuristicParameters" field.</summary>
        public const int ValueHeuristicParametersFieldNumber = 9;
        private static readonly pb::FieldCodec<ValueHeuristicParameter> _repeated_valueHeuristicParameters_codec
            = pb::FieldCodec.ForMessage(74, ValueHeuristicParameter.Parser);
        private readonly pbc::RepeatedField<ValueHeuristicParameter> valueHeuristicParameters_ = new pbc::RepeatedField<ValueHeuristicParameter>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ValueHeuristicParameter> ValueHeuristicParameters
        {
            get { return valueHeuristicParameters_; }
        }

        /// <summary>Field number for the "orderingHeuristicParameters" field.</summary>
        public const int OrderingHeuristicParametersFieldNumber = 10;
        private static readonly pb::FieldCodec<OrderingHeuristicParameter> _repeated_orderingHeuristicParameters_codec
            = pb::FieldCodec.ForMessage(82, OrderingHeuristicParameter.Parser);
        private readonly pbc::RepeatedField<OrderingHeuristicParameter> orderingHeuristicParameters_ = new pbc::RepeatedField<OrderingHeuristicParameter>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<OrderingHeuristicParameter> OrderingHeuristicParameters
        {
            get { return orderingHeuristicParameters_; }
        }

        /// <summary>Field number for the "tracingEnabled" field.</summary>
        public const int TracingEnabledFieldNumber = 1;
        private AIConfigOption tracingEnabled_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AIConfigOption TracingEnabled
        {
            get { return tracingEnabled_; }
            set
            {
                tracingEnabled_ = value;
            }
        }

        /// <summary>Field number for the "maximumDepth" field.</summary>
        public const int MaximumDepthFieldNumber = 2;
        private uint maximumDepth_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaximumDepth
        {
            get { return maximumDepth_; }
            set
            {
                maximumDepth_ = value;
            }
        }

        /// <summary>Field number for the "maximumBreadth" field.</summary>
        public const int MaximumBreadthFieldNumber = 3;
        private uint maximumBreadth_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaximumBreadth
        {
            get { return maximumBreadth_; }
            set
            {
                maximumBreadth_ = value;
            }
        }

        /// <summary>Field number for the "maximumNodeExpansion" field.</summary>
        public const int MaximumNodeExpansionFieldNumber = 4;
        private uint maximumNodeExpansion_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaximumNodeExpansion
        {
            get { return maximumNodeExpansion_; }
            set
            {
                maximumNodeExpansion_ = value;
            }
        }

        /// <summary>Field number for the "transpositionTableSizeInKB" field.</summary>
        public const int TranspositionTableSizeInKBFieldNumber = 5;
        private uint transpositionTableSizeInKB_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TranspositionTableSizeInKB
        {
            get { return transpositionTableSizeInKB_; }
            set
            {
                transpositionTableSizeInKB_ = value;
            }
        }

        /// <summary>Field number for the "randomSeed" field.</summary>
        public const int RandomSeedFieldNumber = 6;
        private uint randomSeed_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RandomSeed
        {
            get { return randomSeed_; }
            set
            {
                randomSeed_ = value;
            }
        }

        /// <summary>Field number for the "transEnable" field.</summary>
        public const int TransEnableFieldNumber = 11;
        private bool transEnable_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool TransEnable
        {
            get { return transEnable_; }
            set
            {
                transEnable_ = value;
            }
        }

        /// <summary>Field number for the "concedeOnException" field.</summary>
        public const int ConcedeOnExceptionFieldNumber = 12;
        private bool concedeOnException_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ConcedeOnException
        {
            get { return concedeOnException_; }
            set
            {
                concedeOnException_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AIReconfigureData);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AIReconfigureData other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!configureValueHeuristics_.Equals(other.configureValueHeuristics_)) return false;
            if (!configureOrderingHeuristics_.Equals(other.configureOrderingHeuristics_)) return false;
            if (!valueHeuristicParameters_.Equals(other.valueHeuristicParameters_)) return false;
            if (!orderingHeuristicParameters_.Equals(other.orderingHeuristicParameters_)) return false;
            if (TracingEnabled != other.TracingEnabled) return false;
            if (MaximumDepth != other.MaximumDepth) return false;
            if (MaximumBreadth != other.MaximumBreadth) return false;
            if (MaximumNodeExpansion != other.MaximumNodeExpansion) return false;
            if (TranspositionTableSizeInKB != other.TranspositionTableSizeInKB) return false;
            if (RandomSeed != other.RandomSeed) return false;
            if (TransEnable != other.TransEnable) return false;
            if (ConcedeOnException != other.ConcedeOnException) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= configureValueHeuristics_.GetHashCode();
            hash ^= configureOrderingHeuristics_.GetHashCode();
            hash ^= valueHeuristicParameters_.GetHashCode();
            hash ^= orderingHeuristicParameters_.GetHashCode();
            if (TracingEnabled != 0) hash ^= TracingEnabled.GetHashCode();
            if (MaximumDepth != 0) hash ^= MaximumDepth.GetHashCode();
            if (MaximumBreadth != 0) hash ^= MaximumBreadth.GetHashCode();
            if (MaximumNodeExpansion != 0) hash ^= MaximumNodeExpansion.GetHashCode();
            if (TranspositionTableSizeInKB != 0) hash ^= TranspositionTableSizeInKB.GetHashCode();
            if (RandomSeed != 0) hash ^= RandomSeed.GetHashCode();
            if (TransEnable != false) hash ^= TransEnable.GetHashCode();
            if (ConcedeOnException != false) hash ^= ConcedeOnException.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TracingEnabled != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)TracingEnabled);
            }
            if (MaximumDepth != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MaximumDepth);
            }
            if (MaximumBreadth != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MaximumBreadth);
            }
            if (MaximumNodeExpansion != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(MaximumNodeExpansion);
            }
            if (TranspositionTableSizeInKB != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(TranspositionTableSizeInKB);
            }
            if (RandomSeed != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(RandomSeed);
            }
            configureValueHeuristics_.WriteTo(output, _repeated_configureValueHeuristics_codec);
            configureOrderingHeuristics_.WriteTo(output, _repeated_configureOrderingHeuristics_codec);
            valueHeuristicParameters_.WriteTo(output, _repeated_valueHeuristicParameters_codec);
            orderingHeuristicParameters_.WriteTo(output, _repeated_orderingHeuristicParameters_codec);
            if (TransEnable != false)
            {
                output.WriteRawTag(88);
                output.WriteBool(TransEnable);
            }
            if (ConcedeOnException != false)
            {
                output.WriteRawTag(96);
                output.WriteBool(ConcedeOnException);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += configureValueHeuristics_.CalculateSize(_repeated_configureValueHeuristics_codec);
            size += configureOrderingHeuristics_.CalculateSize(_repeated_configureOrderingHeuristics_codec);
            size += valueHeuristicParameters_.CalculateSize(_repeated_valueHeuristicParameters_codec);
            size += orderingHeuristicParameters_.CalculateSize(_repeated_orderingHeuristicParameters_codec);
            if (TracingEnabled != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)TracingEnabled);
            }
            if (MaximumDepth != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumDepth);
            }
            if (MaximumBreadth != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumBreadth);
            }
            if (MaximumNodeExpansion != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumNodeExpansion);
            }
            if (TranspositionTableSizeInKB != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TranspositionTableSizeInKB);
            }
            if (RandomSeed != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandomSeed);
            }
            if (TransEnable != false)
            {
                size += 1 + 1;
            }
            if (ConcedeOnException != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AIReconfigureData other)
        {
            if (other == null)
            {
                return;
            }
            configureValueHeuristics_.Add(other.configureValueHeuristics_);
            configureOrderingHeuristics_.Add(other.configureOrderingHeuristics_);
            valueHeuristicParameters_.Add(other.valueHeuristicParameters_);
            orderingHeuristicParameters_.Add(other.orderingHeuristicParameters_);
            if (other.TracingEnabled != 0)
            {
                TracingEnabled = other.TracingEnabled;
            }
            if (other.MaximumDepth != 0)
            {
                MaximumDepth = other.MaximumDepth;
            }
            if (other.MaximumBreadth != 0)
            {
                MaximumBreadth = other.MaximumBreadth;
            }
            if (other.MaximumNodeExpansion != 0)
            {
                MaximumNodeExpansion = other.MaximumNodeExpansion;
            }
            if (other.TranspositionTableSizeInKB != 0)
            {
                TranspositionTableSizeInKB = other.TranspositionTableSizeInKB;
            }
            if (other.RandomSeed != 0)
            {
                RandomSeed = other.RandomSeed;
            }
            if (other.TransEnable != false)
            {
                TransEnable = other.TransEnable;
            }
            if (other.ConcedeOnException != false)
            {
                ConcedeOnException = other.ConcedeOnException;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            tracingEnabled_ = (AIConfigOption)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            MaximumDepth = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            MaximumBreadth = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            MaximumNodeExpansion = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            TranspositionTableSizeInKB = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            RandomSeed = input.ReadUInt32();
                            break;
                        }
                    case 58:
                        {
                            configureValueHeuristics_.AddEntriesFrom(input, _repeated_configureValueHeuristics_codec);
                            break;
                        }
                    case 66:
                        {
                            configureOrderingHeuristics_.AddEntriesFrom(input, _repeated_configureOrderingHeuristics_codec);
                            break;
                        }
                    case 74:
                        {
                            valueHeuristicParameters_.AddEntriesFrom(input, _repeated_valueHeuristicParameters_codec);
                            break;
                        }
                    case 82:
                        {
                            orderingHeuristicParameters_.AddEntriesFrom(input, _repeated_orderingHeuristicParameters_codec);
                            break;
                        }
                    case 88:
                        {
                            TransEnable = input.ReadBool();
                            break;
                        }
                    case 96:
                        {
                            ConcedeOnException = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Action : pb::IMessage<Action>
    {
        private static readonly pb::MessageParser<Action> _parser = new pb::MessageParser<Action>(() => new Action());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Action> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[9]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Action()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Action(Action other) : this()
        {
            autoTapActions_ = other.autoTapActions_.Clone();
            manaPaymentOptions_ = other.manaPaymentOptions_.Clone();
            manaCost_ = other.manaCost_.Clone();
            holdSources_ = other.holdSources_.Clone();
            actionType_ = other.actionType_;
            grpId_ = other.grpId_;
            instanceId_ = other.instanceId_;
            grouping_ = other.grouping_;
            abilityGrpId_ = other.abilityGrpId_;
            sourceId_ = other.sourceId_;
            alternativeGrpId_ = other.alternativeGrpId_;
            shouldStop_ = other.shouldStop_;
            disqualifyingSourceId_ = other.disqualifyingSourceId_;
            selectionType_ = other.selectionType_;
            selection_ = other.selection_;
            alternativeSourceZcid_ = other.alternativeSourceZcid_;
            isHidden_ = other.isHidden_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Action Clone()
        {
            return new Action(this);
        }

        /// <summary>Field number for the "autoTapActions" field.</summary>
        public const int AutoTapActionsFieldNumber = 7;
        private static readonly pb::FieldCodec<AutoTapAction> _repeated_autoTapActions_codec
            = pb::FieldCodec.ForMessage(58, AutoTapAction.Parser);
        private readonly pbc::RepeatedField<AutoTapAction> autoTapActions_ = new pbc::RepeatedField<AutoTapAction>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<AutoTapAction> AutoTapActions
        {
            get { return autoTapActions_; }
        }

        /// <summary>Field number for the "manaPaymentOptions" field.</summary>
        public const int ManaPaymentOptionsFieldNumber = 10;
        private static readonly pb::FieldCodec<ManaPaymentOption> _repeated_manaPaymentOptions_codec
            = pb::FieldCodec.ForMessage(82, ManaPaymentOption.Parser);
        private readonly pbc::RepeatedField<ManaPaymentOption> manaPaymentOptions_ = new pbc::RepeatedField<ManaPaymentOption>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaPaymentOption> ManaPaymentOptions
        {
            get { return manaPaymentOptions_; }
        }

        /// <summary>Field number for the "manaCost" field.</summary>
        public const int ManaCostFieldNumber = 11;
        private static readonly pb::FieldCodec<ManaRequirement> _repeated_manaCost_codec
            = pb::FieldCodec.ForMessage(90, ManaRequirement.Parser);
        private readonly pbc::RepeatedField<ManaRequirement> manaCost_ = new pbc::RepeatedField<ManaRequirement>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaRequirement> ManaCost
        {
            get { return manaCost_; }
        }

        /// <summary>Field number for the "holdSources" field.</summary>
        public const int HoldSourcesFieldNumber = 16;
        private static readonly pb::FieldCodec<uint> _repeated_holdSources_codec
            = pb::FieldCodec.ForUInt32(130);
        private readonly pbc::RepeatedField<uint> holdSources_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> HoldSources
        {
            get { return holdSources_; }
        }

        /// <summary>Field number for the "actionType" field.</summary>
        public const int ActionTypeFieldNumber = 1;
        private ActionType actionType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionType ActionType
        {
            get { return actionType_; }
            set
            {
                actionType_ = value;
            }
        }

        /// <summary>Field number for the "grpId" field.</summary>
        public const int GrpIdFieldNumber = 2;
        private uint grpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GrpId
        {
            get { return grpId_; }
            set
            {
                grpId_ = value;
            }
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 3;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "grouping" field.</summary>
        public const int GroupingFieldNumber = 4;
        private Grouping grouping_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Grouping Grouping
        {
            get { return grouping_; }
            set
            {
                grouping_ = value;
            }
        }

        /// <summary>Field number for the "abilityGrpId" field.</summary>
        public const int AbilityGrpIdFieldNumber = 6;
        private uint abilityGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityGrpId
        {
            get { return abilityGrpId_; }
            set
            {
                abilityGrpId_ = value;
            }
        }

        /// <summary>Field number for the "sourceId" field.</summary>
        public const int SourceIdFieldNumber = 8;
        private uint sourceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SourceId
        {
            get { return sourceId_; }
            set
            {
                sourceId_ = value;
            }
        }

        /// <summary>Field number for the "alternativeGrpId" field.</summary>
        public const int AlternativeGrpIdFieldNumber = 9;
        private uint alternativeGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AlternativeGrpId
        {
            get { return alternativeGrpId_; }
            set
            {
                alternativeGrpId_ = value;
            }
        }

        /// <summary>Field number for the "shouldStop" field.</summary>
        public const int ShouldStopFieldNumber = 12;
        private bool shouldStop_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ShouldStop
        {
            get { return shouldStop_; }
            set
            {
                shouldStop_ = value;
            }
        }

        /// <summary>Field number for the "disqualifyingSourceId" field.</summary>
        public const int DisqualifyingSourceIdFieldNumber = 13;
        private uint disqualifyingSourceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DisqualifyingSourceId
        {
            get { return disqualifyingSourceId_; }
            set
            {
                disqualifyingSourceId_ = value;
            }
        }

        /// <summary>Field number for the "selectionType" field.</summary>
        public const int SelectionTypeFieldNumber = 14;
        private uint selectionType_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SelectionType
        {
            get { return selectionType_; }
            set
            {
                selectionType_ = value;
            }
        }

        /// <summary>Field number for the "selection" field.</summary>
        public const int SelectionFieldNumber = 15;
        private uint selection_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Selection
        {
            get { return selection_; }
            set
            {
                selection_ = value;
            }
        }

        /// <summary>Field number for the "alternativeSourceZcid" field.</summary>
        public const int AlternativeSourceZcidFieldNumber = 17;
        private uint alternativeSourceZcid_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AlternativeSourceZcid
        {
            get { return alternativeSourceZcid_; }
            set
            {
                alternativeSourceZcid_ = value;
            }
        }

        /// <summary>Field number for the "isHidden" field.</summary>
        public const int IsHiddenFieldNumber = 18;
        private bool isHidden_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsHidden
        {
            get { return isHidden_; }
            set
            {
                isHidden_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Action);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Action other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!autoTapActions_.Equals(other.autoTapActions_)) return false;
            if (!manaPaymentOptions_.Equals(other.manaPaymentOptions_)) return false;
            if (!manaCost_.Equals(other.manaCost_)) return false;
            if (!holdSources_.Equals(other.holdSources_)) return false;
            if (ActionType != other.ActionType) return false;
            if (GrpId != other.GrpId) return false;
            if (InstanceId != other.InstanceId) return false;
            if (Grouping != other.Grouping) return false;
            if (AbilityGrpId != other.AbilityGrpId) return false;
            if (SourceId != other.SourceId) return false;
            if (AlternativeGrpId != other.AlternativeGrpId) return false;
            if (ShouldStop != other.ShouldStop) return false;
            if (DisqualifyingSourceId != other.DisqualifyingSourceId) return false;
            if (SelectionType != other.SelectionType) return false;
            if (Selection != other.Selection) return false;
            if (AlternativeSourceZcid != other.AlternativeSourceZcid) return false;
            if (IsHidden != other.IsHidden) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= autoTapActions_.GetHashCode();
            hash ^= manaPaymentOptions_.GetHashCode();
            hash ^= manaCost_.GetHashCode();
            hash ^= holdSources_.GetHashCode();
            if (ActionType != 0) hash ^= ActionType.GetHashCode();
            if (GrpId != 0) hash ^= GrpId.GetHashCode();
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (Grouping != 0) hash ^= Grouping.GetHashCode();
            if (AbilityGrpId != 0) hash ^= AbilityGrpId.GetHashCode();
            if (SourceId != 0) hash ^= SourceId.GetHashCode();
            if (AlternativeGrpId != 0) hash ^= AlternativeGrpId.GetHashCode();
            if (ShouldStop != false) hash ^= ShouldStop.GetHashCode();
            if (DisqualifyingSourceId != 0) hash ^= DisqualifyingSourceId.GetHashCode();
            if (SelectionType != 0) hash ^= SelectionType.GetHashCode();
            if (Selection != 0) hash ^= Selection.GetHashCode();
            if (AlternativeSourceZcid != 0) hash ^= AlternativeSourceZcid.GetHashCode();
            if (IsHidden != false) hash ^= IsHidden.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ActionType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ActionType);
            }
            if (GrpId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(GrpId);
            }
            if (InstanceId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(InstanceId);
            }
            if (Grouping != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)Grouping);
            }
            if (AbilityGrpId != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(AbilityGrpId);
            }
            autoTapActions_.WriteTo(output, _repeated_autoTapActions_codec);
            if (SourceId != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(SourceId);
            }
            if (AlternativeGrpId != 0)
            {
                output.WriteRawTag(72);
                output.WriteUInt32(AlternativeGrpId);
            }
            manaPaymentOptions_.WriteTo(output, _repeated_manaPaymentOptions_codec);
            manaCost_.WriteTo(output, _repeated_manaCost_codec);
            if (ShouldStop != false)
            {
                output.WriteRawTag(96);
                output.WriteBool(ShouldStop);
            }
            if (DisqualifyingSourceId != 0)
            {
                output.WriteRawTag(104);
                output.WriteUInt32(DisqualifyingSourceId);
            }
            if (SelectionType != 0)
            {
                output.WriteRawTag(112);
                output.WriteUInt32(SelectionType);
            }
            if (Selection != 0)
            {
                output.WriteRawTag(120);
                output.WriteUInt32(Selection);
            }
            holdSources_.WriteTo(output, _repeated_holdSources_codec);
            if (AlternativeSourceZcid != 0)
            {
                output.WriteRawTag(136, 1);
                output.WriteUInt32(AlternativeSourceZcid);
            }
            if (IsHidden != false)
            {
                output.WriteRawTag(144, 1);
                output.WriteBool(IsHidden);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += autoTapActions_.CalculateSize(_repeated_autoTapActions_codec);
            size += manaPaymentOptions_.CalculateSize(_repeated_manaPaymentOptions_codec);
            size += manaCost_.CalculateSize(_repeated_manaCost_codec);
            size += holdSources_.CalculateSize(_repeated_holdSources_codec);
            if (ActionType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ActionType);
            }
            if (GrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GrpId);
            }
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (Grouping != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Grouping);
            }
            if (AbilityGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityGrpId);
            }
            if (SourceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceId);
            }
            if (AlternativeGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AlternativeGrpId);
            }
            if (ShouldStop != false)
            {
                size += 1 + 1;
            }
            if (DisqualifyingSourceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisqualifyingSourceId);
            }
            if (SelectionType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectionType);
            }
            if (Selection != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Selection);
            }
            if (AlternativeSourceZcid != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AlternativeSourceZcid);
            }
            if (IsHidden != false)
            {
                size += 2 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Action other)
        {
            if (other == null)
            {
                return;
            }
            autoTapActions_.Add(other.autoTapActions_);
            manaPaymentOptions_.Add(other.manaPaymentOptions_);
            manaCost_.Add(other.manaCost_);
            holdSources_.Add(other.holdSources_);
            if (other.ActionType != 0)
            {
                ActionType = other.ActionType;
            }
            if (other.GrpId != 0)
            {
                GrpId = other.GrpId;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.Grouping != 0)
            {
                Grouping = other.Grouping;
            }
            if (other.AbilityGrpId != 0)
            {
                AbilityGrpId = other.AbilityGrpId;
            }
            if (other.SourceId != 0)
            {
                SourceId = other.SourceId;
            }
            if (other.AlternativeGrpId != 0)
            {
                AlternativeGrpId = other.AlternativeGrpId;
            }
            if (other.ShouldStop != false)
            {
                ShouldStop = other.ShouldStop;
            }
            if (other.DisqualifyingSourceId != 0)
            {
                DisqualifyingSourceId = other.DisqualifyingSourceId;
            }
            if (other.SelectionType != 0)
            {
                SelectionType = other.SelectionType;
            }
            if (other.Selection != 0)
            {
                Selection = other.Selection;
            }
            if (other.AlternativeSourceZcid != 0)
            {
                AlternativeSourceZcid = other.AlternativeSourceZcid;
            }
            if (other.IsHidden != false)
            {
                IsHidden = other.IsHidden;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            actionType_ = (ActionType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            GrpId = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            grouping_ = (Grouping)input.ReadEnum();
                            break;
                        }
                    case 48:
                        {
                            AbilityGrpId = input.ReadUInt32();
                            break;
                        }
                    case 58:
                        {
                            autoTapActions_.AddEntriesFrom(input, _repeated_autoTapActions_codec);
                            break;
                        }
                    case 64:
                        {
                            SourceId = input.ReadUInt32();
                            break;
                        }
                    case 72:
                        {
                            AlternativeGrpId = input.ReadUInt32();
                            break;
                        }
                    case 82:
                        {
                            manaPaymentOptions_.AddEntriesFrom(input, _repeated_manaPaymentOptions_codec);
                            break;
                        }
                    case 90:
                        {
                            manaCost_.AddEntriesFrom(input, _repeated_manaCost_codec);
                            break;
                        }
                    case 96:
                        {
                            ShouldStop = input.ReadBool();
                            break;
                        }
                    case 104:
                        {
                            DisqualifyingSourceId = input.ReadUInt32();
                            break;
                        }
                    case 112:
                        {
                            SelectionType = input.ReadUInt32();
                            break;
                        }
                    case 120:
                        {
                            Selection = input.ReadUInt32();
                            break;
                        }
                    case 130:
                    case 128:
                        {
                            holdSources_.AddEntriesFrom(input, _repeated_holdSources_codec);
                            break;
                        }
                    case 136:
                        {
                            AlternativeSourceZcid = input.ReadUInt32();
                            break;
                        }
                    case 144:
                        {
                            IsHidden = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionCostReq : pb::IMessage<ActionCostReq>
    {
        private static readonly pb::MessageParser<ActionCostReq> _parser = new pb::MessageParser<ActionCostReq>(() => new ActionCostReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionCostReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[10]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCostReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCostReq(ActionCostReq other) : this()
        {
            index_ = other.index_;
            actionCostType_ = other.actionCostType_;
            costSelection_ = other.costSelection_ != null ? other.costSelection_.Clone() : null;
            counterSelection_ = other.counterSelection_ != null ? other.counterSelection_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCostReq Clone()
        {
            return new ActionCostReq(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index
        {
            get { return index_; }
            set
            {
                index_ = value;
            }
        }

        /// <summary>Field number for the "actionCostType" field.</summary>
        public const int ActionCostTypeFieldNumber = 3;
        private ActionCostType actionCostType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCostType ActionCostType
        {
            get { return actionCostType_; }
            set
            {
                actionCostType_ = value;
            }
        }

        /// <summary>Field number for the "costSelection" field.</summary>
        public const int CostSelectionFieldNumber = 4;
        private SelectNReq costSelection_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNReq CostSelection
        {
            get { return costSelection_; }
            set
            {
                costSelection_ = value;
            }
        }

        /// <summary>Field number for the "counterSelection" field.</summary>
        public const int CounterSelectionFieldNumber = 5;
        private SelectCountersReq counterSelection_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectCountersReq CounterSelection
        {
            get { return counterSelection_; }
            set
            {
                counterSelection_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionCostReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionCostReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Index != other.Index) return false;
            if (ActionCostType != other.ActionCostType) return false;
            if (!object.Equals(CostSelection, other.CostSelection)) return false;
            if (!object.Equals(CounterSelection, other.CounterSelection)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Index != 0) hash ^= Index.GetHashCode();
            if (ActionCostType != 0) hash ^= ActionCostType.GetHashCode();
            if (costSelection_ != null) hash ^= CostSelection.GetHashCode();
            if (counterSelection_ != null) hash ^= CounterSelection.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Index != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Index);
            }
            if (ActionCostType != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)ActionCostType);
            }
            if (costSelection_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(CostSelection);
            }
            if (counterSelection_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(CounterSelection);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Index != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
            }
            if (ActionCostType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ActionCostType);
            }
            if (costSelection_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CostSelection);
            }
            if (counterSelection_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CounterSelection);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionCostReq other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Index != 0)
            {
                Index = other.Index;
            }
            if (other.ActionCostType != 0)
            {
                ActionCostType = other.ActionCostType;
            }
            if (other.costSelection_ != null)
            {
                if (costSelection_ == null)
                {
                    costSelection_ = new SelectNReq();
                }
                CostSelection.MergeFrom(other.CostSelection);
            }
            if (other.counterSelection_ != null)
            {
                if (counterSelection_ == null)
                {
                    counterSelection_ = new SelectCountersReq();
                }
                CounterSelection.MergeFrom(other.CounterSelection);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Index = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            actionCostType_ = (ActionCostType)input.ReadEnum();
                            break;
                        }
                    case 34:
                        {
                            if (costSelection_ == null)
                            {
                                costSelection_ = new SelectNReq();
                            }
                            input.ReadMessage(costSelection_);
                            break;
                        }
                    case 42:
                        {
                            if (counterSelection_ == null)
                            {
                                counterSelection_ = new SelectCountersReq();
                            }
                            input.ReadMessage(counterSelection_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionCostResp : pb::IMessage<ActionCostResp>
    {
        private static readonly pb::MessageParser<ActionCostResp> _parser = new pb::MessageParser<ActionCostResp>(() => new ActionCostResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionCostResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[11]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCostResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCostResp(ActionCostResp other) : this()
        {
            index_ = other.index_;
            actionCostType_ = other.actionCostType_;
            costSelection_ = other.costSelection_ != null ? other.costSelection_.Clone() : null;
            counterSelection_ = other.counterSelection_ != null ? other.counterSelection_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCostResp Clone()
        {
            return new ActionCostResp(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index
        {
            get { return index_; }
            set
            {
                index_ = value;
            }
        }

        /// <summary>Field number for the "actionCostType" field.</summary>
        public const int ActionCostTypeFieldNumber = 2;
        private ActionCostType actionCostType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCostType ActionCostType
        {
            get { return actionCostType_; }
            set
            {
                actionCostType_ = value;
            }
        }

        /// <summary>Field number for the "costSelection" field.</summary>
        public const int CostSelectionFieldNumber = 3;
        private SelectNResp costSelection_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNResp CostSelection
        {
            get { return costSelection_; }
            set
            {
                costSelection_ = value;
            }
        }

        /// <summary>Field number for the "counterSelection" field.</summary>
        public const int CounterSelectionFieldNumber = 4;
        private SelectCountersResp counterSelection_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectCountersResp CounterSelection
        {
            get { return counterSelection_; }
            set
            {
                counterSelection_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionCostResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionCostResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Index != other.Index) return false;
            if (ActionCostType != other.ActionCostType) return false;
            if (!object.Equals(CostSelection, other.CostSelection)) return false;
            if (!object.Equals(CounterSelection, other.CounterSelection)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Index != 0) hash ^= Index.GetHashCode();
            if (ActionCostType != 0) hash ^= ActionCostType.GetHashCode();
            if (costSelection_ != null) hash ^= CostSelection.GetHashCode();
            if (counterSelection_ != null) hash ^= CounterSelection.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Index != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Index);
            }
            if (ActionCostType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)ActionCostType);
            }
            if (costSelection_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(CostSelection);
            }
            if (counterSelection_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(CounterSelection);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Index != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
            }
            if (ActionCostType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ActionCostType);
            }
            if (costSelection_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CostSelection);
            }
            if (counterSelection_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CounterSelection);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionCostResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Index != 0)
            {
                Index = other.Index;
            }
            if (other.ActionCostType != 0)
            {
                ActionCostType = other.ActionCostType;
            }
            if (other.costSelection_ != null)
            {
                if (costSelection_ == null)
                {
                    costSelection_ = new SelectNResp();
                }
                CostSelection.MergeFrom(other.CostSelection);
            }
            if (other.counterSelection_ != null)
            {
                if (counterSelection_ == null)
                {
                    counterSelection_ = new SelectCountersResp();
                }
                CounterSelection.MergeFrom(other.CounterSelection);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Index = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            actionCostType_ = (ActionCostType)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            if (costSelection_ == null)
                            {
                                costSelection_ = new SelectNResp();
                            }
                            input.ReadMessage(costSelection_);
                            break;
                        }
                    case 34:
                        {
                            if (counterSelection_ == null)
                            {
                                counterSelection_ = new SelectCountersResp();
                            }
                            input.ReadMessage(counterSelection_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionInfo : pb::IMessage<ActionInfo>
    {
        private static readonly pb::MessageParser<ActionInfo> _parser = new pb::MessageParser<ActionInfo>(() => new ActionInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[12]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionInfo(ActionInfo other) : this()
        {
            actionId_ = other.actionId_;
            seatId_ = other.seatId_;
            action_ = other.action_ != null ? other.action_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionInfo Clone()
        {
            return new ActionInfo(this);
        }

        /// <summary>Field number for the "actionId" field.</summary>
        public const int ActionIdFieldNumber = 1;
        private uint actionId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ActionId
        {
            get { return actionId_; }
            set
            {
                actionId_ = value;
            }
        }

        /// <summary>Field number for the "seatId" field.</summary>
        public const int SeatIdFieldNumber = 2;
        private uint seatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SeatId
        {
            get { return seatId_; }
            set
            {
                seatId_ = value;
            }
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 3;
        private Action action_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Action Action
        {
            get { return action_; }
            set
            {
                action_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ActionId != other.ActionId) return false;
            if (SeatId != other.SeatId) return false;
            if (!object.Equals(Action, other.Action)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ActionId != 0) hash ^= ActionId.GetHashCode();
            if (SeatId != 0) hash ^= SeatId.GetHashCode();
            if (action_ != null) hash ^= Action.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ActionId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(ActionId);
            }
            if (SeatId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(SeatId);
            }
            if (action_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Action);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ActionId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionId);
            }
            if (SeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
            }
            if (action_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ActionId != 0)
            {
                ActionId = other.ActionId;
            }
            if (other.SeatId != 0)
            {
                SeatId = other.SeatId;
            }
            if (other.action_ != null)
            {
                if (action_ == null)
                {
                    action_ = new Action();
                }
                Action.MergeFrom(other.Action);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ActionId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            SeatId = input.ReadUInt32();
                            break;
                        }
                    case 26:
                        {
                            if (action_ == null)
                            {
                                action_ = new Action();
                            }
                            input.ReadMessage(action_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionsAvailableReq : pb::IMessage<ActionsAvailableReq>
    {
        private static readonly pb::MessageParser<ActionsAvailableReq> _parser = new pb::MessageParser<ActionsAvailableReq>(() => new ActionsAvailableReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionsAvailableReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[13]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionsAvailableReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionsAvailableReq(ActionsAvailableReq other) : this()
        {
            actions_ = other.actions_.Clone();
            inactiveActions_ = other.inactiveActions_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionsAvailableReq Clone()
        {
            return new ActionsAvailableReq(this);
        }

        /// <summary>Field number for the "actions" field.</summary>
        public const int ActionsFieldNumber = 1;
        private static readonly pb::FieldCodec<Action> _repeated_actions_codec
            = pb::FieldCodec.ForMessage(10, Action.Parser);
        private readonly pbc::RepeatedField<Action> actions_ = new pbc::RepeatedField<Action>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Action> Actions
        {
            get { return actions_; }
        }

        /// <summary>Field number for the "inactiveActions" field.</summary>
        public const int InactiveActionsFieldNumber = 2;
        private static readonly pb::FieldCodec<Action> _repeated_inactiveActions_codec
            = pb::FieldCodec.ForMessage(18, Action.Parser);
        private readonly pbc::RepeatedField<Action> inactiveActions_ = new pbc::RepeatedField<Action>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Action> InactiveActions
        {
            get { return inactiveActions_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionsAvailableReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionsAvailableReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!actions_.Equals(other.actions_)) return false;
            if (!inactiveActions_.Equals(other.inactiveActions_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= actions_.GetHashCode();
            hash ^= inactiveActions_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            actions_.WriteTo(output, _repeated_actions_codec);
            inactiveActions_.WriteTo(output, _repeated_inactiveActions_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += actions_.CalculateSize(_repeated_actions_codec);
            size += inactiveActions_.CalculateSize(_repeated_inactiveActions_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionsAvailableReq other)
        {
            if (other == null)
            {
                return;
            }
            actions_.Add(other.actions_);
            inactiveActions_.Add(other.inactiveActions_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            actions_.AddEntriesFrom(input, _repeated_actions_codec);
                            break;
                        }
                    case 18:
                        {
                            inactiveActions_.AddEntriesFrom(input, _repeated_inactiveActions_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AlternativeCost : pb::IMessage<AlternativeCost>
    {
        private static readonly pb::MessageParser<AlternativeCost> _parser = new pb::MessageParser<AlternativeCost>(() => new AlternativeCost());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AlternativeCost> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[14]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AlternativeCost()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AlternativeCost(AlternativeCost other) : this()
        {
            manaCost_ = other.manaCost_.Clone();
            index_ = other.index_;
            grpId_ = other.grpId_;
            localizationId_ = other.localizationId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AlternativeCost Clone()
        {
            return new AlternativeCost(this);
        }

        /// <summary>Field number for the "manaCost" field.</summary>
        public const int ManaCostFieldNumber = 4;
        private static readonly pb::FieldCodec<ManaRequirement> _repeated_manaCost_codec
            = pb::FieldCodec.ForMessage(34, ManaRequirement.Parser);
        private readonly pbc::RepeatedField<ManaRequirement> manaCost_ = new pbc::RepeatedField<ManaRequirement>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaRequirement> ManaCost
        {
            get { return manaCost_; }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index
        {
            get { return index_; }
            set
            {
                index_ = value;
            }
        }

        /// <summary>Field number for the "grpId" field.</summary>
        public const int GrpIdFieldNumber = 2;
        private uint grpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GrpId
        {
            get { return grpId_; }
            set
            {
                grpId_ = value;
            }
        }

        /// <summary>Field number for the "localizationId" field.</summary>
        public const int LocalizationIdFieldNumber = 3;
        private uint localizationId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LocalizationId
        {
            get { return localizationId_; }
            set
            {
                localizationId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AlternativeCost);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AlternativeCost other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!manaCost_.Equals(other.manaCost_)) return false;
            if (Index != other.Index) return false;
            if (GrpId != other.GrpId) return false;
            if (LocalizationId != other.LocalizationId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= manaCost_.GetHashCode();
            if (Index != 0) hash ^= Index.GetHashCode();
            if (GrpId != 0) hash ^= GrpId.GetHashCode();
            if (LocalizationId != 0) hash ^= LocalizationId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Index != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Index);
            }
            if (GrpId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(GrpId);
            }
            if (LocalizationId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(LocalizationId);
            }
            manaCost_.WriteTo(output, _repeated_manaCost_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += manaCost_.CalculateSize(_repeated_manaCost_codec);
            if (Index != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
            }
            if (GrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GrpId);
            }
            if (LocalizationId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LocalizationId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AlternativeCost other)
        {
            if (other == null)
            {
                return;
            }
            manaCost_.Add(other.manaCost_);
            if (other.Index != 0)
            {
                Index = other.Index;
            }
            if (other.GrpId != 0)
            {
                GrpId = other.GrpId;
            }
            if (other.LocalizationId != 0)
            {
                LocalizationId = other.LocalizationId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Index = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            GrpId = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            LocalizationId = input.ReadUInt32();
                            break;
                        }
                    case 34:
                        {
                            manaCost_.AddEntriesFrom(input, _repeated_manaCost_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AlternativeCostReq : pb::IMessage<AlternativeCostReq>
    {
        private static readonly pb::MessageParser<AlternativeCostReq> _parser = new pb::MessageParser<AlternativeCostReq>(() => new AlternativeCostReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AlternativeCostReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[15]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AlternativeCostReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AlternativeCostReq(AlternativeCostReq other) : this()
        {
            costs_ = other.costs_.Clone();
            instanceId_ = other.instanceId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AlternativeCostReq Clone()
        {
            return new AlternativeCostReq(this);
        }

        /// <summary>Field number for the "costs" field.</summary>
        public const int CostsFieldNumber = 2;
        private static readonly pb::FieldCodec<AlternativeCost> _repeated_costs_codec
            = pb::FieldCodec.ForMessage(18, AlternativeCost.Parser);
        private readonly pbc::RepeatedField<AlternativeCost> costs_ = new pbc::RepeatedField<AlternativeCost>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<AlternativeCost> Costs
        {
            get { return costs_; }
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AlternativeCostReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AlternativeCostReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!costs_.Equals(other.costs_)) return false;
            if (InstanceId != other.InstanceId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= costs_.GetHashCode();
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(InstanceId);
            }
            costs_.WriteTo(output, _repeated_costs_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += costs_.CalculateSize(_repeated_costs_codec);
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AlternativeCostReq other)
        {
            if (other == null)
            {
                return;
            }
            costs_.Add(other.costs_);
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            costs_.AddEntriesFrom(input, _repeated_costs_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AlternativeCostResp : pb::IMessage<AlternativeCostResp>
    {
        private static readonly pb::MessageParser<AlternativeCostResp> _parser = new pb::MessageParser<AlternativeCostResp>(() => new AlternativeCostResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AlternativeCostResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[16]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AlternativeCostResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AlternativeCostResp(AlternativeCostResp other) : this()
        {
            index_ = other.index_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AlternativeCostResp Clone()
        {
            return new AlternativeCostResp(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index
        {
            get { return index_; }
            set
            {
                index_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AlternativeCostResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AlternativeCostResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Index != other.Index) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Index != 0) hash ^= Index.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Index != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Index);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Index != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AlternativeCostResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Index != 0)
            {
                Index = other.Index;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Index = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AnnotationInfo : pb::IMessage<AnnotationInfo>
    {
        private static readonly pb::MessageParser<AnnotationInfo> _parser = new pb::MessageParser<AnnotationInfo>(() => new AnnotationInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnnotationInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[17]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnnotationInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnnotationInfo(AnnotationInfo other) : this()
        {
            affectedIds_ = other.affectedIds_.Clone();
            type_ = other.type_.Clone();
            details_ = other.details_.Clone();
            ignoreForSeatIds_ = other.ignoreForSeatIds_.Clone();
            id_ = other.id_;
            affectorId_ = other.affectorId_;
            allowRedaction_ = other.allowRedaction_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnnotationInfo Clone()
        {
            return new AnnotationInfo(this);
        }

        /// <summary>Field number for the "affectedIds" field.</summary>
        public const int AffectedIdsFieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_affectedIds_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> affectedIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> AffectedIds
        {
            get { return affectedIds_; }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 4;
        private static readonly pb::FieldCodec<AnnotationType> _repeated_type_codec
            = pb::FieldCodec.ForEnum(34, x => (int)x, x => (AnnotationType)x);
        private readonly pbc::RepeatedField<AnnotationType> type_ = new pbc::RepeatedField<AnnotationType>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<AnnotationType> Type
        {
            get { return type_; }
        }

        /// <summary>Field number for the "details" field.</summary>
        public const int DetailsFieldNumber = 6;
        private static readonly pb::FieldCodec<KeyValuePairInfo> _repeated_details_codec
            = pb::FieldCodec.ForMessage(50, KeyValuePairInfo.Parser);
        private readonly pbc::RepeatedField<KeyValuePairInfo> details_ = new pbc::RepeatedField<KeyValuePairInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<KeyValuePairInfo> Details
        {
            get { return details_; }
        }

        /// <summary>Field number for the "ignoreForSeatIds" field.</summary>
        public const int IgnoreForSeatIdsFieldNumber = 8;
        private static readonly pb::FieldCodec<uint> _repeated_ignoreForSeatIds_codec
            = pb::FieldCodec.ForUInt32(66);
        private readonly pbc::RepeatedField<uint> ignoreForSeatIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> IgnoreForSeatIds
        {
            get { return ignoreForSeatIds_; }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id
        {
            get { return id_; }
            set
            {
                id_ = value;
            }
        }

        /// <summary>Field number for the "affectorId" field.</summary>
        public const int AffectorIdFieldNumber = 2;
        private uint affectorId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AffectorId
        {
            get { return affectorId_; }
            set
            {
                affectorId_ = value;
            }
        }

        /// <summary>Field number for the "allowRedaction" field.</summary>
        public const int AllowRedactionFieldNumber = 7;
        private bool allowRedaction_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AllowRedaction
        {
            get { return allowRedaction_; }
            set
            {
                allowRedaction_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AnnotationInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnnotationInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!affectedIds_.Equals(other.affectedIds_)) return false;
            if (!type_.Equals(other.type_)) return false;
            if (!details_.Equals(other.details_)) return false;
            if (!ignoreForSeatIds_.Equals(other.ignoreForSeatIds_)) return false;
            if (Id != other.Id) return false;
            if (AffectorId != other.AffectorId) return false;
            if (AllowRedaction != other.AllowRedaction) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= affectedIds_.GetHashCode();
            hash ^= type_.GetHashCode();
            hash ^= details_.GetHashCode();
            hash ^= ignoreForSeatIds_.GetHashCode();
            if (Id != 0) hash ^= Id.GetHashCode();
            if (AffectorId != 0) hash ^= AffectorId.GetHashCode();
            if (AllowRedaction != false) hash ^= AllowRedaction.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
            }
            if (AffectorId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(AffectorId);
            }
            affectedIds_.WriteTo(output, _repeated_affectedIds_codec);
            type_.WriteTo(output, _repeated_type_codec);
            details_.WriteTo(output, _repeated_details_codec);
            if (AllowRedaction != false)
            {
                output.WriteRawTag(56);
                output.WriteBool(AllowRedaction);
            }
            ignoreForSeatIds_.WriteTo(output, _repeated_ignoreForSeatIds_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += affectedIds_.CalculateSize(_repeated_affectedIds_codec);
            size += type_.CalculateSize(_repeated_type_codec);
            size += details_.CalculateSize(_repeated_details_codec);
            size += ignoreForSeatIds_.CalculateSize(_repeated_ignoreForSeatIds_codec);
            if (Id != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
            }
            if (AffectorId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AffectorId);
            }
            if (AllowRedaction != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnnotationInfo other)
        {
            if (other == null)
            {
                return;
            }
            affectedIds_.Add(other.affectedIds_);
            type_.Add(other.type_);
            details_.Add(other.details_);
            ignoreForSeatIds_.Add(other.ignoreForSeatIds_);
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.AffectorId != 0)
            {
                AffectorId = other.AffectorId;
            }
            if (other.AllowRedaction != false)
            {
                AllowRedaction = other.AllowRedaction;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Id = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            AffectorId = input.ReadUInt32();
                            break;
                        }
                    case 26:
                    case 24:
                        {
                            affectedIds_.AddEntriesFrom(input, _repeated_affectedIds_codec);
                            break;
                        }
                    case 34:
                    case 32:
                        {
                            type_.AddEntriesFrom(input, _repeated_type_codec);
                            break;
                        }
                    case 50:
                        {
                            details_.AddEntriesFrom(input, _repeated_details_codec);
                            break;
                        }
                    case 56:
                        {
                            AllowRedaction = input.ReadBool();
                            break;
                        }
                    case 66:
                    case 64:
                        {
                            ignoreForSeatIds_.AddEntriesFrom(input, _repeated_ignoreForSeatIds_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AnyLobbyMessage : pb::IMessage<AnyLobbyMessage>
    {
        private static readonly pb::MessageParser<AnyLobbyMessage> _parser = new pb::MessageParser<AnyLobbyMessage>(() => new AnyLobbyMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnyLobbyMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[18]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyLobbyMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyLobbyMessage(AnyLobbyMessage other) : this()
        {
            switch (other.MessageCase)
            {
                case MessageOneofCase.ClientToLobbyMessage:
                    ClientToLobbyMessage = other.ClientToLobbyMessage.Clone();
                    break;
                case MessageOneofCase.LobbyToClientMessage:
                    LobbyToClientMessage = other.LobbyToClientMessage.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyLobbyMessage Clone()
        {
            return new AnyLobbyMessage(this);
        }

        /// <summary>Field number for the "clientToLobbyMessage" field.</summary>
        public const int ClientToLobbyMessageFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToLobbyMessage ClientToLobbyMessage
        {
            get { return messageCase_ == MessageOneofCase.ClientToLobbyMessage ? (ClientToLobbyMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClientToLobbyMessage;
            }
        }

        /// <summary>Field number for the "lobbyToClientMessage" field.</summary>
        public const int LobbyToClientMessageFieldNumber = 3;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyToClientMessage LobbyToClientMessage
        {
            get { return messageCase_ == MessageOneofCase.LobbyToClientMessage ? (LobbyToClientMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.LobbyToClientMessage;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            ClientToLobbyMessage = 2,
            LobbyToClientMessage = 3,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AnyLobbyMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnyLobbyMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(ClientToLobbyMessage, other.ClientToLobbyMessage)) return false;
            if (!object.Equals(LobbyToClientMessage, other.LobbyToClientMessage)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (messageCase_ == MessageOneofCase.ClientToLobbyMessage) hash ^= ClientToLobbyMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.LobbyToClientMessage) hash ^= LobbyToClientMessage.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (messageCase_ == MessageOneofCase.ClientToLobbyMessage)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ClientToLobbyMessage);
            }
            if (messageCase_ == MessageOneofCase.LobbyToClientMessage)
            {
                output.WriteRawTag(26);
                output.WriteMessage(LobbyToClientMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (messageCase_ == MessageOneofCase.ClientToLobbyMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientToLobbyMessage);
            }
            if (messageCase_ == MessageOneofCase.LobbyToClientMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(LobbyToClientMessage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnyLobbyMessage other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.ClientToLobbyMessage:
                    if (ClientToLobbyMessage == null)
                    {
                        ClientToLobbyMessage = new ClientToLobbyMessage();
                    }
                    ClientToLobbyMessage.MergeFrom(other.ClientToLobbyMessage);
                    break;
                case MessageOneofCase.LobbyToClientMessage:
                    if (LobbyToClientMessage == null)
                    {
                        LobbyToClientMessage = new LobbyToClientMessage();
                    }
                    LobbyToClientMessage.MergeFrom(other.LobbyToClientMessage);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 18:
                        {
                            ClientToLobbyMessage subBuilder = new ClientToLobbyMessage();
                            if (messageCase_ == MessageOneofCase.ClientToLobbyMessage)
                            {
                                subBuilder.MergeFrom(ClientToLobbyMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ClientToLobbyMessage = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            LobbyToClientMessage subBuilder = new LobbyToClientMessage();
                            if (messageCase_ == MessageOneofCase.LobbyToClientMessage)
                            {
                                subBuilder.MergeFrom(LobbyToClientMessage);
                            }
                            input.ReadMessage(subBuilder);
                            LobbyToClientMessage = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AnyMessage : pb::IMessage<AnyMessage>
    {
        private static readonly pb::MessageParser<AnyMessage> _parser = new pb::MessageParser<AnyMessage>(() => new AnyMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnyMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[19]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyMessage(AnyMessage other) : this()
        {
            timestamp_ = other.timestamp_;
            switch (other.MessageCase)
            {
                case MessageOneofCase.ServerToGREMessage:
                    ServerToGREMessage = other.ServerToGREMessage.Clone();
                    break;
                case MessageOneofCase.GREToServerMessage:
                    GREToServerMessage = other.GREToServerMessage.Clone();
                    break;
                case MessageOneofCase.ClientToGREMessage:
                    ClientToGREMessage = other.ClientToGREMessage.Clone();
                    break;
                case MessageOneofCase.GREToClientMessage:
                    GREToClientMessage = other.GREToClientMessage.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyMessage Clone()
        {
            return new AnyMessage(this);
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 1;
        private long timestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        /// <summary>Field number for the "serverToGREMessage" field.</summary>
        public const int ServerToGREMessageFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerToGREMessage ServerToGREMessage
        {
            get { return messageCase_ == MessageOneofCase.ServerToGREMessage ? (ServerToGREMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ServerToGREMessage;
            }
        }

        /// <summary>Field number for the "gREToServerMessage" field.</summary>
        public const int GREToServerMessageFieldNumber = 3;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToServerMessage GREToServerMessage
        {
            get { return messageCase_ == MessageOneofCase.GREToServerMessage ? (GREToServerMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GREToServerMessage;
            }
        }

        /// <summary>Field number for the "clientToGREMessage" field.</summary>
        public const int ClientToGREMessageFieldNumber = 4;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToGREMessage ClientToGREMessage
        {
            get { return messageCase_ == MessageOneofCase.ClientToGREMessage ? (ClientToGREMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClientToGREMessage;
            }
        }

        /// <summary>Field number for the "gREToClientMessage" field.</summary>
        public const int GREToClientMessageFieldNumber = 5;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToClientMessage GREToClientMessage
        {
            get { return messageCase_ == MessageOneofCase.GREToClientMessage ? (GREToClientMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GREToClientMessage;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            ServerToGREMessage = 2,
            GREToServerMessage = 3,
            ClientToGREMessage = 4,
            GREToClientMessage = 5,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AnyMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnyMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Timestamp != other.Timestamp) return false;
            if (!object.Equals(ServerToGREMessage, other.ServerToGREMessage)) return false;
            if (!object.Equals(GREToServerMessage, other.GREToServerMessage)) return false;
            if (!object.Equals(ClientToGREMessage, other.ClientToGREMessage)) return false;
            if (!object.Equals(GREToClientMessage, other.GREToClientMessage)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
            if (messageCase_ == MessageOneofCase.ServerToGREMessage) hash ^= ServerToGREMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.GREToServerMessage) hash ^= GREToServerMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.ClientToGREMessage) hash ^= ClientToGREMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.GREToClientMessage) hash ^= GREToClientMessage.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Timestamp != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Timestamp);
            }
            if (messageCase_ == MessageOneofCase.ServerToGREMessage)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ServerToGREMessage);
            }
            if (messageCase_ == MessageOneofCase.GREToServerMessage)
            {
                output.WriteRawTag(26);
                output.WriteMessage(GREToServerMessage);
            }
            if (messageCase_ == MessageOneofCase.ClientToGREMessage)
            {
                output.WriteRawTag(34);
                output.WriteMessage(ClientToGREMessage);
            }
            if (messageCase_ == MessageOneofCase.GREToClientMessage)
            {
                output.WriteRawTag(42);
                output.WriteMessage(GREToClientMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Timestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (messageCase_ == MessageOneofCase.ServerToGREMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerToGREMessage);
            }
            if (messageCase_ == MessageOneofCase.GREToServerMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GREToServerMessage);
            }
            if (messageCase_ == MessageOneofCase.ClientToGREMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientToGREMessage);
            }
            if (messageCase_ == MessageOneofCase.GREToClientMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GREToClientMessage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnyMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Timestamp != 0L)
            {
                Timestamp = other.Timestamp;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.ServerToGREMessage:
                    if (ServerToGREMessage == null)
                    {
                        ServerToGREMessage = new ServerToGREMessage();
                    }
                    ServerToGREMessage.MergeFrom(other.ServerToGREMessage);
                    break;
                case MessageOneofCase.GREToServerMessage:
                    if (GREToServerMessage == null)
                    {
                        GREToServerMessage = new GREToServerMessage();
                    }
                    GREToServerMessage.MergeFrom(other.GREToServerMessage);
                    break;
                case MessageOneofCase.ClientToGREMessage:
                    if (ClientToGREMessage == null)
                    {
                        ClientToGREMessage = new ClientToGREMessage();
                    }
                    ClientToGREMessage.MergeFrom(other.ClientToGREMessage);
                    break;
                case MessageOneofCase.GREToClientMessage:
                    if (GREToClientMessage == null)
                    {
                        GREToClientMessage = new GREToClientMessage();
                    }
                    GREToClientMessage.MergeFrom(other.GREToClientMessage);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            ServerToGREMessage subBuilder = new ServerToGREMessage();
                            if (messageCase_ == MessageOneofCase.ServerToGREMessage)
                            {
                                subBuilder.MergeFrom(ServerToGREMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ServerToGREMessage = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            GREToServerMessage subBuilder = new GREToServerMessage();
                            if (messageCase_ == MessageOneofCase.GREToServerMessage)
                            {
                                subBuilder.MergeFrom(GREToServerMessage);
                            }
                            input.ReadMessage(subBuilder);
                            GREToServerMessage = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            ClientToGREMessage subBuilder = new ClientToGREMessage();
                            if (messageCase_ == MessageOneofCase.ClientToGREMessage)
                            {
                                subBuilder.MergeFrom(ClientToGREMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ClientToGREMessage = subBuilder;
                            break;
                        }
                    case 42:
                        {
                            GREToClientMessage subBuilder = new GREToClientMessage();
                            if (messageCase_ == MessageOneofCase.GREToClientMessage)
                            {
                                subBuilder.MergeFrom(GREToClientMessage);
                            }
                            input.ReadMessage(subBuilder);
                            GREToClientMessage = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AnyServiceMessage : pb::IMessage<AnyServiceMessage>
    {
        private static readonly pb::MessageParser<AnyServiceMessage> _parser = new pb::MessageParser<AnyServiceMessage>(() => new AnyServiceMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnyServiceMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[20]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyServiceMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyServiceMessage(AnyServiceMessage other) : this()
        {
            userContext_ = other.userContext_ != null ? other.userContext_.Clone() : null;
            switch (other.MessageCase)
            {
                case MessageOneofCase.ClientToMatchServiceMessage:
                    ClientToMatchServiceMessage = other.ClientToMatchServiceMessage.Clone();
                    break;
                case MessageOneofCase.MatchServiceToClientMessage:
                    MatchServiceToClientMessage = other.MatchServiceToClientMessage.Clone();
                    break;
                case MessageOneofCase.ClientToLobbyMessage:
                    ClientToLobbyMessage = other.ClientToLobbyMessage.Clone();
                    break;
                case MessageOneofCase.LobbyToClientMessage:
                    LobbyToClientMessage = other.LobbyToClientMessage.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyServiceMessage Clone()
        {
            return new AnyServiceMessage(this);
        }

        /// <summary>Field number for the "userContext" field.</summary>
        public const int UserContextFieldNumber = 2;
        private AnyServiceMessageTypesUserContext userContext_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyServiceMessageTypesUserContext UserContext
        {
            get { return userContext_; }
            set
            {
                userContext_ = value;
            }
        }

        /// <summary>Field number for the "clientToMatchServiceMessage" field.</summary>
        public const int ClientToMatchServiceMessageFieldNumber = 10;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToMatchServiceMessage ClientToMatchServiceMessage
        {
            get { return messageCase_ == MessageOneofCase.ClientToMatchServiceMessage ? (ClientToMatchServiceMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClientToMatchServiceMessage;
            }
        }

        /// <summary>Field number for the "matchServiceToClientMessage" field.</summary>
        public const int MatchServiceToClientMessageFieldNumber = 11;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchServiceToClientMessage MatchServiceToClientMessage
        {
            get { return messageCase_ == MessageOneofCase.MatchServiceToClientMessage ? (MatchServiceToClientMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchServiceToClientMessage;
            }
        }

        /// <summary>Field number for the "clientToLobbyMessage" field.</summary>
        public const int ClientToLobbyMessageFieldNumber = 12;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToLobbyMessage ClientToLobbyMessage
        {
            get { return messageCase_ == MessageOneofCase.ClientToLobbyMessage ? (ClientToLobbyMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClientToLobbyMessage;
            }
        }

        /// <summary>Field number for the "lobbyToClientMessage" field.</summary>
        public const int LobbyToClientMessageFieldNumber = 13;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyToClientMessage LobbyToClientMessage
        {
            get { return messageCase_ == MessageOneofCase.LobbyToClientMessage ? (LobbyToClientMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.LobbyToClientMessage;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            ClientToMatchServiceMessage = 10,
            MatchServiceToClientMessage = 11,
            ClientToLobbyMessage = 12,
            LobbyToClientMessage = 13,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AnyServiceMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnyServiceMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(UserContext, other.UserContext)) return false;
            if (!object.Equals(ClientToMatchServiceMessage, other.ClientToMatchServiceMessage)) return false;
            if (!object.Equals(MatchServiceToClientMessage, other.MatchServiceToClientMessage)) return false;
            if (!object.Equals(ClientToLobbyMessage, other.ClientToLobbyMessage)) return false;
            if (!object.Equals(LobbyToClientMessage, other.LobbyToClientMessage)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (userContext_ != null) hash ^= UserContext.GetHashCode();
            if (messageCase_ == MessageOneofCase.ClientToMatchServiceMessage) hash ^= ClientToMatchServiceMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.MatchServiceToClientMessage) hash ^= MatchServiceToClientMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.ClientToLobbyMessage) hash ^= ClientToLobbyMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.LobbyToClientMessage) hash ^= LobbyToClientMessage.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (userContext_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(UserContext);
            }
            if (messageCase_ == MessageOneofCase.ClientToMatchServiceMessage)
            {
                output.WriteRawTag(82);
                output.WriteMessage(ClientToMatchServiceMessage);
            }
            if (messageCase_ == MessageOneofCase.MatchServiceToClientMessage)
            {
                output.WriteRawTag(90);
                output.WriteMessage(MatchServiceToClientMessage);
            }
            if (messageCase_ == MessageOneofCase.ClientToLobbyMessage)
            {
                output.WriteRawTag(98);
                output.WriteMessage(ClientToLobbyMessage);
            }
            if (messageCase_ == MessageOneofCase.LobbyToClientMessage)
            {
                output.WriteRawTag(106);
                output.WriteMessage(LobbyToClientMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (userContext_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserContext);
            }
            if (messageCase_ == MessageOneofCase.ClientToMatchServiceMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientToMatchServiceMessage);
            }
            if (messageCase_ == MessageOneofCase.MatchServiceToClientMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchServiceToClientMessage);
            }
            if (messageCase_ == MessageOneofCase.ClientToLobbyMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientToLobbyMessage);
            }
            if (messageCase_ == MessageOneofCase.LobbyToClientMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(LobbyToClientMessage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnyServiceMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.userContext_ != null)
            {
                if (userContext_ == null)
                {
                    userContext_ = new AnyServiceMessageTypesUserContext();
                }
                UserContext.MergeFrom(other.UserContext);
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.ClientToMatchServiceMessage:
                    if (ClientToMatchServiceMessage == null)
                    {
                        ClientToMatchServiceMessage = new ClientToMatchServiceMessage();
                    }
                    ClientToMatchServiceMessage.MergeFrom(other.ClientToMatchServiceMessage);
                    break;
                case MessageOneofCase.MatchServiceToClientMessage:
                    if (MatchServiceToClientMessage == null)
                    {
                        MatchServiceToClientMessage = new MatchServiceToClientMessage();
                    }
                    MatchServiceToClientMessage.MergeFrom(other.MatchServiceToClientMessage);
                    break;
                case MessageOneofCase.ClientToLobbyMessage:
                    if (ClientToLobbyMessage == null)
                    {
                        ClientToLobbyMessage = new ClientToLobbyMessage();
                    }
                    ClientToLobbyMessage.MergeFrom(other.ClientToLobbyMessage);
                    break;
                case MessageOneofCase.LobbyToClientMessage:
                    if (LobbyToClientMessage == null)
                    {
                        LobbyToClientMessage = new LobbyToClientMessage();
                    }
                    LobbyToClientMessage.MergeFrom(other.LobbyToClientMessage);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 18:
                        {
                            if (userContext_ == null)
                            {
                                userContext_ = new AnyServiceMessageTypesUserContext();
                            }
                            input.ReadMessage(userContext_);
                            break;
                        }
                    case 82:
                        {
                            ClientToMatchServiceMessage subBuilder = new ClientToMatchServiceMessage();
                            if (messageCase_ == MessageOneofCase.ClientToMatchServiceMessage)
                            {
                                subBuilder.MergeFrom(ClientToMatchServiceMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ClientToMatchServiceMessage = subBuilder;
                            break;
                        }
                    case 90:
                        {
                            MatchServiceToClientMessage subBuilder = new MatchServiceToClientMessage();
                            if (messageCase_ == MessageOneofCase.MatchServiceToClientMessage)
                            {
                                subBuilder.MergeFrom(MatchServiceToClientMessage);
                            }
                            input.ReadMessage(subBuilder);
                            MatchServiceToClientMessage = subBuilder;
                            break;
                        }
                    case 98:
                        {
                            ClientToLobbyMessage subBuilder = new ClientToLobbyMessage();
                            if (messageCase_ == MessageOneofCase.ClientToLobbyMessage)
                            {
                                subBuilder.MergeFrom(ClientToLobbyMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ClientToLobbyMessage = subBuilder;
                            break;
                        }
                    case 106:
                        {
                            LobbyToClientMessage subBuilder = new LobbyToClientMessage();
                            if (messageCase_ == MessageOneofCase.LobbyToClientMessage)
                            {
                                subBuilder.MergeFrom(LobbyToClientMessage);
                            }
                            input.ReadMessage(subBuilder);
                            LobbyToClientMessage = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AnyServiceMessageTypesRequestContext : pb::IMessage<AnyServiceMessageTypesRequestContext>
    {
        private static readonly pb::MessageParser<AnyServiceMessageTypesRequestContext> _parser = new pb::MessageParser<AnyServiceMessageTypesRequestContext>(() => new AnyServiceMessageTypesRequestContext());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnyServiceMessageTypesRequestContext> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[21]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyServiceMessageTypesRequestContext()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyServiceMessageTypesRequestContext(AnyServiceMessageTypesRequestContext other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyServiceMessageTypesRequestContext Clone()
        {
            return new AnyServiceMessageTypesRequestContext(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AnyServiceMessageTypesRequestContext);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnyServiceMessageTypesRequestContext other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnyServiceMessageTypesRequestContext other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class AnyServiceMessageTypesUserContext : pb::IMessage<AnyServiceMessageTypesUserContext>
    {
        private static readonly pb::MessageParser<AnyServiceMessageTypesUserContext> _parser = new pb::MessageParser<AnyServiceMessageTypesUserContext>(() => new AnyServiceMessageTypesUserContext());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnyServiceMessageTypesUserContext> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[22]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyServiceMessageTypesUserContext()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyServiceMessageTypesUserContext(AnyServiceMessageTypesUserContext other) : this()
        {
            userId_ = other.userId_;
            userRoles_ = other.userRoles_.Clone();
            authenticationType_ = other.authenticationType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyServiceMessageTypesUserContext Clone()
        {
            return new AnyServiceMessageTypesUserContext(this);
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "userRoles" field.</summary>
        public const int UserRolesFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_userRoles_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> userRoles_ = new pbc::RepeatedField<string>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> UserRoles
        {
            get { return userRoles_; }
        }

        /// <summary>Field number for the "authenticationType" field.</summary>
        public const int AuthenticationTypeFieldNumber = 3;
        private AuthenticationType authenticationType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticationType AuthenticationType
        {
            get { return authenticationType_; }
            set
            {
                authenticationType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AnyServiceMessageTypesUserContext);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnyServiceMessageTypesUserContext other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (!userRoles_.Equals(other.userRoles_)) return false;
            if (AuthenticationType != other.AuthenticationType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            hash ^= userRoles_.GetHashCode();
            if (AuthenticationType != 0) hash ^= AuthenticationType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            userRoles_.WriteTo(output, _repeated_userRoles_codec);
            if (AuthenticationType != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)AuthenticationType);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            size += userRoles_.CalculateSize(_repeated_userRoles_codec);
            if (AuthenticationType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AuthenticationType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnyServiceMessageTypesUserContext other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            userRoles_.Add(other.userRoles_);
            if (other.AuthenticationType != 0)
            {
                AuthenticationType = other.AuthenticationType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            userRoles_.AddEntriesFrom(input, _repeated_userRoles_codec);
                            break;
                        }
                    case 24:
                        {
                            authenticationType_ = (AuthenticationType)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AnyToGREMessage : pb::IMessage<AnyToGREMessage>
    {
        private static readonly pb::MessageParser<AnyToGREMessage> _parser = new pb::MessageParser<AnyToGREMessage>(() => new AnyToGREMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnyToGREMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[23]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyToGREMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyToGREMessage(AnyToGREMessage other) : this()
        {
            timestamp_ = other.timestamp_;
            switch (other.MessageCase)
            {
                case MessageOneofCase.ServerToGREMessage:
                    ServerToGREMessage = other.ServerToGREMessage.Clone();
                    break;
                case MessageOneofCase.ClientToGREMessage:
                    ClientToGREMessage = other.ClientToGREMessage.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnyToGREMessage Clone()
        {
            return new AnyToGREMessage(this);
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 1;
        private long timestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        /// <summary>Field number for the "serverToGREMessage" field.</summary>
        public const int ServerToGREMessageFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerToGREMessage ServerToGREMessage
        {
            get { return messageCase_ == MessageOneofCase.ServerToGREMessage ? (ServerToGREMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ServerToGREMessage;
            }
        }

        /// <summary>Field number for the "clientToGREMessage" field.</summary>
        public const int ClientToGREMessageFieldNumber = 3;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToGREMessage ClientToGREMessage
        {
            get { return messageCase_ == MessageOneofCase.ClientToGREMessage ? (ClientToGREMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClientToGREMessage;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            ServerToGREMessage = 2,
            ClientToGREMessage = 3,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AnyToGREMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnyToGREMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Timestamp != other.Timestamp) return false;
            if (!object.Equals(ServerToGREMessage, other.ServerToGREMessage)) return false;
            if (!object.Equals(ClientToGREMessage, other.ClientToGREMessage)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
            if (messageCase_ == MessageOneofCase.ServerToGREMessage) hash ^= ServerToGREMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.ClientToGREMessage) hash ^= ClientToGREMessage.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Timestamp != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Timestamp);
            }
            if (messageCase_ == MessageOneofCase.ServerToGREMessage)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ServerToGREMessage);
            }
            if (messageCase_ == MessageOneofCase.ClientToGREMessage)
            {
                output.WriteRawTag(26);
                output.WriteMessage(ClientToGREMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Timestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (messageCase_ == MessageOneofCase.ServerToGREMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerToGREMessage);
            }
            if (messageCase_ == MessageOneofCase.ClientToGREMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientToGREMessage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnyToGREMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Timestamp != 0L)
            {
                Timestamp = other.Timestamp;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.ServerToGREMessage:
                    if (ServerToGREMessage == null)
                    {
                        ServerToGREMessage = new ServerToGREMessage();
                    }
                    ServerToGREMessage.MergeFrom(other.ServerToGREMessage);
                    break;
                case MessageOneofCase.ClientToGREMessage:
                    if (ClientToGREMessage == null)
                    {
                        ClientToGREMessage = new ClientToGREMessage();
                    }
                    ClientToGREMessage.MergeFrom(other.ClientToGREMessage);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            ServerToGREMessage subBuilder = new ServerToGREMessage();
                            if (messageCase_ == MessageOneofCase.ServerToGREMessage)
                            {
                                subBuilder.MergeFrom(ServerToGREMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ServerToGREMessage = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            ClientToGREMessage subBuilder = new ClientToGREMessage();
                            if (messageCase_ == MessageOneofCase.ClientToGREMessage)
                            {
                                subBuilder.MergeFrom(ClientToGREMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ClientToGREMessage = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AssignDamageConfirmation : pb::IMessage<AssignDamageConfirmation>
    {
        private static readonly pb::MessageParser<AssignDamageConfirmation> _parser = new pb::MessageParser<AssignDamageConfirmation>(() => new AssignDamageConfirmation());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AssignDamageConfirmation> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[24]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssignDamageConfirmation()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssignDamageConfirmation(AssignDamageConfirmation other) : this()
        {
            invalidAssignments_ = other.invalidAssignments_.Clone();
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssignDamageConfirmation Clone()
        {
            return new AssignDamageConfirmation(this);
        }

        /// <summary>Field number for the "invalidAssignments" field.</summary>
        public const int InvalidAssignmentsFieldNumber = 2;
        private static readonly pb::FieldCodec<InvalidDamageAssignment> _repeated_invalidAssignments_codec
            = pb::FieldCodec.ForMessage(18, InvalidDamageAssignment.Parser);
        private readonly pbc::RepeatedField<InvalidDamageAssignment> invalidAssignments_ = new pbc::RepeatedField<InvalidDamageAssignment>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<InvalidDamageAssignment> InvalidAssignments
        {
            get { return invalidAssignments_; }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private ResultCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AssignDamageConfirmation);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AssignDamageConfirmation other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!invalidAssignments_.Equals(other.invalidAssignments_)) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= invalidAssignments_.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Result != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Result);
            }
            invalidAssignments_.WriteTo(output, _repeated_invalidAssignments_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += invalidAssignments_.CalculateSize(_repeated_invalidAssignments_codec);
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AssignDamageConfirmation other)
        {
            if (other == null)
            {
                return;
            }
            invalidAssignments_.Add(other.invalidAssignments_);
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            result_ = (ResultCode)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            invalidAssignments_.AddEntriesFrom(input, _repeated_invalidAssignments_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AssignDamageReq : pb::IMessage<AssignDamageReq>
    {
        private static readonly pb::MessageParser<AssignDamageReq> _parser = new pb::MessageParser<AssignDamageReq>(() => new AssignDamageReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AssignDamageReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[25]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssignDamageReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssignDamageReq(AssignDamageReq other) : this()
        {
            damageAssigners_ = other.damageAssigners_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssignDamageReq Clone()
        {
            return new AssignDamageReq(this);
        }

        /// <summary>Field number for the "damageAssigners" field.</summary>
        public const int DamageAssignersFieldNumber = 1;
        private static readonly pb::FieldCodec<DamageAssigner> _repeated_damageAssigners_codec
            = pb::FieldCodec.ForMessage(10, DamageAssigner.Parser);
        private readonly pbc::RepeatedField<DamageAssigner> damageAssigners_ = new pbc::RepeatedField<DamageAssigner>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<DamageAssigner> DamageAssigners
        {
            get { return damageAssigners_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AssignDamageReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AssignDamageReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!damageAssigners_.Equals(other.damageAssigners_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= damageAssigners_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            damageAssigners_.WriteTo(output, _repeated_damageAssigners_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += damageAssigners_.CalculateSize(_repeated_damageAssigners_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AssignDamageReq other)
        {
            if (other == null)
            {
                return;
            }
            damageAssigners_.Add(other.damageAssigners_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            damageAssigners_.AddEntriesFrom(input, _repeated_damageAssigners_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AssignDamageResp : pb::IMessage<AssignDamageResp>
    {
        private static readonly pb::MessageParser<AssignDamageResp> _parser = new pb::MessageParser<AssignDamageResp>(() => new AssignDamageResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AssignDamageResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[26]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssignDamageResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssignDamageResp(AssignDamageResp other) : this()
        {
            assigners_ = other.assigners_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssignDamageResp Clone()
        {
            return new AssignDamageResp(this);
        }

        /// <summary>Field number for the "assigners" field.</summary>
        public const int AssignersFieldNumber = 1;
        private static readonly pb::FieldCodec<DamageAssigner> _repeated_assigners_codec
            = pb::FieldCodec.ForMessage(10, DamageAssigner.Parser);
        private readonly pbc::RepeatedField<DamageAssigner> assigners_ = new pbc::RepeatedField<DamageAssigner>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<DamageAssigner> Assigners
        {
            get { return assigners_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AssignDamageResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AssignDamageResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!assigners_.Equals(other.assigners_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= assigners_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            assigners_.WriteTo(output, _repeated_assigners_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += assigners_.CalculateSize(_repeated_assigners_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AssignDamageResp other)
        {
            if (other == null)
            {
                return;
            }
            assigners_.Add(other.assigners_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            assigners_.AddEntriesFrom(input, _repeated_assigners_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AttackInfo : pb::IMessage<AttackInfo>
    {
        private static readonly pb::MessageParser<AttackInfo> _parser = new pb::MessageParser<AttackInfo>(() => new AttackInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttackInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[27]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttackInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttackInfo(AttackInfo other) : this()
        {
            orderedBlockers_ = other.orderedBlockers_.Clone();
            targetId_ = other.targetId_;
            damageOrdered_ = other.damageOrdered_;
            damageAssigned_ = other.damageAssigned_;
            alternativeGrpId_ = other.alternativeGrpId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttackInfo Clone()
        {
            return new AttackInfo(this);
        }

        /// <summary>Field number for the "orderedBlockers" field.</summary>
        public const int OrderedBlockersFieldNumber = 4;
        private static readonly pb::FieldCodec<OrderedDamageAssignment> _repeated_orderedBlockers_codec
            = pb::FieldCodec.ForMessage(34, OrderedDamageAssignment.Parser);
        private readonly pbc::RepeatedField<OrderedDamageAssignment> orderedBlockers_ = new pbc::RepeatedField<OrderedDamageAssignment>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<OrderedDamageAssignment> OrderedBlockers
        {
            get { return orderedBlockers_; }
        }

        /// <summary>Field number for the "targetId" field.</summary>
        public const int TargetIdFieldNumber = 1;
        private uint targetId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TargetId
        {
            get { return targetId_; }
            set
            {
                targetId_ = value;
            }
        }

        /// <summary>Field number for the "damageOrdered" field.</summary>
        public const int DamageOrderedFieldNumber = 2;
        private bool damageOrdered_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DamageOrdered
        {
            get { return damageOrdered_; }
            set
            {
                damageOrdered_ = value;
            }
        }

        /// <summary>Field number for the "damageAssigned" field.</summary>
        public const int DamageAssignedFieldNumber = 3;
        private bool damageAssigned_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DamageAssigned
        {
            get { return damageAssigned_; }
            set
            {
                damageAssigned_ = value;
            }
        }

        /// <summary>Field number for the "alternativeGrpId" field.</summary>
        public const int AlternativeGrpIdFieldNumber = 5;
        private uint alternativeGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AlternativeGrpId
        {
            get { return alternativeGrpId_; }
            set
            {
                alternativeGrpId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AttackInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttackInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!orderedBlockers_.Equals(other.orderedBlockers_)) return false;
            if (TargetId != other.TargetId) return false;
            if (DamageOrdered != other.DamageOrdered) return false;
            if (DamageAssigned != other.DamageAssigned) return false;
            if (AlternativeGrpId != other.AlternativeGrpId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= orderedBlockers_.GetHashCode();
            if (TargetId != 0) hash ^= TargetId.GetHashCode();
            if (DamageOrdered != false) hash ^= DamageOrdered.GetHashCode();
            if (DamageAssigned != false) hash ^= DamageAssigned.GetHashCode();
            if (AlternativeGrpId != 0) hash ^= AlternativeGrpId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TargetId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(TargetId);
            }
            if (DamageOrdered != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(DamageOrdered);
            }
            if (DamageAssigned != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(DamageAssigned);
            }
            orderedBlockers_.WriteTo(output, _repeated_orderedBlockers_codec);
            if (AlternativeGrpId != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(AlternativeGrpId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += orderedBlockers_.CalculateSize(_repeated_orderedBlockers_codec);
            if (TargetId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
            }
            if (DamageOrdered != false)
            {
                size += 1 + 1;
            }
            if (DamageAssigned != false)
            {
                size += 1 + 1;
            }
            if (AlternativeGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AlternativeGrpId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttackInfo other)
        {
            if (other == null)
            {
                return;
            }
            orderedBlockers_.Add(other.orderedBlockers_);
            if (other.TargetId != 0)
            {
                TargetId = other.TargetId;
            }
            if (other.DamageOrdered != false)
            {
                DamageOrdered = other.DamageOrdered;
            }
            if (other.DamageAssigned != false)
            {
                DamageAssigned = other.DamageAssigned;
            }
            if (other.AlternativeGrpId != 0)
            {
                AlternativeGrpId = other.AlternativeGrpId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            TargetId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            DamageOrdered = input.ReadBool();
                            break;
                        }
                    case 24:
                        {
                            DamageAssigned = input.ReadBool();
                            break;
                        }
                    case 34:
                        {
                            orderedBlockers_.AddEntriesFrom(input, _repeated_orderedBlockers_codec);
                            break;
                        }
                    case 40:
                        {
                            AlternativeGrpId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AttackWarning : pb::IMessage<AttackWarning>
    {
        private static readonly pb::MessageParser<AttackWarning> _parser = new pb::MessageParser<AttackWarning>(() => new AttackWarning());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttackWarning> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[28]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttackWarning()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttackWarning(AttackWarning other) : this()
        {
            instanceId_ = other.instanceId_;
            type_ = other.type_;
            warningPromptId_ = other.warningPromptId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttackWarning Clone()
        {
            return new AttackWarning(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private AttackWarningType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttackWarningType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "warningPromptId" field.</summary>
        public const int WarningPromptIdFieldNumber = 3;
        private uint warningPromptId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WarningPromptId
        {
            get { return warningPromptId_; }
            set
            {
                warningPromptId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AttackWarning);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttackWarning other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            if (Type != other.Type) return false;
            if (WarningPromptId != other.WarningPromptId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (WarningPromptId != 0) hash ^= WarningPromptId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(InstanceId);
            }
            if (Type != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Type);
            }
            if (WarningPromptId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(WarningPromptId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (WarningPromptId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WarningPromptId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttackWarning other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.WarningPromptId != 0)
            {
                WarningPromptId = other.WarningPromptId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            type_ = (AttackWarningType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            WarningPromptId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Attacker : pb::IMessage<Attacker>
    {
        private static readonly pb::MessageParser<Attacker> _parser = new pb::MessageParser<Attacker>(() => new Attacker());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Attacker> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[29]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attacker()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attacker(Attacker other) : this()
        {
            legalDamageRecipients_ = other.legalDamageRecipients_.Clone();
            attackerInstanceId_ = other.attackerInstanceId_;
            selectedDamageRecipient_ = other.selectedDamageRecipient_ != null ? other.selectedDamageRecipient_.Clone() : null;
            alternativeGrpId_ = other.alternativeGrpId_;
            autoAttacked_ = other.autoAttacked_;
            mustAttack_ = other.mustAttack_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attacker Clone()
        {
            return new Attacker(this);
        }

        /// <summary>Field number for the "legalDamageRecipients" field.</summary>
        public const int LegalDamageRecipientsFieldNumber = 2;
        private static readonly pb::FieldCodec<DamageRecipient> _repeated_legalDamageRecipients_codec
            = pb::FieldCodec.ForMessage(18, DamageRecipient.Parser);
        private readonly pbc::RepeatedField<DamageRecipient> legalDamageRecipients_ = new pbc::RepeatedField<DamageRecipient>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<DamageRecipient> LegalDamageRecipients
        {
            get { return legalDamageRecipients_; }
        }

        /// <summary>Field number for the "attackerInstanceId" field.</summary>
        public const int AttackerInstanceIdFieldNumber = 1;
        private uint attackerInstanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AttackerInstanceId
        {
            get { return attackerInstanceId_; }
            set
            {
                attackerInstanceId_ = value;
            }
        }

        /// <summary>Field number for the "selectedDamageRecipient" field.</summary>
        public const int SelectedDamageRecipientFieldNumber = 3;
        private DamageRecipient selectedDamageRecipient_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageRecipient SelectedDamageRecipient
        {
            get { return selectedDamageRecipient_; }
            set
            {
                selectedDamageRecipient_ = value;
            }
        }

        /// <summary>Field number for the "alternativeGrpId" field.</summary>
        public const int AlternativeGrpIdFieldNumber = 4;
        private uint alternativeGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AlternativeGrpId
        {
            get { return alternativeGrpId_; }
            set
            {
                alternativeGrpId_ = value;
            }
        }

        /// <summary>Field number for the "autoAttacked" field.</summary>
        public const int AutoAttackedFieldNumber = 5;
        private bool autoAttacked_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AutoAttacked
        {
            get { return autoAttacked_; }
            set
            {
                autoAttacked_ = value;
            }
        }

        /// <summary>Field number for the "mustAttack" field.</summary>
        public const int MustAttackFieldNumber = 6;
        private bool mustAttack_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool MustAttack
        {
            get { return mustAttack_; }
            set
            {
                mustAttack_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Attacker);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Attacker other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!legalDamageRecipients_.Equals(other.legalDamageRecipients_)) return false;
            if (AttackerInstanceId != other.AttackerInstanceId) return false;
            if (!object.Equals(SelectedDamageRecipient, other.SelectedDamageRecipient)) return false;
            if (AlternativeGrpId != other.AlternativeGrpId) return false;
            if (AutoAttacked != other.AutoAttacked) return false;
            if (MustAttack != other.MustAttack) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= legalDamageRecipients_.GetHashCode();
            if (AttackerInstanceId != 0) hash ^= AttackerInstanceId.GetHashCode();
            if (selectedDamageRecipient_ != null) hash ^= SelectedDamageRecipient.GetHashCode();
            if (AlternativeGrpId != 0) hash ^= AlternativeGrpId.GetHashCode();
            if (AutoAttacked != false) hash ^= AutoAttacked.GetHashCode();
            if (MustAttack != false) hash ^= MustAttack.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AttackerInstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AttackerInstanceId);
            }
            legalDamageRecipients_.WriteTo(output, _repeated_legalDamageRecipients_codec);
            if (selectedDamageRecipient_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(SelectedDamageRecipient);
            }
            if (AlternativeGrpId != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(AlternativeGrpId);
            }
            if (AutoAttacked != false)
            {
                output.WriteRawTag(40);
                output.WriteBool(AutoAttacked);
            }
            if (MustAttack != false)
            {
                output.WriteRawTag(48);
                output.WriteBool(MustAttack);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += legalDamageRecipients_.CalculateSize(_repeated_legalDamageRecipients_codec);
            if (AttackerInstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttackerInstanceId);
            }
            if (selectedDamageRecipient_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectedDamageRecipient);
            }
            if (AlternativeGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AlternativeGrpId);
            }
            if (AutoAttacked != false)
            {
                size += 1 + 1;
            }
            if (MustAttack != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Attacker other)
        {
            if (other == null)
            {
                return;
            }
            legalDamageRecipients_.Add(other.legalDamageRecipients_);
            if (other.AttackerInstanceId != 0)
            {
                AttackerInstanceId = other.AttackerInstanceId;
            }
            if (other.selectedDamageRecipient_ != null)
            {
                if (selectedDamageRecipient_ == null)
                {
                    selectedDamageRecipient_ = new DamageRecipient();
                }
                SelectedDamageRecipient.MergeFrom(other.SelectedDamageRecipient);
            }
            if (other.AlternativeGrpId != 0)
            {
                AlternativeGrpId = other.AlternativeGrpId;
            }
            if (other.AutoAttacked != false)
            {
                AutoAttacked = other.AutoAttacked;
            }
            if (other.MustAttack != false)
            {
                MustAttack = other.MustAttack;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AttackerInstanceId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            legalDamageRecipients_.AddEntriesFrom(input, _repeated_legalDamageRecipients_codec);
                            break;
                        }
                    case 26:
                        {
                            if (selectedDamageRecipient_ == null)
                            {
                                selectedDamageRecipient_ = new DamageRecipient();
                            }
                            input.ReadMessage(selectedDamageRecipient_);
                            break;
                        }
                    case 32:
                        {
                            AlternativeGrpId = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            AutoAttacked = input.ReadBool();
                            break;
                        }
                    case 48:
                        {
                            MustAttack = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AuthenticateRequest : pb::IMessage<AuthenticateRequest>
    {
        private static readonly pb::MessageParser<AuthenticateRequest> _parser = new pb::MessageParser<AuthenticateRequest>(() => new AuthenticateRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuthenticateRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[30]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticateRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticateRequest(AuthenticateRequest other) : this()
        {
            clientId_ = other.clientId_;
            clientAuthToken_ = other.clientAuthToken_;
            playerName_ = other.playerName_;
            playFabSessionTicket_ = other.playFabSessionTicket_;
            clientInfo_ = other.clientInfo_ != null ? other.clientInfo_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticateRequest Clone()
        {
            return new AuthenticateRequest(this);
        }

        /// <summary>Field number for the "clientId" field.</summary>
        public const int ClientIdFieldNumber = 1;
        private string clientId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientId
        {
            get { return clientId_; }
            set
            {
                clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "clientAuthToken" field.</summary>
        public const int ClientAuthTokenFieldNumber = 2;
        private pb::ByteString clientAuthToken_ = pb::ByteString.Empty;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ClientAuthToken
        {
            get { return clientAuthToken_; }
            set
            {
                clientAuthToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "playerName" field.</summary>
        public const int PlayerNameFieldNumber = 3;
        private string playerName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerName
        {
            get { return playerName_; }
            set
            {
                playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "playFabSessionTicket" field.</summary>
        public const int PlayFabSessionTicketFieldNumber = 4;
        private string playFabSessionTicket_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayFabSessionTicket
        {
            get { return playFabSessionTicket_; }
            set
            {
                playFabSessionTicket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "clientInfo" field.</summary>
        public const int ClientInfoFieldNumber = 10;
        private ClientInfo clientInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientInfo ClientInfo
        {
            get { return clientInfo_; }
            set
            {
                clientInfo_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AuthenticateRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AuthenticateRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ClientId != other.ClientId) return false;
            if (ClientAuthToken != other.ClientAuthToken) return false;
            if (PlayerName != other.PlayerName) return false;
            if (PlayFabSessionTicket != other.PlayFabSessionTicket) return false;
            if (!object.Equals(ClientInfo, other.ClientInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
            if (ClientAuthToken.Length != 0) hash ^= ClientAuthToken.GetHashCode();
            if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
            if (PlayFabSessionTicket.Length != 0) hash ^= PlayFabSessionTicket.GetHashCode();
            if (clientInfo_ != null) hash ^= ClientInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ClientId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ClientId);
            }
            if (ClientAuthToken.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(ClientAuthToken);
            }
            if (PlayerName.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(PlayerName);
            }
            if (PlayFabSessionTicket.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(PlayFabSessionTicket);
            }
            if (clientInfo_ != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(ClientInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ClientId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
            }
            if (ClientAuthToken.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientAuthToken);
            }
            if (PlayerName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
            }
            if (PlayFabSessionTicket.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayFabSessionTicket);
            }
            if (clientInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AuthenticateRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ClientId.Length != 0)
            {
                ClientId = other.ClientId;
            }
            if (other.ClientAuthToken.Length != 0)
            {
                ClientAuthToken = other.ClientAuthToken;
            }
            if (other.PlayerName.Length != 0)
            {
                PlayerName = other.PlayerName;
            }
            if (other.PlayFabSessionTicket.Length != 0)
            {
                PlayFabSessionTicket = other.PlayFabSessionTicket;
            }
            if (other.clientInfo_ != null)
            {
                if (clientInfo_ == null)
                {
                    clientInfo_ = new ClientInfo();
                }
                ClientInfo.MergeFrom(other.ClientInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ClientId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            ClientAuthToken = input.ReadBytes();
                            break;
                        }
                    case 26:
                        {
                            PlayerName = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            PlayFabSessionTicket = input.ReadString();
                            break;
                        }
                    case 82:
                        {
                            if (clientInfo_ == null)
                            {
                                clientInfo_ = new ClientInfo();
                            }
                            input.ReadMessage(clientInfo_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AuthenticateResponse : pb::IMessage<AuthenticateResponse>
    {
        private static readonly pb::MessageParser<AuthenticateResponse> _parser = new pb::MessageParser<AuthenticateResponse>(() => new AuthenticateResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuthenticateResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[31]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticateResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticateResponse(AuthenticateResponse other) : this()
        {
            clientId_ = other.clientId_;
            sessionId_ = other.sessionId_;
            screenName_ = other.screenName_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticateResponse Clone()
        {
            return new AuthenticateResponse(this);
        }

        /// <summary>Field number for the "clientId" field.</summary>
        public const int ClientIdFieldNumber = 1;
        private string clientId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientId
        {
            get { return clientId_; }
            set
            {
                clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "sessionId" field.</summary>
        public const int SessionIdFieldNumber = 2;
        private string sessionId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SessionId
        {
            get { return sessionId_; }
            set
            {
                sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "screenName" field.</summary>
        public const int ScreenNameFieldNumber = 10;
        private string screenName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ScreenName
        {
            get { return screenName_; }
            set
            {
                screenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AuthenticateResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AuthenticateResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ClientId != other.ClientId) return false;
            if (SessionId != other.SessionId) return false;
            if (ScreenName != other.ScreenName) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
            if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
            if (ScreenName.Length != 0) hash ^= ScreenName.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ClientId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ClientId);
            }
            if (SessionId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(SessionId);
            }
            if (ScreenName.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteString(ScreenName);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ClientId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
            }
            if (SessionId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
            }
            if (ScreenName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ScreenName);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AuthenticateResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ClientId.Length != 0)
            {
                ClientId = other.ClientId;
            }
            if (other.SessionId.Length != 0)
            {
                SessionId = other.SessionId;
            }
            if (other.ScreenName.Length != 0)
            {
                ScreenName = other.ScreenName;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ClientId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            SessionId = input.ReadString();
                            break;
                        }
                    case 82:
                        {
                            ScreenName = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AutoAnswer : pb::IMessage<AutoAnswer>
    {
        private static readonly pb::MessageParser<AutoAnswer> _parser = new pb::MessageParser<AutoAnswer>(() => new AutoAnswer());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AutoAnswer> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[32]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoAnswer()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoAnswer(AutoAnswer other) : this()
        {
            promptGrpId_ = other.promptGrpId_;
            abilityGrpId_ = other.abilityGrpId_;
            cardTitleId_ = other.cardTitleId_;
            appliesTo_ = other.appliesTo_;
            status_ = other.status_;
            answer_ = other.answer_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoAnswer Clone()
        {
            return new AutoAnswer(this);
        }

        /// <summary>Field number for the "promptGrpId" field.</summary>
        public const int PromptGrpIdFieldNumber = 1;
        private uint promptGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PromptGrpId
        {
            get { return promptGrpId_; }
            set
            {
                promptGrpId_ = value;
            }
        }

        /// <summary>Field number for the "abilityGrpId" field.</summary>
        public const int AbilityGrpIdFieldNumber = 2;
        private uint abilityGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityGrpId
        {
            get { return abilityGrpId_; }
            set
            {
                abilityGrpId_ = value;
            }
        }

        /// <summary>Field number for the "cardTitleId" field.</summary>
        public const int CardTitleIdFieldNumber = 3;
        private uint cardTitleId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CardTitleId
        {
            get { return cardTitleId_; }
            set
            {
                cardTitleId_ = value;
            }
        }

        /// <summary>Field number for the "appliesTo" field.</summary>
        public const int AppliesToFieldNumber = 4;
        private SettingScope appliesTo_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingScope AppliesTo
        {
            get { return appliesTo_; }
            set
            {
                appliesTo_ = value;
            }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 5;
        private SettingStatus status_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingStatus Status
        {
            get { return status_; }
            set
            {
                status_ = value;
            }
        }

        /// <summary>Field number for the "answer" field.</summary>
        public const int AnswerFieldNumber = 6;
        private Answer answer_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Answer Answer
        {
            get { return answer_; }
            set
            {
                answer_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AutoAnswer);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AutoAnswer other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PromptGrpId != other.PromptGrpId) return false;
            if (AbilityGrpId != other.AbilityGrpId) return false;
            if (CardTitleId != other.CardTitleId) return false;
            if (AppliesTo != other.AppliesTo) return false;
            if (Status != other.Status) return false;
            if (Answer != other.Answer) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (PromptGrpId != 0) hash ^= PromptGrpId.GetHashCode();
            if (AbilityGrpId != 0) hash ^= AbilityGrpId.GetHashCode();
            if (CardTitleId != 0) hash ^= CardTitleId.GetHashCode();
            if (AppliesTo != 0) hash ^= AppliesTo.GetHashCode();
            if (Status != 0) hash ^= Status.GetHashCode();
            if (Answer != 0) hash ^= Answer.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PromptGrpId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(PromptGrpId);
            }
            if (AbilityGrpId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(AbilityGrpId);
            }
            if (CardTitleId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(CardTitleId);
            }
            if (AppliesTo != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)AppliesTo);
            }
            if (Status != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)Status);
            }
            if (Answer != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)Answer);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (PromptGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PromptGrpId);
            }
            if (AbilityGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityGrpId);
            }
            if (CardTitleId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardTitleId);
            }
            if (AppliesTo != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AppliesTo);
            }
            if (Status != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Status);
            }
            if (Answer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Answer);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AutoAnswer other)
        {
            if (other == null)
            {
                return;
            }
            if (other.PromptGrpId != 0)
            {
                PromptGrpId = other.PromptGrpId;
            }
            if (other.AbilityGrpId != 0)
            {
                AbilityGrpId = other.AbilityGrpId;
            }
            if (other.CardTitleId != 0)
            {
                CardTitleId = other.CardTitleId;
            }
            if (other.AppliesTo != 0)
            {
                AppliesTo = other.AppliesTo;
            }
            if (other.Status != 0)
            {
                Status = other.Status;
            }
            if (other.Answer != 0)
            {
                Answer = other.Answer;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            PromptGrpId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            AbilityGrpId = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            CardTitleId = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            appliesTo_ = (SettingScope)input.ReadEnum();
                            break;
                        }
                    case 40:
                        {
                            status_ = (SettingStatus)input.ReadEnum();
                            break;
                        }
                    case 48:
                        {
                            answer_ = (Answer)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AutoTapAction : pb::IMessage<AutoTapAction>
    {
        private static readonly pb::MessageParser<AutoTapAction> _parser = new pb::MessageParser<AutoTapAction>(() => new AutoTapAction());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AutoTapAction> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[33]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoTapAction()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoTapAction(AutoTapAction other) : this()
        {
            instanceId_ = other.instanceId_;
            abilityGrpId_ = other.abilityGrpId_;
            manaId_ = other.manaId_;
            manaPaymentOption_ = other.manaPaymentOption_ != null ? other.manaPaymentOption_.Clone() : null;
            costCategory_ = other.costCategory_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoTapAction Clone()
        {
            return new AutoTapAction(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "abilityGrpId" field.</summary>
        public const int AbilityGrpIdFieldNumber = 2;
        private uint abilityGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityGrpId
        {
            get { return abilityGrpId_; }
            set
            {
                abilityGrpId_ = value;
            }
        }

        /// <summary>Field number for the "manaId" field.</summary>
        public const int ManaIdFieldNumber = 3;
        private uint manaId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ManaId
        {
            get { return manaId_; }
            set
            {
                manaId_ = value;
            }
        }

        /// <summary>Field number for the "manaPaymentOption" field.</summary>
        public const int ManaPaymentOptionFieldNumber = 4;
        private ManaPaymentOption manaPaymentOption_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaPaymentOption ManaPaymentOption
        {
            get { return manaPaymentOption_; }
            set
            {
                manaPaymentOption_ = value;
            }
        }

        /// <summary>Field number for the "costCategory" field.</summary>
        public const int CostCategoryFieldNumber = 5;
        private CostCategory costCategory_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CostCategory CostCategory
        {
            get { return costCategory_; }
            set
            {
                costCategory_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AutoTapAction);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AutoTapAction other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            if (AbilityGrpId != other.AbilityGrpId) return false;
            if (ManaId != other.ManaId) return false;
            if (!object.Equals(ManaPaymentOption, other.ManaPaymentOption)) return false;
            if (CostCategory != other.CostCategory) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (AbilityGrpId != 0) hash ^= AbilityGrpId.GetHashCode();
            if (ManaId != 0) hash ^= ManaId.GetHashCode();
            if (manaPaymentOption_ != null) hash ^= ManaPaymentOption.GetHashCode();
            if (CostCategory != 0) hash ^= CostCategory.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(InstanceId);
            }
            if (AbilityGrpId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(AbilityGrpId);
            }
            if (ManaId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(ManaId);
            }
            if (manaPaymentOption_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(ManaPaymentOption);
            }
            if (CostCategory != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)CostCategory);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (AbilityGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityGrpId);
            }
            if (ManaId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManaId);
            }
            if (manaPaymentOption_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ManaPaymentOption);
            }
            if (CostCategory != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CostCategory);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AutoTapAction other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.AbilityGrpId != 0)
            {
                AbilityGrpId = other.AbilityGrpId;
            }
            if (other.ManaId != 0)
            {
                ManaId = other.ManaId;
            }
            if (other.manaPaymentOption_ != null)
            {
                if (manaPaymentOption_ == null)
                {
                    manaPaymentOption_ = new ManaPaymentOption();
                }
                ManaPaymentOption.MergeFrom(other.ManaPaymentOption);
            }
            if (other.CostCategory != 0)
            {
                CostCategory = other.CostCategory;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            AbilityGrpId = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            ManaId = input.ReadUInt32();
                            break;
                        }
                    case 34:
                        {
                            if (manaPaymentOption_ == null)
                            {
                                manaPaymentOption_ = new ManaPaymentOption();
                            }
                            input.ReadMessage(manaPaymentOption_);
                            break;
                        }
                    case 40:
                        {
                            costCategory_ = (CostCategory)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AutoYield : pb::IMessage<AutoYield>
    {
        private static readonly pb::MessageParser<AutoYield> _parser = new pb::MessageParser<AutoYield>(() => new AutoYield());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AutoYield> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[34]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoYield()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoYield(AutoYield other) : this()
        {
            abilityGrpId_ = other.abilityGrpId_;
            cardTitleId_ = other.cardTitleId_;
            appliesTo_ = other.appliesTo_;
            status_ = other.status_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoYield Clone()
        {
            return new AutoYield(this);
        }

        /// <summary>Field number for the "abilityGrpId" field.</summary>
        public const int AbilityGrpIdFieldNumber = 1;
        private uint abilityGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityGrpId
        {
            get { return abilityGrpId_; }
            set
            {
                abilityGrpId_ = value;
            }
        }

        /// <summary>Field number for the "cardTitleId" field.</summary>
        public const int CardTitleIdFieldNumber = 2;
        private uint cardTitleId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CardTitleId
        {
            get { return cardTitleId_; }
            set
            {
                cardTitleId_ = value;
            }
        }

        /// <summary>Field number for the "appliesTo" field.</summary>
        public const int AppliesToFieldNumber = 3;
        private SettingScope appliesTo_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingScope AppliesTo
        {
            get { return appliesTo_; }
            set
            {
                appliesTo_ = value;
            }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 4;
        private SettingStatus status_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingStatus Status
        {
            get { return status_; }
            set
            {
                status_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AutoYield);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AutoYield other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AbilityGrpId != other.AbilityGrpId) return false;
            if (CardTitleId != other.CardTitleId) return false;
            if (AppliesTo != other.AppliesTo) return false;
            if (Status != other.Status) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (AbilityGrpId != 0) hash ^= AbilityGrpId.GetHashCode();
            if (CardTitleId != 0) hash ^= CardTitleId.GetHashCode();
            if (AppliesTo != 0) hash ^= AppliesTo.GetHashCode();
            if (Status != 0) hash ^= Status.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AbilityGrpId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AbilityGrpId);
            }
            if (CardTitleId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(CardTitleId);
            }
            if (AppliesTo != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)AppliesTo);
            }
            if (Status != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)Status);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (AbilityGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityGrpId);
            }
            if (CardTitleId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardTitleId);
            }
            if (AppliesTo != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AppliesTo);
            }
            if (Status != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Status);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AutoYield other)
        {
            if (other == null)
            {
                return;
            }
            if (other.AbilityGrpId != 0)
            {
                AbilityGrpId = other.AbilityGrpId;
            }
            if (other.CardTitleId != 0)
            {
                CardTitleId = other.CardTitleId;
            }
            if (other.AppliesTo != 0)
            {
                AppliesTo = other.AppliesTo;
            }
            if (other.Status != 0)
            {
                Status = other.Status;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AbilityGrpId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            CardTitleId = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            appliesTo_ = (SettingScope)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            status_ = (SettingStatus)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class BehaviorTree : pb::IMessage<BehaviorTree>
    {
        private static readonly pb::MessageParser<BehaviorTree> _parser = new pb::MessageParser<BehaviorTree>(() => new BehaviorTree());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BehaviorTree> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[35]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BehaviorTree()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BehaviorTree(BehaviorTree other) : this()
        {
            root_ = other.root_ != null ? other.root_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BehaviorTree Clone()
        {
            return new BehaviorTree(this);
        }

        /// <summary>Field number for the "root" field.</summary>
        public const int RootFieldNumber = 1;
        private Node root_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Node Root
        {
            get { return root_; }
            set
            {
                root_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BehaviorTree);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BehaviorTree other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Root, other.Root)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (root_ != null) hash ^= Root.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (root_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Root);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (root_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Root);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BehaviorTree other)
        {
            if (other == null)
            {
                return;
            }
            if (other.root_ != null)
            {
                if (root_ == null)
                {
                    root_ = new Node();
                }
                Root.MergeFrom(other.Root);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (root_ == null)
                            {
                                root_ = new Node();
                            }
                            input.ReadMessage(root_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class BinaryGameState : pb::IMessage<BinaryGameState>
    {
        private static readonly pb::MessageParser<BinaryGameState> _parser = new pb::MessageParser<BinaryGameState>(() => new BinaryGameState());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BinaryGameState> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[36]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BinaryGameState()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BinaryGameState(BinaryGameState other) : this()
        {
            instanceData_ = other.instanceData_;
            clientActions_ = other.clientActions_.Clone();
            internalGREData_ = other.internalGREData_;
            gameStateMsg_ = other.gameStateMsg_ != null ? other.gameStateMsg_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BinaryGameState Clone()
        {
            return new BinaryGameState(this);
        }

        /// <summary>Field number for the "instanceData" field.</summary>
        public const int InstanceDataFieldNumber = 2;
        private pb::ByteString instanceData_ = pb::ByteString.Empty;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString InstanceData
        {
            get { return instanceData_; }
            set
            {
                instanceData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "clientActions" field.</summary>
        public const int ClientActionsFieldNumber = 3;
        private static readonly pb::FieldCodec<ClientToGREMessage> _repeated_clientActions_codec
            = pb::FieldCodec.ForMessage(26, ClientToGREMessage.Parser);
        private readonly pbc::RepeatedField<ClientToGREMessage> clientActions_ = new pbc::RepeatedField<ClientToGREMessage>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ClientToGREMessage> ClientActions
        {
            get { return clientActions_; }
        }

        /// <summary>Field number for the "internalGREData" field.</summary>
        public const int InternalGREDataFieldNumber = 4;
        private pb::ByteString internalGREData_ = pb::ByteString.Empty;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString InternalGREData
        {
            get { return internalGREData_; }
            set
            {
                internalGREData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "gameStateMsg" field.</summary>
        public const int GameStateMsgFieldNumber = 1;
        private GameStateMessage gameStateMsg_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameStateMessage GameStateMsg
        {
            get { return gameStateMsg_; }
            set
            {
                gameStateMsg_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BinaryGameState);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BinaryGameState other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceData != other.InstanceData) return false;
            if (!clientActions_.Equals(other.clientActions_)) return false;
            if (InternalGREData != other.InternalGREData) return false;
            if (!object.Equals(GameStateMsg, other.GameStateMsg)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceData.Length != 0) hash ^= InstanceData.GetHashCode();
            hash ^= clientActions_.GetHashCode();
            if (InternalGREData.Length != 0) hash ^= InternalGREData.GetHashCode();
            if (gameStateMsg_ != null) hash ^= GameStateMsg.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (gameStateMsg_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(GameStateMsg);
            }
            if (InstanceData.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(InstanceData);
            }
            clientActions_.WriteTo(output, _repeated_clientActions_codec);
            if (InternalGREData.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteBytes(InternalGREData);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceData.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(InstanceData);
            }
            size += clientActions_.CalculateSize(_repeated_clientActions_codec);
            if (InternalGREData.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(InternalGREData);
            }
            if (gameStateMsg_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameStateMsg);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BinaryGameState other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceData.Length != 0)
            {
                InstanceData = other.InstanceData;
            }
            clientActions_.Add(other.clientActions_);
            if (other.InternalGREData.Length != 0)
            {
                InternalGREData = other.InternalGREData;
            }
            if (other.gameStateMsg_ != null)
            {
                if (gameStateMsg_ == null)
                {
                    gameStateMsg_ = new GameStateMessage();
                }
                GameStateMsg.MergeFrom(other.GameStateMsg);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (gameStateMsg_ == null)
                            {
                                gameStateMsg_ = new GameStateMessage();
                            }
                            input.ReadMessage(gameStateMsg_);
                            break;
                        }
                    case 18:
                        {
                            InstanceData = input.ReadBytes();
                            break;
                        }
                    case 26:
                        {
                            clientActions_.AddEntriesFrom(input, _repeated_clientActions_codec);
                            break;
                        }
                    case 34:
                        {
                            InternalGREData = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class BlockInfo : pb::IMessage<BlockInfo>
    {
        private static readonly pb::MessageParser<BlockInfo> _parser = new pb::MessageParser<BlockInfo>(() => new BlockInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BlockInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[37]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockInfo(BlockInfo other) : this()
        {
            attackerIds_ = other.attackerIds_.Clone();
            orderedAttackers_ = other.orderedAttackers_.Clone();
            damageOrdered_ = other.damageOrdered_;
            damageAssigned_ = other.damageAssigned_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockInfo Clone()
        {
            return new BlockInfo(this);
        }

        /// <summary>Field number for the "attackerIds" field.</summary>
        public const int AttackerIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_attackerIds_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> attackerIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> AttackerIds
        {
            get { return attackerIds_; }
        }

        /// <summary>Field number for the "orderedAttackers" field.</summary>
        public const int OrderedAttackersFieldNumber = 4;
        private static readonly pb::FieldCodec<OrderedDamageAssignment> _repeated_orderedAttackers_codec
            = pb::FieldCodec.ForMessage(34, OrderedDamageAssignment.Parser);
        private readonly pbc::RepeatedField<OrderedDamageAssignment> orderedAttackers_ = new pbc::RepeatedField<OrderedDamageAssignment>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<OrderedDamageAssignment> OrderedAttackers
        {
            get { return orderedAttackers_; }
        }

        /// <summary>Field number for the "damageOrdered" field.</summary>
        public const int DamageOrderedFieldNumber = 2;
        private bool damageOrdered_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DamageOrdered
        {
            get { return damageOrdered_; }
            set
            {
                damageOrdered_ = value;
            }
        }

        /// <summary>Field number for the "damageAssigned" field.</summary>
        public const int DamageAssignedFieldNumber = 3;
        private bool damageAssigned_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DamageAssigned
        {
            get { return damageAssigned_; }
            set
            {
                damageAssigned_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BlockInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BlockInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!attackerIds_.Equals(other.attackerIds_)) return false;
            if (!orderedAttackers_.Equals(other.orderedAttackers_)) return false;
            if (DamageOrdered != other.DamageOrdered) return false;
            if (DamageAssigned != other.DamageAssigned) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= attackerIds_.GetHashCode();
            hash ^= orderedAttackers_.GetHashCode();
            if (DamageOrdered != false) hash ^= DamageOrdered.GetHashCode();
            if (DamageAssigned != false) hash ^= DamageAssigned.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            attackerIds_.WriteTo(output, _repeated_attackerIds_codec);
            if (DamageOrdered != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(DamageOrdered);
            }
            if (DamageAssigned != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(DamageAssigned);
            }
            orderedAttackers_.WriteTo(output, _repeated_orderedAttackers_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += attackerIds_.CalculateSize(_repeated_attackerIds_codec);
            size += orderedAttackers_.CalculateSize(_repeated_orderedAttackers_codec);
            if (DamageOrdered != false)
            {
                size += 1 + 1;
            }
            if (DamageAssigned != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BlockInfo other)
        {
            if (other == null)
            {
                return;
            }
            attackerIds_.Add(other.attackerIds_);
            orderedAttackers_.Add(other.orderedAttackers_);
            if (other.DamageOrdered != false)
            {
                DamageOrdered = other.DamageOrdered;
            }
            if (other.DamageAssigned != false)
            {
                DamageAssigned = other.DamageAssigned;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                        {
                            attackerIds_.AddEntriesFrom(input, _repeated_attackerIds_codec);
                            break;
                        }
                    case 16:
                        {
                            DamageOrdered = input.ReadBool();
                            break;
                        }
                    case 24:
                        {
                            DamageAssigned = input.ReadBool();
                            break;
                        }
                    case 34:
                        {
                            orderedAttackers_.AddEntriesFrom(input, _repeated_orderedAttackers_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class BlockWarning : pb::IMessage<BlockWarning>
    {
        private static readonly pb::MessageParser<BlockWarning> _parser = new pb::MessageParser<BlockWarning>(() => new BlockWarning());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BlockWarning> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[38]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockWarning()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockWarning(BlockWarning other) : this()
        {
            instanceId_ = other.instanceId_;
            type_ = other.type_;
            warningPromptId_ = other.warningPromptId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockWarning Clone()
        {
            return new BlockWarning(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private BlockWarningType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockWarningType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "warningPromptId" field.</summary>
        public const int WarningPromptIdFieldNumber = 3;
        private uint warningPromptId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WarningPromptId
        {
            get { return warningPromptId_; }
            set
            {
                warningPromptId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BlockWarning);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BlockWarning other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            if (Type != other.Type) return false;
            if (WarningPromptId != other.WarningPromptId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (WarningPromptId != 0) hash ^= WarningPromptId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(InstanceId);
            }
            if (Type != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Type);
            }
            if (WarningPromptId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(WarningPromptId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (WarningPromptId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WarningPromptId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BlockWarning other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.WarningPromptId != 0)
            {
                WarningPromptId = other.WarningPromptId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            type_ = (BlockWarningType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            WarningPromptId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Blocker : pb::IMessage<Blocker>
    {
        private static readonly pb::MessageParser<Blocker> _parser = new pb::MessageParser<Blocker>(() => new Blocker());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Blocker> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[39]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Blocker()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Blocker(Blocker other) : this()
        {
            attackerInstanceIds_ = other.attackerInstanceIds_.Clone();
            selectedAttackerInstanceIds_ = other.selectedAttackerInstanceIds_.Clone();
            blockerInstanceId_ = other.blockerInstanceId_;
            minAttackers_ = other.minAttackers_;
            maxAttackers_ = other.maxAttackers_;
            mustBlock_ = other.mustBlock_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Blocker Clone()
        {
            return new Blocker(this);
        }

        /// <summary>Field number for the "attackerInstanceIds" field.</summary>
        public const int AttackerInstanceIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_attackerInstanceIds_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> attackerInstanceIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> AttackerInstanceIds
        {
            get { return attackerInstanceIds_; }
        }

        /// <summary>Field number for the "selectedAttackerInstanceIds" field.</summary>
        public const int SelectedAttackerInstanceIdsFieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_selectedAttackerInstanceIds_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> selectedAttackerInstanceIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> SelectedAttackerInstanceIds
        {
            get { return selectedAttackerInstanceIds_; }
        }

        /// <summary>Field number for the "blockerInstanceId" field.</summary>
        public const int BlockerInstanceIdFieldNumber = 1;
        private uint blockerInstanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BlockerInstanceId
        {
            get { return blockerInstanceId_; }
            set
            {
                blockerInstanceId_ = value;
            }
        }

        /// <summary>Field number for the "minAttackers" field.</summary>
        public const int MinAttackersFieldNumber = 4;
        private uint minAttackers_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinAttackers
        {
            get { return minAttackers_; }
            set
            {
                minAttackers_ = value;
            }
        }

        /// <summary>Field number for the "maxAttackers" field.</summary>
        public const int MaxAttackersFieldNumber = 5;
        private uint maxAttackers_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxAttackers
        {
            get { return maxAttackers_; }
            set
            {
                maxAttackers_ = value;
            }
        }

        /// <summary>Field number for the "mustBlock" field.</summary>
        public const int MustBlockFieldNumber = 6;
        private bool mustBlock_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool MustBlock
        {
            get { return mustBlock_; }
            set
            {
                mustBlock_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Blocker);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Blocker other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!attackerInstanceIds_.Equals(other.attackerInstanceIds_)) return false;
            if (!selectedAttackerInstanceIds_.Equals(other.selectedAttackerInstanceIds_)) return false;
            if (BlockerInstanceId != other.BlockerInstanceId) return false;
            if (MinAttackers != other.MinAttackers) return false;
            if (MaxAttackers != other.MaxAttackers) return false;
            if (MustBlock != other.MustBlock) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= attackerInstanceIds_.GetHashCode();
            hash ^= selectedAttackerInstanceIds_.GetHashCode();
            if (BlockerInstanceId != 0) hash ^= BlockerInstanceId.GetHashCode();
            if (MinAttackers != 0) hash ^= MinAttackers.GetHashCode();
            if (MaxAttackers != 0) hash ^= MaxAttackers.GetHashCode();
            if (MustBlock != false) hash ^= MustBlock.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (BlockerInstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(BlockerInstanceId);
            }
            attackerInstanceIds_.WriteTo(output, _repeated_attackerInstanceIds_codec);
            selectedAttackerInstanceIds_.WriteTo(output, _repeated_selectedAttackerInstanceIds_codec);
            if (MinAttackers != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(MinAttackers);
            }
            if (MaxAttackers != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(MaxAttackers);
            }
            if (MustBlock != false)
            {
                output.WriteRawTag(48);
                output.WriteBool(MustBlock);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += attackerInstanceIds_.CalculateSize(_repeated_attackerInstanceIds_codec);
            size += selectedAttackerInstanceIds_.CalculateSize(_repeated_selectedAttackerInstanceIds_codec);
            if (BlockerInstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BlockerInstanceId);
            }
            if (MinAttackers != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinAttackers);
            }
            if (MaxAttackers != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxAttackers);
            }
            if (MustBlock != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Blocker other)
        {
            if (other == null)
            {
                return;
            }
            attackerInstanceIds_.Add(other.attackerInstanceIds_);
            selectedAttackerInstanceIds_.Add(other.selectedAttackerInstanceIds_);
            if (other.BlockerInstanceId != 0)
            {
                BlockerInstanceId = other.BlockerInstanceId;
            }
            if (other.MinAttackers != 0)
            {
                MinAttackers = other.MinAttackers;
            }
            if (other.MaxAttackers != 0)
            {
                MaxAttackers = other.MaxAttackers;
            }
            if (other.MustBlock != false)
            {
                MustBlock = other.MustBlock;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            BlockerInstanceId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            attackerInstanceIds_.AddEntriesFrom(input, _repeated_attackerInstanceIds_codec);
                            break;
                        }
                    case 26:
                    case 24:
                        {
                            selectedAttackerInstanceIds_.AddEntriesFrom(input, _repeated_selectedAttackerInstanceIds_codec);
                            break;
                        }
                    case 32:
                        {
                            MinAttackers = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            MaxAttackers = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            MustBlock = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CLIPSConfiguration : pb::IMessage<CLIPSConfiguration>
    {
        private static readonly pb::MessageParser<CLIPSConfiguration> _parser = new pb::MessageParser<CLIPSConfiguration>(() => new CLIPSConfiguration());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CLIPSConfiguration> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[40]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CLIPSConfiguration()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CLIPSConfiguration(CLIPSConfiguration other) : this()
        {
            initFile_ = other.initFile_;
            metricsFile_ = other.metricsFile_;
            logFile_ = other.logFile_;
            enableWatch_ = other.enableWatch_;
            enableMetrics_ = other.enableMetrics_;
            enableLogging_ = other.enableLogging_;
            maxFiringLimit_ = other.maxFiringLimit_;
            warningFiringLimit_ = other.warningFiringLimit_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CLIPSConfiguration Clone()
        {
            return new CLIPSConfiguration(this);
        }

        /// <summary>Field number for the "initFile" field.</summary>
        public const int InitFileFieldNumber = 4;
        private string initFile_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string InitFile
        {
            get { return initFile_; }
            set
            {
                initFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "metricsFile" field.</summary>
        public const int MetricsFileFieldNumber = 7;
        private string metricsFile_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MetricsFile
        {
            get { return metricsFile_; }
            set
            {
                metricsFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "logFile" field.</summary>
        public const int LogFileFieldNumber = 8;
        private string logFile_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LogFile
        {
            get { return logFile_; }
            set
            {
                logFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "enableWatch" field.</summary>
        public const int EnableWatchFieldNumber = 1;
        private bool enableWatch_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EnableWatch
        {
            get { return enableWatch_; }
            set
            {
                enableWatch_ = value;
            }
        }

        /// <summary>Field number for the "enableMetrics" field.</summary>
        public const int EnableMetricsFieldNumber = 2;
        private bool enableMetrics_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EnableMetrics
        {
            get { return enableMetrics_; }
            set
            {
                enableMetrics_ = value;
            }
        }

        /// <summary>Field number for the "enableLogging" field.</summary>
        public const int EnableLoggingFieldNumber = 3;
        private bool enableLogging_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EnableLogging
        {
            get { return enableLogging_; }
            set
            {
                enableLogging_ = value;
            }
        }

        /// <summary>Field number for the "maxFiringLimit" field.</summary>
        public const int MaxFiringLimitFieldNumber = 5;
        private int maxFiringLimit_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxFiringLimit
        {
            get { return maxFiringLimit_; }
            set
            {
                maxFiringLimit_ = value;
            }
        }

        /// <summary>Field number for the "warningFiringLimit" field.</summary>
        public const int WarningFiringLimitFieldNumber = 6;
        private int warningFiringLimit_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WarningFiringLimit
        {
            get { return warningFiringLimit_; }
            set
            {
                warningFiringLimit_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CLIPSConfiguration);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CLIPSConfiguration other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InitFile != other.InitFile) return false;
            if (MetricsFile != other.MetricsFile) return false;
            if (LogFile != other.LogFile) return false;
            if (EnableWatch != other.EnableWatch) return false;
            if (EnableMetrics != other.EnableMetrics) return false;
            if (EnableLogging != other.EnableLogging) return false;
            if (MaxFiringLimit != other.MaxFiringLimit) return false;
            if (WarningFiringLimit != other.WarningFiringLimit) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InitFile.Length != 0) hash ^= InitFile.GetHashCode();
            if (MetricsFile.Length != 0) hash ^= MetricsFile.GetHashCode();
            if (LogFile.Length != 0) hash ^= LogFile.GetHashCode();
            if (EnableWatch != false) hash ^= EnableWatch.GetHashCode();
            if (EnableMetrics != false) hash ^= EnableMetrics.GetHashCode();
            if (EnableLogging != false) hash ^= EnableLogging.GetHashCode();
            if (MaxFiringLimit != 0) hash ^= MaxFiringLimit.GetHashCode();
            if (WarningFiringLimit != 0) hash ^= WarningFiringLimit.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EnableWatch != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(EnableWatch);
            }
            if (EnableMetrics != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(EnableMetrics);
            }
            if (EnableLogging != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(EnableLogging);
            }
            if (InitFile.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(InitFile);
            }
            if (MaxFiringLimit != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(MaxFiringLimit);
            }
            if (WarningFiringLimit != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(WarningFiringLimit);
            }
            if (MetricsFile.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(MetricsFile);
            }
            if (LogFile.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(LogFile);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InitFile.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(InitFile);
            }
            if (MetricsFile.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MetricsFile);
            }
            if (LogFile.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LogFile);
            }
            if (EnableWatch != false)
            {
                size += 1 + 1;
            }
            if (EnableMetrics != false)
            {
                size += 1 + 1;
            }
            if (EnableLogging != false)
            {
                size += 1 + 1;
            }
            if (MaxFiringLimit != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFiringLimit);
            }
            if (WarningFiringLimit != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarningFiringLimit);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CLIPSConfiguration other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InitFile.Length != 0)
            {
                InitFile = other.InitFile;
            }
            if (other.MetricsFile.Length != 0)
            {
                MetricsFile = other.MetricsFile;
            }
            if (other.LogFile.Length != 0)
            {
                LogFile = other.LogFile;
            }
            if (other.EnableWatch != false)
            {
                EnableWatch = other.EnableWatch;
            }
            if (other.EnableMetrics != false)
            {
                EnableMetrics = other.EnableMetrics;
            }
            if (other.EnableLogging != false)
            {
                EnableLogging = other.EnableLogging;
            }
            if (other.MaxFiringLimit != 0)
            {
                MaxFiringLimit = other.MaxFiringLimit;
            }
            if (other.WarningFiringLimit != 0)
            {
                WarningFiringLimit = other.WarningFiringLimit;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            EnableWatch = input.ReadBool();
                            break;
                        }
                    case 16:
                        {
                            EnableMetrics = input.ReadBool();
                            break;
                        }
                    case 24:
                        {
                            EnableLogging = input.ReadBool();
                            break;
                        }
                    case 34:
                        {
                            InitFile = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            MaxFiringLimit = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            WarningFiringLimit = input.ReadInt32();
                            break;
                        }
                    case 58:
                        {
                            MetricsFile = input.ReadString();
                            break;
                        }
                    case 66:
                        {
                            LogFile = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CancelActionReq : pb::IMessage<CancelActionReq>
    {
        private static readonly pb::MessageParser<CancelActionReq> _parser = new pb::MessageParser<CancelActionReq>(() => new CancelActionReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CancelActionReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[41]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CancelActionReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CancelActionReq(CancelActionReq other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CancelActionReq Clone()
        {
            return new CancelActionReq(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CancelActionReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CancelActionReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CancelActionReq other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class CastingTimeOptionReq : pb::IMessage<CastingTimeOptionReq>
    {
        private static readonly pb::MessageParser<CastingTimeOptionReq> _parser = new pb::MessageParser<CastingTimeOptionReq>(() => new CastingTimeOptionReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CastingTimeOptionReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[42]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionReq(CastingTimeOptionReq other) : this()
        {
            manaCost_ = other.manaCost_.Clone();
            autoTapActions_ = other.autoTapActions_.Clone();
            ctoId_ = other.ctoId_;
            castingTimeOptionType_ = other.castingTimeOptionType_;
            affectedId_ = other.affectedId_;
            affectorId_ = other.affectorId_;
            grpId_ = other.grpId_;
            playerIdToPrompt_ = other.playerIdToPrompt_;
            isRequired_ = other.isRequired_;
            prompt_ = other.prompt_ != null ? other.prompt_.Clone() : null;
            numericInputReq_ = other.numericInputReq_ != null ? other.numericInputReq_.Clone() : null;
            selectManaTypeReq_ = other.selectManaTypeReq_ != null ? other.selectManaTypeReq_.Clone() : null;
            modalReq_ = other.modalReq_ != null ? other.modalReq_.Clone() : null;
            selectNReq_ = other.selectNReq_ != null ? other.selectNReq_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionReq Clone()
        {
            return new CastingTimeOptionReq(this);
        }

        /// <summary>Field number for the "manaCost" field.</summary>
        public const int ManaCostFieldNumber = 13;
        private static readonly pb::FieldCodec<ManaRequirement> _repeated_manaCost_codec
            = pb::FieldCodec.ForMessage(106, ManaRequirement.Parser);
        private readonly pbc::RepeatedField<ManaRequirement> manaCost_ = new pbc::RepeatedField<ManaRequirement>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaRequirement> ManaCost
        {
            get { return manaCost_; }
        }

        /// <summary>Field number for the "autoTapActions" field.</summary>
        public const int AutoTapActionsFieldNumber = 14;
        private static readonly pb::FieldCodec<AutoTapAction> _repeated_autoTapActions_codec
            = pb::FieldCodec.ForMessage(114, AutoTapAction.Parser);
        private readonly pbc::RepeatedField<AutoTapAction> autoTapActions_ = new pbc::RepeatedField<AutoTapAction>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<AutoTapAction> AutoTapActions
        {
            get { return autoTapActions_; }
        }

        /// <summary>Field number for the "ctoId" field.</summary>
        public const int CtoIdFieldNumber = 1;
        private uint ctoId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CtoId
        {
            get { return ctoId_; }
            set
            {
                ctoId_ = value;
            }
        }

        /// <summary>Field number for the "castingTimeOptionType" field.</summary>
        public const int CastingTimeOptionTypeFieldNumber = 2;
        private CastingTimeOptionType castingTimeOptionType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionType CastingTimeOptionType
        {
            get { return castingTimeOptionType_; }
            set
            {
                castingTimeOptionType_ = value;
            }
        }

        /// <summary>Field number for the "affectedId" field.</summary>
        public const int AffectedIdFieldNumber = 3;
        private uint affectedId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AffectedId
        {
            get { return affectedId_; }
            set
            {
                affectedId_ = value;
            }
        }

        /// <summary>Field number for the "affectorId" field.</summary>
        public const int AffectorIdFieldNumber = 4;
        private uint affectorId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AffectorId
        {
            get { return affectorId_; }
            set
            {
                affectorId_ = value;
            }
        }

        /// <summary>Field number for the "grpId" field.</summary>
        public const int GrpIdFieldNumber = 5;
        private uint grpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GrpId
        {
            get { return grpId_; }
            set
            {
                grpId_ = value;
            }
        }

        /// <summary>Field number for the "playerIdToPrompt" field.</summary>
        public const int PlayerIdToPromptFieldNumber = 6;
        private uint playerIdToPrompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerIdToPrompt
        {
            get { return playerIdToPrompt_; }
            set
            {
                playerIdToPrompt_ = value;
            }
        }

        /// <summary>Field number for the "isRequired" field.</summary>
        public const int IsRequiredFieldNumber = 7;
        private bool isRequired_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsRequired
        {
            get { return isRequired_; }
            set
            {
                isRequired_ = value;
            }
        }

        /// <summary>Field number for the "prompt" field.</summary>
        public const int PromptFieldNumber = 8;
        private Prompt prompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt Prompt
        {
            get { return prompt_; }
            set
            {
                prompt_ = value;
            }
        }

        /// <summary>Field number for the "numericInputReq" field.</summary>
        public const int NumericInputReqFieldNumber = 9;
        private NumericInputReq numericInputReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericInputReq NumericInputReq
        {
            get { return numericInputReq_; }
            set
            {
                numericInputReq_ = value;
            }
        }

        /// <summary>Field number for the "selectManaTypeReq" field.</summary>
        public const int SelectManaTypeReqFieldNumber = 10;
        private SelectManaTypeReq selectManaTypeReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectManaTypeReq SelectManaTypeReq
        {
            get { return selectManaTypeReq_; }
            set
            {
                selectManaTypeReq_ = value;
            }
        }

        /// <summary>Field number for the "modalReq" field.</summary>
        public const int ModalReqFieldNumber = 11;
        private ModalReq modalReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModalReq ModalReq
        {
            get { return modalReq_; }
            set
            {
                modalReq_ = value;
            }
        }

        /// <summary>Field number for the "selectNReq" field.</summary>
        public const int SelectNReqFieldNumber = 12;
        private SelectNReq selectNReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNReq SelectNReq
        {
            get { return selectNReq_; }
            set
            {
                selectNReq_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CastingTimeOptionReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CastingTimeOptionReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!manaCost_.Equals(other.manaCost_)) return false;
            if (!autoTapActions_.Equals(other.autoTapActions_)) return false;
            if (CtoId != other.CtoId) return false;
            if (CastingTimeOptionType != other.CastingTimeOptionType) return false;
            if (AffectedId != other.AffectedId) return false;
            if (AffectorId != other.AffectorId) return false;
            if (GrpId != other.GrpId) return false;
            if (PlayerIdToPrompt != other.PlayerIdToPrompt) return false;
            if (IsRequired != other.IsRequired) return false;
            if (!object.Equals(Prompt, other.Prompt)) return false;
            if (!object.Equals(NumericInputReq, other.NumericInputReq)) return false;
            if (!object.Equals(SelectManaTypeReq, other.SelectManaTypeReq)) return false;
            if (!object.Equals(ModalReq, other.ModalReq)) return false;
            if (!object.Equals(SelectNReq, other.SelectNReq)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= manaCost_.GetHashCode();
            hash ^= autoTapActions_.GetHashCode();
            if (CtoId != 0) hash ^= CtoId.GetHashCode();
            if (CastingTimeOptionType != 0) hash ^= CastingTimeOptionType.GetHashCode();
            if (AffectedId != 0) hash ^= AffectedId.GetHashCode();
            if (AffectorId != 0) hash ^= AffectorId.GetHashCode();
            if (GrpId != 0) hash ^= GrpId.GetHashCode();
            if (PlayerIdToPrompt != 0) hash ^= PlayerIdToPrompt.GetHashCode();
            if (IsRequired != false) hash ^= IsRequired.GetHashCode();
            if (prompt_ != null) hash ^= Prompt.GetHashCode();
            if (numericInputReq_ != null) hash ^= NumericInputReq.GetHashCode();
            if (selectManaTypeReq_ != null) hash ^= SelectManaTypeReq.GetHashCode();
            if (modalReq_ != null) hash ^= ModalReq.GetHashCode();
            if (selectNReq_ != null) hash ^= SelectNReq.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CtoId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(CtoId);
            }
            if (CastingTimeOptionType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)CastingTimeOptionType);
            }
            if (AffectedId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(AffectedId);
            }
            if (AffectorId != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(AffectorId);
            }
            if (GrpId != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(GrpId);
            }
            if (PlayerIdToPrompt != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(PlayerIdToPrompt);
            }
            if (IsRequired != false)
            {
                output.WriteRawTag(56);
                output.WriteBool(IsRequired);
            }
            if (prompt_ != null)
            {
                output.WriteRawTag(66);
                output.WriteMessage(Prompt);
            }
            if (numericInputReq_ != null)
            {
                output.WriteRawTag(74);
                output.WriteMessage(NumericInputReq);
            }
            if (selectManaTypeReq_ != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(SelectManaTypeReq);
            }
            if (modalReq_ != null)
            {
                output.WriteRawTag(90);
                output.WriteMessage(ModalReq);
            }
            if (selectNReq_ != null)
            {
                output.WriteRawTag(98);
                output.WriteMessage(SelectNReq);
            }
            manaCost_.WriteTo(output, _repeated_manaCost_codec);
            autoTapActions_.WriteTo(output, _repeated_autoTapActions_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += manaCost_.CalculateSize(_repeated_manaCost_codec);
            size += autoTapActions_.CalculateSize(_repeated_autoTapActions_codec);
            if (CtoId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CtoId);
            }
            if (CastingTimeOptionType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CastingTimeOptionType);
            }
            if (AffectedId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AffectedId);
            }
            if (AffectorId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AffectorId);
            }
            if (GrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GrpId);
            }
            if (PlayerIdToPrompt != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerIdToPrompt);
            }
            if (IsRequired != false)
            {
                size += 1 + 1;
            }
            if (prompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prompt);
            }
            if (numericInputReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(NumericInputReq);
            }
            if (selectManaTypeReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectManaTypeReq);
            }
            if (modalReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModalReq);
            }
            if (selectNReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectNReq);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CastingTimeOptionReq other)
        {
            if (other == null)
            {
                return;
            }
            manaCost_.Add(other.manaCost_);
            autoTapActions_.Add(other.autoTapActions_);
            if (other.CtoId != 0)
            {
                CtoId = other.CtoId;
            }
            if (other.CastingTimeOptionType != 0)
            {
                CastingTimeOptionType = other.CastingTimeOptionType;
            }
            if (other.AffectedId != 0)
            {
                AffectedId = other.AffectedId;
            }
            if (other.AffectorId != 0)
            {
                AffectorId = other.AffectorId;
            }
            if (other.GrpId != 0)
            {
                GrpId = other.GrpId;
            }
            if (other.PlayerIdToPrompt != 0)
            {
                PlayerIdToPrompt = other.PlayerIdToPrompt;
            }
            if (other.IsRequired != false)
            {
                IsRequired = other.IsRequired;
            }
            if (other.prompt_ != null)
            {
                if (prompt_ == null)
                {
                    prompt_ = new Prompt();
                }
                Prompt.MergeFrom(other.Prompt);
            }
            if (other.numericInputReq_ != null)
            {
                if (numericInputReq_ == null)
                {
                    numericInputReq_ = new NumericInputReq();
                }
                NumericInputReq.MergeFrom(other.NumericInputReq);
            }
            if (other.selectManaTypeReq_ != null)
            {
                if (selectManaTypeReq_ == null)
                {
                    selectManaTypeReq_ = new SelectManaTypeReq();
                }
                SelectManaTypeReq.MergeFrom(other.SelectManaTypeReq);
            }
            if (other.modalReq_ != null)
            {
                if (modalReq_ == null)
                {
                    modalReq_ = new ModalReq();
                }
                ModalReq.MergeFrom(other.ModalReq);
            }
            if (other.selectNReq_ != null)
            {
                if (selectNReq_ == null)
                {
                    selectNReq_ = new SelectNReq();
                }
                SelectNReq.MergeFrom(other.SelectNReq);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            CtoId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            castingTimeOptionType_ = (CastingTimeOptionType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            AffectedId = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            AffectorId = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            GrpId = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            PlayerIdToPrompt = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            IsRequired = input.ReadBool();
                            break;
                        }
                    case 66:
                        {
                            if (prompt_ == null)
                            {
                                prompt_ = new Prompt();
                            }
                            input.ReadMessage(prompt_);
                            break;
                        }
                    case 74:
                        {
                            if (numericInputReq_ == null)
                            {
                                numericInputReq_ = new NumericInputReq();
                            }
                            input.ReadMessage(numericInputReq_);
                            break;
                        }
                    case 82:
                        {
                            if (selectManaTypeReq_ == null)
                            {
                                selectManaTypeReq_ = new SelectManaTypeReq();
                            }
                            input.ReadMessage(selectManaTypeReq_);
                            break;
                        }
                    case 90:
                        {
                            if (modalReq_ == null)
                            {
                                modalReq_ = new ModalReq();
                            }
                            input.ReadMessage(modalReq_);
                            break;
                        }
                    case 98:
                        {
                            if (selectNReq_ == null)
                            {
                                selectNReq_ = new SelectNReq();
                            }
                            input.ReadMessage(selectNReq_);
                            break;
                        }
                    case 106:
                        {
                            manaCost_.AddEntriesFrom(input, _repeated_manaCost_codec);
                            break;
                        }
                    case 114:
                        {
                            autoTapActions_.AddEntriesFrom(input, _repeated_autoTapActions_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CastingTimeOptionResp : pb::IMessage<CastingTimeOptionResp>
    {
        private static readonly pb::MessageParser<CastingTimeOptionResp> _parser = new pb::MessageParser<CastingTimeOptionResp>(() => new CastingTimeOptionResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CastingTimeOptionResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[43]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionResp(CastingTimeOptionResp other) : this()
        {
            ctoId_ = other.ctoId_;
            castingTimeOptionType_ = other.castingTimeOptionType_;
            numericInputResp_ = other.numericInputResp_ != null ? other.numericInputResp_.Clone() : null;
            selectManaTypeResp_ = other.selectManaTypeResp_ != null ? other.selectManaTypeResp_.Clone() : null;
            chooseModalResp_ = other.chooseModalResp_ != null ? other.chooseModalResp_.Clone() : null;
            selectNResp_ = other.selectNResp_ != null ? other.selectNResp_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionResp Clone()
        {
            return new CastingTimeOptionResp(this);
        }

        /// <summary>Field number for the "ctoId" field.</summary>
        public const int CtoIdFieldNumber = 1;
        private uint ctoId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CtoId
        {
            get { return ctoId_; }
            set
            {
                ctoId_ = value;
            }
        }

        /// <summary>Field number for the "castingTimeOptionType" field.</summary>
        public const int CastingTimeOptionTypeFieldNumber = 2;
        private CastingTimeOptionType castingTimeOptionType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionType CastingTimeOptionType
        {
            get { return castingTimeOptionType_; }
            set
            {
                castingTimeOptionType_ = value;
            }
        }

        /// <summary>Field number for the "numericInputResp" field.</summary>
        public const int NumericInputRespFieldNumber = 3;
        private NumericInputResp numericInputResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericInputResp NumericInputResp
        {
            get { return numericInputResp_; }
            set
            {
                numericInputResp_ = value;
            }
        }

        /// <summary>Field number for the "selectManaTypeResp" field.</summary>
        public const int SelectManaTypeRespFieldNumber = 4;
        private SelectManaTypeResp selectManaTypeResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectManaTypeResp SelectManaTypeResp
        {
            get { return selectManaTypeResp_; }
            set
            {
                selectManaTypeResp_ = value;
            }
        }

        /// <summary>Field number for the "chooseModalResp" field.</summary>
        public const int ChooseModalRespFieldNumber = 5;
        private ChooseModalResp chooseModalResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseModalResp ChooseModalResp
        {
            get { return chooseModalResp_; }
            set
            {
                chooseModalResp_ = value;
            }
        }

        /// <summary>Field number for the "selectNResp" field.</summary>
        public const int SelectNRespFieldNumber = 6;
        private SelectNResp selectNResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNResp SelectNResp
        {
            get { return selectNResp_; }
            set
            {
                selectNResp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CastingTimeOptionResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CastingTimeOptionResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (CtoId != other.CtoId) return false;
            if (CastingTimeOptionType != other.CastingTimeOptionType) return false;
            if (!object.Equals(NumericInputResp, other.NumericInputResp)) return false;
            if (!object.Equals(SelectManaTypeResp, other.SelectManaTypeResp)) return false;
            if (!object.Equals(ChooseModalResp, other.ChooseModalResp)) return false;
            if (!object.Equals(SelectNResp, other.SelectNResp)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (CtoId != 0) hash ^= CtoId.GetHashCode();
            if (CastingTimeOptionType != 0) hash ^= CastingTimeOptionType.GetHashCode();
            if (numericInputResp_ != null) hash ^= NumericInputResp.GetHashCode();
            if (selectManaTypeResp_ != null) hash ^= SelectManaTypeResp.GetHashCode();
            if (chooseModalResp_ != null) hash ^= ChooseModalResp.GetHashCode();
            if (selectNResp_ != null) hash ^= SelectNResp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CtoId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(CtoId);
            }
            if (CastingTimeOptionType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)CastingTimeOptionType);
            }
            if (numericInputResp_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(NumericInputResp);
            }
            if (selectManaTypeResp_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(SelectManaTypeResp);
            }
            if (chooseModalResp_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(ChooseModalResp);
            }
            if (selectNResp_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(SelectNResp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (CtoId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CtoId);
            }
            if (CastingTimeOptionType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CastingTimeOptionType);
            }
            if (numericInputResp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(NumericInputResp);
            }
            if (selectManaTypeResp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectManaTypeResp);
            }
            if (chooseModalResp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChooseModalResp);
            }
            if (selectNResp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectNResp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CastingTimeOptionResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CtoId != 0)
            {
                CtoId = other.CtoId;
            }
            if (other.CastingTimeOptionType != 0)
            {
                CastingTimeOptionType = other.CastingTimeOptionType;
            }
            if (other.numericInputResp_ != null)
            {
                if (numericInputResp_ == null)
                {
                    numericInputResp_ = new NumericInputResp();
                }
                NumericInputResp.MergeFrom(other.NumericInputResp);
            }
            if (other.selectManaTypeResp_ != null)
            {
                if (selectManaTypeResp_ == null)
                {
                    selectManaTypeResp_ = new SelectManaTypeResp();
                }
                SelectManaTypeResp.MergeFrom(other.SelectManaTypeResp);
            }
            if (other.chooseModalResp_ != null)
            {
                if (chooseModalResp_ == null)
                {
                    chooseModalResp_ = new ChooseModalResp();
                }
                ChooseModalResp.MergeFrom(other.ChooseModalResp);
            }
            if (other.selectNResp_ != null)
            {
                if (selectNResp_ == null)
                {
                    selectNResp_ = new SelectNResp();
                }
                SelectNResp.MergeFrom(other.SelectNResp);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            CtoId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            castingTimeOptionType_ = (CastingTimeOptionType)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            if (numericInputResp_ == null)
                            {
                                numericInputResp_ = new NumericInputResp();
                            }
                            input.ReadMessage(numericInputResp_);
                            break;
                        }
                    case 34:
                        {
                            if (selectManaTypeResp_ == null)
                            {
                                selectManaTypeResp_ = new SelectManaTypeResp();
                            }
                            input.ReadMessage(selectManaTypeResp_);
                            break;
                        }
                    case 42:
                        {
                            if (chooseModalResp_ == null)
                            {
                                chooseModalResp_ = new ChooseModalResp();
                            }
                            input.ReadMessage(chooseModalResp_);
                            break;
                        }
                    case 50:
                        {
                            if (selectNResp_ == null)
                            {
                                selectNResp_ = new SelectNResp();
                            }
                            input.ReadMessage(selectNResp_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CastingTimeOptionsReq : pb::IMessage<CastingTimeOptionsReq>
    {
        private static readonly pb::MessageParser<CastingTimeOptionsReq> _parser = new pb::MessageParser<CastingTimeOptionsReq>(() => new CastingTimeOptionsReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CastingTimeOptionsReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[44]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionsReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionsReq(CastingTimeOptionsReq other) : this()
        {
            castingTimeOptionReq_ = other.castingTimeOptionReq_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionsReq Clone()
        {
            return new CastingTimeOptionsReq(this);
        }

        /// <summary>Field number for the "castingTimeOptionReq" field.</summary>
        public const int CastingTimeOptionReqFieldNumber = 1;
        private static readonly pb::FieldCodec<CastingTimeOptionReq> _repeated_castingTimeOptionReq_codec
            = pb::FieldCodec.ForMessage(10, MTGAHelper.Entity.Protobuf.CastingTimeOptionReq.Parser);
        private readonly pbc::RepeatedField<CastingTimeOptionReq> castingTimeOptionReq_ = new pbc::RepeatedField<CastingTimeOptionReq>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<CastingTimeOptionReq> CastingTimeOptionReq
        {
            get { return castingTimeOptionReq_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CastingTimeOptionsReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CastingTimeOptionsReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!castingTimeOptionReq_.Equals(other.castingTimeOptionReq_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= castingTimeOptionReq_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            castingTimeOptionReq_.WriteTo(output, _repeated_castingTimeOptionReq_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += castingTimeOptionReq_.CalculateSize(_repeated_castingTimeOptionReq_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CastingTimeOptionsReq other)
        {
            if (other == null)
            {
                return;
            }
            castingTimeOptionReq_.Add(other.castingTimeOptionReq_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            castingTimeOptionReq_.AddEntriesFrom(input, _repeated_castingTimeOptionReq_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CastingTimeOptionsResp : pb::IMessage<CastingTimeOptionsResp>
    {
        private static readonly pb::MessageParser<CastingTimeOptionsResp> _parser = new pb::MessageParser<CastingTimeOptionsResp>(() => new CastingTimeOptionsResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CastingTimeOptionsResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[45]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionsResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionsResp(CastingTimeOptionsResp other) : this()
        {
            castingTimeOptionResp_ = other.castingTimeOptionResp_ != null ? other.castingTimeOptionResp_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionsResp Clone()
        {
            return new CastingTimeOptionsResp(this);
        }

        /// <summary>Field number for the "castingTimeOptionResp" field.</summary>
        public const int CastingTimeOptionRespFieldNumber = 1;
        private CastingTimeOptionResp castingTimeOptionResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionResp CastingTimeOptionResp
        {
            get { return castingTimeOptionResp_; }
            set
            {
                castingTimeOptionResp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CastingTimeOptionsResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CastingTimeOptionsResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(CastingTimeOptionResp, other.CastingTimeOptionResp)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (castingTimeOptionResp_ != null) hash ^= CastingTimeOptionResp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (castingTimeOptionResp_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(CastingTimeOptionResp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (castingTimeOptionResp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CastingTimeOptionResp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CastingTimeOptionsResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.castingTimeOptionResp_ != null)
            {
                if (castingTimeOptionResp_ == null)
                {
                    castingTimeOptionResp_ = new CastingTimeOptionResp();
                }
                CastingTimeOptionResp.MergeFrom(other.CastingTimeOptionResp);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (castingTimeOptionResp_ == null)
                            {
                                castingTimeOptionResp_ = new CastingTimeOptionResp();
                            }
                            input.ReadMessage(castingTimeOptionResp_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CheckpointConfiguration : pb::IMessage<CheckpointConfiguration>
    {
        private static readonly pb::MessageParser<CheckpointConfiguration> _parser = new pb::MessageParser<CheckpointConfiguration>(() => new CheckpointConfiguration());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CheckpointConfiguration> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[46]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckpointConfiguration()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckpointConfiguration(CheckpointConfiguration other) : this()
        {
            enabled_ = other.enabled_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckpointConfiguration Clone()
        {
            return new CheckpointConfiguration(this);
        }

        /// <summary>Field number for the "enabled" field.</summary>
        public const int EnabledFieldNumber = 1;
        private bool enabled_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Enabled
        {
            get { return enabled_; }
            set
            {
                enabled_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CheckpointConfiguration);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CheckpointConfiguration other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Enabled != other.Enabled) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Enabled != false) hash ^= Enabled.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Enabled != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(Enabled);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Enabled != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CheckpointConfiguration other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Enabled != false)
            {
                Enabled = other.Enabled;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Enabled = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Choice : pb::IMessage<Choice>
    {
        private static readonly pb::MessageParser<Choice> _parser = new pb::MessageParser<Choice>(() => new Choice());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Choice> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[47]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Choice()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Choice(Choice other) : this()
        {
            parameters_ = other.parameters_.Clone();
            choiceId_ = other.choiceId_;
            responseValue_ = other.responseValue_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Choice Clone()
        {
            return new Choice(this);
        }

        /// <summary>Field number for the "parameters" field.</summary>
        public const int ParametersFieldNumber = 2;
        private static readonly pb::FieldCodec<PromptParameter> _repeated_parameters_codec
            = pb::FieldCodec.ForMessage(18, PromptParameter.Parser);
        private readonly pbc::RepeatedField<PromptParameter> parameters_ = new pbc::RepeatedField<PromptParameter>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<PromptParameter> Parameters
        {
            get { return parameters_; }
        }

        /// <summary>Field number for the "choiceId" field.</summary>
        public const int ChoiceIdFieldNumber = 1;
        private uint choiceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChoiceId
        {
            get { return choiceId_; }
            set
            {
                choiceId_ = value;
            }
        }

        /// <summary>Field number for the "responseValue" field.</summary>
        public const int ResponseValueFieldNumber = 3;
        private uint responseValue_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ResponseValue
        {
            get { return responseValue_; }
            set
            {
                responseValue_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Choice);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Choice other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!parameters_.Equals(other.parameters_)) return false;
            if (ChoiceId != other.ChoiceId) return false;
            if (ResponseValue != other.ResponseValue) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= parameters_.GetHashCode();
            if (ChoiceId != 0) hash ^= ChoiceId.GetHashCode();
            if (ResponseValue != 0) hash ^= ResponseValue.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ChoiceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(ChoiceId);
            }
            parameters_.WriteTo(output, _repeated_parameters_codec);
            if (ResponseValue != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(ResponseValue);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += parameters_.CalculateSize(_repeated_parameters_codec);
            if (ChoiceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChoiceId);
            }
            if (ResponseValue != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResponseValue);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Choice other)
        {
            if (other == null)
            {
                return;
            }
            parameters_.Add(other.parameters_);
            if (other.ChoiceId != 0)
            {
                ChoiceId = other.ChoiceId;
            }
            if (other.ResponseValue != 0)
            {
                ResponseValue = other.ResponseValue;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ChoiceId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
                            break;
                        }
                    case 24:
                        {
                            ResponseValue = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ChooseModalResp : pb::IMessage<ChooseModalResp>
    {
        private static readonly pb::MessageParser<ChooseModalResp> _parser = new pb::MessageParser<ChooseModalResp>(() => new ChooseModalResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChooseModalResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[48]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseModalResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseModalResp(ChooseModalResp other) : this()
        {
            grpIds_ = other.grpIds_.Clone();
            abilityGrpId_ = other.abilityGrpId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseModalResp Clone()
        {
            return new ChooseModalResp(this);
        }

        /// <summary>Field number for the "grpIds" field.</summary>
        public const int GrpIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_grpIds_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> grpIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> GrpIds
        {
            get { return grpIds_; }
        }

        /// <summary>Field number for the "abilityGrpId" field.</summary>
        public const int AbilityGrpIdFieldNumber = 1;
        private uint abilityGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityGrpId
        {
            get { return abilityGrpId_; }
            set
            {
                abilityGrpId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ChooseModalResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChooseModalResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!grpIds_.Equals(other.grpIds_)) return false;
            if (AbilityGrpId != other.AbilityGrpId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= grpIds_.GetHashCode();
            if (AbilityGrpId != 0) hash ^= AbilityGrpId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AbilityGrpId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AbilityGrpId);
            }
            grpIds_.WriteTo(output, _repeated_grpIds_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += grpIds_.CalculateSize(_repeated_grpIds_codec);
            if (AbilityGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityGrpId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChooseModalResp other)
        {
            if (other == null)
            {
                return;
            }
            grpIds_.Add(other.grpIds_);
            if (other.AbilityGrpId != 0)
            {
                AbilityGrpId = other.AbilityGrpId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AbilityGrpId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            grpIds_.AddEntriesFrom(input, _repeated_grpIds_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ChooseStartingPlayerReq : pb::IMessage<ChooseStartingPlayerReq>
    {
        private static readonly pb::MessageParser<ChooseStartingPlayerReq> _parser = new pb::MessageParser<ChooseStartingPlayerReq>(() => new ChooseStartingPlayerReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChooseStartingPlayerReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[49]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseStartingPlayerReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseStartingPlayerReq(ChooseStartingPlayerReq other) : this()
        {
            systemSeatIds_ = other.systemSeatIds_.Clone();
            teamIds_ = other.teamIds_.Clone();
            teamType_ = other.teamType_;
            prompt_ = other.prompt_ != null ? other.prompt_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseStartingPlayerReq Clone()
        {
            return new ChooseStartingPlayerReq(this);
        }

        /// <summary>Field number for the "systemSeatIds" field.</summary>
        public const int SystemSeatIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_systemSeatIds_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> systemSeatIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> SystemSeatIds
        {
            get { return systemSeatIds_; }
        }

        /// <summary>Field number for the "teamIds" field.</summary>
        public const int TeamIdsFieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_teamIds_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> teamIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> TeamIds
        {
            get { return teamIds_; }
        }

        /// <summary>Field number for the "teamType" field.</summary>
        public const int TeamTypeFieldNumber = 1;
        private TeamType teamType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamType TeamType
        {
            get { return teamType_; }
            set
            {
                teamType_ = value;
            }
        }

        /// <summary>Field number for the "prompt" field.</summary>
        public const int PromptFieldNumber = 4;
        private Prompt prompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt Prompt
        {
            get { return prompt_; }
            set
            {
                prompt_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ChooseStartingPlayerReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChooseStartingPlayerReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!systemSeatIds_.Equals(other.systemSeatIds_)) return false;
            if (!teamIds_.Equals(other.teamIds_)) return false;
            if (TeamType != other.TeamType) return false;
            if (!object.Equals(Prompt, other.Prompt)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= systemSeatIds_.GetHashCode();
            hash ^= teamIds_.GetHashCode();
            if (TeamType != 0) hash ^= TeamType.GetHashCode();
            if (prompt_ != null) hash ^= Prompt.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TeamType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)TeamType);
            }
            systemSeatIds_.WriteTo(output, _repeated_systemSeatIds_codec);
            teamIds_.WriteTo(output, _repeated_teamIds_codec);
            if (prompt_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Prompt);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += systemSeatIds_.CalculateSize(_repeated_systemSeatIds_codec);
            size += teamIds_.CalculateSize(_repeated_teamIds_codec);
            if (TeamType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)TeamType);
            }
            if (prompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prompt);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChooseStartingPlayerReq other)
        {
            if (other == null)
            {
                return;
            }
            systemSeatIds_.Add(other.systemSeatIds_);
            teamIds_.Add(other.teamIds_);
            if (other.TeamType != 0)
            {
                TeamType = other.TeamType;
            }
            if (other.prompt_ != null)
            {
                if (prompt_ == null)
                {
                    prompt_ = new Prompt();
                }
                Prompt.MergeFrom(other.Prompt);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            teamType_ = (TeamType)input.ReadEnum();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            systemSeatIds_.AddEntriesFrom(input, _repeated_systemSeatIds_codec);
                            break;
                        }
                    case 26:
                    case 24:
                        {
                            teamIds_.AddEntriesFrom(input, _repeated_teamIds_codec);
                            break;
                        }
                    case 34:
                        {
                            if (prompt_ == null)
                            {
                                prompt_ = new Prompt();
                            }
                            input.ReadMessage(prompt_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ChooseStartingPlayerResp : pb::IMessage<ChooseStartingPlayerResp>
    {
        private static readonly pb::MessageParser<ChooseStartingPlayerResp> _parser = new pb::MessageParser<ChooseStartingPlayerResp>(() => new ChooseStartingPlayerResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChooseStartingPlayerResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[50]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseStartingPlayerResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseStartingPlayerResp(ChooseStartingPlayerResp other) : this()
        {
            teamType_ = other.teamType_;
            systemSeatId_ = other.systemSeatId_;
            teamId_ = other.teamId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseStartingPlayerResp Clone()
        {
            return new ChooseStartingPlayerResp(this);
        }

        /// <summary>Field number for the "teamType" field.</summary>
        public const int TeamTypeFieldNumber = 1;
        private TeamType teamType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamType TeamType
        {
            get { return teamType_; }
            set
            {
                teamType_ = value;
            }
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 2;
        private uint systemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SystemSeatId
        {
            get { return systemSeatId_; }
            set
            {
                systemSeatId_ = value;
            }
        }

        /// <summary>Field number for the "teamId" field.</summary>
        public const int TeamIdFieldNumber = 3;
        private uint teamId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamId
        {
            get { return teamId_; }
            set
            {
                teamId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ChooseStartingPlayerResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChooseStartingPlayerResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TeamType != other.TeamType) return false;
            if (SystemSeatId != other.SystemSeatId) return false;
            if (TeamId != other.TeamId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TeamType != 0) hash ^= TeamType.GetHashCode();
            if (SystemSeatId != 0) hash ^= SystemSeatId.GetHashCode();
            if (TeamId != 0) hash ^= TeamId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TeamType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)TeamType);
            }
            if (SystemSeatId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(SystemSeatId);
            }
            if (TeamId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(TeamId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TeamType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)TeamType);
            }
            if (SystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SystemSeatId);
            }
            if (TeamId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChooseStartingPlayerResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TeamType != 0)
            {
                TeamType = other.TeamType;
            }
            if (other.SystemSeatId != 0)
            {
                SystemSeatId = other.SystemSeatId;
            }
            if (other.TeamId != 0)
            {
                TeamId = other.TeamId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            teamType_ = (TeamType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            SystemSeatId = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            TeamId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ClearLobbyUserStatusRequest : pb::IMessage<ClearLobbyUserStatusRequest>
    {
        private static readonly pb::MessageParser<ClearLobbyUserStatusRequest> _parser = new pb::MessageParser<ClearLobbyUserStatusRequest>(() => new ClearLobbyUserStatusRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClearLobbyUserStatusRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[51]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClearLobbyUserStatusRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClearLobbyUserStatusRequest(ClearLobbyUserStatusRequest other) : this()
        {
            userId_ = other.userId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClearLobbyUserStatusRequest Clone()
        {
            return new ClearLobbyUserStatusRequest(this);
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ClearLobbyUserStatusRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClearLobbyUserStatusRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClearLobbyUserStatusRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ClearLobbyUserStatusResponse : pb::IMessage<ClearLobbyUserStatusResponse>
    {
        private static readonly pb::MessageParser<ClearLobbyUserStatusResponse> _parser = new pb::MessageParser<ClearLobbyUserStatusResponse>(() => new ClearLobbyUserStatusResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClearLobbyUserStatusResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[52]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClearLobbyUserStatusResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClearLobbyUserStatusResponse(ClearLobbyUserStatusResponse other) : this()
        {
            userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClearLobbyUserStatusResponse Clone()
        {
            return new ClearLobbyUserStatusResponse(this);
        }

        /// <summary>Field number for the "userInfo" field.</summary>
        public const int UserInfoFieldNumber = 1;
        private LobbyUserInfo userInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyUserInfo UserInfo
        {
            get { return userInfo_; }
            set
            {
                userInfo_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ClearLobbyUserStatusResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClearLobbyUserStatusResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(UserInfo, other.UserInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (userInfo_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(UserInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (userInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClearLobbyUserStatusResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.userInfo_ != null)
            {
                if (userInfo_ == null)
                {
                    userInfo_ = new LobbyUserInfo();
                }
                UserInfo.MergeFrom(other.UserInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (userInfo_ == null)
                            {
                                userInfo_ = new LobbyUserInfo();
                            }
                            input.ReadMessage(userInfo_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ClientInfo : pb::IMessage<ClientInfo>
    {
        private static readonly pb::MessageParser<ClientInfo> _parser = new pb::MessageParser<ClientInfo>(() => new ClientInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[53]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientInfo(ClientInfo other) : this()
        {
            clientId_ = other.clientId_;
            clientVersion_ = other.clientVersion_;
            clientLocation_ = other.clientLocation_;
            clientLanguage_ = other.clientLanguage_;
            clientType_ = other.clientType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientInfo Clone()
        {
            return new ClientInfo(this);
        }

        /// <summary>Field number for the "clientId" field.</summary>
        public const int ClientIdFieldNumber = 1;
        private string clientId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientId
        {
            get { return clientId_; }
            set
            {
                clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "clientVersion" field.</summary>
        public const int ClientVersionFieldNumber = 10;
        private string clientVersion_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientVersion
        {
            get { return clientVersion_; }
            set
            {
                clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "clientLocation" field.</summary>
        public const int ClientLocationFieldNumber = 11;
        private string clientLocation_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientLocation
        {
            get { return clientLocation_; }
            set
            {
                clientLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "clientLanguage" field.</summary>
        public const int ClientLanguageFieldNumber = 12;
        private string clientLanguage_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientLanguage
        {
            get { return clientLanguage_; }
            set
            {
                clientLanguage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "clientType" field.</summary>
        public const int ClientTypeFieldNumber = 2;
        private ClientType clientType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientType ClientType
        {
            get { return clientType_; }
            set
            {
                clientType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ClientInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ClientId != other.ClientId) return false;
            if (ClientVersion != other.ClientVersion) return false;
            if (ClientLocation != other.ClientLocation) return false;
            if (ClientLanguage != other.ClientLanguage) return false;
            if (ClientType != other.ClientType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
            if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
            if (ClientLocation.Length != 0) hash ^= ClientLocation.GetHashCode();
            if (ClientLanguage.Length != 0) hash ^= ClientLanguage.GetHashCode();
            if (ClientType != 0) hash ^= ClientType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ClientId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ClientId);
            }
            if (ClientType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)ClientType);
            }
            if (ClientVersion.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteString(ClientVersion);
            }
            if (ClientLocation.Length != 0)
            {
                output.WriteRawTag(90);
                output.WriteString(ClientLocation);
            }
            if (ClientLanguage.Length != 0)
            {
                output.WriteRawTag(98);
                output.WriteString(ClientLanguage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ClientId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
            }
            if (ClientVersion.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
            }
            if (ClientLocation.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientLocation);
            }
            if (ClientLanguage.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientLanguage);
            }
            if (ClientType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ClientType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ClientId.Length != 0)
            {
                ClientId = other.ClientId;
            }
            if (other.ClientVersion.Length != 0)
            {
                ClientVersion = other.ClientVersion;
            }
            if (other.ClientLocation.Length != 0)
            {
                ClientLocation = other.ClientLocation;
            }
            if (other.ClientLanguage.Length != 0)
            {
                ClientLanguage = other.ClientLanguage;
            }
            if (other.ClientType != 0)
            {
                ClientType = other.ClientType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ClientId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            clientType_ = (ClientType)input.ReadEnum();
                            break;
                        }
                    case 82:
                        {
                            ClientVersion = input.ReadString();
                            break;
                        }
                    case 90:
                        {
                            ClientLocation = input.ReadString();
                            break;
                        }
                    case 98:
                        {
                            ClientLanguage = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ClientSessionInfo : pb::IMessage<ClientSessionInfo>
    {
        private static readonly pb::MessageParser<ClientSessionInfo> _parser = new pb::MessageParser<ClientSessionInfo>(() => new ClientSessionInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientSessionInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[54]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientSessionInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientSessionInfo(ClientSessionInfo other) : this()
        {
            clientId_ = other.clientId_;
            sessionId_ = other.sessionId_;
            roles_ = other.roles_.Clone();
            userName_ = other.userName_;
            screenName_ = other.screenName_;
            clientInfo_ = other.clientInfo_ != null ? other.clientInfo_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientSessionInfo Clone()
        {
            return new ClientSessionInfo(this);
        }

        /// <summary>Field number for the "clientId" field.</summary>
        public const int ClientIdFieldNumber = 1;
        private string clientId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientId
        {
            get { return clientId_; }
            set
            {
                clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "sessionId" field.</summary>
        public const int SessionIdFieldNumber = 2;
        private string sessionId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SessionId
        {
            get { return sessionId_; }
            set
            {
                sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "roles" field.</summary>
        public const int RolesFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_roles_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> roles_ = new pbc::RepeatedField<string>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Roles
        {
            get { return roles_; }
        }

        /// <summary>Field number for the "userName" field.</summary>
        public const int UserNameFieldNumber = 4;
        private string userName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserName
        {
            get { return userName_; }
            set
            {
                userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "screenName" field.</summary>
        public const int ScreenNameFieldNumber = 5;
        private string screenName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ScreenName
        {
            get { return screenName_; }
            set
            {
                screenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "clientInfo" field.</summary>
        public const int ClientInfoFieldNumber = 10;
        private ClientInfo clientInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientInfo ClientInfo
        {
            get { return clientInfo_; }
            set
            {
                clientInfo_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ClientSessionInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientSessionInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ClientId != other.ClientId) return false;
            if (SessionId != other.SessionId) return false;
            if (!roles_.Equals(other.roles_)) return false;
            if (UserName != other.UserName) return false;
            if (ScreenName != other.ScreenName) return false;
            if (!object.Equals(ClientInfo, other.ClientInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
            if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
            hash ^= roles_.GetHashCode();
            if (UserName.Length != 0) hash ^= UserName.GetHashCode();
            if (ScreenName.Length != 0) hash ^= ScreenName.GetHashCode();
            if (clientInfo_ != null) hash ^= ClientInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ClientId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ClientId);
            }
            if (SessionId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(SessionId);
            }
            roles_.WriteTo(output, _repeated_roles_codec);
            if (UserName.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(UserName);
            }
            if (ScreenName.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(ScreenName);
            }
            if (clientInfo_ != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(ClientInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ClientId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
            }
            if (SessionId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
            }
            size += roles_.CalculateSize(_repeated_roles_codec);
            if (UserName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
            }
            if (ScreenName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ScreenName);
            }
            if (clientInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientSessionInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ClientId.Length != 0)
            {
                ClientId = other.ClientId;
            }
            if (other.SessionId.Length != 0)
            {
                SessionId = other.SessionId;
            }
            roles_.Add(other.roles_);
            if (other.UserName.Length != 0)
            {
                UserName = other.UserName;
            }
            if (other.ScreenName.Length != 0)
            {
                ScreenName = other.ScreenName;
            }
            if (other.clientInfo_ != null)
            {
                if (clientInfo_ == null)
                {
                    clientInfo_ = new ClientInfo();
                }
                ClientInfo.MergeFrom(other.ClientInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ClientId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            SessionId = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            roles_.AddEntriesFrom(input, _repeated_roles_codec);
                            break;
                        }
                    case 34:
                        {
                            UserName = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            ScreenName = input.ReadString();
                            break;
                        }
                    case 82:
                        {
                            if (clientInfo_ == null)
                            {
                                clientInfo_ = new ClientInfo();
                            }
                            input.ReadMessage(clientInfo_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ClientSync : pb::IMessage<ClientSync>
    {
        private static readonly pb::MessageParser<ClientSync> _parser = new pb::MessageParser<ClientSync>(() => new ClientSync());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientSync> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[55]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientSync()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientSync(ClientSync other) : this()
        {
            systemSeatId_ = other.systemSeatId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientSync Clone()
        {
            return new ClientSync(this);
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 1;
        private uint systemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SystemSeatId
        {
            get { return systemSeatId_; }
            set
            {
                systemSeatId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ClientSync);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientSync other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SystemSeatId != other.SystemSeatId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SystemSeatId != 0) hash ^= SystemSeatId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SystemSeatId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SystemSeatId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SystemSeatId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientSync other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SystemSeatId != 0)
            {
                SystemSeatId = other.SystemSeatId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SystemSeatId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ClientToFrontDoorMessage : pb::IMessage<ClientToFrontDoorMessage>
    {
        private static readonly pb::MessageParser<ClientToFrontDoorMessage> _parser = new pb::MessageParser<ClientToFrontDoorMessage>(() => new ClientToFrontDoorMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientToFrontDoorMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[56]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToFrontDoorMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToFrontDoorMessage(ClientToFrontDoorMessage other) : this()
        {
            switch (other.MessageCase)
            {
                case MessageOneofCase.ClientToLobbyMessage:
                    ClientToLobbyMessage = other.ClientToLobbyMessage.Clone();
                    break;
                case MessageOneofCase.ClientToLapaMessage:
                    ClientToLapaMessage = other.ClientToLapaMessage.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToFrontDoorMessage Clone()
        {
            return new ClientToFrontDoorMessage(this);
        }

        /// <summary>Field number for the "clientToLobbyMessage" field.</summary>
        public const int ClientToLobbyMessageFieldNumber = 1;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToLobbyMessage ClientToLobbyMessage
        {
            get { return messageCase_ == MessageOneofCase.ClientToLobbyMessage ? (ClientToLobbyMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClientToLobbyMessage;
            }
        }

        /// <summary>Field number for the "clientToLapaMessage" field.</summary>
        public const int ClientToLapaMessageFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToLapaMessage ClientToLapaMessage
        {
            get { return messageCase_ == MessageOneofCase.ClientToLapaMessage ? (ClientToLapaMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClientToLapaMessage;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            ClientToLobbyMessage = 1,
            ClientToLapaMessage = 2,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ClientToFrontDoorMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientToFrontDoorMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(ClientToLobbyMessage, other.ClientToLobbyMessage)) return false;
            if (!object.Equals(ClientToLapaMessage, other.ClientToLapaMessage)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (messageCase_ == MessageOneofCase.ClientToLobbyMessage) hash ^= ClientToLobbyMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.ClientToLapaMessage) hash ^= ClientToLapaMessage.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (messageCase_ == MessageOneofCase.ClientToLobbyMessage)
            {
                output.WriteRawTag(10);
                output.WriteMessage(ClientToLobbyMessage);
            }
            if (messageCase_ == MessageOneofCase.ClientToLapaMessage)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ClientToLapaMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (messageCase_ == MessageOneofCase.ClientToLobbyMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientToLobbyMessage);
            }
            if (messageCase_ == MessageOneofCase.ClientToLapaMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientToLapaMessage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientToFrontDoorMessage other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.ClientToLobbyMessage:
                    if (ClientToLobbyMessage == null)
                    {
                        ClientToLobbyMessage = new ClientToLobbyMessage();
                    }
                    ClientToLobbyMessage.MergeFrom(other.ClientToLobbyMessage);
                    break;
                case MessageOneofCase.ClientToLapaMessage:
                    if (ClientToLapaMessage == null)
                    {
                        ClientToLapaMessage = new ClientToLapaMessage();
                    }
                    ClientToLapaMessage.MergeFrom(other.ClientToLapaMessage);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ClientToLobbyMessage subBuilder = new ClientToLobbyMessage();
                            if (messageCase_ == MessageOneofCase.ClientToLobbyMessage)
                            {
                                subBuilder.MergeFrom(ClientToLobbyMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ClientToLobbyMessage = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            ClientToLapaMessage subBuilder = new ClientToLapaMessage();
                            if (messageCase_ == MessageOneofCase.ClientToLapaMessage)
                            {
                                subBuilder.MergeFrom(ClientToLapaMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ClientToLapaMessage = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ClientToGREMessage : pb::IMessage<ClientToGREMessage>
    {
        private static readonly pb::MessageParser<ClientToGREMessage> _parser = new pb::MessageParser<ClientToGREMessage>(() => new ClientToGREMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientToGREMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[57]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToGREMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToGREMessage(ClientToGREMessage other) : this()
        {
            type_ = other.type_;
            systemSeatId_ = other.systemSeatId_;
            gameStateId_ = other.gameStateId_;
            respId_ = other.respId_;
            connectReq_ = other.connectReq_ != null ? other.connectReq_.Clone() : null;
            cancelActionReq_ = other.cancelActionReq_ != null ? other.cancelActionReq_.Clone() : null;
            chooseModalResp_ = other.chooseModalResp_ != null ? other.chooseModalResp_.Clone() : null;
            concedeReq_ = other.concedeReq_ != null ? other.concedeReq_.Clone() : null;
            forceDrawReq_ = other.forceDrawReq_ != null ? other.forceDrawReq_.Clone() : null;
            groupResp_ = other.groupResp_ != null ? other.groupResp_.Clone() : null;
            mulliganResp_ = other.mulliganResp_ != null ? other.mulliganResp_.Clone() : null;
            optionalResp_ = other.optionalResp_ != null ? other.optionalResp_.Clone() : null;
            orderResp_ = other.orderResp_ != null ? other.orderResp_.Clone() : null;
            performActionResp_ = other.performActionResp_ != null ? other.performActionResp_.Clone() : null;
            selectNResp_ = other.selectNResp_ != null ? other.selectNResp_.Clone() : null;
            setSettingsReq_ = other.setSettingsReq_ != null ? other.setSettingsReq_.Clone() : null;
            chooseStartingPlayerResp_ = other.chooseStartingPlayerResp_ != null ? other.chooseStartingPlayerResp_.Clone() : null;
            declareAttackersResp_ = other.declareAttackersResp_ != null ? other.declareAttackersResp_.Clone() : null;
            declareBlockersResp_ = other.declareBlockersResp_ != null ? other.declareBlockersResp_.Clone() : null;
            orderCombatDamageResp_ = other.orderCombatDamageResp_ != null ? other.orderCombatDamageResp_.Clone() : null;
            assignDamageResp_ = other.assignDamageResp_ != null ? other.assignDamageResp_.Clone() : null;
            selectTargetsResp_ = other.selectTargetsResp_ != null ? other.selectTargetsResp_.Clone() : null;
            selectReplacementResp_ = other.selectReplacementResp_ != null ? other.selectReplacementResp_.Clone() : null;
            selectNGroupResp_ = other.selectNGroupResp_ != null ? other.selectNGroupResp_.Clone() : null;
            alternativeCostResp_ = other.alternativeCostResp_ != null ? other.alternativeCostResp_.Clone() : null;
            distributionResp_ = other.distributionResp_ != null ? other.distributionResp_.Clone() : null;
            numericInputResp_ = other.numericInputResp_ != null ? other.numericInputResp_.Clone() : null;
            searchResp_ = other.searchResp_ != null ? other.searchResp_.Clone() : null;
            actionCostResp_ = other.actionCostResp_ != null ? other.actionCostResp_.Clone() : null;
            castingTimeOptionsResp_ = other.castingTimeOptionsResp_ != null ? other.castingTimeOptionsResp_.Clone() : null;
            selectManaTypeResp_ = other.selectManaTypeResp_ != null ? other.selectManaTypeResp_.Clone() : null;
            selectFromGroupsResp_ = other.selectFromGroupsResp_ != null ? other.selectFromGroupsResp_.Clone() : null;
            searchFromGroupsResp_ = other.searchFromGroupsResp_ != null ? other.searchFromGroupsResp_.Clone() : null;
            gatherResp_ = other.gatherResp_ != null ? other.gatherResp_.Clone() : null;
            submitPaymentResp_ = other.submitPaymentResp_ != null ? other.submitPaymentResp_.Clone() : null;
            uiMessage_ = other.uiMessage_ != null ? other.uiMessage_.Clone() : null;
            submitDeckResp_ = other.submitDeckResp_ != null ? other.submitDeckResp_.Clone() : null;
            controlReq_ = other.controlReq_ != null ? other.controlReq_.Clone() : null;
            timerId_ = other.timerId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToGREMessage Clone()
        {
            return new ClientToGREMessage(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private ClientMessageType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientMessageType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 2;
        private uint systemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SystemSeatId
        {
            get { return systemSeatId_; }
            set
            {
                systemSeatId_ = value;
            }
        }

        /// <summary>Field number for the "gameStateId" field.</summary>
        public const int GameStateIdFieldNumber = 3;
        private uint gameStateId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameStateId
        {
            get { return gameStateId_; }
            set
            {
                gameStateId_ = value;
            }
        }

        /// <summary>Field number for the "respId" field.</summary>
        public const int RespIdFieldNumber = 4;
        private uint respId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RespId
        {
            get { return respId_; }
            set
            {
                respId_ = value;
            }
        }

        /// <summary>Field number for the "connectReq" field.</summary>
        public const int ConnectReqFieldNumber = 5;
        private ConnectReq connectReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectReq ConnectReq
        {
            get { return connectReq_; }
            set
            {
                connectReq_ = value;
            }
        }

        /// <summary>Field number for the "cancelActionReq" field.</summary>
        public const int CancelActionReqFieldNumber = 6;
        private CancelActionReq cancelActionReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CancelActionReq CancelActionReq
        {
            get { return cancelActionReq_; }
            set
            {
                cancelActionReq_ = value;
            }
        }

        /// <summary>Field number for the "chooseModalResp" field.</summary>
        public const int ChooseModalRespFieldNumber = 7;
        private ChooseModalResp chooseModalResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseModalResp ChooseModalResp
        {
            get { return chooseModalResp_; }
            set
            {
                chooseModalResp_ = value;
            }
        }

        /// <summary>Field number for the "concedeReq" field.</summary>
        public const int ConcedeReqFieldNumber = 8;
        private ConcedeReq concedeReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConcedeReq ConcedeReq
        {
            get { return concedeReq_; }
            set
            {
                concedeReq_ = value;
            }
        }

        /// <summary>Field number for the "forceDrawReq" field.</summary>
        public const int ForceDrawReqFieldNumber = 9;
        private ForceDrawReq forceDrawReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceDrawReq ForceDrawReq
        {
            get { return forceDrawReq_; }
            set
            {
                forceDrawReq_ = value;
            }
        }

        /// <summary>Field number for the "groupResp" field.</summary>
        public const int GroupRespFieldNumber = 10;
        private GroupResp groupResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupResp GroupResp
        {
            get { return groupResp_; }
            set
            {
                groupResp_ = value;
            }
        }

        /// <summary>Field number for the "mulliganResp" field.</summary>
        public const int MulliganRespFieldNumber = 11;
        private MulliganResp mulliganResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MulliganResp MulliganResp
        {
            get { return mulliganResp_; }
            set
            {
                mulliganResp_ = value;
            }
        }

        /// <summary>Field number for the "optionalResp" field.</summary>
        public const int OptionalRespFieldNumber = 12;
        private OptionalResp optionalResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalResp OptionalResp
        {
            get { return optionalResp_; }
            set
            {
                optionalResp_ = value;
            }
        }

        /// <summary>Field number for the "orderResp" field.</summary>
        public const int OrderRespFieldNumber = 13;
        private OrderResp orderResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderResp OrderResp
        {
            get { return orderResp_; }
            set
            {
                orderResp_ = value;
            }
        }

        /// <summary>Field number for the "performActionResp" field.</summary>
        public const int PerformActionRespFieldNumber = 14;
        private PerformActionResp performActionResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerformActionResp PerformActionResp
        {
            get { return performActionResp_; }
            set
            {
                performActionResp_ = value;
            }
        }

        /// <summary>Field number for the "selectNResp" field.</summary>
        public const int SelectNRespFieldNumber = 15;
        private SelectNResp selectNResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNResp SelectNResp
        {
            get { return selectNResp_; }
            set
            {
                selectNResp_ = value;
            }
        }

        /// <summary>Field number for the "setSettingsReq" field.</summary>
        public const int SetSettingsReqFieldNumber = 16;
        private SetSettingsReq setSettingsReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetSettingsReq SetSettingsReq
        {
            get { return setSettingsReq_; }
            set
            {
                setSettingsReq_ = value;
            }
        }

        /// <summary>Field number for the "chooseStartingPlayerResp" field.</summary>
        public const int ChooseStartingPlayerRespFieldNumber = 21;
        private ChooseStartingPlayerResp chooseStartingPlayerResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseStartingPlayerResp ChooseStartingPlayerResp
        {
            get { return chooseStartingPlayerResp_; }
            set
            {
                chooseStartingPlayerResp_ = value;
            }
        }

        /// <summary>Field number for the "declareAttackersResp" field.</summary>
        public const int DeclareAttackersRespFieldNumber = 22;
        private DeclareAttackersResp declareAttackersResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareAttackersResp DeclareAttackersResp
        {
            get { return declareAttackersResp_; }
            set
            {
                declareAttackersResp_ = value;
            }
        }

        /// <summary>Field number for the "declareBlockersResp" field.</summary>
        public const int DeclareBlockersRespFieldNumber = 23;
        private DeclareBlockersResp declareBlockersResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareBlockersResp DeclareBlockersResp
        {
            get { return declareBlockersResp_; }
            set
            {
                declareBlockersResp_ = value;
            }
        }

        /// <summary>Field number for the "orderCombatDamageResp" field.</summary>
        public const int OrderCombatDamageRespFieldNumber = 24;
        private OrderCombatDamageResp orderCombatDamageResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderCombatDamageResp OrderCombatDamageResp
        {
            get { return orderCombatDamageResp_; }
            set
            {
                orderCombatDamageResp_ = value;
            }
        }

        /// <summary>Field number for the "assignDamageResp" field.</summary>
        public const int AssignDamageRespFieldNumber = 25;
        private AssignDamageResp assignDamageResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssignDamageResp AssignDamageResp
        {
            get { return assignDamageResp_; }
            set
            {
                assignDamageResp_ = value;
            }
        }

        /// <summary>Field number for the "selectTargetsResp" field.</summary>
        public const int SelectTargetsRespFieldNumber = 26;
        private SelectTargetsResp selectTargetsResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectTargetsResp SelectTargetsResp
        {
            get { return selectTargetsResp_; }
            set
            {
                selectTargetsResp_ = value;
            }
        }

        /// <summary>Field number for the "selectReplacementResp" field.</summary>
        public const int SelectReplacementRespFieldNumber = 27;
        private SelectReplacementResp selectReplacementResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectReplacementResp SelectReplacementResp
        {
            get { return selectReplacementResp_; }
            set
            {
                selectReplacementResp_ = value;
            }
        }

        /// <summary>Field number for the "selectNGroupResp" field.</summary>
        public const int SelectNGroupRespFieldNumber = 28;
        private SelectNGroupResp selectNGroupResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNGroupResp SelectNGroupResp
        {
            get { return selectNGroupResp_; }
            set
            {
                selectNGroupResp_ = value;
            }
        }

        /// <summary>Field number for the "alternativeCostResp" field.</summary>
        public const int AlternativeCostRespFieldNumber = 29;
        private AlternativeCostResp alternativeCostResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AlternativeCostResp AlternativeCostResp
        {
            get { return alternativeCostResp_; }
            set
            {
                alternativeCostResp_ = value;
            }
        }

        /// <summary>Field number for the "distributionResp" field.</summary>
        public const int DistributionRespFieldNumber = 30;
        private DistributionResp distributionResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DistributionResp DistributionResp
        {
            get { return distributionResp_; }
            set
            {
                distributionResp_ = value;
            }
        }

        /// <summary>Field number for the "numericInputResp" field.</summary>
        public const int NumericInputRespFieldNumber = 31;
        private NumericInputResp numericInputResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericInputResp NumericInputResp
        {
            get { return numericInputResp_; }
            set
            {
                numericInputResp_ = value;
            }
        }

        /// <summary>Field number for the "searchResp" field.</summary>
        public const int SearchRespFieldNumber = 32;
        private SearchResp searchResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchResp SearchResp
        {
            get { return searchResp_; }
            set
            {
                searchResp_ = value;
            }
        }

        /// <summary>Field number for the "actionCostResp" field.</summary>
        public const int ActionCostRespFieldNumber = 33;
        private ActionCostResp actionCostResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCostResp ActionCostResp
        {
            get { return actionCostResp_; }
            set
            {
                actionCostResp_ = value;
            }
        }

        /// <summary>Field number for the "castingTimeOptionsResp" field.</summary>
        public const int CastingTimeOptionsRespFieldNumber = 34;
        private CastingTimeOptionsResp castingTimeOptionsResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionsResp CastingTimeOptionsResp
        {
            get { return castingTimeOptionsResp_; }
            set
            {
                castingTimeOptionsResp_ = value;
            }
        }

        /// <summary>Field number for the "selectManaTypeResp" field.</summary>
        public const int SelectManaTypeRespFieldNumber = 35;
        private SelectManaTypeResp selectManaTypeResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectManaTypeResp SelectManaTypeResp
        {
            get { return selectManaTypeResp_; }
            set
            {
                selectManaTypeResp_ = value;
            }
        }

        /// <summary>Field number for the "selectFromGroupsResp" field.</summary>
        public const int SelectFromGroupsRespFieldNumber = 36;
        private SelectFromGroupsResp selectFromGroupsResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectFromGroupsResp SelectFromGroupsResp
        {
            get { return selectFromGroupsResp_; }
            set
            {
                selectFromGroupsResp_ = value;
            }
        }

        /// <summary>Field number for the "searchFromGroupsResp" field.</summary>
        public const int SearchFromGroupsRespFieldNumber = 37;
        private SearchFromGroupsResp searchFromGroupsResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchFromGroupsResp SearchFromGroupsResp
        {
            get { return searchFromGroupsResp_; }
            set
            {
                searchFromGroupsResp_ = value;
            }
        }

        /// <summary>Field number for the "gatherResp" field.</summary>
        public const int GatherRespFieldNumber = 38;
        private GatherResp gatherResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GatherResp GatherResp
        {
            get { return gatherResp_; }
            set
            {
                gatherResp_ = value;
            }
        }

        /// <summary>Field number for the "submitPaymentResp" field.</summary>
        public const int SubmitPaymentRespFieldNumber = 39;
        private SubmitPaymentResp submitPaymentResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitPaymentResp SubmitPaymentResp
        {
            get { return submitPaymentResp_; }
            set
            {
                submitPaymentResp_ = value;
            }
        }

        /// <summary>Field number for the "uiMessage" field.</summary>
        public const int UiMessageFieldNumber = 40;
        private UIMessage uiMessage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UIMessage UiMessage
        {
            get { return uiMessage_; }
            set
            {
                uiMessage_ = value;
            }
        }

        /// <summary>Field number for the "submitDeckResp" field.</summary>
        public const int SubmitDeckRespFieldNumber = 41;
        private SubmitDeckResp submitDeckResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitDeckResp SubmitDeckResp
        {
            get { return submitDeckResp_; }
            set
            {
                submitDeckResp_ = value;
            }
        }

        /// <summary>Field number for the "controlReq" field.</summary>
        public const int ControlReqFieldNumber = 42;
        private ControlReq controlReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ControlReq ControlReq
        {
            get { return controlReq_; }
            set
            {
                controlReq_ = value;
            }
        }

        /// <summary>Field number for the "timerId" field.</summary>
        public const int TimerIdFieldNumber = 100;
        private uint timerId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimerId
        {
            get { return timerId_; }
            set
            {
                timerId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ClientToGREMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientToGREMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (SystemSeatId != other.SystemSeatId) return false;
            if (GameStateId != other.GameStateId) return false;
            if (RespId != other.RespId) return false;
            if (!object.Equals(ConnectReq, other.ConnectReq)) return false;
            if (!object.Equals(CancelActionReq, other.CancelActionReq)) return false;
            if (!object.Equals(ChooseModalResp, other.ChooseModalResp)) return false;
            if (!object.Equals(ConcedeReq, other.ConcedeReq)) return false;
            if (!object.Equals(ForceDrawReq, other.ForceDrawReq)) return false;
            if (!object.Equals(GroupResp, other.GroupResp)) return false;
            if (!object.Equals(MulliganResp, other.MulliganResp)) return false;
            if (!object.Equals(OptionalResp, other.OptionalResp)) return false;
            if (!object.Equals(OrderResp, other.OrderResp)) return false;
            if (!object.Equals(PerformActionResp, other.PerformActionResp)) return false;
            if (!object.Equals(SelectNResp, other.SelectNResp)) return false;
            if (!object.Equals(SetSettingsReq, other.SetSettingsReq)) return false;
            if (!object.Equals(ChooseStartingPlayerResp, other.ChooseStartingPlayerResp)) return false;
            if (!object.Equals(DeclareAttackersResp, other.DeclareAttackersResp)) return false;
            if (!object.Equals(DeclareBlockersResp, other.DeclareBlockersResp)) return false;
            if (!object.Equals(OrderCombatDamageResp, other.OrderCombatDamageResp)) return false;
            if (!object.Equals(AssignDamageResp, other.AssignDamageResp)) return false;
            if (!object.Equals(SelectTargetsResp, other.SelectTargetsResp)) return false;
            if (!object.Equals(SelectReplacementResp, other.SelectReplacementResp)) return false;
            if (!object.Equals(SelectNGroupResp, other.SelectNGroupResp)) return false;
            if (!object.Equals(AlternativeCostResp, other.AlternativeCostResp)) return false;
            if (!object.Equals(DistributionResp, other.DistributionResp)) return false;
            if (!object.Equals(NumericInputResp, other.NumericInputResp)) return false;
            if (!object.Equals(SearchResp, other.SearchResp)) return false;
            if (!object.Equals(ActionCostResp, other.ActionCostResp)) return false;
            if (!object.Equals(CastingTimeOptionsResp, other.CastingTimeOptionsResp)) return false;
            if (!object.Equals(SelectManaTypeResp, other.SelectManaTypeResp)) return false;
            if (!object.Equals(SelectFromGroupsResp, other.SelectFromGroupsResp)) return false;
            if (!object.Equals(SearchFromGroupsResp, other.SearchFromGroupsResp)) return false;
            if (!object.Equals(GatherResp, other.GatherResp)) return false;
            if (!object.Equals(SubmitPaymentResp, other.SubmitPaymentResp)) return false;
            if (!object.Equals(UiMessage, other.UiMessage)) return false;
            if (!object.Equals(SubmitDeckResp, other.SubmitDeckResp)) return false;
            if (!object.Equals(ControlReq, other.ControlReq)) return false;
            if (TimerId != other.TimerId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (SystemSeatId != 0) hash ^= SystemSeatId.GetHashCode();
            if (GameStateId != 0) hash ^= GameStateId.GetHashCode();
            if (RespId != 0) hash ^= RespId.GetHashCode();
            if (connectReq_ != null) hash ^= ConnectReq.GetHashCode();
            if (cancelActionReq_ != null) hash ^= CancelActionReq.GetHashCode();
            if (chooseModalResp_ != null) hash ^= ChooseModalResp.GetHashCode();
            if (concedeReq_ != null) hash ^= ConcedeReq.GetHashCode();
            if (forceDrawReq_ != null) hash ^= ForceDrawReq.GetHashCode();
            if (groupResp_ != null) hash ^= GroupResp.GetHashCode();
            if (mulliganResp_ != null) hash ^= MulliganResp.GetHashCode();
            if (optionalResp_ != null) hash ^= OptionalResp.GetHashCode();
            if (orderResp_ != null) hash ^= OrderResp.GetHashCode();
            if (performActionResp_ != null) hash ^= PerformActionResp.GetHashCode();
            if (selectNResp_ != null) hash ^= SelectNResp.GetHashCode();
            if (setSettingsReq_ != null) hash ^= SetSettingsReq.GetHashCode();
            if (chooseStartingPlayerResp_ != null) hash ^= ChooseStartingPlayerResp.GetHashCode();
            if (declareAttackersResp_ != null) hash ^= DeclareAttackersResp.GetHashCode();
            if (declareBlockersResp_ != null) hash ^= DeclareBlockersResp.GetHashCode();
            if (orderCombatDamageResp_ != null) hash ^= OrderCombatDamageResp.GetHashCode();
            if (assignDamageResp_ != null) hash ^= AssignDamageResp.GetHashCode();
            if (selectTargetsResp_ != null) hash ^= SelectTargetsResp.GetHashCode();
            if (selectReplacementResp_ != null) hash ^= SelectReplacementResp.GetHashCode();
            if (selectNGroupResp_ != null) hash ^= SelectNGroupResp.GetHashCode();
            if (alternativeCostResp_ != null) hash ^= AlternativeCostResp.GetHashCode();
            if (distributionResp_ != null) hash ^= DistributionResp.GetHashCode();
            if (numericInputResp_ != null) hash ^= NumericInputResp.GetHashCode();
            if (searchResp_ != null) hash ^= SearchResp.GetHashCode();
            if (actionCostResp_ != null) hash ^= ActionCostResp.GetHashCode();
            if (castingTimeOptionsResp_ != null) hash ^= CastingTimeOptionsResp.GetHashCode();
            if (selectManaTypeResp_ != null) hash ^= SelectManaTypeResp.GetHashCode();
            if (selectFromGroupsResp_ != null) hash ^= SelectFromGroupsResp.GetHashCode();
            if (searchFromGroupsResp_ != null) hash ^= SearchFromGroupsResp.GetHashCode();
            if (gatherResp_ != null) hash ^= GatherResp.GetHashCode();
            if (submitPaymentResp_ != null) hash ^= SubmitPaymentResp.GetHashCode();
            if (uiMessage_ != null) hash ^= UiMessage.GetHashCode();
            if (submitDeckResp_ != null) hash ^= SubmitDeckResp.GetHashCode();
            if (controlReq_ != null) hash ^= ControlReq.GetHashCode();
            if (TimerId != 0) hash ^= TimerId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (SystemSeatId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(SystemSeatId);
            }
            if (GameStateId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(GameStateId);
            }
            if (RespId != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(RespId);
            }
            if (connectReq_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(ConnectReq);
            }
            if (cancelActionReq_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(CancelActionReq);
            }
            if (chooseModalResp_ != null)
            {
                output.WriteRawTag(58);
                output.WriteMessage(ChooseModalResp);
            }
            if (concedeReq_ != null)
            {
                output.WriteRawTag(66);
                output.WriteMessage(ConcedeReq);
            }
            if (forceDrawReq_ != null)
            {
                output.WriteRawTag(74);
                output.WriteMessage(ForceDrawReq);
            }
            if (groupResp_ != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(GroupResp);
            }
            if (mulliganResp_ != null)
            {
                output.WriteRawTag(90);
                output.WriteMessage(MulliganResp);
            }
            if (optionalResp_ != null)
            {
                output.WriteRawTag(98);
                output.WriteMessage(OptionalResp);
            }
            if (orderResp_ != null)
            {
                output.WriteRawTag(106);
                output.WriteMessage(OrderResp);
            }
            if (performActionResp_ != null)
            {
                output.WriteRawTag(114);
                output.WriteMessage(PerformActionResp);
            }
            if (selectNResp_ != null)
            {
                output.WriteRawTag(122);
                output.WriteMessage(SelectNResp);
            }
            if (setSettingsReq_ != null)
            {
                output.WriteRawTag(130, 1);
                output.WriteMessage(SetSettingsReq);
            }
            if (chooseStartingPlayerResp_ != null)
            {
                output.WriteRawTag(170, 1);
                output.WriteMessage(ChooseStartingPlayerResp);
            }
            if (declareAttackersResp_ != null)
            {
                output.WriteRawTag(178, 1);
                output.WriteMessage(DeclareAttackersResp);
            }
            if (declareBlockersResp_ != null)
            {
                output.WriteRawTag(186, 1);
                output.WriteMessage(DeclareBlockersResp);
            }
            if (orderCombatDamageResp_ != null)
            {
                output.WriteRawTag(194, 1);
                output.WriteMessage(OrderCombatDamageResp);
            }
            if (assignDamageResp_ != null)
            {
                output.WriteRawTag(202, 1);
                output.WriteMessage(AssignDamageResp);
            }
            if (selectTargetsResp_ != null)
            {
                output.WriteRawTag(210, 1);
                output.WriteMessage(SelectTargetsResp);
            }
            if (selectReplacementResp_ != null)
            {
                output.WriteRawTag(218, 1);
                output.WriteMessage(SelectReplacementResp);
            }
            if (selectNGroupResp_ != null)
            {
                output.WriteRawTag(226, 1);
                output.WriteMessage(SelectNGroupResp);
            }
            if (alternativeCostResp_ != null)
            {
                output.WriteRawTag(234, 1);
                output.WriteMessage(AlternativeCostResp);
            }
            if (distributionResp_ != null)
            {
                output.WriteRawTag(242, 1);
                output.WriteMessage(DistributionResp);
            }
            if (numericInputResp_ != null)
            {
                output.WriteRawTag(250, 1);
                output.WriteMessage(NumericInputResp);
            }
            if (searchResp_ != null)
            {
                output.WriteRawTag(130, 2);
                output.WriteMessage(SearchResp);
            }
            if (actionCostResp_ != null)
            {
                output.WriteRawTag(138, 2);
                output.WriteMessage(ActionCostResp);
            }
            if (castingTimeOptionsResp_ != null)
            {
                output.WriteRawTag(146, 2);
                output.WriteMessage(CastingTimeOptionsResp);
            }
            if (selectManaTypeResp_ != null)
            {
                output.WriteRawTag(154, 2);
                output.WriteMessage(SelectManaTypeResp);
            }
            if (selectFromGroupsResp_ != null)
            {
                output.WriteRawTag(162, 2);
                output.WriteMessage(SelectFromGroupsResp);
            }
            if (searchFromGroupsResp_ != null)
            {
                output.WriteRawTag(170, 2);
                output.WriteMessage(SearchFromGroupsResp);
            }
            if (gatherResp_ != null)
            {
                output.WriteRawTag(178, 2);
                output.WriteMessage(GatherResp);
            }
            if (submitPaymentResp_ != null)
            {
                output.WriteRawTag(186, 2);
                output.WriteMessage(SubmitPaymentResp);
            }
            if (uiMessage_ != null)
            {
                output.WriteRawTag(194, 2);
                output.WriteMessage(UiMessage);
            }
            if (submitDeckResp_ != null)
            {
                output.WriteRawTag(202, 2);
                output.WriteMessage(SubmitDeckResp);
            }
            if (controlReq_ != null)
            {
                output.WriteRawTag(210, 2);
                output.WriteMessage(ControlReq);
            }
            if (TimerId != 0)
            {
                output.WriteRawTag(160, 6);
                output.WriteUInt32(TimerId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (SystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SystemSeatId);
            }
            if (GameStateId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameStateId);
            }
            if (RespId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RespId);
            }
            if (connectReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectReq);
            }
            if (cancelActionReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelActionReq);
            }
            if (chooseModalResp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChooseModalResp);
            }
            if (concedeReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConcedeReq);
            }
            if (forceDrawReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ForceDrawReq);
            }
            if (groupResp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupResp);
            }
            if (mulliganResp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MulliganResp);
            }
            if (optionalResp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionalResp);
            }
            if (orderResp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrderResp);
            }
            if (performActionResp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PerformActionResp);
            }
            if (selectNResp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectNResp);
            }
            if (setSettingsReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetSettingsReq);
            }
            if (chooseStartingPlayerResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChooseStartingPlayerResp);
            }
            if (declareAttackersResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeclareAttackersResp);
            }
            if (declareBlockersResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeclareBlockersResp);
            }
            if (orderCombatDamageResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderCombatDamageResp);
            }
            if (assignDamageResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AssignDamageResp);
            }
            if (selectTargetsResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectTargetsResp);
            }
            if (selectReplacementResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectReplacementResp);
            }
            if (selectNGroupResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectNGroupResp);
            }
            if (alternativeCostResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlternativeCostResp);
            }
            if (distributionResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DistributionResp);
            }
            if (numericInputResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(NumericInputResp);
            }
            if (searchResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SearchResp);
            }
            if (actionCostResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ActionCostResp);
            }
            if (castingTimeOptionsResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(CastingTimeOptionsResp);
            }
            if (selectManaTypeResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectManaTypeResp);
            }
            if (selectFromGroupsResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectFromGroupsResp);
            }
            if (searchFromGroupsResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SearchFromGroupsResp);
            }
            if (gatherResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(GatherResp);
            }
            if (submitPaymentResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SubmitPaymentResp);
            }
            if (uiMessage_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(UiMessage);
            }
            if (submitDeckResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SubmitDeckResp);
            }
            if (controlReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlReq);
            }
            if (TimerId != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TimerId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientToGREMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.SystemSeatId != 0)
            {
                SystemSeatId = other.SystemSeatId;
            }
            if (other.GameStateId != 0)
            {
                GameStateId = other.GameStateId;
            }
            if (other.RespId != 0)
            {
                RespId = other.RespId;
            }
            if (other.connectReq_ != null)
            {
                if (connectReq_ == null)
                {
                    connectReq_ = new ConnectReq();
                }
                ConnectReq.MergeFrom(other.ConnectReq);
            }
            if (other.cancelActionReq_ != null)
            {
                if (cancelActionReq_ == null)
                {
                    cancelActionReq_ = new CancelActionReq();
                }
                CancelActionReq.MergeFrom(other.CancelActionReq);
            }
            if (other.chooseModalResp_ != null)
            {
                if (chooseModalResp_ == null)
                {
                    chooseModalResp_ = new ChooseModalResp();
                }
                ChooseModalResp.MergeFrom(other.ChooseModalResp);
            }
            if (other.concedeReq_ != null)
            {
                if (concedeReq_ == null)
                {
                    concedeReq_ = new ConcedeReq();
                }
                ConcedeReq.MergeFrom(other.ConcedeReq);
            }
            if (other.forceDrawReq_ != null)
            {
                if (forceDrawReq_ == null)
                {
                    forceDrawReq_ = new ForceDrawReq();
                }
                ForceDrawReq.MergeFrom(other.ForceDrawReq);
            }
            if (other.groupResp_ != null)
            {
                if (groupResp_ == null)
                {
                    groupResp_ = new GroupResp();
                }
                GroupResp.MergeFrom(other.GroupResp);
            }
            if (other.mulliganResp_ != null)
            {
                if (mulliganResp_ == null)
                {
                    mulliganResp_ = new MulliganResp();
                }
                MulliganResp.MergeFrom(other.MulliganResp);
            }
            if (other.optionalResp_ != null)
            {
                if (optionalResp_ == null)
                {
                    optionalResp_ = new OptionalResp();
                }
                OptionalResp.MergeFrom(other.OptionalResp);
            }
            if (other.orderResp_ != null)
            {
                if (orderResp_ == null)
                {
                    orderResp_ = new OrderResp();
                }
                OrderResp.MergeFrom(other.OrderResp);
            }
            if (other.performActionResp_ != null)
            {
                if (performActionResp_ == null)
                {
                    performActionResp_ = new PerformActionResp();
                }
                PerformActionResp.MergeFrom(other.PerformActionResp);
            }
            if (other.selectNResp_ != null)
            {
                if (selectNResp_ == null)
                {
                    selectNResp_ = new SelectNResp();
                }
                SelectNResp.MergeFrom(other.SelectNResp);
            }
            if (other.setSettingsReq_ != null)
            {
                if (setSettingsReq_ == null)
                {
                    setSettingsReq_ = new SetSettingsReq();
                }
                SetSettingsReq.MergeFrom(other.SetSettingsReq);
            }
            if (other.chooseStartingPlayerResp_ != null)
            {
                if (chooseStartingPlayerResp_ == null)
                {
                    chooseStartingPlayerResp_ = new ChooseStartingPlayerResp();
                }
                ChooseStartingPlayerResp.MergeFrom(other.ChooseStartingPlayerResp);
            }
            if (other.declareAttackersResp_ != null)
            {
                if (declareAttackersResp_ == null)
                {
                    declareAttackersResp_ = new DeclareAttackersResp();
                }
                DeclareAttackersResp.MergeFrom(other.DeclareAttackersResp);
            }
            if (other.declareBlockersResp_ != null)
            {
                if (declareBlockersResp_ == null)
                {
                    declareBlockersResp_ = new DeclareBlockersResp();
                }
                DeclareBlockersResp.MergeFrom(other.DeclareBlockersResp);
            }
            if (other.orderCombatDamageResp_ != null)
            {
                if (orderCombatDamageResp_ == null)
                {
                    orderCombatDamageResp_ = new OrderCombatDamageResp();
                }
                OrderCombatDamageResp.MergeFrom(other.OrderCombatDamageResp);
            }
            if (other.assignDamageResp_ != null)
            {
                if (assignDamageResp_ == null)
                {
                    assignDamageResp_ = new AssignDamageResp();
                }
                AssignDamageResp.MergeFrom(other.AssignDamageResp);
            }
            if (other.selectTargetsResp_ != null)
            {
                if (selectTargetsResp_ == null)
                {
                    selectTargetsResp_ = new SelectTargetsResp();
                }
                SelectTargetsResp.MergeFrom(other.SelectTargetsResp);
            }
            if (other.selectReplacementResp_ != null)
            {
                if (selectReplacementResp_ == null)
                {
                    selectReplacementResp_ = new SelectReplacementResp();
                }
                SelectReplacementResp.MergeFrom(other.SelectReplacementResp);
            }
            if (other.selectNGroupResp_ != null)
            {
                if (selectNGroupResp_ == null)
                {
                    selectNGroupResp_ = new SelectNGroupResp();
                }
                SelectNGroupResp.MergeFrom(other.SelectNGroupResp);
            }
            if (other.alternativeCostResp_ != null)
            {
                if (alternativeCostResp_ == null)
                {
                    alternativeCostResp_ = new AlternativeCostResp();
                }
                AlternativeCostResp.MergeFrom(other.AlternativeCostResp);
            }
            if (other.distributionResp_ != null)
            {
                if (distributionResp_ == null)
                {
                    distributionResp_ = new DistributionResp();
                }
                DistributionResp.MergeFrom(other.DistributionResp);
            }
            if (other.numericInputResp_ != null)
            {
                if (numericInputResp_ == null)
                {
                    numericInputResp_ = new NumericInputResp();
                }
                NumericInputResp.MergeFrom(other.NumericInputResp);
            }
            if (other.searchResp_ != null)
            {
                if (searchResp_ == null)
                {
                    searchResp_ = new SearchResp();
                }
                SearchResp.MergeFrom(other.SearchResp);
            }
            if (other.actionCostResp_ != null)
            {
                if (actionCostResp_ == null)
                {
                    actionCostResp_ = new ActionCostResp();
                }
                ActionCostResp.MergeFrom(other.ActionCostResp);
            }
            if (other.castingTimeOptionsResp_ != null)
            {
                if (castingTimeOptionsResp_ == null)
                {
                    castingTimeOptionsResp_ = new CastingTimeOptionsResp();
                }
                CastingTimeOptionsResp.MergeFrom(other.CastingTimeOptionsResp);
            }
            if (other.selectManaTypeResp_ != null)
            {
                if (selectManaTypeResp_ == null)
                {
                    selectManaTypeResp_ = new SelectManaTypeResp();
                }
                SelectManaTypeResp.MergeFrom(other.SelectManaTypeResp);
            }
            if (other.selectFromGroupsResp_ != null)
            {
                if (selectFromGroupsResp_ == null)
                {
                    selectFromGroupsResp_ = new SelectFromGroupsResp();
                }
                SelectFromGroupsResp.MergeFrom(other.SelectFromGroupsResp);
            }
            if (other.searchFromGroupsResp_ != null)
            {
                if (searchFromGroupsResp_ == null)
                {
                    searchFromGroupsResp_ = new SearchFromGroupsResp();
                }
                SearchFromGroupsResp.MergeFrom(other.SearchFromGroupsResp);
            }
            if (other.gatherResp_ != null)
            {
                if (gatherResp_ == null)
                {
                    gatherResp_ = new GatherResp();
                }
                GatherResp.MergeFrom(other.GatherResp);
            }
            if (other.submitPaymentResp_ != null)
            {
                if (submitPaymentResp_ == null)
                {
                    submitPaymentResp_ = new SubmitPaymentResp();
                }
                SubmitPaymentResp.MergeFrom(other.SubmitPaymentResp);
            }
            if (other.uiMessage_ != null)
            {
                if (uiMessage_ == null)
                {
                    uiMessage_ = new UIMessage();
                }
                UiMessage.MergeFrom(other.UiMessage);
            }
            if (other.submitDeckResp_ != null)
            {
                if (submitDeckResp_ == null)
                {
                    submitDeckResp_ = new SubmitDeckResp();
                }
                SubmitDeckResp.MergeFrom(other.SubmitDeckResp);
            }
            if (other.controlReq_ != null)
            {
                if (controlReq_ == null)
                {
                    controlReq_ = new ControlReq();
                }
                ControlReq.MergeFrom(other.ControlReq);
            }
            if (other.TimerId != 0)
            {
                TimerId = other.TimerId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            type_ = (ClientMessageType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            SystemSeatId = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            GameStateId = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            RespId = input.ReadUInt32();
                            break;
                        }
                    case 42:
                        {
                            if (connectReq_ == null)
                            {
                                connectReq_ = new ConnectReq();
                            }
                            input.ReadMessage(connectReq_);
                            break;
                        }
                    case 50:
                        {
                            if (cancelActionReq_ == null)
                            {
                                cancelActionReq_ = new CancelActionReq();
                            }
                            input.ReadMessage(cancelActionReq_);
                            break;
                        }
                    case 58:
                        {
                            if (chooseModalResp_ == null)
                            {
                                chooseModalResp_ = new ChooseModalResp();
                            }
                            input.ReadMessage(chooseModalResp_);
                            break;
                        }
                    case 66:
                        {
                            if (concedeReq_ == null)
                            {
                                concedeReq_ = new ConcedeReq();
                            }
                            input.ReadMessage(concedeReq_);
                            break;
                        }
                    case 74:
                        {
                            if (forceDrawReq_ == null)
                            {
                                forceDrawReq_ = new ForceDrawReq();
                            }
                            input.ReadMessage(forceDrawReq_);
                            break;
                        }
                    case 82:
                        {
                            if (groupResp_ == null)
                            {
                                groupResp_ = new GroupResp();
                            }
                            input.ReadMessage(groupResp_);
                            break;
                        }
                    case 90:
                        {
                            if (mulliganResp_ == null)
                            {
                                mulliganResp_ = new MulliganResp();
                            }
                            input.ReadMessage(mulliganResp_);
                            break;
                        }
                    case 98:
                        {
                            if (optionalResp_ == null)
                            {
                                optionalResp_ = new OptionalResp();
                            }
                            input.ReadMessage(optionalResp_);
                            break;
                        }
                    case 106:
                        {
                            if (orderResp_ == null)
                            {
                                orderResp_ = new OrderResp();
                            }
                            input.ReadMessage(orderResp_);
                            break;
                        }
                    case 114:
                        {
                            if (performActionResp_ == null)
                            {
                                performActionResp_ = new PerformActionResp();
                            }
                            input.ReadMessage(performActionResp_);
                            break;
                        }
                    case 122:
                        {
                            if (selectNResp_ == null)
                            {
                                selectNResp_ = new SelectNResp();
                            }
                            input.ReadMessage(selectNResp_);
                            break;
                        }
                    case 130:
                        {
                            if (setSettingsReq_ == null)
                            {
                                setSettingsReq_ = new SetSettingsReq();
                            }
                            input.ReadMessage(setSettingsReq_);
                            break;
                        }
                    case 170:
                        {
                            if (chooseStartingPlayerResp_ == null)
                            {
                                chooseStartingPlayerResp_ = new ChooseStartingPlayerResp();
                            }
                            input.ReadMessage(chooseStartingPlayerResp_);
                            break;
                        }
                    case 178:
                        {
                            if (declareAttackersResp_ == null)
                            {
                                declareAttackersResp_ = new DeclareAttackersResp();
                            }
                            input.ReadMessage(declareAttackersResp_);
                            break;
                        }
                    case 186:
                        {
                            if (declareBlockersResp_ == null)
                            {
                                declareBlockersResp_ = new DeclareBlockersResp();
                            }
                            input.ReadMessage(declareBlockersResp_);
                            break;
                        }
                    case 194:
                        {
                            if (orderCombatDamageResp_ == null)
                            {
                                orderCombatDamageResp_ = new OrderCombatDamageResp();
                            }
                            input.ReadMessage(orderCombatDamageResp_);
                            break;
                        }
                    case 202:
                        {
                            if (assignDamageResp_ == null)
                            {
                                assignDamageResp_ = new AssignDamageResp();
                            }
                            input.ReadMessage(assignDamageResp_);
                            break;
                        }
                    case 210:
                        {
                            if (selectTargetsResp_ == null)
                            {
                                selectTargetsResp_ = new SelectTargetsResp();
                            }
                            input.ReadMessage(selectTargetsResp_);
                            break;
                        }
                    case 218:
                        {
                            if (selectReplacementResp_ == null)
                            {
                                selectReplacementResp_ = new SelectReplacementResp();
                            }
                            input.ReadMessage(selectReplacementResp_);
                            break;
                        }
                    case 226:
                        {
                            if (selectNGroupResp_ == null)
                            {
                                selectNGroupResp_ = new SelectNGroupResp();
                            }
                            input.ReadMessage(selectNGroupResp_);
                            break;
                        }
                    case 234:
                        {
                            if (alternativeCostResp_ == null)
                            {
                                alternativeCostResp_ = new AlternativeCostResp();
                            }
                            input.ReadMessage(alternativeCostResp_);
                            break;
                        }
                    case 242:
                        {
                            if (distributionResp_ == null)
                            {
                                distributionResp_ = new DistributionResp();
                            }
                            input.ReadMessage(distributionResp_);
                            break;
                        }
                    case 250:
                        {
                            if (numericInputResp_ == null)
                            {
                                numericInputResp_ = new NumericInputResp();
                            }
                            input.ReadMessage(numericInputResp_);
                            break;
                        }
                    case 258:
                        {
                            if (searchResp_ == null)
                            {
                                searchResp_ = new SearchResp();
                            }
                            input.ReadMessage(searchResp_);
                            break;
                        }
                    case 266:
                        {
                            if (actionCostResp_ == null)
                            {
                                actionCostResp_ = new ActionCostResp();
                            }
                            input.ReadMessage(actionCostResp_);
                            break;
                        }
                    case 274:
                        {
                            if (castingTimeOptionsResp_ == null)
                            {
                                castingTimeOptionsResp_ = new CastingTimeOptionsResp();
                            }
                            input.ReadMessage(castingTimeOptionsResp_);
                            break;
                        }
                    case 282:
                        {
                            if (selectManaTypeResp_ == null)
                            {
                                selectManaTypeResp_ = new SelectManaTypeResp();
                            }
                            input.ReadMessage(selectManaTypeResp_);
                            break;
                        }
                    case 290:
                        {
                            if (selectFromGroupsResp_ == null)
                            {
                                selectFromGroupsResp_ = new SelectFromGroupsResp();
                            }
                            input.ReadMessage(selectFromGroupsResp_);
                            break;
                        }
                    case 298:
                        {
                            if (searchFromGroupsResp_ == null)
                            {
                                searchFromGroupsResp_ = new SearchFromGroupsResp();
                            }
                            input.ReadMessage(searchFromGroupsResp_);
                            break;
                        }
                    case 306:
                        {
                            if (gatherResp_ == null)
                            {
                                gatherResp_ = new GatherResp();
                            }
                            input.ReadMessage(gatherResp_);
                            break;
                        }
                    case 314:
                        {
                            if (submitPaymentResp_ == null)
                            {
                                submitPaymentResp_ = new SubmitPaymentResp();
                            }
                            input.ReadMessage(submitPaymentResp_);
                            break;
                        }
                    case 322:
                        {
                            if (uiMessage_ == null)
                            {
                                uiMessage_ = new UIMessage();
                            }
                            input.ReadMessage(uiMessage_);
                            break;
                        }
                    case 330:
                        {
                            if (submitDeckResp_ == null)
                            {
                                submitDeckResp_ = new SubmitDeckResp();
                            }
                            input.ReadMessage(submitDeckResp_);
                            break;
                        }
                    case 338:
                        {
                            if (controlReq_ == null)
                            {
                                controlReq_ = new ControlReq();
                            }
                            input.ReadMessage(controlReq_);
                            break;
                        }
                    case 800:
                        {
                            TimerId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ClientToLapaMessage : pb::IMessage<ClientToLapaMessage>
    {
        private static readonly pb::MessageParser<ClientToLapaMessage> _parser = new pb::MessageParser<ClientToLapaMessage>(() => new ClientToLapaMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientToLapaMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[58]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToLapaMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToLapaMessage(ClientToLapaMessage other) : this()
        {
            payload_ = other.payload_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToLapaMessage Clone()
        {
            return new ClientToLapaMessage(this);
        }

        /// <summary>Field number for the "payload" field.</summary>
        public const int PayloadFieldNumber = 1;
        private string payload_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Payload
        {
            get { return payload_; }
            set
            {
                payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ClientToLapaMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientToLapaMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Payload != other.Payload) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Payload.Length != 0) hash ^= Payload.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Payload.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Payload);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Payload.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Payload);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientToLapaMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Payload.Length != 0)
            {
                Payload = other.Payload;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Payload = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ClientToLobbyMessage : pb::IMessage<ClientToLobbyMessage>
    {
        private static readonly pb::MessageParser<ClientToLobbyMessage> _parser = new pb::MessageParser<ClientToLobbyMessage>(() => new ClientToLobbyMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientToLobbyMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[59]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToLobbyMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToLobbyMessage(ClientToLobbyMessage other) : this()
        {
            clientId_ = other.clientId_;
            requestId_ = other.requestId_;
            timestamp_ = other.timestamp_;
            correlationInfo_ = other.correlationInfo_ != null ? other.correlationInfo_.Clone() : null;
            switch (other.MessageCase)
            {
                case MessageOneofCase.AuthenticateRequest:
                    AuthenticateRequest = other.AuthenticateRequest.Clone();
                    break;
                case MessageOneofCase.ServiceInfoRequest:
                    ServiceInfoRequest = other.ServiceInfoRequest.Clone();
                    break;
                case MessageOneofCase.ClientSessionInfo:
                    ClientSessionInfo = other.ClientSessionInfo.Clone();
                    break;
                case MessageOneofCase.GetUserIdsRequest:
                    GetUserIdsRequest = other.GetUserIdsRequest.Clone();
                    break;
                case MessageOneofCase.GetUserInfoRequest:
                    GetUserInfoRequest = other.GetUserInfoRequest.Clone();
                    break;
                case MessageOneofCase.ClearLobbyUserStatusRequest:
                    ClearLobbyUserStatusRequest = other.ClearLobbyUserStatusRequest.Clone();
                    break;
                case MessageOneofCase.JoinQueueRequest:
                    JoinQueueRequest = other.JoinQueueRequest.Clone();
                    break;
                case MessageOneofCase.DropQueueRequest:
                    DropQueueRequest = other.DropQueueRequest.Clone();
                    break;
                case MessageOneofCase.DeleteQueueRequest:
                    DeleteQueueRequest = other.DeleteQueueRequest.Clone();
                    break;
                case MessageOneofCase.JoinMatchmakingRequestV2:
                    JoinMatchmakingRequestV2 = other.JoinMatchmakingRequestV2.Clone();
                    break;
                case MessageOneofCase.DropMatchmakingRequestV2:
                    DropMatchmakingRequestV2 = other.DropMatchmakingRequestV2.Clone();
                    break;
                case MessageOneofCase.JoinConstructedMatchmakingRequest:
                    JoinConstructedMatchmakingRequest = other.JoinConstructedMatchmakingRequest.Clone();
                    break;
                case MessageOneofCase.DropConstructedMatchmakingRequest:
                    DropConstructedMatchmakingRequest = other.DropConstructedMatchmakingRequest.Clone();
                    break;
                case MessageOneofCase.MatchServiceToClientMessage:
                    MatchServiceToClientMessage = other.MatchServiceToClientMessage.Clone();
                    break;
                case MessageOneofCase.EchoRequest:
                    EchoRequest = other.EchoRequest.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToLobbyMessage Clone()
        {
            return new ClientToLobbyMessage(this);
        }

        /// <summary>Field number for the "clientId" field.</summary>
        public const int ClientIdFieldNumber = 1;
        private string clientId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientId
        {
            get { return clientId_; }
            set
            {
                clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "requestId" field.</summary>
        public const int RequestIdFieldNumber = 2;
        private int requestId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RequestId
        {
            get { return requestId_; }
            set
            {
                requestId_ = value;
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 3;
        private long timestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        /// <summary>Field number for the "correlationInfo" field.</summary>
        public const int CorrelationInfoFieldNumber = 4;
        private CorrelationInfo correlationInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CorrelationInfo CorrelationInfo
        {
            get { return correlationInfo_; }
            set
            {
                correlationInfo_ = value;
            }
        }

        /// <summary>Field number for the "authenticateRequest" field.</summary>
        public const int AuthenticateRequestFieldNumber = 100;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticateRequest AuthenticateRequest
        {
            get { return messageCase_ == MessageOneofCase.AuthenticateRequest ? (AuthenticateRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.AuthenticateRequest;
            }
        }

        /// <summary>Field number for the "serviceInfoRequest" field.</summary>
        public const int ServiceInfoRequestFieldNumber = 101;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServiceInfoRequest ServiceInfoRequest
        {
            get { return messageCase_ == MessageOneofCase.ServiceInfoRequest ? (ServiceInfoRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ServiceInfoRequest;
            }
        }

        /// <summary>Field number for the "clientSessionInfo" field.</summary>
        public const int ClientSessionInfoFieldNumber = 102;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientSessionInfo ClientSessionInfo
        {
            get { return messageCase_ == MessageOneofCase.ClientSessionInfo ? (ClientSessionInfo)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClientSessionInfo;
            }
        }

        /// <summary>Field number for the "getUserIdsRequest" field.</summary>
        public const int GetUserIdsRequestFieldNumber = 110;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserIdsRequest GetUserIdsRequest
        {
            get { return messageCase_ == MessageOneofCase.GetUserIdsRequest ? (GetLobbyUserIdsRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GetUserIdsRequest;
            }
        }

        /// <summary>Field number for the "getUserInfoRequest" field.</summary>
        public const int GetUserInfoRequestFieldNumber = 111;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserInfoRequest GetUserInfoRequest
        {
            get { return messageCase_ == MessageOneofCase.GetUserInfoRequest ? (GetLobbyUserInfoRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GetUserInfoRequest;
            }
        }

        /// <summary>Field number for the "clearLobbyUserStatusRequest" field.</summary>
        public const int ClearLobbyUserStatusRequestFieldNumber = 112;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClearLobbyUserStatusRequest ClearLobbyUserStatusRequest
        {
            get { return messageCase_ == MessageOneofCase.ClearLobbyUserStatusRequest ? (ClearLobbyUserStatusRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClearLobbyUserStatusRequest;
            }
        }

        /// <summary>Field number for the "joinQueueRequest" field.</summary>
        public const int JoinQueueRequestFieldNumber = 200;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinQueueRequest JoinQueueRequest
        {
            get { return messageCase_ == MessageOneofCase.JoinQueueRequest ? (JoinQueueRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.JoinQueueRequest;
            }
        }

        /// <summary>Field number for the "dropQueueRequest" field.</summary>
        public const int DropQueueRequestFieldNumber = 201;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropQueueRequest DropQueueRequest
        {
            get { return messageCase_ == MessageOneofCase.DropQueueRequest ? (DropQueueRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DropQueueRequest;
            }
        }

        /// <summary>Field number for the "deleteQueueRequest" field.</summary>
        public const int DeleteQueueRequestFieldNumber = 202;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteQueueRequest DeleteQueueRequest
        {
            get { return messageCase_ == MessageOneofCase.DeleteQueueRequest ? (DeleteQueueRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DeleteQueueRequest;
            }
        }

        /// <summary>Field number for the "joinMatchmakingRequestV2" field.</summary>
        public const int JoinMatchmakingRequestV2FieldNumber = 203;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingRequestV2 JoinMatchmakingRequestV2
        {
            get { return messageCase_ == MessageOneofCase.JoinMatchmakingRequestV2 ? (JoinMatchmakingRequestV2)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.JoinMatchmakingRequestV2;
            }
        }

        /// <summary>Field number for the "dropMatchmakingRequestV2" field.</summary>
        public const int DropMatchmakingRequestV2FieldNumber = 204;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingRequestV2 DropMatchmakingRequestV2
        {
            get { return messageCase_ == MessageOneofCase.DropMatchmakingRequestV2 ? (DropMatchmakingRequestV2)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DropMatchmakingRequestV2;
            }
        }

        /// <summary>Field number for the "joinConstructedMatchmakingRequest" field.</summary>
        public const int JoinConstructedMatchmakingRequestFieldNumber = 205;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinConstructedMatchmakingRequest JoinConstructedMatchmakingRequest
        {
            get { return messageCase_ == MessageOneofCase.JoinConstructedMatchmakingRequest ? (JoinConstructedMatchmakingRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.JoinConstructedMatchmakingRequest;
            }
        }

        /// <summary>Field number for the "dropConstructedMatchmakingRequest" field.</summary>
        public const int DropConstructedMatchmakingRequestFieldNumber = 206;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropConstructedMatchmakingRequest DropConstructedMatchmakingRequest
        {
            get { return messageCase_ == MessageOneofCase.DropConstructedMatchmakingRequest ? (DropConstructedMatchmakingRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DropConstructedMatchmakingRequest;
            }
        }

        /// <summary>Field number for the "matchServiceToClientMessage" field.</summary>
        public const int MatchServiceToClientMessageFieldNumber = 400;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchServiceToClientMessage MatchServiceToClientMessage
        {
            get { return messageCase_ == MessageOneofCase.MatchServiceToClientMessage ? (MatchServiceToClientMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchServiceToClientMessage;
            }
        }

        /// <summary>Field number for the "echoRequest" field.</summary>
        public const int EchoRequestFieldNumber = 1000;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EchoRequest EchoRequest
        {
            get { return messageCase_ == MessageOneofCase.EchoRequest ? (EchoRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.EchoRequest;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            AuthenticateRequest = 100,
            ServiceInfoRequest = 101,
            ClientSessionInfo = 102,
            GetUserIdsRequest = 110,
            GetUserInfoRequest = 111,
            ClearLobbyUserStatusRequest = 112,
            JoinQueueRequest = 200,
            DropQueueRequest = 201,
            DeleteQueueRequest = 202,
            JoinMatchmakingRequestV2 = 203,
            DropMatchmakingRequestV2 = 204,
            JoinConstructedMatchmakingRequest = 205,
            DropConstructedMatchmakingRequest = 206,
            MatchServiceToClientMessage = 400,
            EchoRequest = 1000,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ClientToLobbyMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientToLobbyMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ClientId != other.ClientId) return false;
            if (RequestId != other.RequestId) return false;
            if (Timestamp != other.Timestamp) return false;
            if (!object.Equals(CorrelationInfo, other.CorrelationInfo)) return false;
            if (!object.Equals(AuthenticateRequest, other.AuthenticateRequest)) return false;
            if (!object.Equals(ServiceInfoRequest, other.ServiceInfoRequest)) return false;
            if (!object.Equals(ClientSessionInfo, other.ClientSessionInfo)) return false;
            if (!object.Equals(GetUserIdsRequest, other.GetUserIdsRequest)) return false;
            if (!object.Equals(GetUserInfoRequest, other.GetUserInfoRequest)) return false;
            if (!object.Equals(ClearLobbyUserStatusRequest, other.ClearLobbyUserStatusRequest)) return false;
            if (!object.Equals(JoinQueueRequest, other.JoinQueueRequest)) return false;
            if (!object.Equals(DropQueueRequest, other.DropQueueRequest)) return false;
            if (!object.Equals(DeleteQueueRequest, other.DeleteQueueRequest)) return false;
            if (!object.Equals(JoinMatchmakingRequestV2, other.JoinMatchmakingRequestV2)) return false;
            if (!object.Equals(DropMatchmakingRequestV2, other.DropMatchmakingRequestV2)) return false;
            if (!object.Equals(JoinConstructedMatchmakingRequest, other.JoinConstructedMatchmakingRequest)) return false;
            if (!object.Equals(DropConstructedMatchmakingRequest, other.DropConstructedMatchmakingRequest)) return false;
            if (!object.Equals(MatchServiceToClientMessage, other.MatchServiceToClientMessage)) return false;
            if (!object.Equals(EchoRequest, other.EchoRequest)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
            if (RequestId != 0) hash ^= RequestId.GetHashCode();
            if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
            if (correlationInfo_ != null) hash ^= CorrelationInfo.GetHashCode();
            if (messageCase_ == MessageOneofCase.AuthenticateRequest) hash ^= AuthenticateRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.ServiceInfoRequest) hash ^= ServiceInfoRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.ClientSessionInfo) hash ^= ClientSessionInfo.GetHashCode();
            if (messageCase_ == MessageOneofCase.GetUserIdsRequest) hash ^= GetUserIdsRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.GetUserInfoRequest) hash ^= GetUserInfoRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.ClearLobbyUserStatusRequest) hash ^= ClearLobbyUserStatusRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.JoinQueueRequest) hash ^= JoinQueueRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.DropQueueRequest) hash ^= DropQueueRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.DeleteQueueRequest) hash ^= DeleteQueueRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.JoinMatchmakingRequestV2) hash ^= JoinMatchmakingRequestV2.GetHashCode();
            if (messageCase_ == MessageOneofCase.DropMatchmakingRequestV2) hash ^= DropMatchmakingRequestV2.GetHashCode();
            if (messageCase_ == MessageOneofCase.JoinConstructedMatchmakingRequest) hash ^= JoinConstructedMatchmakingRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.DropConstructedMatchmakingRequest) hash ^= DropConstructedMatchmakingRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.MatchServiceToClientMessage) hash ^= MatchServiceToClientMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.EchoRequest) hash ^= EchoRequest.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ClientId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ClientId);
            }
            if (RequestId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(RequestId);
            }
            if (Timestamp != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(Timestamp);
            }
            if (correlationInfo_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(CorrelationInfo);
            }
            if (messageCase_ == MessageOneofCase.AuthenticateRequest)
            {
                output.WriteRawTag(162, 6);
                output.WriteMessage(AuthenticateRequest);
            }
            if (messageCase_ == MessageOneofCase.ServiceInfoRequest)
            {
                output.WriteRawTag(170, 6);
                output.WriteMessage(ServiceInfoRequest);
            }
            if (messageCase_ == MessageOneofCase.ClientSessionInfo)
            {
                output.WriteRawTag(178, 6);
                output.WriteMessage(ClientSessionInfo);
            }
            if (messageCase_ == MessageOneofCase.GetUserIdsRequest)
            {
                output.WriteRawTag(242, 6);
                output.WriteMessage(GetUserIdsRequest);
            }
            if (messageCase_ == MessageOneofCase.GetUserInfoRequest)
            {
                output.WriteRawTag(250, 6);
                output.WriteMessage(GetUserInfoRequest);
            }
            if (messageCase_ == MessageOneofCase.ClearLobbyUserStatusRequest)
            {
                output.WriteRawTag(130, 7);
                output.WriteMessage(ClearLobbyUserStatusRequest);
            }
            if (messageCase_ == MessageOneofCase.JoinQueueRequest)
            {
                output.WriteRawTag(194, 12);
                output.WriteMessage(JoinQueueRequest);
            }
            if (messageCase_ == MessageOneofCase.DropQueueRequest)
            {
                output.WriteRawTag(202, 12);
                output.WriteMessage(DropQueueRequest);
            }
            if (messageCase_ == MessageOneofCase.DeleteQueueRequest)
            {
                output.WriteRawTag(210, 12);
                output.WriteMessage(DeleteQueueRequest);
            }
            if (messageCase_ == MessageOneofCase.JoinMatchmakingRequestV2)
            {
                output.WriteRawTag(218, 12);
                output.WriteMessage(JoinMatchmakingRequestV2);
            }
            if (messageCase_ == MessageOneofCase.DropMatchmakingRequestV2)
            {
                output.WriteRawTag(226, 12);
                output.WriteMessage(DropMatchmakingRequestV2);
            }
            if (messageCase_ == MessageOneofCase.JoinConstructedMatchmakingRequest)
            {
                output.WriteRawTag(234, 12);
                output.WriteMessage(JoinConstructedMatchmakingRequest);
            }
            if (messageCase_ == MessageOneofCase.DropConstructedMatchmakingRequest)
            {
                output.WriteRawTag(242, 12);
                output.WriteMessage(DropConstructedMatchmakingRequest);
            }
            if (messageCase_ == MessageOneofCase.MatchServiceToClientMessage)
            {
                output.WriteRawTag(130, 25);
                output.WriteMessage(MatchServiceToClientMessage);
            }
            if (messageCase_ == MessageOneofCase.EchoRequest)
            {
                output.WriteRawTag(194, 62);
                output.WriteMessage(EchoRequest);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ClientId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
            }
            if (RequestId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestId);
            }
            if (Timestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (correlationInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CorrelationInfo);
            }
            if (messageCase_ == MessageOneofCase.AuthenticateRequest)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AuthenticateRequest);
            }
            if (messageCase_ == MessageOneofCase.ServiceInfoRequest)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ServiceInfoRequest);
            }
            if (messageCase_ == MessageOneofCase.ClientSessionInfo)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClientSessionInfo);
            }
            if (messageCase_ == MessageOneofCase.GetUserIdsRequest)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetUserIdsRequest);
            }
            if (messageCase_ == MessageOneofCase.GetUserInfoRequest)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetUserInfoRequest);
            }
            if (messageCase_ == MessageOneofCase.ClearLobbyUserStatusRequest)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClearLobbyUserStatusRequest);
            }
            if (messageCase_ == MessageOneofCase.JoinQueueRequest)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinQueueRequest);
            }
            if (messageCase_ == MessageOneofCase.DropQueueRequest)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropQueueRequest);
            }
            if (messageCase_ == MessageOneofCase.DeleteQueueRequest)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeleteQueueRequest);
            }
            if (messageCase_ == MessageOneofCase.JoinMatchmakingRequestV2)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinMatchmakingRequestV2);
            }
            if (messageCase_ == MessageOneofCase.DropMatchmakingRequestV2)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropMatchmakingRequestV2);
            }
            if (messageCase_ == MessageOneofCase.JoinConstructedMatchmakingRequest)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinConstructedMatchmakingRequest);
            }
            if (messageCase_ == MessageOneofCase.DropConstructedMatchmakingRequest)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropConstructedMatchmakingRequest);
            }
            if (messageCase_ == MessageOneofCase.MatchServiceToClientMessage)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchServiceToClientMessage);
            }
            if (messageCase_ == MessageOneofCase.EchoRequest)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(EchoRequest);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientToLobbyMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ClientId.Length != 0)
            {
                ClientId = other.ClientId;
            }
            if (other.RequestId != 0)
            {
                RequestId = other.RequestId;
            }
            if (other.Timestamp != 0L)
            {
                Timestamp = other.Timestamp;
            }
            if (other.correlationInfo_ != null)
            {
                if (correlationInfo_ == null)
                {
                    correlationInfo_ = new CorrelationInfo();
                }
                CorrelationInfo.MergeFrom(other.CorrelationInfo);
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.AuthenticateRequest:
                    if (AuthenticateRequest == null)
                    {
                        AuthenticateRequest = new AuthenticateRequest();
                    }
                    AuthenticateRequest.MergeFrom(other.AuthenticateRequest);
                    break;
                case MessageOneofCase.ServiceInfoRequest:
                    if (ServiceInfoRequest == null)
                    {
                        ServiceInfoRequest = new ServiceInfoRequest();
                    }
                    ServiceInfoRequest.MergeFrom(other.ServiceInfoRequest);
                    break;
                case MessageOneofCase.ClientSessionInfo:
                    if (ClientSessionInfo == null)
                    {
                        ClientSessionInfo = new ClientSessionInfo();
                    }
                    ClientSessionInfo.MergeFrom(other.ClientSessionInfo);
                    break;
                case MessageOneofCase.GetUserIdsRequest:
                    if (GetUserIdsRequest == null)
                    {
                        GetUserIdsRequest = new GetLobbyUserIdsRequest();
                    }
                    GetUserIdsRequest.MergeFrom(other.GetUserIdsRequest);
                    break;
                case MessageOneofCase.GetUserInfoRequest:
                    if (GetUserInfoRequest == null)
                    {
                        GetUserInfoRequest = new GetLobbyUserInfoRequest();
                    }
                    GetUserInfoRequest.MergeFrom(other.GetUserInfoRequest);
                    break;
                case MessageOneofCase.ClearLobbyUserStatusRequest:
                    if (ClearLobbyUserStatusRequest == null)
                    {
                        ClearLobbyUserStatusRequest = new ClearLobbyUserStatusRequest();
                    }
                    ClearLobbyUserStatusRequest.MergeFrom(other.ClearLobbyUserStatusRequest);
                    break;
                case MessageOneofCase.JoinQueueRequest:
                    if (JoinQueueRequest == null)
                    {
                        JoinQueueRequest = new JoinQueueRequest();
                    }
                    JoinQueueRequest.MergeFrom(other.JoinQueueRequest);
                    break;
                case MessageOneofCase.DropQueueRequest:
                    if (DropQueueRequest == null)
                    {
                        DropQueueRequest = new DropQueueRequest();
                    }
                    DropQueueRequest.MergeFrom(other.DropQueueRequest);
                    break;
                case MessageOneofCase.DeleteQueueRequest:
                    if (DeleteQueueRequest == null)
                    {
                        DeleteQueueRequest = new DeleteQueueRequest();
                    }
                    DeleteQueueRequest.MergeFrom(other.DeleteQueueRequest);
                    break;
                case MessageOneofCase.JoinMatchmakingRequestV2:
                    if (JoinMatchmakingRequestV2 == null)
                    {
                        JoinMatchmakingRequestV2 = new JoinMatchmakingRequestV2();
                    }
                    JoinMatchmakingRequestV2.MergeFrom(other.JoinMatchmakingRequestV2);
                    break;
                case MessageOneofCase.DropMatchmakingRequestV2:
                    if (DropMatchmakingRequestV2 == null)
                    {
                        DropMatchmakingRequestV2 = new DropMatchmakingRequestV2();
                    }
                    DropMatchmakingRequestV2.MergeFrom(other.DropMatchmakingRequestV2);
                    break;
                case MessageOneofCase.JoinConstructedMatchmakingRequest:
                    if (JoinConstructedMatchmakingRequest == null)
                    {
                        JoinConstructedMatchmakingRequest = new JoinConstructedMatchmakingRequest();
                    }
                    JoinConstructedMatchmakingRequest.MergeFrom(other.JoinConstructedMatchmakingRequest);
                    break;
                case MessageOneofCase.DropConstructedMatchmakingRequest:
                    if (DropConstructedMatchmakingRequest == null)
                    {
                        DropConstructedMatchmakingRequest = new DropConstructedMatchmakingRequest();
                    }
                    DropConstructedMatchmakingRequest.MergeFrom(other.DropConstructedMatchmakingRequest);
                    break;
                case MessageOneofCase.MatchServiceToClientMessage:
                    if (MatchServiceToClientMessage == null)
                    {
                        MatchServiceToClientMessage = new MatchServiceToClientMessage();
                    }
                    MatchServiceToClientMessage.MergeFrom(other.MatchServiceToClientMessage);
                    break;
                case MessageOneofCase.EchoRequest:
                    if (EchoRequest == null)
                    {
                        EchoRequest = new EchoRequest();
                    }
                    EchoRequest.MergeFrom(other.EchoRequest);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ClientId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            RequestId = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                    case 34:
                        {
                            if (correlationInfo_ == null)
                            {
                                correlationInfo_ = new CorrelationInfo();
                            }
                            input.ReadMessage(correlationInfo_);
                            break;
                        }
                    case 802:
                        {
                            AuthenticateRequest subBuilder = new AuthenticateRequest();
                            if (messageCase_ == MessageOneofCase.AuthenticateRequest)
                            {
                                subBuilder.MergeFrom(AuthenticateRequest);
                            }
                            input.ReadMessage(subBuilder);
                            AuthenticateRequest = subBuilder;
                            break;
                        }
                    case 810:
                        {
                            ServiceInfoRequest subBuilder = new ServiceInfoRequest();
                            if (messageCase_ == MessageOneofCase.ServiceInfoRequest)
                            {
                                subBuilder.MergeFrom(ServiceInfoRequest);
                            }
                            input.ReadMessage(subBuilder);
                            ServiceInfoRequest = subBuilder;
                            break;
                        }
                    case 818:
                        {
                            ClientSessionInfo subBuilder = new ClientSessionInfo();
                            if (messageCase_ == MessageOneofCase.ClientSessionInfo)
                            {
                                subBuilder.MergeFrom(ClientSessionInfo);
                            }
                            input.ReadMessage(subBuilder);
                            ClientSessionInfo = subBuilder;
                            break;
                        }
                    case 882:
                        {
                            GetLobbyUserIdsRequest subBuilder = new GetLobbyUserIdsRequest();
                            if (messageCase_ == MessageOneofCase.GetUserIdsRequest)
                            {
                                subBuilder.MergeFrom(GetUserIdsRequest);
                            }
                            input.ReadMessage(subBuilder);
                            GetUserIdsRequest = subBuilder;
                            break;
                        }
                    case 890:
                        {
                            GetLobbyUserInfoRequest subBuilder = new GetLobbyUserInfoRequest();
                            if (messageCase_ == MessageOneofCase.GetUserInfoRequest)
                            {
                                subBuilder.MergeFrom(GetUserInfoRequest);
                            }
                            input.ReadMessage(subBuilder);
                            GetUserInfoRequest = subBuilder;
                            break;
                        }
                    case 898:
                        {
                            ClearLobbyUserStatusRequest subBuilder = new ClearLobbyUserStatusRequest();
                            if (messageCase_ == MessageOneofCase.ClearLobbyUserStatusRequest)
                            {
                                subBuilder.MergeFrom(ClearLobbyUserStatusRequest);
                            }
                            input.ReadMessage(subBuilder);
                            ClearLobbyUserStatusRequest = subBuilder;
                            break;
                        }
                    case 1602:
                        {
                            JoinQueueRequest subBuilder = new JoinQueueRequest();
                            if (messageCase_ == MessageOneofCase.JoinQueueRequest)
                            {
                                subBuilder.MergeFrom(JoinQueueRequest);
                            }
                            input.ReadMessage(subBuilder);
                            JoinQueueRequest = subBuilder;
                            break;
                        }
                    case 1610:
                        {
                            DropQueueRequest subBuilder = new DropQueueRequest();
                            if (messageCase_ == MessageOneofCase.DropQueueRequest)
                            {
                                subBuilder.MergeFrom(DropQueueRequest);
                            }
                            input.ReadMessage(subBuilder);
                            DropQueueRequest = subBuilder;
                            break;
                        }
                    case 1618:
                        {
                            DeleteQueueRequest subBuilder = new DeleteQueueRequest();
                            if (messageCase_ == MessageOneofCase.DeleteQueueRequest)
                            {
                                subBuilder.MergeFrom(DeleteQueueRequest);
                            }
                            input.ReadMessage(subBuilder);
                            DeleteQueueRequest = subBuilder;
                            break;
                        }
                    case 1626:
                        {
                            JoinMatchmakingRequestV2 subBuilder = new JoinMatchmakingRequestV2();
                            if (messageCase_ == MessageOneofCase.JoinMatchmakingRequestV2)
                            {
                                subBuilder.MergeFrom(JoinMatchmakingRequestV2);
                            }
                            input.ReadMessage(subBuilder);
                            JoinMatchmakingRequestV2 = subBuilder;
                            break;
                        }
                    case 1634:
                        {
                            DropMatchmakingRequestV2 subBuilder = new DropMatchmakingRequestV2();
                            if (messageCase_ == MessageOneofCase.DropMatchmakingRequestV2)
                            {
                                subBuilder.MergeFrom(DropMatchmakingRequestV2);
                            }
                            input.ReadMessage(subBuilder);
                            DropMatchmakingRequestV2 = subBuilder;
                            break;
                        }
                    case 1642:
                        {
                            JoinConstructedMatchmakingRequest subBuilder = new JoinConstructedMatchmakingRequest();
                            if (messageCase_ == MessageOneofCase.JoinConstructedMatchmakingRequest)
                            {
                                subBuilder.MergeFrom(JoinConstructedMatchmakingRequest);
                            }
                            input.ReadMessage(subBuilder);
                            JoinConstructedMatchmakingRequest = subBuilder;
                            break;
                        }
                    case 1650:
                        {
                            DropConstructedMatchmakingRequest subBuilder = new DropConstructedMatchmakingRequest();
                            if (messageCase_ == MessageOneofCase.DropConstructedMatchmakingRequest)
                            {
                                subBuilder.MergeFrom(DropConstructedMatchmakingRequest);
                            }
                            input.ReadMessage(subBuilder);
                            DropConstructedMatchmakingRequest = subBuilder;
                            break;
                        }
                    case 3202:
                        {
                            MatchServiceToClientMessage subBuilder = new MatchServiceToClientMessage();
                            if (messageCase_ == MessageOneofCase.MatchServiceToClientMessage)
                            {
                                subBuilder.MergeFrom(MatchServiceToClientMessage);
                            }
                            input.ReadMessage(subBuilder);
                            MatchServiceToClientMessage = subBuilder;
                            break;
                        }
                    case 8002:
                        {
                            EchoRequest subBuilder = new EchoRequest();
                            if (messageCase_ == MessageOneofCase.EchoRequest)
                            {
                                subBuilder.MergeFrom(EchoRequest);
                            }
                            input.ReadMessage(subBuilder);
                            EchoRequest = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ClientToMatchDoorConnectRequest : pb::IMessage<ClientToMatchDoorConnectRequest>
    {
        private static readonly pb::MessageParser<ClientToMatchDoorConnectRequest> _parser = new pb::MessageParser<ClientToMatchDoorConnectRequest>(() => new ClientToMatchDoorConnectRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientToMatchDoorConnectRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[60]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToMatchDoorConnectRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToMatchDoorConnectRequest(ClientToMatchDoorConnectRequest other) : this()
        {
            matchId_ = other.matchId_;
            mcFabricUri_ = other.mcFabricUri_;
            clientToGreMessageBytes_ = other.clientToGreMessageBytes_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToMatchDoorConnectRequest Clone()
        {
            return new ClientToMatchDoorConnectRequest(this);
        }

        /// <summary>Field number for the "matchId" field.</summary>
        public const int MatchIdFieldNumber = 1;
        private string matchId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchId
        {
            get { return matchId_; }
            set
            {
                matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "mcFabricUri" field.</summary>
        public const int McFabricUriFieldNumber = 2;
        private string mcFabricUri_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string McFabricUri
        {
            get { return mcFabricUri_; }
            set
            {
                mcFabricUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "clientToGreMessageBytes" field.</summary>
        public const int ClientToGreMessageBytesFieldNumber = 10;
        private pb::ByteString clientToGreMessageBytes_ = pb::ByteString.Empty;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ClientToGreMessageBytes
        {
            get { return clientToGreMessageBytes_; }
            set
            {
                clientToGreMessageBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ClientToMatchDoorConnectRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientToMatchDoorConnectRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchId != other.MatchId) return false;
            if (McFabricUri != other.McFabricUri) return false;
            if (ClientToGreMessageBytes != other.ClientToGreMessageBytes) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
            if (McFabricUri.Length != 0) hash ^= McFabricUri.GetHashCode();
            if (ClientToGreMessageBytes.Length != 0) hash ^= ClientToGreMessageBytes.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MatchId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(MatchId);
            }
            if (McFabricUri.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(McFabricUri);
            }
            if (ClientToGreMessageBytes.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteBytes(ClientToGreMessageBytes);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
            }
            if (McFabricUri.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(McFabricUri);
            }
            if (ClientToGreMessageBytes.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientToGreMessageBytes);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientToMatchDoorConnectRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchId.Length != 0)
            {
                MatchId = other.MatchId;
            }
            if (other.McFabricUri.Length != 0)
            {
                McFabricUri = other.McFabricUri;
            }
            if (other.ClientToGreMessageBytes.Length != 0)
            {
                ClientToGreMessageBytes = other.ClientToGreMessageBytes;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            MatchId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            McFabricUri = input.ReadString();
                            break;
                        }
                    case 82:
                        {
                            ClientToGreMessageBytes = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ClientToMatchServiceMessage : pb::IMessage<ClientToMatchServiceMessage>
    {
        private static readonly pb::MessageParser<ClientToMatchServiceMessage> _parser = new pb::MessageParser<ClientToMatchServiceMessage>(() => new ClientToMatchServiceMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientToMatchServiceMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[61]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToMatchServiceMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToMatchServiceMessage(ClientToMatchServiceMessage other) : this()
        {
            transactionId_ = other.transactionId_;
            payload_ = other.payload_;
            requestId_ = other.requestId_;
            clientToMatchServiceMessageType_ = other.clientToMatchServiceMessageType_;
            timestamp_ = other.timestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToMatchServiceMessage Clone()
        {
            return new ClientToMatchServiceMessage(this);
        }

        /// <summary>Field number for the "transactionId" field.</summary>
        public const int TransactionIdFieldNumber = 4;
        private string transactionId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TransactionId
        {
            get { return transactionId_; }
            set
            {
                transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "payload" field.</summary>
        public const int PayloadFieldNumber = 100;
        private pb::ByteString payload_ = pb::ByteString.Empty;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Payload
        {
            get { return payload_; }
            set
            {
                payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "requestId" field.</summary>
        public const int RequestIdFieldNumber = 1;
        private int requestId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RequestId
        {
            get { return requestId_; }
            set
            {
                requestId_ = value;
            }
        }

        /// <summary>Field number for the "clientToMatchServiceMessageType" field.</summary>
        public const int ClientToMatchServiceMessageTypeFieldNumber = 2;
        private ClientToMatchServiceMessageType clientToMatchServiceMessageType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToMatchServiceMessageType ClientToMatchServiceMessageType
        {
            get { return clientToMatchServiceMessageType_; }
            set
            {
                clientToMatchServiceMessageType_ = value;
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 3;
        private long timestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ClientToMatchServiceMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientToMatchServiceMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TransactionId != other.TransactionId) return false;
            if (Payload != other.Payload) return false;
            if (RequestId != other.RequestId) return false;
            if (ClientToMatchServiceMessageType != other.ClientToMatchServiceMessageType) return false;
            if (Timestamp != other.Timestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TransactionId.Length != 0) hash ^= TransactionId.GetHashCode();
            if (Payload.Length != 0) hash ^= Payload.GetHashCode();
            if (RequestId != 0) hash ^= RequestId.GetHashCode();
            if (ClientToMatchServiceMessageType != 0) hash ^= ClientToMatchServiceMessageType.GetHashCode();
            if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (RequestId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(RequestId);
            }
            if (ClientToMatchServiceMessageType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)ClientToMatchServiceMessageType);
            }
            if (Timestamp != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(Timestamp);
            }
            if (TransactionId.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(TransactionId);
            }
            if (Payload.Length != 0)
            {
                output.WriteRawTag(162, 6);
                output.WriteBytes(Payload);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TransactionId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionId);
            }
            if (Payload.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeBytesSize(Payload);
            }
            if (RequestId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestId);
            }
            if (ClientToMatchServiceMessageType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ClientToMatchServiceMessageType);
            }
            if (Timestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientToMatchServiceMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TransactionId.Length != 0)
            {
                TransactionId = other.TransactionId;
            }
            if (other.Payload.Length != 0)
            {
                Payload = other.Payload;
            }
            if (other.RequestId != 0)
            {
                RequestId = other.RequestId;
            }
            if (other.ClientToMatchServiceMessageType != 0)
            {
                ClientToMatchServiceMessageType = other.ClientToMatchServiceMessageType;
            }
            if (other.Timestamp != 0L)
            {
                Timestamp = other.Timestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            RequestId = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            clientToMatchServiceMessageType_ = (ClientToMatchServiceMessageType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                    case 34:
                        {
                            TransactionId = input.ReadString();
                            break;
                        }
                    case 802:
                        {
                            Payload = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CombatDamageOrder : pb::IMessage<CombatDamageOrder>
    {
        private static readonly pb::MessageParser<CombatDamageOrder> _parser = new pb::MessageParser<CombatDamageOrder>(() => new CombatDamageOrder());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CombatDamageOrder> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[62]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CombatDamageOrder()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CombatDamageOrder(CombatDamageOrder other) : this()
        {
            instanceId_ = other.instanceId_;
            recipients_ = other.recipients_ != null ? other.recipients_.Clone() : null;
            decisionPrompt_ = other.decisionPrompt_ != null ? other.decisionPrompt_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CombatDamageOrder Clone()
        {
            return new CombatDamageOrder(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "recipients" field.</summary>
        public const int RecipientsFieldNumber = 2;
        private OrderReq recipients_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderReq Recipients
        {
            get { return recipients_; }
            set
            {
                recipients_ = value;
            }
        }

        /// <summary>Field number for the "decisionPrompt" field.</summary>
        public const int DecisionPromptFieldNumber = 3;
        private Prompt decisionPrompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt DecisionPrompt
        {
            get { return decisionPrompt_; }
            set
            {
                decisionPrompt_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CombatDamageOrder);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CombatDamageOrder other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            if (!object.Equals(Recipients, other.Recipients)) return false;
            if (!object.Equals(DecisionPrompt, other.DecisionPrompt)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (recipients_ != null) hash ^= Recipients.GetHashCode();
            if (decisionPrompt_ != null) hash ^= DecisionPrompt.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(InstanceId);
            }
            if (recipients_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Recipients);
            }
            if (decisionPrompt_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(DecisionPrompt);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (recipients_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Recipients);
            }
            if (decisionPrompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DecisionPrompt);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CombatDamageOrder other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.recipients_ != null)
            {
                if (recipients_ == null)
                {
                    recipients_ = new OrderReq();
                }
                Recipients.MergeFrom(other.Recipients);
            }
            if (other.decisionPrompt_ != null)
            {
                if (decisionPrompt_ == null)
                {
                    decisionPrompt_ = new Prompt();
                }
                DecisionPrompt.MergeFrom(other.DecisionPrompt);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            if (recipients_ == null)
                            {
                                recipients_ = new OrderReq();
                            }
                            input.ReadMessage(recipients_);
                            break;
                        }
                    case 26:
                        {
                            if (decisionPrompt_ == null)
                            {
                                decisionPrompt_ = new Prompt();
                            }
                            input.ReadMessage(decisionPrompt_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CombatDamageOrderAssignment : pb::IMessage<CombatDamageOrderAssignment>
    {
        private static readonly pb::MessageParser<CombatDamageOrderAssignment> _parser = new pb::MessageParser<CombatDamageOrderAssignment>(() => new CombatDamageOrderAssignment());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CombatDamageOrderAssignment> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[63]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CombatDamageOrderAssignment()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CombatDamageOrderAssignment(CombatDamageOrderAssignment other) : this()
        {
            instanceId_ = other.instanceId_;
            recipients_ = other.recipients_ != null ? other.recipients_.Clone() : null;
            decisionPrompt_ = other.decisionPrompt_ != null ? other.decisionPrompt_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CombatDamageOrderAssignment Clone()
        {
            return new CombatDamageOrderAssignment(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "recipients" field.</summary>
        public const int RecipientsFieldNumber = 2;
        private OrderResp recipients_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderResp Recipients
        {
            get { return recipients_; }
            set
            {
                recipients_ = value;
            }
        }

        /// <summary>Field number for the "decisionPrompt" field.</summary>
        public const int DecisionPromptFieldNumber = 3;
        private Prompt decisionPrompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt DecisionPrompt
        {
            get { return decisionPrompt_; }
            set
            {
                decisionPrompt_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CombatDamageOrderAssignment);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CombatDamageOrderAssignment other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            if (!object.Equals(Recipients, other.Recipients)) return false;
            if (!object.Equals(DecisionPrompt, other.DecisionPrompt)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (recipients_ != null) hash ^= Recipients.GetHashCode();
            if (decisionPrompt_ != null) hash ^= DecisionPrompt.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(InstanceId);
            }
            if (recipients_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Recipients);
            }
            if (decisionPrompt_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(DecisionPrompt);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (recipients_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Recipients);
            }
            if (decisionPrompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DecisionPrompt);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CombatDamageOrderAssignment other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.recipients_ != null)
            {
                if (recipients_ == null)
                {
                    recipients_ = new OrderResp();
                }
                Recipients.MergeFrom(other.Recipients);
            }
            if (other.decisionPrompt_ != null)
            {
                if (decisionPrompt_ == null)
                {
                    decisionPrompt_ = new Prompt();
                }
                DecisionPrompt.MergeFrom(other.DecisionPrompt);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            if (recipients_ == null)
                            {
                                recipients_ = new OrderResp();
                            }
                            input.ReadMessage(recipients_);
                            break;
                        }
                    case 26:
                        {
                            if (decisionPrompt_ == null)
                            {
                                decisionPrompt_ = new Prompt();
                            }
                            input.ReadMessage(decisionPrompt_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Composite : pb::IMessage<Composite>
    {
        private static readonly pb::MessageParser<Composite> _parser = new pb::MessageParser<Composite>(() => new Composite());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Composite> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[64]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Composite()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Composite(Composite other) : this()
        {
            switch (other.MessageCase)
            {
                case MessageOneofCase.Sequence:
                    Sequence = other.Sequence.Clone();
                    break;
                case MessageOneofCase.Selector:
                    Selector = other.Selector.Clone();
                    break;
                case MessageOneofCase.Parallel:
                    Parallel = other.Parallel.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Composite Clone()
        {
            return new Composite(this);
        }

        /// <summary>Field number for the "sequence" field.</summary>
        public const int SequenceFieldNumber = 1;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sequence Sequence
        {
            get { return messageCase_ == MessageOneofCase.Sequence ? (Sequence)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Sequence;
            }
        }

        /// <summary>Field number for the "selector" field.</summary>
        public const int SelectorFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Selector Selector
        {
            get { return messageCase_ == MessageOneofCase.Selector ? (Selector)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Selector;
            }
        }

        /// <summary>Field number for the "parallel" field.</summary>
        public const int ParallelFieldNumber = 3;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Parallel Parallel
        {
            get { return messageCase_ == MessageOneofCase.Parallel ? (Parallel)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Parallel;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            Sequence = 1,
            Selector = 2,
            Parallel = 3,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Composite);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Composite other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Sequence, other.Sequence)) return false;
            if (!object.Equals(Selector, other.Selector)) return false;
            if (!object.Equals(Parallel, other.Parallel)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (messageCase_ == MessageOneofCase.Sequence) hash ^= Sequence.GetHashCode();
            if (messageCase_ == MessageOneofCase.Selector) hash ^= Selector.GetHashCode();
            if (messageCase_ == MessageOneofCase.Parallel) hash ^= Parallel.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (messageCase_ == MessageOneofCase.Sequence)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Sequence);
            }
            if (messageCase_ == MessageOneofCase.Selector)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Selector);
            }
            if (messageCase_ == MessageOneofCase.Parallel)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Parallel);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (messageCase_ == MessageOneofCase.Sequence)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sequence);
            }
            if (messageCase_ == MessageOneofCase.Selector)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selector);
            }
            if (messageCase_ == MessageOneofCase.Parallel)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parallel);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Composite other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.Sequence:
                    if (Sequence == null)
                    {
                        Sequence = new Sequence();
                    }
                    Sequence.MergeFrom(other.Sequence);
                    break;
                case MessageOneofCase.Selector:
                    if (Selector == null)
                    {
                        Selector = new Selector();
                    }
                    Selector.MergeFrom(other.Selector);
                    break;
                case MessageOneofCase.Parallel:
                    if (Parallel == null)
                    {
                        Parallel = new Parallel();
                    }
                    Parallel.MergeFrom(other.Parallel);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Sequence subBuilder = new Sequence();
                            if (messageCase_ == MessageOneofCase.Sequence)
                            {
                                subBuilder.MergeFrom(Sequence);
                            }
                            input.ReadMessage(subBuilder);
                            Sequence = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            Selector subBuilder = new Selector();
                            if (messageCase_ == MessageOneofCase.Selector)
                            {
                                subBuilder.MergeFrom(Selector);
                            }
                            input.ReadMessage(subBuilder);
                            Selector = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            Parallel subBuilder = new Parallel();
                            if (messageCase_ == MessageOneofCase.Parallel)
                            {
                                subBuilder.MergeFrom(Parallel);
                            }
                            input.ReadMessage(subBuilder);
                            Parallel = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ConcedeReq : pb::IMessage<ConcedeReq>
    {
        private static readonly pb::MessageParser<ConcedeReq> _parser = new pb::MessageParser<ConcedeReq>(() => new ConcedeReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConcedeReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[65]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConcedeReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConcedeReq(ConcedeReq other) : this()
        {
            scope_ = other.scope_;
            gameNumber_ = other.gameNumber_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConcedeReq Clone()
        {
            return new ConcedeReq(this);
        }

        /// <summary>Field number for the "scope" field.</summary>
        public const int ScopeFieldNumber = 1;
        private MatchScope scope_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchScope Scope
        {
            get { return scope_; }
            set
            {
                scope_ = value;
            }
        }

        /// <summary>Field number for the "gameNumber" field.</summary>
        public const int GameNumberFieldNumber = 2;
        private uint gameNumber_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameNumber
        {
            get { return gameNumber_; }
            set
            {
                gameNumber_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ConcedeReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConcedeReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Scope != other.Scope) return false;
            if (GameNumber != other.GameNumber) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Scope != 0) hash ^= Scope.GetHashCode();
            if (GameNumber != 0) hash ^= GameNumber.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Scope != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Scope);
            }
            if (GameNumber != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(GameNumber);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Scope != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Scope);
            }
            if (GameNumber != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameNumber);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConcedeReq other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Scope != 0)
            {
                Scope = other.Scope;
            }
            if (other.GameNumber != 0)
            {
                GameNumber = other.GameNumber;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            scope_ = (MatchScope)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            GameNumber = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ConfigureRequest : pb::IMessage<ConfigureRequest>
    {
        private static readonly pb::MessageParser<ConfigureRequest> _parser = new pb::MessageParser<ConfigureRequest>(() => new ConfigureRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConfigureRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[66]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConfigureRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConfigureRequest(ConfigureRequest other) : this()
        {
            general_ = other.general_ != null ? other.general_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConfigureRequest Clone()
        {
            return new ConfigureRequest(this);
        }

        /// <summary>Field number for the "general" field.</summary>
        public const int GeneralFieldNumber = 1;
        private GeneralConfiguration general_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeneralConfiguration General
        {
            get { return general_; }
            set
            {
                general_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ConfigureRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConfigureRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(General, other.General)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (general_ != null) hash ^= General.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (general_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(General);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (general_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(General);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConfigureRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.general_ != null)
            {
                if (general_ == null)
                {
                    general_ = new GeneralConfiguration();
                }
                General.MergeFrom(other.General);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (general_ == null)
                            {
                                general_ = new GeneralConfiguration();
                            }
                            input.ReadMessage(general_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ConfigureResponse : pb::IMessage<ConfigureResponse>
    {
        private static readonly pb::MessageParser<ConfigureResponse> _parser = new pb::MessageParser<ConfigureResponse>(() => new ConfigureResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConfigureResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[67]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConfigureResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConfigureResponse(ConfigureResponse other) : this()
        {
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConfigureResponse Clone()
        {
            return new ConfigureResponse(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private GRETHHostErrorCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostErrorCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ConfigureResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConfigureResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Result != 0) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Result != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConfigureResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            result_ = (GRETHHostErrorCode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ConnectReq : pb::IMessage<ConnectReq>
    {
        private static readonly pb::MessageParser<ConnectReq> _parser = new pb::MessageParser<ConnectReq>(() => new ConnectReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConnectReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[68]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectReq(ConnectReq other) : this()
        {
            majorVer_ = other.majorVer_;
            minorVer_ = other.minorVer_;
            revisionVer_ = other.revisionVer_;
            buildVer_ = other.buildVer_;
            defaultSettings_ = other.defaultSettings_ != null ? other.defaultSettings_.Clone() : null;
            protoVer_ = other.protoVer_;
            seatId_ = other.seatId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectReq Clone()
        {
            return new ConnectReq(this);
        }

        /// <summary>Field number for the "majorVer" field.</summary>
        public const int MajorVerFieldNumber = 1;
        private uint majorVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MajorVer
        {
            get { return majorVer_; }
            set
            {
                majorVer_ = value;
            }
        }

        /// <summary>Field number for the "minorVer" field.</summary>
        public const int MinorVerFieldNumber = 2;
        private uint minorVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinorVer
        {
            get { return minorVer_; }
            set
            {
                minorVer_ = value;
            }
        }

        /// <summary>Field number for the "revisionVer" field.</summary>
        public const int RevisionVerFieldNumber = 3;
        private uint revisionVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RevisionVer
        {
            get { return revisionVer_; }
            set
            {
                revisionVer_ = value;
            }
        }

        /// <summary>Field number for the "buildVer" field.</summary>
        public const int BuildVerFieldNumber = 4;
        private uint buildVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BuildVer
        {
            get { return buildVer_; }
            set
            {
                buildVer_ = value;
            }
        }

        /// <summary>Field number for the "defaultSettings" field.</summary>
        public const int DefaultSettingsFieldNumber = 5;
        private SettingsMessage defaultSettings_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingsMessage DefaultSettings
        {
            get { return defaultSettings_; }
            set
            {
                defaultSettings_ = value;
            }
        }

        /// <summary>Field number for the "protoVer" field.</summary>
        public const int ProtoVerFieldNumber = 6;
        private ProtoVersion protoVer_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProtoVersion ProtoVer
        {
            get { return protoVer_; }
            set
            {
                protoVer_ = value;
            }
        }

        /// <summary>Field number for the "seatId" field.</summary>
        public const int SeatIdFieldNumber = 7;
        private uint seatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SeatId
        {
            get { return seatId_; }
            set
            {
                seatId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ConnectReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConnectReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MajorVer != other.MajorVer) return false;
            if (MinorVer != other.MinorVer) return false;
            if (RevisionVer != other.RevisionVer) return false;
            if (BuildVer != other.BuildVer) return false;
            if (!object.Equals(DefaultSettings, other.DefaultSettings)) return false;
            if (ProtoVer != other.ProtoVer) return false;
            if (SeatId != other.SeatId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MajorVer != 0) hash ^= MajorVer.GetHashCode();
            if (MinorVer != 0) hash ^= MinorVer.GetHashCode();
            if (RevisionVer != 0) hash ^= RevisionVer.GetHashCode();
            if (BuildVer != 0) hash ^= BuildVer.GetHashCode();
            if (defaultSettings_ != null) hash ^= DefaultSettings.GetHashCode();
            if (ProtoVer != 0) hash ^= ProtoVer.GetHashCode();
            if (SeatId != 0) hash ^= SeatId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MajorVer != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(MajorVer);
            }
            if (MinorVer != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MinorVer);
            }
            if (RevisionVer != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(RevisionVer);
            }
            if (BuildVer != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(BuildVer);
            }
            if (defaultSettings_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(DefaultSettings);
            }
            if (ProtoVer != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)ProtoVer);
            }
            if (SeatId != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(SeatId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MajorVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MajorVer);
            }
            if (MinorVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinorVer);
            }
            if (RevisionVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RevisionVer);
            }
            if (BuildVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuildVer);
            }
            if (defaultSettings_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultSettings);
            }
            if (ProtoVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ProtoVer);
            }
            if (SeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConnectReq other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MajorVer != 0)
            {
                MajorVer = other.MajorVer;
            }
            if (other.MinorVer != 0)
            {
                MinorVer = other.MinorVer;
            }
            if (other.RevisionVer != 0)
            {
                RevisionVer = other.RevisionVer;
            }
            if (other.BuildVer != 0)
            {
                BuildVer = other.BuildVer;
            }
            if (other.defaultSettings_ != null)
            {
                if (defaultSettings_ == null)
                {
                    defaultSettings_ = new SettingsMessage();
                }
                DefaultSettings.MergeFrom(other.DefaultSettings);
            }
            if (other.ProtoVer != 0)
            {
                ProtoVer = other.ProtoVer;
            }
            if (other.SeatId != 0)
            {
                SeatId = other.SeatId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            MajorVer = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            MinorVer = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            RevisionVer = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            BuildVer = input.ReadUInt32();
                            break;
                        }
                    case 42:
                        {
                            if (defaultSettings_ == null)
                            {
                                defaultSettings_ = new SettingsMessage();
                            }
                            input.ReadMessage(defaultSettings_);
                            break;
                        }
                    case 48:
                        {
                            protoVer_ = (ProtoVersion)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            SeatId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ConnectResp : pb::IMessage<ConnectResp>
    {
        private static readonly pb::MessageParser<ConnectResp> _parser = new pb::MessageParser<ConnectResp>(() => new ConnectResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConnectResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[69]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectResp(ConnectResp other) : this()
        {
            status_ = other.status_;
            majorVer_ = other.majorVer_;
            minorVer_ = other.minorVer_;
            revisionVer_ = other.revisionVer_;
            buildVer_ = other.buildVer_;
            protoVer_ = other.protoVer_;
            seatId_ = other.seatId_;
            settings_ = other.settings_ != null ? other.settings_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectResp Clone()
        {
            return new ConnectResp(this);
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 1;
        private ConnectionStatus status_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectionStatus Status
        {
            get { return status_; }
            set
            {
                status_ = value;
            }
        }

        /// <summary>Field number for the "majorVer" field.</summary>
        public const int MajorVerFieldNumber = 2;
        private uint majorVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MajorVer
        {
            get { return majorVer_; }
            set
            {
                majorVer_ = value;
            }
        }

        /// <summary>Field number for the "minorVer" field.</summary>
        public const int MinorVerFieldNumber = 3;
        private uint minorVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinorVer
        {
            get { return minorVer_; }
            set
            {
                minorVer_ = value;
            }
        }

        /// <summary>Field number for the "revisionVer" field.</summary>
        public const int RevisionVerFieldNumber = 4;
        private uint revisionVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RevisionVer
        {
            get { return revisionVer_; }
            set
            {
                revisionVer_ = value;
            }
        }

        /// <summary>Field number for the "buildVer" field.</summary>
        public const int BuildVerFieldNumber = 5;
        private uint buildVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BuildVer
        {
            get { return buildVer_; }
            set
            {
                buildVer_ = value;
            }
        }

        /// <summary>Field number for the "protoVer" field.</summary>
        public const int ProtoVerFieldNumber = 6;
        private ProtoVersion protoVer_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProtoVersion ProtoVer
        {
            get { return protoVer_; }
            set
            {
                protoVer_ = value;
            }
        }

        /// <summary>Field number for the "seatId" field.</summary>
        public const int SeatIdFieldNumber = 7;
        private uint seatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SeatId
        {
            get { return seatId_; }
            set
            {
                seatId_ = value;
            }
        }

        /// <summary>Field number for the "settings" field.</summary>
        public const int SettingsFieldNumber = 8;
        private SettingsMessage settings_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingsMessage Settings
        {
            get { return settings_; }
            set
            {
                settings_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ConnectResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConnectResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Status != other.Status) return false;
            if (MajorVer != other.MajorVer) return false;
            if (MinorVer != other.MinorVer) return false;
            if (RevisionVer != other.RevisionVer) return false;
            if (BuildVer != other.BuildVer) return false;
            if (ProtoVer != other.ProtoVer) return false;
            if (SeatId != other.SeatId) return false;
            if (!object.Equals(Settings, other.Settings)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Status != 0) hash ^= Status.GetHashCode();
            if (MajorVer != 0) hash ^= MajorVer.GetHashCode();
            if (MinorVer != 0) hash ^= MinorVer.GetHashCode();
            if (RevisionVer != 0) hash ^= RevisionVer.GetHashCode();
            if (BuildVer != 0) hash ^= BuildVer.GetHashCode();
            if (ProtoVer != 0) hash ^= ProtoVer.GetHashCode();
            if (SeatId != 0) hash ^= SeatId.GetHashCode();
            if (settings_ != null) hash ^= Settings.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Status != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Status);
            }
            if (MajorVer != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MajorVer);
            }
            if (MinorVer != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MinorVer);
            }
            if (RevisionVer != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(RevisionVer);
            }
            if (BuildVer != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(BuildVer);
            }
            if (ProtoVer != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)ProtoVer);
            }
            if (SeatId != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(SeatId);
            }
            if (settings_ != null)
            {
                output.WriteRawTag(66);
                output.WriteMessage(Settings);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Status != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Status);
            }
            if (MajorVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MajorVer);
            }
            if (MinorVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinorVer);
            }
            if (RevisionVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RevisionVer);
            }
            if (BuildVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuildVer);
            }
            if (ProtoVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ProtoVer);
            }
            if (SeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
            }
            if (settings_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConnectResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Status != 0)
            {
                Status = other.Status;
            }
            if (other.MajorVer != 0)
            {
                MajorVer = other.MajorVer;
            }
            if (other.MinorVer != 0)
            {
                MinorVer = other.MinorVer;
            }
            if (other.RevisionVer != 0)
            {
                RevisionVer = other.RevisionVer;
            }
            if (other.BuildVer != 0)
            {
                BuildVer = other.BuildVer;
            }
            if (other.ProtoVer != 0)
            {
                ProtoVer = other.ProtoVer;
            }
            if (other.SeatId != 0)
            {
                SeatId = other.SeatId;
            }
            if (other.settings_ != null)
            {
                if (settings_ == null)
                {
                    settings_ = new SettingsMessage();
                }
                Settings.MergeFrom(other.Settings);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            status_ = (ConnectionStatus)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            MajorVer = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            MinorVer = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            RevisionVer = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            BuildVer = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            protoVer_ = (ProtoVersion)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            SeatId = input.ReadUInt32();
                            break;
                        }
                    case 66:
                        {
                            if (settings_ == null)
                            {
                                settings_ = new SettingsMessage();
                            }
                            input.ReadMessage(settings_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ContinuationToken : pb::IMessage<ContinuationToken>
    {
        private static readonly pb::MessageParser<ContinuationToken> _parser = new pb::MessageParser<ContinuationToken>(() => new ContinuationToken());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ContinuationToken> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[70]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContinuationToken()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContinuationToken(ContinuationToken other) : this()
        {
            switch (other.MessageCase)
            {
                case MessageOneofCase.Timestamp:
                    Timestamp = other.Timestamp;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContinuationToken Clone()
        {
            return new ContinuationToken(this);
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 5;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return messageCase_ == MessageOneofCase.Timestamp ? (long)message_ : 0L; }
            set
            {
                message_ = value;
                messageCase_ = MessageOneofCase.Timestamp;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            Timestamp = 5,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ContinuationToken);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ContinuationToken other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Timestamp != other.Timestamp) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (messageCase_ == MessageOneofCase.Timestamp) hash ^= Timestamp.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (messageCase_ == MessageOneofCase.Timestamp)
            {
                output.WriteRawTag(40);
                output.WriteInt64(Timestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (messageCase_ == MessageOneofCase.Timestamp)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ContinuationToken other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.Timestamp:
                    Timestamp = other.Timestamp;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 40:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ControlReq : pb::IMessage<ControlReq>
    {
        private static readonly pb::MessageParser<ControlReq> _parser = new pb::MessageParser<ControlReq>(() => new ControlReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ControlReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[71]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ControlReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ControlReq(ControlReq other) : this()
        {
            type_ = other.type_;
            controllerId_ = other.controllerId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ControlReq Clone()
        {
            return new ControlReq(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private ControllerType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ControllerType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "controllerId" field.</summary>
        public const int ControllerIdFieldNumber = 2;
        private uint controllerId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ControllerId
        {
            get { return controllerId_; }
            set
            {
                controllerId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ControlReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ControlReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (ControllerId != other.ControllerId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (ControllerId != 0) hash ^= ControllerId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (ControllerId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(ControllerId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (ControllerId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ControlReq other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.ControllerId != 0)
            {
                ControllerId = other.ControllerId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            type_ = (ControllerType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            ControllerId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CorrelationInfo : pb::IMessage<CorrelationInfo>
    {
        private static readonly pb::MessageParser<CorrelationInfo> _parser = new pb::MessageParser<CorrelationInfo>(() => new CorrelationInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CorrelationInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[72]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CorrelationInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CorrelationInfo(CorrelationInfo other) : this()
        {
            correlationId_ = other.correlationId_;
            correlationContext_ = other.correlationContext_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CorrelationInfo Clone()
        {
            return new CorrelationInfo(this);
        }

        /// <summary>Field number for the "correlationId" field.</summary>
        public const int CorrelationIdFieldNumber = 1;
        private string correlationId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CorrelationId
        {
            get { return correlationId_; }
            set
            {
                correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "correlationContext" field.</summary>
        public const int CorrelationContextFieldNumber = 5;
        private static readonly pbc::MapField<string, string>.Codec _map_correlationContext_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
        private readonly pbc::MapField<string, string> correlationContext_ = new pbc::MapField<string, string>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> CorrelationContext
        {
            get { return correlationContext_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CorrelationInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CorrelationInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (CorrelationId != other.CorrelationId) return false;
            if (!CorrelationContext.Equals(other.CorrelationContext)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
            hash ^= CorrelationContext.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CorrelationId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(CorrelationId);
            }
            correlationContext_.WriteTo(output, _map_correlationContext_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (CorrelationId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
            }
            size += correlationContext_.CalculateSize(_map_correlationContext_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CorrelationInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CorrelationId.Length != 0)
            {
                CorrelationId = other.CorrelationId;
            }
            correlationContext_.Add(other.correlationContext_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            CorrelationId = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            correlationContext_.AddEntriesFrom(input, _map_correlationContext_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CosmeticConfig : pb::IMessage<CosmeticConfig>
    {
        private static readonly pb::MessageParser<CosmeticConfig> _parser = new pb::MessageParser<CosmeticConfig>(() => new CosmeticConfig());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CosmeticConfig> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[73]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CosmeticConfig()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CosmeticConfig(CosmeticConfig other) : this()
        {
            data_ = other.data_;
            seatId_ = other.seatId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CosmeticConfig Clone()
        {
            return new CosmeticConfig(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 2;
        private string data_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Data
        {
            get { return data_; }
            set
            {
                data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "seatId" field.</summary>
        public const int SeatIdFieldNumber = 1;
        private uint seatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SeatId
        {
            get { return seatId_; }
            set
            {
                seatId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CosmeticConfig);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CosmeticConfig other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Data != other.Data) return false;
            if (SeatId != other.SeatId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Data.Length != 0) hash ^= Data.GetHashCode();
            if (SeatId != 0) hash ^= SeatId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SeatId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SeatId);
            }
            if (Data.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Data);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Data.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
            }
            if (SeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CosmeticConfig other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Data.Length != 0)
            {
                Data = other.Data;
            }
            if (other.SeatId != 0)
            {
                SeatId = other.SeatId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SeatId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            Data = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CosmeticInfo : pb::IMessage<CosmeticInfo>
    {
        private static readonly pb::MessageParser<CosmeticInfo> _parser = new pb::MessageParser<CosmeticInfo>(() => new CosmeticInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CosmeticInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[74]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CosmeticInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CosmeticInfo(CosmeticInfo other) : this()
        {
            data_ = other.data_;
            seatId_ = other.seatId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CosmeticInfo Clone()
        {
            return new CosmeticInfo(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 2;
        private string data_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Data
        {
            get { return data_; }
            set
            {
                data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "seatId" field.</summary>
        public const int SeatIdFieldNumber = 1;
        private uint seatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SeatId
        {
            get { return seatId_; }
            set
            {
                seatId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CosmeticInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CosmeticInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Data != other.Data) return false;
            if (SeatId != other.SeatId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Data.Length != 0) hash ^= Data.GetHashCode();
            if (SeatId != 0) hash ^= SeatId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SeatId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SeatId);
            }
            if (Data.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Data);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Data.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
            }
            if (SeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CosmeticInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Data.Length != 0)
            {
                Data = other.Data;
            }
            if (other.SeatId != 0)
            {
                SeatId = other.SeatId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SeatId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            Data = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Counter : pb::IMessage<Counter>
    {
        private static readonly pb::MessageParser<Counter> _parser = new pb::MessageParser<Counter>(() => new Counter());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Counter> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[75]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Counter()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Counter(Counter other) : this()
        {
            type_ = other.type_;
            count_ = other.count_;
            id_ = other.id_;
            markedObject_ = other.markedObject_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Counter Clone()
        {
            return new Counter(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private CounterType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CounterType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count
        {
            get { return count_; }
            set
            {
                count_ = value;
            }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 3;
        private uint id_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id
        {
            get { return id_; }
            set
            {
                id_ = value;
            }
        }

        /// <summary>Field number for the "markedObject" field.</summary>
        public const int MarkedObjectFieldNumber = 4;
        private uint markedObject_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MarkedObject
        {
            get { return markedObject_; }
            set
            {
                markedObject_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Counter);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Counter other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (Count != other.Count) return false;
            if (Id != other.Id) return false;
            if (MarkedObject != other.MarkedObject) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (Count != 0) hash ^= Count.GetHashCode();
            if (Id != 0) hash ^= Id.GetHashCode();
            if (MarkedObject != 0) hash ^= MarkedObject.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (Count != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Count);
            }
            if (Id != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(Id);
            }
            if (MarkedObject != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(MarkedObject);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (Count != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
            }
            if (Id != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
            }
            if (MarkedObject != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MarkedObject);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Counter other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.Count != 0)
            {
                Count = other.Count;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.MarkedObject != 0)
            {
                MarkedObject = other.MarkedObject;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            type_ = (CounterType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            Count = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            Id = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            MarkedObject = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CreateMatchGameRoomRequest : pb::IMessage<CreateMatchGameRoomRequest>
    {
        private static readonly pb::MessageParser<CreateMatchGameRoomRequest> _parser = new pb::MessageParser<CreateMatchGameRoomRequest>(() => new CreateMatchGameRoomRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CreateMatchGameRoomRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[76]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateMatchGameRoomRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateMatchGameRoomRequest(CreateMatchGameRoomRequest other) : this()
        {
            gameRoomConfig_ = other.gameRoomConfig_ != null ? other.gameRoomConfig_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateMatchGameRoomRequest Clone()
        {
            return new CreateMatchGameRoomRequest(this);
        }

        /// <summary>Field number for the "gameRoomConfig" field.</summary>
        public const int GameRoomConfigFieldNumber = 1;
        private MatchGameRoomConfig gameRoomConfig_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomConfig GameRoomConfig
        {
            get { return gameRoomConfig_; }
            set
            {
                gameRoomConfig_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CreateMatchGameRoomRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CreateMatchGameRoomRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(GameRoomConfig, other.GameRoomConfig)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (gameRoomConfig_ != null) hash ^= GameRoomConfig.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (gameRoomConfig_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(GameRoomConfig);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (gameRoomConfig_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRoomConfig);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CreateMatchGameRoomRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.gameRoomConfig_ != null)
            {
                if (gameRoomConfig_ == null)
                {
                    gameRoomConfig_ = new MatchGameRoomConfig();
                }
                GameRoomConfig.MergeFrom(other.GameRoomConfig);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (gameRoomConfig_ == null)
                            {
                                gameRoomConfig_ = new MatchGameRoomConfig();
                            }
                            input.ReadMessage(gameRoomConfig_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CreateMatchGameRoomResponse : pb::IMessage<CreateMatchGameRoomResponse>
    {
        private static readonly pb::MessageParser<CreateMatchGameRoomResponse> _parser = new pb::MessageParser<CreateMatchGameRoomResponse>(() => new CreateMatchGameRoomResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CreateMatchGameRoomResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[77]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateMatchGameRoomResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateMatchGameRoomResponse(CreateMatchGameRoomResponse other) : this()
        {
            gameRoomInfo_ = other.gameRoomInfo_ != null ? other.gameRoomInfo_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateMatchGameRoomResponse Clone()
        {
            return new CreateMatchGameRoomResponse(this);
        }

        /// <summary>Field number for the "gameRoomInfo" field.</summary>
        public const int GameRoomInfoFieldNumber = 1;
        private MatchGameRoomInfo gameRoomInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomInfo GameRoomInfo
        {
            get { return gameRoomInfo_; }
            set
            {
                gameRoomInfo_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CreateMatchGameRoomResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CreateMatchGameRoomResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(GameRoomInfo, other.GameRoomInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (gameRoomInfo_ != null) hash ^= GameRoomInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (gameRoomInfo_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(GameRoomInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (gameRoomInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRoomInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CreateMatchGameRoomResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.gameRoomInfo_ != null)
            {
                if (gameRoomInfo_ == null)
                {
                    gameRoomInfo_ = new MatchGameRoomInfo();
                }
                GameRoomInfo.MergeFrom(other.GameRoomInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (gameRoomInfo_ == null)
                            {
                                gameRoomInfo_ = new MatchGameRoomInfo();
                            }
                            input.ReadMessage(gameRoomInfo_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CreateMatchGameRoomResponseV2 : pb::IMessage<CreateMatchGameRoomResponseV2>
    {
        private static readonly pb::MessageParser<CreateMatchGameRoomResponseV2> _parser = new pb::MessageParser<CreateMatchGameRoomResponseV2>(() => new CreateMatchGameRoomResponseV2());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CreateMatchGameRoomResponseV2> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[78]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateMatchGameRoomResponseV2()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateMatchGameRoomResponseV2(CreateMatchGameRoomResponseV2 other) : this()
        {
            mcFabricUri_ = other.mcFabricUri_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateMatchGameRoomResponseV2 Clone()
        {
            return new CreateMatchGameRoomResponseV2(this);
        }

        /// <summary>Field number for the "mcFabricUri" field.</summary>
        public const int McFabricUriFieldNumber = 1;
        private string mcFabricUri_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string McFabricUri
        {
            get { return mcFabricUri_; }
            set
            {
                mcFabricUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CreateMatchGameRoomResponseV2);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CreateMatchGameRoomResponseV2 other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (McFabricUri != other.McFabricUri) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (McFabricUri.Length != 0) hash ^= McFabricUri.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (McFabricUri.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(McFabricUri);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (McFabricUri.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(McFabricUri);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CreateMatchGameRoomResponseV2 other)
        {
            if (other == null)
            {
                return;
            }
            if (other.McFabricUri.Length != 0)
            {
                McFabricUri = other.McFabricUri;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            McFabricUri = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DamageAssigner : pb::IMessage<DamageAssigner>
    {
        private static readonly pb::MessageParser<DamageAssigner> _parser = new pb::MessageParser<DamageAssigner>(() => new DamageAssigner());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DamageAssigner> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[79]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageAssigner()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageAssigner(DamageAssigner other) : this()
        {
            assignments_ = other.assignments_.Clone();
            instanceId_ = other.instanceId_;
            totalDamage_ = other.totalDamage_;
            decisionPrompt_ = other.decisionPrompt_ != null ? other.decisionPrompt_.Clone() : null;
            canIgnoreBlockers_ = other.canIgnoreBlockers_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageAssigner Clone()
        {
            return new DamageAssigner(this);
        }

        /// <summary>Field number for the "assignments" field.</summary>
        public const int AssignmentsFieldNumber = 3;
        private static readonly pb::FieldCodec<DamageAssignment> _repeated_assignments_codec
            = pb::FieldCodec.ForMessage(26, DamageAssignment.Parser);
        private readonly pbc::RepeatedField<DamageAssignment> assignments_ = new pbc::RepeatedField<DamageAssignment>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<DamageAssignment> Assignments
        {
            get { return assignments_; }
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "totalDamage" field.</summary>
        public const int TotalDamageFieldNumber = 2;
        private uint totalDamage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TotalDamage
        {
            get { return totalDamage_; }
            set
            {
                totalDamage_ = value;
            }
        }

        /// <summary>Field number for the "decisionPrompt" field.</summary>
        public const int DecisionPromptFieldNumber = 4;
        private Prompt decisionPrompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt DecisionPrompt
        {
            get { return decisionPrompt_; }
            set
            {
                decisionPrompt_ = value;
            }
        }

        /// <summary>Field number for the "canIgnoreBlockers" field.</summary>
        public const int CanIgnoreBlockersFieldNumber = 5;
        private bool canIgnoreBlockers_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool CanIgnoreBlockers
        {
            get { return canIgnoreBlockers_; }
            set
            {
                canIgnoreBlockers_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DamageAssigner);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DamageAssigner other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!assignments_.Equals(other.assignments_)) return false;
            if (InstanceId != other.InstanceId) return false;
            if (TotalDamage != other.TotalDamage) return false;
            if (!object.Equals(DecisionPrompt, other.DecisionPrompt)) return false;
            if (CanIgnoreBlockers != other.CanIgnoreBlockers) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= assignments_.GetHashCode();
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (TotalDamage != 0) hash ^= TotalDamage.GetHashCode();
            if (decisionPrompt_ != null) hash ^= DecisionPrompt.GetHashCode();
            if (CanIgnoreBlockers != false) hash ^= CanIgnoreBlockers.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(InstanceId);
            }
            if (TotalDamage != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(TotalDamage);
            }
            assignments_.WriteTo(output, _repeated_assignments_codec);
            if (decisionPrompt_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(DecisionPrompt);
            }
            if (CanIgnoreBlockers != false)
            {
                output.WriteRawTag(40);
                output.WriteBool(CanIgnoreBlockers);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += assignments_.CalculateSize(_repeated_assignments_codec);
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (TotalDamage != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalDamage);
            }
            if (decisionPrompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DecisionPrompt);
            }
            if (CanIgnoreBlockers != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DamageAssigner other)
        {
            if (other == null)
            {
                return;
            }
            assignments_.Add(other.assignments_);
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.TotalDamage != 0)
            {
                TotalDamage = other.TotalDamage;
            }
            if (other.decisionPrompt_ != null)
            {
                if (decisionPrompt_ == null)
                {
                    decisionPrompt_ = new Prompt();
                }
                DecisionPrompt.MergeFrom(other.DecisionPrompt);
            }
            if (other.CanIgnoreBlockers != false)
            {
                CanIgnoreBlockers = other.CanIgnoreBlockers;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            TotalDamage = input.ReadUInt32();
                            break;
                        }
                    case 26:
                        {
                            assignments_.AddEntriesFrom(input, _repeated_assignments_codec);
                            break;
                        }
                    case 34:
                        {
                            if (decisionPrompt_ == null)
                            {
                                decisionPrompt_ = new Prompt();
                            }
                            input.ReadMessage(decisionPrompt_);
                            break;
                        }
                    case 40:
                        {
                            CanIgnoreBlockers = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DamageAssignment : pb::IMessage<DamageAssignment>
    {
        private static readonly pb::MessageParser<DamageAssignment> _parser = new pb::MessageParser<DamageAssignment>(() => new DamageAssignment());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DamageAssignment> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[80]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageAssignment()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageAssignment(DamageAssignment other) : this()
        {
            instanceId_ = other.instanceId_;
            minDamage_ = other.minDamage_;
            maxDamage_ = other.maxDamage_;
            assignedDamage_ = other.assignedDamage_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageAssignment Clone()
        {
            return new DamageAssignment(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "minDamage" field.</summary>
        public const int MinDamageFieldNumber = 2;
        private uint minDamage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinDamage
        {
            get { return minDamage_; }
            set
            {
                minDamage_ = value;
            }
        }

        /// <summary>Field number for the "maxDamage" field.</summary>
        public const int MaxDamageFieldNumber = 3;
        private uint maxDamage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxDamage
        {
            get { return maxDamage_; }
            set
            {
                maxDamage_ = value;
            }
        }

        /// <summary>Field number for the "assignedDamage" field.</summary>
        public const int AssignedDamageFieldNumber = 4;
        private uint assignedDamage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AssignedDamage
        {
            get { return assignedDamage_; }
            set
            {
                assignedDamage_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DamageAssignment);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DamageAssignment other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            if (MinDamage != other.MinDamage) return false;
            if (MaxDamage != other.MaxDamage) return false;
            if (AssignedDamage != other.AssignedDamage) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (MinDamage != 0) hash ^= MinDamage.GetHashCode();
            if (MaxDamage != 0) hash ^= MaxDamage.GetHashCode();
            if (AssignedDamage != 0) hash ^= AssignedDamage.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(InstanceId);
            }
            if (MinDamage != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MinDamage);
            }
            if (MaxDamage != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MaxDamage);
            }
            if (AssignedDamage != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(AssignedDamage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (MinDamage != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinDamage);
            }
            if (MaxDamage != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxDamage);
            }
            if (AssignedDamage != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AssignedDamage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DamageAssignment other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.MinDamage != 0)
            {
                MinDamage = other.MinDamage;
            }
            if (other.MaxDamage != 0)
            {
                MaxDamage = other.MaxDamage;
            }
            if (other.AssignedDamage != 0)
            {
                AssignedDamage = other.AssignedDamage;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            MinDamage = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            MaxDamage = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            AssignedDamage = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DamageRecipient : pb::IMessage<DamageRecipient>
    {
        private static readonly pb::MessageParser<DamageRecipient> _parser = new pb::MessageParser<DamageRecipient>(() => new DamageRecipient());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DamageRecipient> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[81]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageRecipient()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageRecipient(DamageRecipient other) : this()
        {
            type_ = other.type_;
            teamId_ = other.teamId_;
            playerSystemSeatId_ = other.playerSystemSeatId_;
            planeswalkerInstanceId_ = other.planeswalkerInstanceId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageRecipient Clone()
        {
            return new DamageRecipient(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private DamageRecType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageRecType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "teamId" field.</summary>
        public const int TeamIdFieldNumber = 2;
        private uint teamId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamId
        {
            get { return teamId_; }
            set
            {
                teamId_ = value;
            }
        }

        /// <summary>Field number for the "playerSystemSeatId" field.</summary>
        public const int PlayerSystemSeatIdFieldNumber = 3;
        private uint playerSystemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerSystemSeatId
        {
            get { return playerSystemSeatId_; }
            set
            {
                playerSystemSeatId_ = value;
            }
        }

        /// <summary>Field number for the "planeswalkerInstanceId" field.</summary>
        public const int PlaneswalkerInstanceIdFieldNumber = 4;
        private uint planeswalkerInstanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlaneswalkerInstanceId
        {
            get { return planeswalkerInstanceId_; }
            set
            {
                planeswalkerInstanceId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DamageRecipient);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DamageRecipient other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (TeamId != other.TeamId) return false;
            if (PlayerSystemSeatId != other.PlayerSystemSeatId) return false;
            if (PlaneswalkerInstanceId != other.PlaneswalkerInstanceId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (TeamId != 0) hash ^= TeamId.GetHashCode();
            if (PlayerSystemSeatId != 0) hash ^= PlayerSystemSeatId.GetHashCode();
            if (PlaneswalkerInstanceId != 0) hash ^= PlaneswalkerInstanceId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (TeamId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(TeamId);
            }
            if (PlayerSystemSeatId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(PlayerSystemSeatId);
            }
            if (PlaneswalkerInstanceId != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(PlaneswalkerInstanceId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (TeamId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
            }
            if (PlayerSystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSystemSeatId);
            }
            if (PlaneswalkerInstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlaneswalkerInstanceId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DamageRecipient other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.TeamId != 0)
            {
                TeamId = other.TeamId;
            }
            if (other.PlayerSystemSeatId != 0)
            {
                PlayerSystemSeatId = other.PlayerSystemSeatId;
            }
            if (other.PlaneswalkerInstanceId != 0)
            {
                PlaneswalkerInstanceId = other.PlaneswalkerInstanceId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            type_ = (DamageRecType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            TeamId = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            PlayerSystemSeatId = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            PlaneswalkerInstanceId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DeckInfo : pb::IMessage<DeckInfo>
    {
        private static readonly pb::MessageParser<DeckInfo> _parser = new pb::MessageParser<DeckInfo>(() => new DeckInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeckInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[82]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeckInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeckInfo(DeckInfo other) : this()
        {
            deckId_ = other.deckId_;
            userId_ = other.userId_;
            courseId_ = other.courseId_;
            deckName_ = other.deckName_;
            libraryCardIds_ = other.libraryCardIds_.Clone();
            sideboardCardIds_ = other.sideboardCardIds_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeckInfo Clone()
        {
            return new DeckInfo(this);
        }

        /// <summary>Field number for the "deckId" field.</summary>
        public const int DeckIdFieldNumber = 1;
        private string deckId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeckId
        {
            get { return deckId_; }
            set
            {
                deckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 2;
        private string userId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "courseId" field.</summary>
        public const int CourseIdFieldNumber = 3;
        private string courseId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CourseId
        {
            get { return courseId_; }
            set
            {
                courseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "deckName" field.</summary>
        public const int DeckNameFieldNumber = 4;
        private string deckName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeckName
        {
            get { return deckName_; }
            set
            {
                deckName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "libraryCardIds" field.</summary>
        public const int LibraryCardIdsFieldNumber = 5;
        private static readonly pb::FieldCodec<uint> _repeated_libraryCardIds_codec
            = pb::FieldCodec.ForUInt32(42);
        private readonly pbc::RepeatedField<uint> libraryCardIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> LibraryCardIds
        {
            get { return libraryCardIds_; }
        }

        /// <summary>Field number for the "sideboardCardIds" field.</summary>
        public const int SideboardCardIdsFieldNumber = 6;
        private static readonly pb::FieldCodec<uint> _repeated_sideboardCardIds_codec
            = pb::FieldCodec.ForUInt32(50);
        private readonly pbc::RepeatedField<uint> sideboardCardIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> SideboardCardIds
        {
            get { return sideboardCardIds_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DeckInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeckInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (DeckId != other.DeckId) return false;
            if (UserId != other.UserId) return false;
            if (CourseId != other.CourseId) return false;
            if (DeckName != other.DeckName) return false;
            if (!libraryCardIds_.Equals(other.libraryCardIds_)) return false;
            if (!sideboardCardIds_.Equals(other.sideboardCardIds_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (DeckId.Length != 0) hash ^= DeckId.GetHashCode();
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (CourseId.Length != 0) hash ^= CourseId.GetHashCode();
            if (DeckName.Length != 0) hash ^= DeckName.GetHashCode();
            hash ^= libraryCardIds_.GetHashCode();
            hash ^= sideboardCardIds_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (DeckId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(DeckId);
            }
            if (UserId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(UserId);
            }
            if (CourseId.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(CourseId);
            }
            if (DeckName.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(DeckName);
            }
            libraryCardIds_.WriteTo(output, _repeated_libraryCardIds_codec);
            sideboardCardIds_.WriteTo(output, _repeated_sideboardCardIds_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (DeckId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckId);
            }
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (CourseId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CourseId);
            }
            if (DeckName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckName);
            }
            size += libraryCardIds_.CalculateSize(_repeated_libraryCardIds_codec);
            size += sideboardCardIds_.CalculateSize(_repeated_sideboardCardIds_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeckInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.DeckId.Length != 0)
            {
                DeckId = other.DeckId;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.CourseId.Length != 0)
            {
                CourseId = other.CourseId;
            }
            if (other.DeckName.Length != 0)
            {
                DeckName = other.DeckName;
            }
            libraryCardIds_.Add(other.libraryCardIds_);
            sideboardCardIds_.Add(other.sideboardCardIds_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            DeckId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            CourseId = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            DeckName = input.ReadString();
                            break;
                        }
                    case 42:
                    case 40:
                        {
                            libraryCardIds_.AddEntriesFrom(input, _repeated_libraryCardIds_codec);
                            break;
                        }
                    case 50:
                    case 48:
                        {
                            sideboardCardIds_.AddEntriesFrom(input, _repeated_sideboardCardIds_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DeckMessage : pb::IMessage<DeckMessage>
    {
        private static readonly pb::MessageParser<DeckMessage> _parser = new pb::MessageParser<DeckMessage>(() => new DeckMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeckMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[83]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeckMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeckMessage(DeckMessage other) : this()
        {
            deckCards_ = other.deckCards_.Clone();
            sideboardCards_ = other.sideboardCards_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeckMessage Clone()
        {
            return new DeckMessage(this);
        }

        /// <summary>Field number for the "deckCards" field.</summary>
        public const int DeckCardsFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_deckCards_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> deckCards_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> DeckCards
        {
            get { return deckCards_; }
        }

        /// <summary>Field number for the "sideboardCards" field.</summary>
        public const int SideboardCardsFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_sideboardCards_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> sideboardCards_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> SideboardCards
        {
            get { return sideboardCards_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DeckMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeckMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!deckCards_.Equals(other.deckCards_)) return false;
            if (!sideboardCards_.Equals(other.sideboardCards_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= deckCards_.GetHashCode();
            hash ^= sideboardCards_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            deckCards_.WriteTo(output, _repeated_deckCards_codec);
            sideboardCards_.WriteTo(output, _repeated_sideboardCards_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += deckCards_.CalculateSize(_repeated_deckCards_codec);
            size += sideboardCards_.CalculateSize(_repeated_sideboardCards_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeckMessage other)
        {
            if (other == null)
            {
                return;
            }
            deckCards_.Add(other.deckCards_);
            sideboardCards_.Add(other.sideboardCards_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                        {
                            deckCards_.AddEntriesFrom(input, _repeated_deckCards_codec);
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            sideboardCards_.AddEntriesFrom(input, _repeated_sideboardCards_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DeclareAttackersReq : pb::IMessage<DeclareAttackersReq>
    {
        private static readonly pb::MessageParser<DeclareAttackersReq> _parser = new pb::MessageParser<DeclareAttackersReq>(() => new DeclareAttackersReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeclareAttackersReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[84]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareAttackersReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareAttackersReq(DeclareAttackersReq other) : this()
        {
            attackers_ = other.attackers_.Clone();
            attackWarnings_ = other.attackWarnings_.Clone();
            manaCost_ = other.manaCost_.Clone();
            hasRequirements_ = other.hasRequirements_;
            hasRestrictions_ = other.hasRestrictions_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareAttackersReq Clone()
        {
            return new DeclareAttackersReq(this);
        }

        /// <summary>Field number for the "attackers" field.</summary>
        public const int AttackersFieldNumber = 1;
        private static readonly pb::FieldCodec<Attacker> _repeated_attackers_codec
            = pb::FieldCodec.ForMessage(10, Attacker.Parser);
        private readonly pbc::RepeatedField<Attacker> attackers_ = new pbc::RepeatedField<Attacker>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Attacker> Attackers
        {
            get { return attackers_; }
        }

        /// <summary>Field number for the "attackWarnings" field.</summary>
        public const int AttackWarningsFieldNumber = 4;
        private static readonly pb::FieldCodec<AttackWarning> _repeated_attackWarnings_codec
            = pb::FieldCodec.ForMessage(34, AttackWarning.Parser);
        private readonly pbc::RepeatedField<AttackWarning> attackWarnings_ = new pbc::RepeatedField<AttackWarning>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<AttackWarning> AttackWarnings
        {
            get { return attackWarnings_; }
        }

        /// <summary>Field number for the "manaCost" field.</summary>
        public const int ManaCostFieldNumber = 5;
        private static readonly pb::FieldCodec<ManaRequirement> _repeated_manaCost_codec
            = pb::FieldCodec.ForMessage(42, ManaRequirement.Parser);
        private readonly pbc::RepeatedField<ManaRequirement> manaCost_ = new pbc::RepeatedField<ManaRequirement>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaRequirement> ManaCost
        {
            get { return manaCost_; }
        }

        /// <summary>Field number for the "hasRequirements" field.</summary>
        public const int HasRequirementsFieldNumber = 2;
        private bool hasRequirements_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRequirements
        {
            get { return hasRequirements_; }
            set
            {
                hasRequirements_ = value;
            }
        }

        /// <summary>Field number for the "hasRestrictions" field.</summary>
        public const int HasRestrictionsFieldNumber = 3;
        private bool hasRestrictions_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRestrictions
        {
            get { return hasRestrictions_; }
            set
            {
                hasRestrictions_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DeclareAttackersReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeclareAttackersReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!attackers_.Equals(other.attackers_)) return false;
            if (!attackWarnings_.Equals(other.attackWarnings_)) return false;
            if (!manaCost_.Equals(other.manaCost_)) return false;
            if (HasRequirements != other.HasRequirements) return false;
            if (HasRestrictions != other.HasRestrictions) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= attackers_.GetHashCode();
            hash ^= attackWarnings_.GetHashCode();
            hash ^= manaCost_.GetHashCode();
            if (HasRequirements != false) hash ^= HasRequirements.GetHashCode();
            if (HasRestrictions != false) hash ^= HasRestrictions.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            attackers_.WriteTo(output, _repeated_attackers_codec);
            if (HasRequirements != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(HasRequirements);
            }
            if (HasRestrictions != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(HasRestrictions);
            }
            attackWarnings_.WriteTo(output, _repeated_attackWarnings_codec);
            manaCost_.WriteTo(output, _repeated_manaCost_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += attackers_.CalculateSize(_repeated_attackers_codec);
            size += attackWarnings_.CalculateSize(_repeated_attackWarnings_codec);
            size += manaCost_.CalculateSize(_repeated_manaCost_codec);
            if (HasRequirements != false)
            {
                size += 1 + 1;
            }
            if (HasRestrictions != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeclareAttackersReq other)
        {
            if (other == null)
            {
                return;
            }
            attackers_.Add(other.attackers_);
            attackWarnings_.Add(other.attackWarnings_);
            manaCost_.Add(other.manaCost_);
            if (other.HasRequirements != false)
            {
                HasRequirements = other.HasRequirements;
            }
            if (other.HasRestrictions != false)
            {
                HasRestrictions = other.HasRestrictions;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            attackers_.AddEntriesFrom(input, _repeated_attackers_codec);
                            break;
                        }
                    case 16:
                        {
                            HasRequirements = input.ReadBool();
                            break;
                        }
                    case 24:
                        {
                            HasRestrictions = input.ReadBool();
                            break;
                        }
                    case 34:
                        {
                            attackWarnings_.AddEntriesFrom(input, _repeated_attackWarnings_codec);
                            break;
                        }
                    case 42:
                        {
                            manaCost_.AddEntriesFrom(input, _repeated_manaCost_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DeclareAttackersResp : pb::IMessage<DeclareAttackersResp>
    {
        private static readonly pb::MessageParser<DeclareAttackersResp> _parser = new pb::MessageParser<DeclareAttackersResp>(() => new DeclareAttackersResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeclareAttackersResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[85]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareAttackersResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareAttackersResp(DeclareAttackersResp other) : this()
        {
            selectedAttackers_ = other.selectedAttackers_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareAttackersResp Clone()
        {
            return new DeclareAttackersResp(this);
        }

        /// <summary>Field number for the "selectedAttackers" field.</summary>
        public const int SelectedAttackersFieldNumber = 1;
        private static readonly pb::FieldCodec<Attacker> _repeated_selectedAttackers_codec
            = pb::FieldCodec.ForMessage(10, Attacker.Parser);
        private readonly pbc::RepeatedField<Attacker> selectedAttackers_ = new pbc::RepeatedField<Attacker>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Attacker> SelectedAttackers
        {
            get { return selectedAttackers_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DeclareAttackersResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeclareAttackersResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!selectedAttackers_.Equals(other.selectedAttackers_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= selectedAttackers_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            selectedAttackers_.WriteTo(output, _repeated_selectedAttackers_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += selectedAttackers_.CalculateSize(_repeated_selectedAttackers_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeclareAttackersResp other)
        {
            if (other == null)
            {
                return;
            }
            selectedAttackers_.Add(other.selectedAttackers_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            selectedAttackers_.AddEntriesFrom(input, _repeated_selectedAttackers_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DeclareBlockersReq : pb::IMessage<DeclareBlockersReq>
    {
        private static readonly pb::MessageParser<DeclareBlockersReq> _parser = new pb::MessageParser<DeclareBlockersReq>(() => new DeclareBlockersReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeclareBlockersReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[86]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareBlockersReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareBlockersReq(DeclareBlockersReq other) : this()
        {
            blockers_ = other.blockers_.Clone();
            blockWarnings_ = other.blockWarnings_.Clone();
            hasRequirements_ = other.hasRequirements_;
            hasRestrictions_ = other.hasRestrictions_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareBlockersReq Clone()
        {
            return new DeclareBlockersReq(this);
        }

        /// <summary>Field number for the "blockers" field.</summary>
        public const int BlockersFieldNumber = 1;
        private static readonly pb::FieldCodec<Blocker> _repeated_blockers_codec
            = pb::FieldCodec.ForMessage(10, Blocker.Parser);
        private readonly pbc::RepeatedField<Blocker> blockers_ = new pbc::RepeatedField<Blocker>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Blocker> Blockers
        {
            get { return blockers_; }
        }

        /// <summary>Field number for the "blockWarnings" field.</summary>
        public const int BlockWarningsFieldNumber = 4;
        private static readonly pb::FieldCodec<BlockWarning> _repeated_blockWarnings_codec
            = pb::FieldCodec.ForMessage(34, BlockWarning.Parser);
        private readonly pbc::RepeatedField<BlockWarning> blockWarnings_ = new pbc::RepeatedField<BlockWarning>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<BlockWarning> BlockWarnings
        {
            get { return blockWarnings_; }
        }

        /// <summary>Field number for the "hasRequirements" field.</summary>
        public const int HasRequirementsFieldNumber = 2;
        private bool hasRequirements_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRequirements
        {
            get { return hasRequirements_; }
            set
            {
                hasRequirements_ = value;
            }
        }

        /// <summary>Field number for the "hasRestrictions" field.</summary>
        public const int HasRestrictionsFieldNumber = 3;
        private bool hasRestrictions_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRestrictions
        {
            get { return hasRestrictions_; }
            set
            {
                hasRestrictions_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DeclareBlockersReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeclareBlockersReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!blockers_.Equals(other.blockers_)) return false;
            if (!blockWarnings_.Equals(other.blockWarnings_)) return false;
            if (HasRequirements != other.HasRequirements) return false;
            if (HasRestrictions != other.HasRestrictions) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= blockers_.GetHashCode();
            hash ^= blockWarnings_.GetHashCode();
            if (HasRequirements != false) hash ^= HasRequirements.GetHashCode();
            if (HasRestrictions != false) hash ^= HasRestrictions.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            blockers_.WriteTo(output, _repeated_blockers_codec);
            if (HasRequirements != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(HasRequirements);
            }
            if (HasRestrictions != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(HasRestrictions);
            }
            blockWarnings_.WriteTo(output, _repeated_blockWarnings_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += blockers_.CalculateSize(_repeated_blockers_codec);
            size += blockWarnings_.CalculateSize(_repeated_blockWarnings_codec);
            if (HasRequirements != false)
            {
                size += 1 + 1;
            }
            if (HasRestrictions != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeclareBlockersReq other)
        {
            if (other == null)
            {
                return;
            }
            blockers_.Add(other.blockers_);
            blockWarnings_.Add(other.blockWarnings_);
            if (other.HasRequirements != false)
            {
                HasRequirements = other.HasRequirements;
            }
            if (other.HasRestrictions != false)
            {
                HasRestrictions = other.HasRestrictions;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            blockers_.AddEntriesFrom(input, _repeated_blockers_codec);
                            break;
                        }
                    case 16:
                        {
                            HasRequirements = input.ReadBool();
                            break;
                        }
                    case 24:
                        {
                            HasRestrictions = input.ReadBool();
                            break;
                        }
                    case 34:
                        {
                            blockWarnings_.AddEntriesFrom(input, _repeated_blockWarnings_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DeclareBlockersResp : pb::IMessage<DeclareBlockersResp>
    {
        private static readonly pb::MessageParser<DeclareBlockersResp> _parser = new pb::MessageParser<DeclareBlockersResp>(() => new DeclareBlockersResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeclareBlockersResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[87]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareBlockersResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareBlockersResp(DeclareBlockersResp other) : this()
        {
            selectedBlockers_ = other.selectedBlockers_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareBlockersResp Clone()
        {
            return new DeclareBlockersResp(this);
        }

        /// <summary>Field number for the "selectedBlockers" field.</summary>
        public const int SelectedBlockersFieldNumber = 1;
        private static readonly pb::FieldCodec<Blocker> _repeated_selectedBlockers_codec
            = pb::FieldCodec.ForMessage(10, Blocker.Parser);
        private readonly pbc::RepeatedField<Blocker> selectedBlockers_ = new pbc::RepeatedField<Blocker>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Blocker> SelectedBlockers
        {
            get { return selectedBlockers_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DeclareBlockersResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeclareBlockersResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!selectedBlockers_.Equals(other.selectedBlockers_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= selectedBlockers_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            selectedBlockers_.WriteTo(output, _repeated_selectedBlockers_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += selectedBlockers_.CalculateSize(_repeated_selectedBlockers_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeclareBlockersResp other)
        {
            if (other == null)
            {
                return;
            }
            selectedBlockers_.Add(other.selectedBlockers_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            selectedBlockers_.AddEntriesFrom(input, _repeated_selectedBlockers_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Decorator : pb::IMessage<Decorator>
    {
        private static readonly pb::MessageParser<Decorator> _parser = new pb::MessageParser<Decorator>(() => new Decorator());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Decorator> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[88]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Decorator()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Decorator(Decorator other) : this()
        {
            switch (other.MessageCase)
            {
                case MessageOneofCase.Loop:
                    Loop = other.Loop.Clone();
                    break;
                case MessageOneofCase.Inverter:
                    Inverter = other.Inverter.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Decorator Clone()
        {
            return new Decorator(this);
        }

        /// <summary>Field number for the "loop" field.</summary>
        public const int LoopFieldNumber = 1;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Loop Loop
        {
            get { return messageCase_ == MessageOneofCase.Loop ? (Loop)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Loop;
            }
        }

        /// <summary>Field number for the "inverter" field.</summary>
        public const int InverterFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Inverter Inverter
        {
            get { return messageCase_ == MessageOneofCase.Inverter ? (Inverter)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Inverter;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            Loop = 1,
            Inverter = 2,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Decorator);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Decorator other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Loop, other.Loop)) return false;
            if (!object.Equals(Inverter, other.Inverter)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (messageCase_ == MessageOneofCase.Loop) hash ^= Loop.GetHashCode();
            if (messageCase_ == MessageOneofCase.Inverter) hash ^= Inverter.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (messageCase_ == MessageOneofCase.Loop)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Loop);
            }
            if (messageCase_ == MessageOneofCase.Inverter)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Inverter);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (messageCase_ == MessageOneofCase.Loop)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loop);
            }
            if (messageCase_ == MessageOneofCase.Inverter)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inverter);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Decorator other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.Loop:
                    if (Loop == null)
                    {
                        Loop = new Loop();
                    }
                    Loop.MergeFrom(other.Loop);
                    break;
                case MessageOneofCase.Inverter:
                    if (Inverter == null)
                    {
                        Inverter = new Inverter();
                    }
                    Inverter.MergeFrom(other.Inverter);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Loop subBuilder = new Loop();
                            if (messageCase_ == MessageOneofCase.Loop)
                            {
                                subBuilder.MergeFrom(Loop);
                            }
                            input.ReadMessage(subBuilder);
                            Loop = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            Inverter subBuilder = new Inverter();
                            if (messageCase_ == MessageOneofCase.Inverter)
                            {
                                subBuilder.MergeFrom(Inverter);
                            }
                            input.ReadMessage(subBuilder);
                            Inverter = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DeleteQueueRequest : pb::IMessage<DeleteQueueRequest>
    {
        private static readonly pb::MessageParser<DeleteQueueRequest> _parser = new pb::MessageParser<DeleteQueueRequest>(() => new DeleteQueueRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeleteQueueRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[89]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteQueueRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteQueueRequest(DeleteQueueRequest other) : this()
        {
            eventId_ = other.eventId_;
            queueType_ = other.queueType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteQueueRequest Clone()
        {
            return new DeleteQueueRequest(this);
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 2;
        private string eventId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "queueType" field.</summary>
        public const int QueueTypeFieldNumber = 1;
        private QueueType queueType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueueType QueueType
        {
            get { return queueType_; }
            set
            {
                queueType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DeleteQueueRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeleteQueueRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventId != other.EventId) return false;
            if (QueueType != other.QueueType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventId.Length != 0) hash ^= EventId.GetHashCode();
            if (QueueType != 0) hash ^= QueueType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (QueueType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)QueueType);
            }
            if (EventId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(EventId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
            }
            if (QueueType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)QueueType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeleteQueueRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventId.Length != 0)
            {
                EventId = other.EventId;
            }
            if (other.QueueType != 0)
            {
                QueueType = other.QueueType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            queueType_ = (QueueType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            EventId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DeleteQueueResponse : pb::IMessage<DeleteQueueResponse>
    {
        private static readonly pb::MessageParser<DeleteQueueResponse> _parser = new pb::MessageParser<DeleteQueueResponse>(() => new DeleteQueueResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeleteQueueResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[90]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteQueueResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteQueueResponse(DeleteQueueResponse other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteQueueResponse Clone()
        {
            return new DeleteQueueResponse(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DeleteQueueResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeleteQueueResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeleteQueueResponse other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class DieRollResultsResp : pb::IMessage<DieRollResultsResp>
    {
        private static readonly pb::MessageParser<DieRollResultsResp> _parser = new pb::MessageParser<DieRollResultsResp>(() => new DieRollResultsResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DieRollResultsResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[91]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DieRollResultsResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DieRollResultsResp(DieRollResultsResp other) : this()
        {
            playerDieRolls_ = other.playerDieRolls_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DieRollResultsResp Clone()
        {
            return new DieRollResultsResp(this);
        }

        /// <summary>Field number for the "playerDieRolls" field.</summary>
        public const int PlayerDieRollsFieldNumber = 1;
        private static readonly pb::FieldCodec<PlayerDieRoll> _repeated_playerDieRolls_codec
            = pb::FieldCodec.ForMessage(10, PlayerDieRoll.Parser);
        private readonly pbc::RepeatedField<PlayerDieRoll> playerDieRolls_ = new pbc::RepeatedField<PlayerDieRoll>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<PlayerDieRoll> PlayerDieRolls
        {
            get { return playerDieRolls_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DieRollResultsResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DieRollResultsResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!playerDieRolls_.Equals(other.playerDieRolls_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= playerDieRolls_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            playerDieRolls_.WriteTo(output, _repeated_playerDieRolls_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += playerDieRolls_.CalculateSize(_repeated_playerDieRolls_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DieRollResultsResp other)
        {
            if (other == null)
            {
                return;
            }
            playerDieRolls_.Add(other.playerDieRolls_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            playerDieRolls_.AddEntriesFrom(input, _repeated_playerDieRolls_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Distribution : pb::IMessage<Distribution>
    {
        private static readonly pb::MessageParser<Distribution> _parser = new pb::MessageParser<Distribution>(() => new Distribution());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Distribution> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[92]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Distribution()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Distribution(Distribution other) : this()
        {
            instanceId_ = other.instanceId_;
            amount_ = other.amount_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Distribution Clone()
        {
            return new Distribution(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private uint amount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Amount
        {
            get { return amount_; }
            set
            {
                amount_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Distribution);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Distribution other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            if (Amount != other.Amount) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (Amount != 0) hash ^= Amount.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(InstanceId);
            }
            if (Amount != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Amount);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (Amount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Distribution other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.Amount != 0)
            {
                Amount = other.Amount;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            Amount = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DistributionReq : pb::IMessage<DistributionReq>
    {
        private static readonly pb::MessageParser<DistributionReq> _parser = new pb::MessageParser<DistributionReq>(() => new DistributionReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DistributionReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[93]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DistributionReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DistributionReq(DistributionReq other) : this()
        {
            targetIds_ = other.targetIds_.Clone();
            existingDistributionValues_ = other.existingDistributionValues_.Clone();
            optionIndex_ = other.optionIndex_;
            minAmount_ = other.minAmount_;
            maxAmount_ = other.maxAmount_;
            minPerTarget_ = other.minPerTarget_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DistributionReq Clone()
        {
            return new DistributionReq(this);
        }

        /// <summary>Field number for the "targetIds" field.</summary>
        public const int TargetIdsFieldNumber = 5;
        private static readonly pb::FieldCodec<uint> _repeated_targetIds_codec
            = pb::FieldCodec.ForUInt32(42);
        private readonly pbc::RepeatedField<uint> targetIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> TargetIds
        {
            get { return targetIds_; }
        }

        /// <summary>Field number for the "existingDistributionValues" field.</summary>
        public const int ExistingDistributionValuesFieldNumber = 6;
        private static readonly pb::FieldCodec<uint> _repeated_existingDistributionValues_codec
            = pb::FieldCodec.ForUInt32(50);
        private readonly pbc::RepeatedField<uint> existingDistributionValues_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ExistingDistributionValues
        {
            get { return existingDistributionValues_; }
        }

        /// <summary>Field number for the "optionIndex" field.</summary>
        public const int OptionIndexFieldNumber = 1;
        private uint optionIndex_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OptionIndex
        {
            get { return optionIndex_; }
            set
            {
                optionIndex_ = value;
            }
        }

        /// <summary>Field number for the "minAmount" field.</summary>
        public const int MinAmountFieldNumber = 2;
        private uint minAmount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinAmount
        {
            get { return minAmount_; }
            set
            {
                minAmount_ = value;
            }
        }

        /// <summary>Field number for the "maxAmount" field.</summary>
        public const int MaxAmountFieldNumber = 3;
        private uint maxAmount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxAmount
        {
            get { return maxAmount_; }
            set
            {
                maxAmount_ = value;
            }
        }

        /// <summary>Field number for the "minPerTarget" field.</summary>
        public const int MinPerTargetFieldNumber = 4;
        private uint minPerTarget_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinPerTarget
        {
            get { return minPerTarget_; }
            set
            {
                minPerTarget_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DistributionReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DistributionReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!targetIds_.Equals(other.targetIds_)) return false;
            if (!existingDistributionValues_.Equals(other.existingDistributionValues_)) return false;
            if (OptionIndex != other.OptionIndex) return false;
            if (MinAmount != other.MinAmount) return false;
            if (MaxAmount != other.MaxAmount) return false;
            if (MinPerTarget != other.MinPerTarget) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= targetIds_.GetHashCode();
            hash ^= existingDistributionValues_.GetHashCode();
            if (OptionIndex != 0) hash ^= OptionIndex.GetHashCode();
            if (MinAmount != 0) hash ^= MinAmount.GetHashCode();
            if (MaxAmount != 0) hash ^= MaxAmount.GetHashCode();
            if (MinPerTarget != 0) hash ^= MinPerTarget.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OptionIndex != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OptionIndex);
            }
            if (MinAmount != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MinAmount);
            }
            if (MaxAmount != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MaxAmount);
            }
            if (MinPerTarget != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(MinPerTarget);
            }
            targetIds_.WriteTo(output, _repeated_targetIds_codec);
            existingDistributionValues_.WriteTo(output, _repeated_existingDistributionValues_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += targetIds_.CalculateSize(_repeated_targetIds_codec);
            size += existingDistributionValues_.CalculateSize(_repeated_existingDistributionValues_codec);
            if (OptionIndex != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptionIndex);
            }
            if (MinAmount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinAmount);
            }
            if (MaxAmount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxAmount);
            }
            if (MinPerTarget != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinPerTarget);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DistributionReq other)
        {
            if (other == null)
            {
                return;
            }
            targetIds_.Add(other.targetIds_);
            existingDistributionValues_.Add(other.existingDistributionValues_);
            if (other.OptionIndex != 0)
            {
                OptionIndex = other.OptionIndex;
            }
            if (other.MinAmount != 0)
            {
                MinAmount = other.MinAmount;
            }
            if (other.MaxAmount != 0)
            {
                MaxAmount = other.MaxAmount;
            }
            if (other.MinPerTarget != 0)
            {
                MinPerTarget = other.MinPerTarget;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            OptionIndex = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            MinAmount = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            MaxAmount = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            MinPerTarget = input.ReadUInt32();
                            break;
                        }
                    case 42:
                    case 40:
                        {
                            targetIds_.AddEntriesFrom(input, _repeated_targetIds_codec);
                            break;
                        }
                    case 50:
                    case 48:
                        {
                            existingDistributionValues_.AddEntriesFrom(input, _repeated_existingDistributionValues_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DistributionResp : pb::IMessage<DistributionResp>
    {
        private static readonly pb::MessageParser<DistributionResp> _parser = new pb::MessageParser<DistributionResp>(() => new DistributionResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DistributionResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[94]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DistributionResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DistributionResp(DistributionResp other) : this()
        {
            distributions_ = other.distributions_.Clone();
            optionIndex_ = other.optionIndex_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DistributionResp Clone()
        {
            return new DistributionResp(this);
        }

        /// <summary>Field number for the "distributions" field.</summary>
        public const int DistributionsFieldNumber = 2;
        private static readonly pb::FieldCodec<Distribution> _repeated_distributions_codec
            = pb::FieldCodec.ForMessage(18, Distribution.Parser);
        private readonly pbc::RepeatedField<Distribution> distributions_ = new pbc::RepeatedField<Distribution>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Distribution> Distributions
        {
            get { return distributions_; }
        }

        /// <summary>Field number for the "optionIndex" field.</summary>
        public const int OptionIndexFieldNumber = 1;
        private uint optionIndex_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OptionIndex
        {
            get { return optionIndex_; }
            set
            {
                optionIndex_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DistributionResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DistributionResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!distributions_.Equals(other.distributions_)) return false;
            if (OptionIndex != other.OptionIndex) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= distributions_.GetHashCode();
            if (OptionIndex != 0) hash ^= OptionIndex.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OptionIndex != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OptionIndex);
            }
            distributions_.WriteTo(output, _repeated_distributions_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += distributions_.CalculateSize(_repeated_distributions_codec);
            if (OptionIndex != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptionIndex);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DistributionResp other)
        {
            if (other == null)
            {
                return;
            }
            distributions_.Add(other.distributions_);
            if (other.OptionIndex != 0)
            {
                OptionIndex = other.OptionIndex;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            OptionIndex = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            distributions_.AddEntriesFrom(input, _repeated_distributions_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DraftGameRoomConfig : pb::IMessage<DraftGameRoomConfig>
    {
        private static readonly pb::MessageParser<DraftGameRoomConfig> _parser = new pb::MessageParser<DraftGameRoomConfig>(() => new DraftGameRoomConfig());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DraftGameRoomConfig> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[95]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DraftGameRoomConfig()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DraftGameRoomConfig(DraftGameRoomConfig other) : this()
        {
            gameRoomId_ = other.gameRoomId_;
            eventId_ = other.eventId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DraftGameRoomConfig Clone()
        {
            return new DraftGameRoomConfig(this);
        }

        /// <summary>Field number for the "gameRoomId" field.</summary>
        public const int GameRoomIdFieldNumber = 1;
        private string gameRoomId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameRoomId
        {
            get { return gameRoomId_; }
            set
            {
                gameRoomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 2;
        private string eventId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DraftGameRoomConfig);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DraftGameRoomConfig other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GameRoomId != other.GameRoomId) return false;
            if (EventId != other.EventId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (GameRoomId.Length != 0) hash ^= GameRoomId.GetHashCode();
            if (EventId.Length != 0) hash ^= EventId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GameRoomId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(GameRoomId);
            }
            if (EventId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(EventId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (GameRoomId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GameRoomId);
            }
            if (EventId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DraftGameRoomConfig other)
        {
            if (other == null)
            {
                return;
            }
            if (other.GameRoomId.Length != 0)
            {
                GameRoomId = other.GameRoomId;
            }
            if (other.EventId.Length != 0)
            {
                EventId = other.EventId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            GameRoomId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            EventId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DraftGameRoomInfo : pb::IMessage<DraftGameRoomInfo>
    {
        private static readonly pb::MessageParser<DraftGameRoomInfo> _parser = new pb::MessageParser<DraftGameRoomInfo>(() => new DraftGameRoomInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DraftGameRoomInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[96]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DraftGameRoomInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DraftGameRoomInfo(DraftGameRoomInfo other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DraftGameRoomInfo Clone()
        {
            return new DraftGameRoomInfo(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DraftGameRoomInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DraftGameRoomInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DraftGameRoomInfo other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class DropConstructedMatchmakingRequest : pb::IMessage<DropConstructedMatchmakingRequest>
    {
        private static readonly pb::MessageParser<DropConstructedMatchmakingRequest> _parser = new pb::MessageParser<DropConstructedMatchmakingRequest>(() => new DropConstructedMatchmakingRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DropConstructedMatchmakingRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[97]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropConstructedMatchmakingRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropConstructedMatchmakingRequest(DropConstructedMatchmakingRequest other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropConstructedMatchmakingRequest Clone()
        {
            return new DropConstructedMatchmakingRequest(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DropConstructedMatchmakingRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DropConstructedMatchmakingRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DropConstructedMatchmakingRequest other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class DropMatchmakingRequestV2 : pb::IMessage<DropMatchmakingRequestV2>
    {
        private static readonly pb::MessageParser<DropMatchmakingRequestV2> _parser = new pb::MessageParser<DropMatchmakingRequestV2>(() => new DropMatchmakingRequestV2());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DropMatchmakingRequestV2> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[98]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingRequestV2()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingRequestV2(DropMatchmakingRequestV2 other) : this()
        {
            eventId_ = other.eventId_;
            courseId_ = other.courseId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingRequestV2 Clone()
        {
            return new DropMatchmakingRequestV2(this);
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 1;
        private string eventId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "courseId" field.</summary>
        public const int CourseIdFieldNumber = 2;
        private string courseId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CourseId
        {
            get { return courseId_; }
            set
            {
                courseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DropMatchmakingRequestV2);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DropMatchmakingRequestV2 other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventId != other.EventId) return false;
            if (CourseId != other.CourseId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventId.Length != 0) hash ^= EventId.GetHashCode();
            if (CourseId.Length != 0) hash ^= CourseId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EventId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(EventId);
            }
            if (CourseId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(CourseId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
            }
            if (CourseId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CourseId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DropMatchmakingRequestV2 other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventId.Length != 0)
            {
                EventId = other.EventId;
            }
            if (other.CourseId.Length != 0)
            {
                CourseId = other.CourseId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            EventId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            CourseId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DropMatchmakingResponse : pb::IMessage<DropMatchmakingResponse>
    {
        private static readonly pb::MessageParser<DropMatchmakingResponse> _parser = new pb::MessageParser<DropMatchmakingResponse>(() => new DropMatchmakingResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DropMatchmakingResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[99]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingResponse(DropMatchmakingResponse other) : this()
        {
            responseCode_ = other.responseCode_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingResponse Clone()
        {
            return new DropMatchmakingResponse(this);
        }

        /// <summary>Field number for the "responseCode" field.</summary>
        public const int ResponseCodeFieldNumber = 1;
        private DropMatchmakingResponseCode responseCode_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingResponseCode ResponseCode
        {
            get { return responseCode_; }
            set
            {
                responseCode_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DropMatchmakingResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DropMatchmakingResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ResponseCode != other.ResponseCode) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ResponseCode != 0) hash ^= ResponseCode.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ResponseCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ResponseCode);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ResponseCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ResponseCode);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DropMatchmakingResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ResponseCode != 0)
            {
                ResponseCode = other.ResponseCode;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            responseCode_ = (DropMatchmakingResponseCode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DropMatchmakingResponseV2 : pb::IMessage<DropMatchmakingResponseV2>
    {
        private static readonly pb::MessageParser<DropMatchmakingResponseV2> _parser = new pb::MessageParser<DropMatchmakingResponseV2>(() => new DropMatchmakingResponseV2());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DropMatchmakingResponseV2> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[100]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingResponseV2()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingResponseV2(DropMatchmakingResponseV2 other) : this()
        {
            responseCode_ = other.responseCode_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingResponseV2 Clone()
        {
            return new DropMatchmakingResponseV2(this);
        }

        /// <summary>Field number for the "responseCode" field.</summary>
        public const int ResponseCodeFieldNumber = 1;
        private DropMatchmakingResponseCode responseCode_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingResponseCode ResponseCode
        {
            get { return responseCode_; }
            set
            {
                responseCode_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DropMatchmakingResponseV2);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DropMatchmakingResponseV2 other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ResponseCode != other.ResponseCode) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ResponseCode != 0) hash ^= ResponseCode.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ResponseCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ResponseCode);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ResponseCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ResponseCode);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DropMatchmakingResponseV2 other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ResponseCode != 0)
            {
                ResponseCode = other.ResponseCode;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            responseCode_ = (DropMatchmakingResponseCode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DropQueueRequest : pb::IMessage<DropQueueRequest>
    {
        private static readonly pb::MessageParser<DropQueueRequest> _parser = new pb::MessageParser<DropQueueRequest>(() => new DropQueueRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DropQueueRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[101]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropQueueRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropQueueRequest(DropQueueRequest other) : this()
        {
            eventId_ = other.eventId_;
            queueType_ = other.queueType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropQueueRequest Clone()
        {
            return new DropQueueRequest(this);
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 2;
        private string eventId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "queueType" field.</summary>
        public const int QueueTypeFieldNumber = 1;
        private QueueType queueType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueueType QueueType
        {
            get { return queueType_; }
            set
            {
                queueType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DropQueueRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DropQueueRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventId != other.EventId) return false;
            if (QueueType != other.QueueType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventId.Length != 0) hash ^= EventId.GetHashCode();
            if (QueueType != 0) hash ^= QueueType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (QueueType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)QueueType);
            }
            if (EventId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(EventId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
            }
            if (QueueType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)QueueType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DropQueueRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventId.Length != 0)
            {
                EventId = other.EventId;
            }
            if (other.QueueType != 0)
            {
                QueueType = other.QueueType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            queueType_ = (QueueType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            EventId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DropQueueResponse : pb::IMessage<DropQueueResponse>
    {
        private static readonly pb::MessageParser<DropQueueResponse> _parser = new pb::MessageParser<DropQueueResponse>(() => new DropQueueResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DropQueueResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[102]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropQueueResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropQueueResponse(DropQueueResponse other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropQueueResponse Clone()
        {
            return new DropQueueResponse(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DropQueueResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DropQueueResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DropQueueResponse other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class DummyResponse : pb::IMessage<DummyResponse>
    {
        private static readonly pb::MessageParser<DummyResponse> _parser = new pb::MessageParser<DummyResponse>(() => new DummyResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DummyResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[103]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DummyResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DummyResponse(DummyResponse other) : this()
        {
            dummy_ = other.dummy_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DummyResponse Clone()
        {
            return new DummyResponse(this);
        }

        /// <summary>Field number for the "dummy" field.</summary>
        public const int DummyFieldNumber = 1;
        private uint dummy_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Dummy
        {
            get { return dummy_; }
            set
            {
                dummy_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DummyResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DummyResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Dummy != other.Dummy) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Dummy != 0) hash ^= Dummy.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Dummy != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Dummy);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Dummy != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dummy);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DummyResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Dummy != 0)
            {
                Dummy = other.Dummy;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Dummy = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class EchoRequest : pb::IMessage<EchoRequest>
    {
        private static readonly pb::MessageParser<EchoRequest> _parser = new pb::MessageParser<EchoRequest>(() => new EchoRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EchoRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[104]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EchoRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EchoRequest(EchoRequest other) : this()
        {
            message_ = other.message_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EchoRequest Clone()
        {
            return new EchoRequest(this);
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 1;
        private string message_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message
        {
            get { return message_; }
            set
            {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as EchoRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EchoRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Message != other.Message) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Message.Length != 0) hash ^= Message.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Message.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Message);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Message.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EchoRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Message.Length != 0)
            {
                Message = other.Message;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Message = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class EchoResponse : pb::IMessage<EchoResponse>
    {
        private static readonly pb::MessageParser<EchoResponse> _parser = new pb::MessageParser<EchoResponse>(() => new EchoResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EchoResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[105]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EchoResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EchoResponse(EchoResponse other) : this()
        {
            message_ = other.message_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EchoResponse Clone()
        {
            return new EchoResponse(this);
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 1;
        private string message_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message
        {
            get { return message_; }
            set
            {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as EchoResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EchoResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Message != other.Message) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Message.Length != 0) hash ^= Message.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Message.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Message);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Message.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EchoResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Message.Length != 0)
            {
                Message = other.Message;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Message = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class EdictalMessage : pb::IMessage<EdictalMessage>
    {
        private static readonly pb::MessageParser<EdictalMessage> _parser = new pb::MessageParser<EdictalMessage>(() => new EdictalMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EdictalMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[106]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EdictalMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EdictalMessage(EdictalMessage other) : this()
        {
            edictMessage_ = other.edictMessage_ != null ? other.edictMessage_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EdictalMessage Clone()
        {
            return new EdictalMessage(this);
        }

        /// <summary>Field number for the "edictMessage" field.</summary>
        public const int EdictMessageFieldNumber = 1;
        private ClientToGREMessage edictMessage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToGREMessage EdictMessage
        {
            get { return edictMessage_; }
            set
            {
                edictMessage_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as EdictalMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EdictalMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(EdictMessage, other.EdictMessage)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (edictMessage_ != null) hash ^= EdictMessage.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (edictMessage_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(EdictMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (edictMessage_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(EdictMessage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EdictalMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.edictMessage_ != null)
            {
                if (edictMessage_ == null)
                {
                    edictMessage_ = new ClientToGREMessage();
                }
                EdictMessage.MergeFrom(other.EdictMessage);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (edictMessage_ == null)
                            {
                                edictMessage_ = new ClientToGREMessage();
                            }
                            input.ReadMessage(edictMessage_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class EffectViolationBlocking : pb::IMessage<EffectViolationBlocking>
    {
        private static readonly pb::MessageParser<EffectViolationBlocking> _parser = new pb::MessageParser<EffectViolationBlocking>(() => new EffectViolationBlocking());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EffectViolationBlocking> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[107]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EffectViolationBlocking()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EffectViolationBlocking(EffectViolationBlocking other) : this()
        {
            blocker_ = other.blocker_.Clone();
            affectedInstanceId_ = other.affectedInstanceId_;
            prompt_ = other.prompt_ != null ? other.prompt_.Clone() : null;
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EffectViolationBlocking Clone()
        {
            return new EffectViolationBlocking(this);
        }

        /// <summary>Field number for the "blocker" field.</summary>
        public const int BlockerFieldNumber = 4;
        private static readonly pb::FieldCodec<Blocker> _repeated_blocker_codec
            = pb::FieldCodec.ForMessage(34, MTGAHelper.Entity.Protobuf.Blocker.Parser);
        private readonly pbc::RepeatedField<Blocker> blocker_ = new pbc::RepeatedField<Blocker>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Blocker> Blocker
        {
            get { return blocker_; }
        }

        /// <summary>Field number for the "affectedInstanceId" field.</summary>
        public const int AffectedInstanceIdFieldNumber = 1;
        private uint affectedInstanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AffectedInstanceId
        {
            get { return affectedInstanceId_; }
            set
            {
                affectedInstanceId_ = value;
            }
        }

        /// <summary>Field number for the "prompt" field.</summary>
        public const int PromptFieldNumber = 2;
        private Prompt prompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt Prompt
        {
            get { return prompt_; }
            set
            {
                prompt_ = value;
            }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 3;
        private ResultCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as EffectViolationBlocking);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EffectViolationBlocking other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!blocker_.Equals(other.blocker_)) return false;
            if (AffectedInstanceId != other.AffectedInstanceId) return false;
            if (!object.Equals(Prompt, other.Prompt)) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= blocker_.GetHashCode();
            if (AffectedInstanceId != 0) hash ^= AffectedInstanceId.GetHashCode();
            if (prompt_ != null) hash ^= Prompt.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AffectedInstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AffectedInstanceId);
            }
            if (prompt_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Prompt);
            }
            if (Result != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)Result);
            }
            blocker_.WriteTo(output, _repeated_blocker_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += blocker_.CalculateSize(_repeated_blocker_codec);
            if (AffectedInstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AffectedInstanceId);
            }
            if (prompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prompt);
            }
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EffectViolationBlocking other)
        {
            if (other == null)
            {
                return;
            }
            blocker_.Add(other.blocker_);
            if (other.AffectedInstanceId != 0)
            {
                AffectedInstanceId = other.AffectedInstanceId;
            }
            if (other.prompt_ != null)
            {
                if (prompt_ == null)
                {
                    prompt_ = new Prompt();
                }
                Prompt.MergeFrom(other.Prompt);
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AffectedInstanceId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            if (prompt_ == null)
                            {
                                prompt_ = new Prompt();
                            }
                            input.ReadMessage(prompt_);
                            break;
                        }
                    case 24:
                        {
                            result_ = (ResultCode)input.ReadEnum();
                            break;
                        }
                    case 34:
                        {
                            blocker_.AddEntriesFrom(input, _repeated_blocker_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class EndTurn : pb::IMessage<EndTurn>
    {
        private static readonly pb::MessageParser<EndTurn> _parser = new pb::MessageParser<EndTurn>(() => new EndTurn());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EndTurn> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[108]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndTurn()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndTurn(EndTurn other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndTurn Clone()
        {
            return new EndTurn(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as EndTurn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EndTurn other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EndTurn other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class FinalMatchResult : pb::IMessage<FinalMatchResult>
    {
        private static readonly pb::MessageParser<FinalMatchResult> _parser = new pb::MessageParser<FinalMatchResult>(() => new FinalMatchResult());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FinalMatchResult> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[109]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FinalMatchResult()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FinalMatchResult(FinalMatchResult other) : this()
        {
            matchId_ = other.matchId_;
            resultList_ = other.resultList_.Clone();
            errorMessage_ = other.errorMessage_;
            matchForceResult_ = other.matchForceResult_ != null ? other.matchForceResult_.Clone() : null;
            matchCompletedReason_ = other.matchCompletedReason_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FinalMatchResult Clone()
        {
            return new FinalMatchResult(this);
        }

        /// <summary>Field number for the "matchId" field.</summary>
        public const int MatchIdFieldNumber = 1;
        private string matchId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchId
        {
            get { return matchId_; }
            set
            {
                matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "resultList" field.</summary>
        public const int ResultListFieldNumber = 5;
        private static readonly pb::FieldCodec<ResultSpec> _repeated_resultList_codec
            = pb::FieldCodec.ForMessage(42, ResultSpec.Parser);
        private readonly pbc::RepeatedField<ResultSpec> resultList_ = new pbc::RepeatedField<ResultSpec>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ResultSpec> ResultList
        {
            get { return resultList_; }
        }

        /// <summary>Field number for the "errorMessage" field.</summary>
        public const int ErrorMessageFieldNumber = 10;
        private string errorMessage_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorMessage
        {
            get { return errorMessage_; }
            set
            {
                errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "matchForceResult" field.</summary>
        public const int MatchForceResultFieldNumber = 2;
        private ResultSpec matchForceResult_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultSpec MatchForceResult
        {
            get { return matchForceResult_; }
            set
            {
                matchForceResult_ = value;
            }
        }

        /// <summary>Field number for the "matchCompletedReason" field.</summary>
        public const int MatchCompletedReasonFieldNumber = 3;
        private MatchCompletedReasonType matchCompletedReason_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchCompletedReasonType MatchCompletedReason
        {
            get { return matchCompletedReason_; }
            set
            {
                matchCompletedReason_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as FinalMatchResult);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FinalMatchResult other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchId != other.MatchId) return false;
            if (!resultList_.Equals(other.resultList_)) return false;
            if (ErrorMessage != other.ErrorMessage) return false;
            if (!object.Equals(MatchForceResult, other.MatchForceResult)) return false;
            if (MatchCompletedReason != other.MatchCompletedReason) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
            hash ^= resultList_.GetHashCode();
            if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
            if (matchForceResult_ != null) hash ^= MatchForceResult.GetHashCode();
            if (MatchCompletedReason != 0) hash ^= MatchCompletedReason.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MatchId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(MatchId);
            }
            if (matchForceResult_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(MatchForceResult);
            }
            if (MatchCompletedReason != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)MatchCompletedReason);
            }
            resultList_.WriteTo(output, _repeated_resultList_codec);
            if (ErrorMessage.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteString(ErrorMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
            }
            size += resultList_.CalculateSize(_repeated_resultList_codec);
            if (ErrorMessage.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
            }
            if (matchForceResult_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchForceResult);
            }
            if (MatchCompletedReason != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MatchCompletedReason);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FinalMatchResult other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchId.Length != 0)
            {
                MatchId = other.MatchId;
            }
            resultList_.Add(other.resultList_);
            if (other.ErrorMessage.Length != 0)
            {
                ErrorMessage = other.ErrorMessage;
            }
            if (other.matchForceResult_ != null)
            {
                if (matchForceResult_ == null)
                {
                    matchForceResult_ = new ResultSpec();
                }
                MatchForceResult.MergeFrom(other.MatchForceResult);
            }
            if (other.MatchCompletedReason != 0)
            {
                MatchCompletedReason = other.MatchCompletedReason;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            MatchId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            if (matchForceResult_ == null)
                            {
                                matchForceResult_ = new ResultSpec();
                            }
                            input.ReadMessage(matchForceResult_);
                            break;
                        }
                    case 24:
                        {
                            matchCompletedReason_ = (MatchCompletedReasonType)input.ReadEnum();
                            break;
                        }
                    case 42:
                        {
                            resultList_.AddEntriesFrom(input, _repeated_resultList_codec);
                            break;
                        }
                    case 82:
                        {
                            ErrorMessage = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ForceDrawReq : pb::IMessage<ForceDrawReq>
    {
        private static readonly pb::MessageParser<ForceDrawReq> _parser = new pb::MessageParser<ForceDrawReq>(() => new ForceDrawReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ForceDrawReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[110]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceDrawReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceDrawReq(ForceDrawReq other) : this()
        {
            scope_ = other.scope_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceDrawReq Clone()
        {
            return new ForceDrawReq(this);
        }

        /// <summary>Field number for the "scope" field.</summary>
        public const int ScopeFieldNumber = 1;
        private MatchScope scope_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchScope Scope
        {
            get { return scope_; }
            set
            {
                scope_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ForceDrawReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ForceDrawReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Scope != other.Scope) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Scope != 0) hash ^= Scope.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Scope != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Scope);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Scope != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Scope);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ForceDrawReq other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Scope != 0)
            {
                Scope = other.Scope;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            scope_ = (MatchScope)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class FrontDoorToClientMessage : pb::IMessage<FrontDoorToClientMessage>
    {
        private static readonly pb::MessageParser<FrontDoorToClientMessage> _parser = new pb::MessageParser<FrontDoorToClientMessage>(() => new FrontDoorToClientMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FrontDoorToClientMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[111]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrontDoorToClientMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrontDoorToClientMessage(FrontDoorToClientMessage other) : this()
        {
            switch (other.MessageCase)
            {
                case MessageOneofCase.LobbyToClientMessage:
                    LobbyToClientMessage = other.LobbyToClientMessage.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrontDoorToClientMessage Clone()
        {
            return new FrontDoorToClientMessage(this);
        }

        /// <summary>Field number for the "lobbyToClientMessage" field.</summary>
        public const int LobbyToClientMessageFieldNumber = 1;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyToClientMessage LobbyToClientMessage
        {
            get { return messageCase_ == MessageOneofCase.LobbyToClientMessage ? (LobbyToClientMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.LobbyToClientMessage;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            LobbyToClientMessage = 1,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as FrontDoorToClientMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FrontDoorToClientMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(LobbyToClientMessage, other.LobbyToClientMessage)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (messageCase_ == MessageOneofCase.LobbyToClientMessage) hash ^= LobbyToClientMessage.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (messageCase_ == MessageOneofCase.LobbyToClientMessage)
            {
                output.WriteRawTag(10);
                output.WriteMessage(LobbyToClientMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (messageCase_ == MessageOneofCase.LobbyToClientMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(LobbyToClientMessage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FrontDoorToClientMessage other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.LobbyToClientMessage:
                    if (LobbyToClientMessage == null)
                    {
                        LobbyToClientMessage = new LobbyToClientMessage();
                    }
                    LobbyToClientMessage.MergeFrom(other.LobbyToClientMessage);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            LobbyToClientMessage subBuilder = new LobbyToClientMessage();
                            if (messageCase_ == MessageOneofCase.LobbyToClientMessage)
                            {
                                subBuilder.MergeFrom(LobbyToClientMessage);
                            }
                            input.ReadMessage(subBuilder);
                            LobbyToClientMessage = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GRECancelScheduledMessage : pb::IMessage<GRECancelScheduledMessage>
    {
        private static readonly pb::MessageParser<GRECancelScheduledMessage> _parser = new pb::MessageParser<GRECancelScheduledMessage>(() => new GRECancelScheduledMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GRECancelScheduledMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[112]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRECancelScheduledMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRECancelScheduledMessage(GRECancelScheduledMessage other) : this()
        {
            timerId_ = other.timerId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRECancelScheduledMessage Clone()
        {
            return new GRECancelScheduledMessage(this);
        }

        /// <summary>Field number for the "timerId" field.</summary>
        public const int TimerIdFieldNumber = 1;
        private uint timerId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimerId
        {
            get { return timerId_; }
            set
            {
                timerId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GRECancelScheduledMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GRECancelScheduledMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TimerId != other.TimerId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TimerId != 0) hash ^= TimerId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TimerId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(TimerId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TimerId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimerId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GRECancelScheduledMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TimerId != 0)
            {
                TimerId = other.TimerId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            TimerId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREConfigRequest : pb::IMessage<GREConfigRequest>
    {
        private static readonly pb::MessageParser<GREConfigRequest> _parser = new pb::MessageParser<GREConfigRequest>(() => new GREConfigRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREConfigRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[113]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREConfigRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREConfigRequest(GREConfigRequest other) : this()
        {
            greConfiguration_ = other.greConfiguration_ != null ? other.greConfiguration_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREConfigRequest Clone()
        {
            return new GREConfigRequest(this);
        }

        /// <summary>Field number for the "greConfiguration" field.</summary>
        public const int GreConfigurationFieldNumber = 1;
        private GREConfiguration greConfiguration_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREConfiguration GreConfiguration
        {
            get { return greConfiguration_; }
            set
            {
                greConfiguration_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREConfigRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREConfigRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(GreConfiguration, other.GreConfiguration)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (greConfiguration_ != null) hash ^= GreConfiguration.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (greConfiguration_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(GreConfiguration);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (greConfiguration_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GreConfiguration);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREConfigRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.greConfiguration_ != null)
            {
                if (greConfiguration_ == null)
                {
                    greConfiguration_ = new GREConfiguration();
                }
                GreConfiguration.MergeFrom(other.GreConfiguration);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (greConfiguration_ == null)
                            {
                                greConfiguration_ = new GREConfiguration();
                            }
                            input.ReadMessage(greConfiguration_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREConfiguration : pb::IMessage<GREConfiguration>
    {
        private static readonly pb::MessageParser<GREConfiguration> _parser = new pb::MessageParser<GREConfiguration>(() => new GREConfiguration());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREConfiguration> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[114]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREConfiguration()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREConfiguration(GREConfiguration other) : this()
        {
            gameStateRedactorConfiguration_ = other.gameStateRedactorConfiguration_ != null ? other.gameStateRedactorConfiguration_.Clone() : null;
            clipsConfiguration_ = other.clipsConfiguration_ != null ? other.clipsConfiguration_.Clone() : null;
            checkpointConfiguration_ = other.checkpointConfiguration_ != null ? other.checkpointConfiguration_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREConfiguration Clone()
        {
            return new GREConfiguration(this);
        }

        /// <summary>Field number for the "gameStateRedactorConfiguration" field.</summary>
        public const int GameStateRedactorConfigurationFieldNumber = 1;
        private GameStateRedactorConfiguration gameStateRedactorConfiguration_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameStateRedactorConfiguration GameStateRedactorConfiguration
        {
            get { return gameStateRedactorConfiguration_; }
            set
            {
                gameStateRedactorConfiguration_ = value;
            }
        }

        /// <summary>Field number for the "clipsConfiguration" field.</summary>
        public const int ClipsConfigurationFieldNumber = 2;
        private CLIPSConfiguration clipsConfiguration_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CLIPSConfiguration ClipsConfiguration
        {
            get { return clipsConfiguration_; }
            set
            {
                clipsConfiguration_ = value;
            }
        }

        /// <summary>Field number for the "checkpointConfiguration" field.</summary>
        public const int CheckpointConfigurationFieldNumber = 3;
        private CheckpointConfiguration checkpointConfiguration_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckpointConfiguration CheckpointConfiguration
        {
            get { return checkpointConfiguration_; }
            set
            {
                checkpointConfiguration_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREConfiguration);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREConfiguration other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(GameStateRedactorConfiguration, other.GameStateRedactorConfiguration)) return false;
            if (!object.Equals(ClipsConfiguration, other.ClipsConfiguration)) return false;
            if (!object.Equals(CheckpointConfiguration, other.CheckpointConfiguration)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (gameStateRedactorConfiguration_ != null) hash ^= GameStateRedactorConfiguration.GetHashCode();
            if (clipsConfiguration_ != null) hash ^= ClipsConfiguration.GetHashCode();
            if (checkpointConfiguration_ != null) hash ^= CheckpointConfiguration.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (gameStateRedactorConfiguration_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(GameStateRedactorConfiguration);
            }
            if (clipsConfiguration_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ClipsConfiguration);
            }
            if (checkpointConfiguration_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(CheckpointConfiguration);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (gameStateRedactorConfiguration_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameStateRedactorConfiguration);
            }
            if (clipsConfiguration_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClipsConfiguration);
            }
            if (checkpointConfiguration_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckpointConfiguration);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREConfiguration other)
        {
            if (other == null)
            {
                return;
            }
            if (other.gameStateRedactorConfiguration_ != null)
            {
                if (gameStateRedactorConfiguration_ == null)
                {
                    gameStateRedactorConfiguration_ = new GameStateRedactorConfiguration();
                }
                GameStateRedactorConfiguration.MergeFrom(other.GameStateRedactorConfiguration);
            }
            if (other.clipsConfiguration_ != null)
            {
                if (clipsConfiguration_ == null)
                {
                    clipsConfiguration_ = new CLIPSConfiguration();
                }
                ClipsConfiguration.MergeFrom(other.ClipsConfiguration);
            }
            if (other.checkpointConfiguration_ != null)
            {
                if (checkpointConfiguration_ == null)
                {
                    checkpointConfiguration_ = new CheckpointConfiguration();
                }
                CheckpointConfiguration.MergeFrom(other.CheckpointConfiguration);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (gameStateRedactorConfiguration_ == null)
                            {
                                gameStateRedactorConfiguration_ = new GameStateRedactorConfiguration();
                            }
                            input.ReadMessage(gameStateRedactorConfiguration_);
                            break;
                        }
                    case 18:
                        {
                            if (clipsConfiguration_ == null)
                            {
                                clipsConfiguration_ = new CLIPSConfiguration();
                            }
                            input.ReadMessage(clipsConfiguration_);
                            break;
                        }
                    case 26:
                        {
                            if (checkpointConfiguration_ == null)
                            {
                                checkpointConfiguration_ = new CheckpointConfiguration();
                            }
                            input.ReadMessage(checkpointConfiguration_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GRECreateRequest : pb::IMessage<GRECreateRequest>
    {
        private static readonly pb::MessageParser<GRECreateRequest> _parser = new pb::MessageParser<GRECreateRequest>(() => new GRECreateRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GRECreateRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[115]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRECreateRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRECreateRequest(GRECreateRequest other) : this()
        {
            matchID_ = other.matchID_;
            greID_ = other.greID_;
            gameID_ = other.gameID_;
            majorVer_ = other.majorVer_;
            minorVer_ = other.minorVer_;
            revisionVer_ = other.revisionVer_;
            buildVer_ = other.buildVer_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRECreateRequest Clone()
        {
            return new GRECreateRequest(this);
        }

        /// <summary>Field number for the "matchID" field.</summary>
        public const int MatchIDFieldNumber = 2;
        private string matchID_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchID
        {
            get { return matchID_; }
            set
            {
                matchID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "greID" field.</summary>
        public const int GreIDFieldNumber = 1;
        private uint greID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GreID
        {
            get { return greID_; }
            set
            {
                greID_ = value;
            }
        }

        /// <summary>Field number for the "gameID" field.</summary>
        public const int GameIDFieldNumber = 3;
        private uint gameID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameID
        {
            get { return gameID_; }
            set
            {
                gameID_ = value;
            }
        }

        /// <summary>Field number for the "majorVer" field.</summary>
        public const int MajorVerFieldNumber = 4;
        private uint majorVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MajorVer
        {
            get { return majorVer_; }
            set
            {
                majorVer_ = value;
            }
        }

        /// <summary>Field number for the "minorVer" field.</summary>
        public const int MinorVerFieldNumber = 5;
        private uint minorVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinorVer
        {
            get { return minorVer_; }
            set
            {
                minorVer_ = value;
            }
        }

        /// <summary>Field number for the "revisionVer" field.</summary>
        public const int RevisionVerFieldNumber = 6;
        private uint revisionVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RevisionVer
        {
            get { return revisionVer_; }
            set
            {
                revisionVer_ = value;
            }
        }

        /// <summary>Field number for the "buildVer" field.</summary>
        public const int BuildVerFieldNumber = 7;
        private uint buildVer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BuildVer
        {
            get { return buildVer_; }
            set
            {
                buildVer_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GRECreateRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GRECreateRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchID != other.MatchID) return false;
            if (GreID != other.GreID) return false;
            if (GameID != other.GameID) return false;
            if (MajorVer != other.MajorVer) return false;
            if (MinorVer != other.MinorVer) return false;
            if (RevisionVer != other.RevisionVer) return false;
            if (BuildVer != other.BuildVer) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchID.Length != 0) hash ^= MatchID.GetHashCode();
            if (GreID != 0) hash ^= GreID.GetHashCode();
            if (GameID != 0) hash ^= GameID.GetHashCode();
            if (MajorVer != 0) hash ^= MajorVer.GetHashCode();
            if (MinorVer != 0) hash ^= MinorVer.GetHashCode();
            if (RevisionVer != 0) hash ^= RevisionVer.GetHashCode();
            if (BuildVer != 0) hash ^= BuildVer.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GreID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(GreID);
            }
            if (MatchID.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(MatchID);
            }
            if (GameID != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(GameID);
            }
            if (MajorVer != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(MajorVer);
            }
            if (MinorVer != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(MinorVer);
            }
            if (RevisionVer != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(RevisionVer);
            }
            if (BuildVer != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(BuildVer);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchID);
            }
            if (GreID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GreID);
            }
            if (GameID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
            }
            if (MajorVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MajorVer);
            }
            if (MinorVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinorVer);
            }
            if (RevisionVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RevisionVer);
            }
            if (BuildVer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuildVer);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GRECreateRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchID.Length != 0)
            {
                MatchID = other.MatchID;
            }
            if (other.GreID != 0)
            {
                GreID = other.GreID;
            }
            if (other.GameID != 0)
            {
                GameID = other.GameID;
            }
            if (other.MajorVer != 0)
            {
                MajorVer = other.MajorVer;
            }
            if (other.MinorVer != 0)
            {
                MinorVer = other.MinorVer;
            }
            if (other.RevisionVer != 0)
            {
                RevisionVer = other.RevisionVer;
            }
            if (other.BuildVer != 0)
            {
                BuildVer = other.BuildVer;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            GreID = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            MatchID = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            GameID = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            MajorVer = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            MinorVer = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            RevisionVer = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            BuildVer = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GRECreateResponse : pb::IMessage<GRECreateResponse>
    {
        private static readonly pb::MessageParser<GRECreateResponse> _parser = new pb::MessageParser<GRECreateResponse>(() => new GRECreateResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GRECreateResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[116]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRECreateResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRECreateResponse(GRECreateResponse other) : this()
        {
            greID_ = other.greID_;
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRECreateResponse Clone()
        {
            return new GRECreateResponse(this);
        }

        /// <summary>Field number for the "greID" field.</summary>
        public const int GreIDFieldNumber = 1;
        private uint greID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GreID
        {
            get { return greID_; }
            set
            {
                greID_ = value;
            }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private GRETHHostErrorCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostErrorCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GRECreateResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GRECreateResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GreID != other.GreID) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (GreID != 0) hash ^= GreID.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GreID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(GreID);
            }
            if (Result != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (GreID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GreID);
            }
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GRECreateResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.GreID != 0)
            {
                GreID = other.GreID;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            GreID = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            result_ = (GRETHHostErrorCode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREDestroyRequest : pb::IMessage<GREDestroyRequest>
    {
        private static readonly pb::MessageParser<GREDestroyRequest> _parser = new pb::MessageParser<GREDestroyRequest>(() => new GREDestroyRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREDestroyRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[117]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREDestroyRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREDestroyRequest(GREDestroyRequest other) : this()
        {
            greID_ = other.greID_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREDestroyRequest Clone()
        {
            return new GREDestroyRequest(this);
        }

        /// <summary>Field number for the "greID" field.</summary>
        public const int GreIDFieldNumber = 1;
        private uint greID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GreID
        {
            get { return greID_; }
            set
            {
                greID_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREDestroyRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREDestroyRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GreID != other.GreID) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (GreID != 0) hash ^= GreID.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GreID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(GreID);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (GreID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GreID);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREDestroyRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.GreID != 0)
            {
                GreID = other.GreID;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            GreID = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREDestroyResponse : pb::IMessage<GREDestroyResponse>
    {
        private static readonly pb::MessageParser<GREDestroyResponse> _parser = new pb::MessageParser<GREDestroyResponse>(() => new GREDestroyResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREDestroyResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[118]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREDestroyResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREDestroyResponse(GREDestroyResponse other) : this()
        {
            greID_ = other.greID_;
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREDestroyResponse Clone()
        {
            return new GREDestroyResponse(this);
        }

        /// <summary>Field number for the "greID" field.</summary>
        public const int GreIDFieldNumber = 1;
        private uint greID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GreID
        {
            get { return greID_; }
            set
            {
                greID_ = value;
            }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private GRETHHostErrorCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostErrorCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREDestroyResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREDestroyResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GreID != other.GreID) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (GreID != 0) hash ^= GreID.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GreID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(GreID);
            }
            if (Result != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (GreID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GreID);
            }
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREDestroyResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.GreID != 0)
            {
                GreID = other.GreID;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            GreID = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            result_ = (GRETHHostErrorCode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREExpireTimerRequest : pb::IMessage<GREExpireTimerRequest>
    {
        private static readonly pb::MessageParser<GREExpireTimerRequest> _parser = new pb::MessageParser<GREExpireTimerRequest>(() => new GREExpireTimerRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREExpireTimerRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[119]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREExpireTimerRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREExpireTimerRequest(GREExpireTimerRequest other) : this()
        {
            timerId_ = other.timerId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREExpireTimerRequest Clone()
        {
            return new GREExpireTimerRequest(this);
        }

        /// <summary>Field number for the "timerId" field.</summary>
        public const int TimerIdFieldNumber = 1;
        private uint timerId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimerId
        {
            get { return timerId_; }
            set
            {
                timerId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREExpireTimerRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREExpireTimerRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TimerId != other.TimerId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TimerId != 0) hash ^= TimerId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TimerId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(TimerId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TimerId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimerId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREExpireTimerRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TimerId != 0)
            {
                TimerId = other.TimerId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            TimerId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREFatalError : pb::IMessage<GREFatalError>
    {
        private static readonly pb::MessageParser<GREFatalError> _parser = new pb::MessageParser<GREFatalError>(() => new GREFatalError());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREFatalError> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[120]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREFatalError()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREFatalError(GREFatalError other) : this()
        {
            errorMessage_ = other.errorMessage_;
            greID_ = other.greID_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREFatalError Clone()
        {
            return new GREFatalError(this);
        }

        /// <summary>Field number for the "errorMessage" field.</summary>
        public const int ErrorMessageFieldNumber = 2;
        private pb::ByteString errorMessage_ = pb::ByteString.Empty;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ErrorMessage
        {
            get { return errorMessage_; }
            set
            {
                errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "greID" field.</summary>
        public const int GreIDFieldNumber = 1;
        private uint greID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GreID
        {
            get { return greID_; }
            set
            {
                greID_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREFatalError);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREFatalError other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ErrorMessage != other.ErrorMessage) return false;
            if (GreID != other.GreID) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
            if (GreID != 0) hash ^= GreID.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GreID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(GreID);
            }
            if (ErrorMessage.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(ErrorMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ErrorMessage.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(ErrorMessage);
            }
            if (GreID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GreID);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREFatalError other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ErrorMessage.Length != 0)
            {
                ErrorMessage = other.ErrorMessage;
            }
            if (other.GreID != 0)
            {
                GreID = other.GreID;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            GreID = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            ErrorMessage = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREForceResultRequest : pb::IMessage<GREForceResultRequest>
    {
        private static readonly pb::MessageParser<GREForceResultRequest> _parser = new pb::MessageParser<GREForceResultRequest>(() => new GREForceResultRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREForceResultRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[121]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREForceResultRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREForceResultRequest(GREForceResultRequest other) : this()
        {
            result_ = other.result_ != null ? other.result_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREForceResultRequest Clone()
        {
            return new GREForceResultRequest(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private ResultSpec result_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultSpec Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREForceResultRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREForceResultRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Result, other.Result)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (result_ != null) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (result_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (result_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREForceResultRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.result_ != null)
            {
                if (result_ == null)
                {
                    result_ = new ResultSpec();
                }
                Result.MergeFrom(other.Result);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (result_ == null)
                            {
                                result_ = new ResultSpec();
                            }
                            input.ReadMessage(result_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREGameLoggerConfigureRequest : pb::IMessage<GREGameLoggerConfigureRequest>
    {
        private static readonly pb::MessageParser<GREGameLoggerConfigureRequest> _parser = new pb::MessageParser<GREGameLoggerConfigureRequest>(() => new GREGameLoggerConfigureRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREGameLoggerConfigureRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[122]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREGameLoggerConfigureRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREGameLoggerConfigureRequest(GREGameLoggerConfigureRequest other) : this()
        {
            loadFilename_ = other.loadFilename_;
            loadPath_ = other.loadPath_;
            saveFilename_ = other.saveFilename_;
            savePath_ = other.savePath_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREGameLoggerConfigureRequest Clone()
        {
            return new GREGameLoggerConfigureRequest(this);
        }

        /// <summary>Field number for the "loadFilename" field.</summary>
        public const int LoadFilenameFieldNumber = 1;
        private string loadFilename_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LoadFilename
        {
            get { return loadFilename_; }
            set
            {
                loadFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "loadPath" field.</summary>
        public const int LoadPathFieldNumber = 2;
        private string loadPath_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LoadPath
        {
            get { return loadPath_; }
            set
            {
                loadPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "saveFilename" field.</summary>
        public const int SaveFilenameFieldNumber = 3;
        private string saveFilename_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SaveFilename
        {
            get { return saveFilename_; }
            set
            {
                saveFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "savePath" field.</summary>
        public const int SavePathFieldNumber = 4;
        private string savePath_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SavePath
        {
            get { return savePath_; }
            set
            {
                savePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREGameLoggerConfigureRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREGameLoggerConfigureRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (LoadFilename != other.LoadFilename) return false;
            if (LoadPath != other.LoadPath) return false;
            if (SaveFilename != other.SaveFilename) return false;
            if (SavePath != other.SavePath) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (LoadFilename.Length != 0) hash ^= LoadFilename.GetHashCode();
            if (LoadPath.Length != 0) hash ^= LoadPath.GetHashCode();
            if (SaveFilename.Length != 0) hash ^= SaveFilename.GetHashCode();
            if (SavePath.Length != 0) hash ^= SavePath.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (LoadFilename.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(LoadFilename);
            }
            if (LoadPath.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(LoadPath);
            }
            if (SaveFilename.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(SaveFilename);
            }
            if (SavePath.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(SavePath);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (LoadFilename.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LoadFilename);
            }
            if (LoadPath.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LoadPath);
            }
            if (SaveFilename.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SaveFilename);
            }
            if (SavePath.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SavePath);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREGameLoggerConfigureRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.LoadFilename.Length != 0)
            {
                LoadFilename = other.LoadFilename;
            }
            if (other.LoadPath.Length != 0)
            {
                LoadPath = other.LoadPath;
            }
            if (other.SaveFilename.Length != 0)
            {
                SaveFilename = other.SaveFilename;
            }
            if (other.SavePath.Length != 0)
            {
                SavePath = other.SavePath;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            LoadFilename = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            LoadPath = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            SaveFilename = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            SavePath = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREInterpretRequest : pb::IMessage<GREInterpretRequest>
    {
        private static readonly pb::MessageParser<GREInterpretRequest> _parser = new pb::MessageParser<GREInterpretRequest>(() => new GREInterpretRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREInterpretRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[123]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREInterpretRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREInterpretRequest(GREInterpretRequest other) : this()
        {
            clips_ = other.clips_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREInterpretRequest Clone()
        {
            return new GREInterpretRequest(this);
        }

        /// <summary>Field number for the "clips" field.</summary>
        public const int ClipsFieldNumber = 1;
        private string clips_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Clips
        {
            get { return clips_; }
            set
            {
                clips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREInterpretRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREInterpretRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Clips != other.Clips) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Clips.Length != 0) hash ^= Clips.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Clips.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Clips);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Clips.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Clips);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREInterpretRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Clips.Length != 0)
            {
                Clips = other.Clips;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Clips = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREReplacePlayer : pb::IMessage<GREReplacePlayer>
    {
        private static readonly pb::MessageParser<GREReplacePlayer> _parser = new pb::MessageParser<GREReplacePlayer>(() => new GREReplacePlayer());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREReplacePlayer> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[124]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREReplacePlayer()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREReplacePlayer(GREReplacePlayer other) : this()
        {
            systemSeatId_ = other.systemSeatId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREReplacePlayer Clone()
        {
            return new GREReplacePlayer(this);
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 1;
        private uint systemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SystemSeatId
        {
            get { return systemSeatId_; }
            set
            {
                systemSeatId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREReplacePlayer);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREReplacePlayer other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SystemSeatId != other.SystemSeatId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SystemSeatId != 0) hash ^= SystemSeatId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SystemSeatId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SystemSeatId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SystemSeatId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREReplacePlayer other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SystemSeatId != 0)
            {
                SystemSeatId = other.SystemSeatId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SystemSeatId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREResumeMatchRequest : pb::IMessage<GREResumeMatchRequest>
    {
        private static readonly pb::MessageParser<GREResumeMatchRequest> _parser = new pb::MessageParser<GREResumeMatchRequest>(() => new GREResumeMatchRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREResumeMatchRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[125]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREResumeMatchRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREResumeMatchRequest(GREResumeMatchRequest other) : this()
        {
            binaryGameState_ = other.binaryGameState_ != null ? other.binaryGameState_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREResumeMatchRequest Clone()
        {
            return new GREResumeMatchRequest(this);
        }

        /// <summary>Field number for the "binaryGameState" field.</summary>
        public const int BinaryGameStateFieldNumber = 1;
        private BinaryGameState binaryGameState_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BinaryGameState BinaryGameState
        {
            get { return binaryGameState_; }
            set
            {
                binaryGameState_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREResumeMatchRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREResumeMatchRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(BinaryGameState, other.BinaryGameState)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (binaryGameState_ != null) hash ^= BinaryGameState.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (binaryGameState_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(BinaryGameState);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (binaryGameState_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(BinaryGameState);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREResumeMatchRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.binaryGameState_ != null)
            {
                if (binaryGameState_ == null)
                {
                    binaryGameState_ = new BinaryGameState();
                }
                BinaryGameState.MergeFrom(other.BinaryGameState);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (binaryGameState_ == null)
                            {
                                binaryGameState_ = new BinaryGameState();
                            }
                            input.ReadMessage(binaryGameState_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREScheduledMessage : pb::IMessage<GREScheduledMessage>
    {
        private static readonly pb::MessageParser<GREScheduledMessage> _parser = new pb::MessageParser<GREScheduledMessage>(() => new GREScheduledMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREScheduledMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[126]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREScheduledMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREScheduledMessage(GREScheduledMessage other) : this()
        {
            timerId_ = other.timerId_;
            delayMs_ = other.delayMs_;
            message_ = other.message_ != null ? other.message_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREScheduledMessage Clone()
        {
            return new GREScheduledMessage(this);
        }

        /// <summary>Field number for the "timerId" field.</summary>
        public const int TimerIdFieldNumber = 1;
        private uint timerId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimerId
        {
            get { return timerId_; }
            set
            {
                timerId_ = value;
            }
        }

        /// <summary>Field number for the "delayMs" field.</summary>
        public const int DelayMsFieldNumber = 2;
        private int delayMs_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DelayMs
        {
            get { return delayMs_; }
            set
            {
                delayMs_ = value;
            }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 3;
        private ServerToGREMessage message_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerToGREMessage Message
        {
            get { return message_; }
            set
            {
                message_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREScheduledMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREScheduledMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TimerId != other.TimerId) return false;
            if (DelayMs != other.DelayMs) return false;
            if (!object.Equals(Message, other.Message)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TimerId != 0) hash ^= TimerId.GetHashCode();
            if (DelayMs != 0) hash ^= DelayMs.GetHashCode();
            if (message_ != null) hash ^= Message.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TimerId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(TimerId);
            }
            if (DelayMs != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(DelayMs);
            }
            if (message_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Message);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TimerId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimerId);
            }
            if (DelayMs != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelayMs);
            }
            if (message_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREScheduledMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TimerId != 0)
            {
                TimerId = other.TimerId;
            }
            if (other.DelayMs != 0)
            {
                DelayMs = other.DelayMs;
            }
            if (other.message_ != null)
            {
                if (message_ == null)
                {
                    message_ = new ServerToGREMessage();
                }
                Message.MergeFrom(other.Message);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            TimerId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            DelayMs = input.ReadInt32();
                            break;
                        }
                    case 26:
                        {
                            if (message_ == null)
                            {
                                message_ = new ServerToGREMessage();
                            }
                            input.ReadMessage(message_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREStartMatchRequest : pb::IMessage<GREStartMatchRequest>
    {
        private static readonly pb::MessageParser<GREStartMatchRequest> _parser = new pb::MessageParser<GREStartMatchRequest>(() => new GREStartMatchRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREStartMatchRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[127]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREStartMatchRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREStartMatchRequest(GREStartMatchRequest other) : this()
        {
            matchConfig_ = other.matchConfig_ != null ? other.matchConfig_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREStartMatchRequest Clone()
        {
            return new GREStartMatchRequest(this);
        }

        /// <summary>Field number for the "matchConfig" field.</summary>
        public const int MatchConfigFieldNumber = 1;
        private MatchConfig matchConfig_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchConfig MatchConfig
        {
            get { return matchConfig_; }
            set
            {
                matchConfig_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREStartMatchRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREStartMatchRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(MatchConfig, other.MatchConfig)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (matchConfig_ != null) hash ^= MatchConfig.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (matchConfig_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(MatchConfig);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (matchConfig_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchConfig);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREStartMatchRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.matchConfig_ != null)
            {
                if (matchConfig_ == null)
                {
                    matchConfig_ = new MatchConfig();
                }
                MatchConfig.MergeFrom(other.MatchConfig);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (matchConfig_ == null)
                            {
                                matchConfig_ = new MatchConfig();
                            }
                            input.ReadMessage(matchConfig_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GRESubmitDeckRequest : pb::IMessage<GRESubmitDeckRequest>
    {
        private static readonly pb::MessageParser<GRESubmitDeckRequest> _parser = new pb::MessageParser<GRESubmitDeckRequest>(() => new GRESubmitDeckRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GRESubmitDeckRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[128]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRESubmitDeckRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRESubmitDeckRequest(GRESubmitDeckRequest other) : this()
        {
            deckCards_ = other.deckCards_.Clone();
            sideboardCards_ = other.sideboardCards_.Clone();
            systemSeatId_ = other.systemSeatId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRESubmitDeckRequest Clone()
        {
            return new GRESubmitDeckRequest(this);
        }

        /// <summary>Field number for the "deckCards" field.</summary>
        public const int DeckCardsFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_deckCards_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> deckCards_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> DeckCards
        {
            get { return deckCards_; }
        }

        /// <summary>Field number for the "sideboardCards" field.</summary>
        public const int SideboardCardsFieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_sideboardCards_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> sideboardCards_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> SideboardCards
        {
            get { return sideboardCards_; }
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 1;
        private uint systemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SystemSeatId
        {
            get { return systemSeatId_; }
            set
            {
                systemSeatId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GRESubmitDeckRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GRESubmitDeckRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!deckCards_.Equals(other.deckCards_)) return false;
            if (!sideboardCards_.Equals(other.sideboardCards_)) return false;
            if (SystemSeatId != other.SystemSeatId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= deckCards_.GetHashCode();
            hash ^= sideboardCards_.GetHashCode();
            if (SystemSeatId != 0) hash ^= SystemSeatId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SystemSeatId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SystemSeatId);
            }
            deckCards_.WriteTo(output, _repeated_deckCards_codec);
            sideboardCards_.WriteTo(output, _repeated_sideboardCards_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += deckCards_.CalculateSize(_repeated_deckCards_codec);
            size += sideboardCards_.CalculateSize(_repeated_sideboardCards_codec);
            if (SystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SystemSeatId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GRESubmitDeckRequest other)
        {
            if (other == null)
            {
                return;
            }
            deckCards_.Add(other.deckCards_);
            sideboardCards_.Add(other.sideboardCards_);
            if (other.SystemSeatId != 0)
            {
                SystemSeatId = other.SystemSeatId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SystemSeatId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            deckCards_.AddEntriesFrom(input, _repeated_deckCards_codec);
                            break;
                        }
                    case 26:
                    case 24:
                        {
                            sideboardCards_.AddEntriesFrom(input, _repeated_sideboardCards_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GRETHHostEmulatorLaunch : pb::IMessage<GRETHHostEmulatorLaunch>
    {
        private static readonly pb::MessageParser<GRETHHostEmulatorLaunch> _parser = new pb::MessageParser<GRETHHostEmulatorLaunch>(() => new GRETHHostEmulatorLaunch());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GRETHHostEmulatorLaunch> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[129]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostEmulatorLaunch()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostEmulatorLaunch(GRETHHostEmulatorLaunch other) : this()
        {
            programName_ = other.programName_;
            executablePath_ = other.executablePath_;
            sharedLibraryFilename_ = other.sharedLibraryFilename_;
            greIRFilename_ = other.greIRFilename_;
            logFilename_ = other.logFilename_;
            syslogIPAddress_ = other.syslogIPAddress_;
            syslogTCPPort_ = other.syslogTCPPort_;
            syslogProcID_ = other.syslogProcID_;
            outFilename_ = other.outFilename_;
            linkID_ = other.linkID_;
            hostID_ = other.hostID_;
            sutID_ = other.sutID_;
            enableRedaction_ = other.enableRedaction_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostEmulatorLaunch Clone()
        {
            return new GRETHHostEmulatorLaunch(this);
        }

        /// <summary>Field number for the "programName" field.</summary>
        public const int ProgramNameFieldNumber = 1;
        private string programName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProgramName
        {
            get { return programName_; }
            set
            {
                programName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "executablePath" field.</summary>
        public const int ExecutablePathFieldNumber = 2;
        private string executablePath_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ExecutablePath
        {
            get { return executablePath_; }
            set
            {
                executablePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "sharedLibraryFilename" field.</summary>
        public const int SharedLibraryFilenameFieldNumber = 3;
        private string sharedLibraryFilename_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SharedLibraryFilename
        {
            get { return sharedLibraryFilename_; }
            set
            {
                sharedLibraryFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "greIRFilename" field.</summary>
        public const int GreIRFilenameFieldNumber = 4;
        private string greIRFilename_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GreIRFilename
        {
            get { return greIRFilename_; }
            set
            {
                greIRFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "logFilename" field.</summary>
        public const int LogFilenameFieldNumber = 8;
        private string logFilename_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LogFilename
        {
            get { return logFilename_; }
            set
            {
                logFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "syslogIPAddress" field.</summary>
        public const int SyslogIPAddressFieldNumber = 9;
        private string syslogIPAddress_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SyslogIPAddress
        {
            get { return syslogIPAddress_; }
            set
            {
                syslogIPAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "syslogTCPPort" field.</summary>
        public const int SyslogTCPPortFieldNumber = 10;
        private string syslogTCPPort_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SyslogTCPPort
        {
            get { return syslogTCPPort_; }
            set
            {
                syslogTCPPort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "syslogProcID" field.</summary>
        public const int SyslogProcIDFieldNumber = 11;
        private string syslogProcID_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SyslogProcID
        {
            get { return syslogProcID_; }
            set
            {
                syslogProcID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "outFilename" field.</summary>
        public const int OutFilenameFieldNumber = 12;
        private string outFilename_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OutFilename
        {
            get { return outFilename_; }
            set
            {
                outFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "linkID" field.</summary>
        public const int LinkIDFieldNumber = 5;
        private uint linkID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LinkID
        {
            get { return linkID_; }
            set
            {
                linkID_ = value;
            }
        }

        /// <summary>Field number for the "hostID" field.</summary>
        public const int HostIDFieldNumber = 6;
        private uint hostID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HostID
        {
            get { return hostID_; }
            set
            {
                hostID_ = value;
            }
        }

        /// <summary>Field number for the "sutID" field.</summary>
        public const int SutIDFieldNumber = 7;
        private uint sutID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SutID
        {
            get { return sutID_; }
            set
            {
                sutID_ = value;
            }
        }

        /// <summary>Field number for the "enableRedaction" field.</summary>
        public const int EnableRedactionFieldNumber = 13;
        private bool enableRedaction_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EnableRedaction
        {
            get { return enableRedaction_; }
            set
            {
                enableRedaction_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GRETHHostEmulatorLaunch);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GRETHHostEmulatorLaunch other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ProgramName != other.ProgramName) return false;
            if (ExecutablePath != other.ExecutablePath) return false;
            if (SharedLibraryFilename != other.SharedLibraryFilename) return false;
            if (GreIRFilename != other.GreIRFilename) return false;
            if (LogFilename != other.LogFilename) return false;
            if (SyslogIPAddress != other.SyslogIPAddress) return false;
            if (SyslogTCPPort != other.SyslogTCPPort) return false;
            if (SyslogProcID != other.SyslogProcID) return false;
            if (OutFilename != other.OutFilename) return false;
            if (LinkID != other.LinkID) return false;
            if (HostID != other.HostID) return false;
            if (SutID != other.SutID) return false;
            if (EnableRedaction != other.EnableRedaction) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ProgramName.Length != 0) hash ^= ProgramName.GetHashCode();
            if (ExecutablePath.Length != 0) hash ^= ExecutablePath.GetHashCode();
            if (SharedLibraryFilename.Length != 0) hash ^= SharedLibraryFilename.GetHashCode();
            if (GreIRFilename.Length != 0) hash ^= GreIRFilename.GetHashCode();
            if (LogFilename.Length != 0) hash ^= LogFilename.GetHashCode();
            if (SyslogIPAddress.Length != 0) hash ^= SyslogIPAddress.GetHashCode();
            if (SyslogTCPPort.Length != 0) hash ^= SyslogTCPPort.GetHashCode();
            if (SyslogProcID.Length != 0) hash ^= SyslogProcID.GetHashCode();
            if (OutFilename.Length != 0) hash ^= OutFilename.GetHashCode();
            if (LinkID != 0) hash ^= LinkID.GetHashCode();
            if (HostID != 0) hash ^= HostID.GetHashCode();
            if (SutID != 0) hash ^= SutID.GetHashCode();
            if (EnableRedaction != false) hash ^= EnableRedaction.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ProgramName.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ProgramName);
            }
            if (ExecutablePath.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(ExecutablePath);
            }
            if (SharedLibraryFilename.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(SharedLibraryFilename);
            }
            if (GreIRFilename.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(GreIRFilename);
            }
            if (LinkID != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(LinkID);
            }
            if (HostID != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(HostID);
            }
            if (SutID != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(SutID);
            }
            if (LogFilename.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(LogFilename);
            }
            if (SyslogIPAddress.Length != 0)
            {
                output.WriteRawTag(74);
                output.WriteString(SyslogIPAddress);
            }
            if (SyslogTCPPort.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteString(SyslogTCPPort);
            }
            if (SyslogProcID.Length != 0)
            {
                output.WriteRawTag(90);
                output.WriteString(SyslogProcID);
            }
            if (OutFilename.Length != 0)
            {
                output.WriteRawTag(98);
                output.WriteString(OutFilename);
            }
            if (EnableRedaction != false)
            {
                output.WriteRawTag(104);
                output.WriteBool(EnableRedaction);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ProgramName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ProgramName);
            }
            if (ExecutablePath.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecutablePath);
            }
            if (SharedLibraryFilename.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SharedLibraryFilename);
            }
            if (GreIRFilename.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GreIRFilename);
            }
            if (LogFilename.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LogFilename);
            }
            if (SyslogIPAddress.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SyslogIPAddress);
            }
            if (SyslogTCPPort.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SyslogTCPPort);
            }
            if (SyslogProcID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SyslogProcID);
            }
            if (OutFilename.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(OutFilename);
            }
            if (LinkID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LinkID);
            }
            if (HostID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostID);
            }
            if (SutID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SutID);
            }
            if (EnableRedaction != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GRETHHostEmulatorLaunch other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ProgramName.Length != 0)
            {
                ProgramName = other.ProgramName;
            }
            if (other.ExecutablePath.Length != 0)
            {
                ExecutablePath = other.ExecutablePath;
            }
            if (other.SharedLibraryFilename.Length != 0)
            {
                SharedLibraryFilename = other.SharedLibraryFilename;
            }
            if (other.GreIRFilename.Length != 0)
            {
                GreIRFilename = other.GreIRFilename;
            }
            if (other.LogFilename.Length != 0)
            {
                LogFilename = other.LogFilename;
            }
            if (other.SyslogIPAddress.Length != 0)
            {
                SyslogIPAddress = other.SyslogIPAddress;
            }
            if (other.SyslogTCPPort.Length != 0)
            {
                SyslogTCPPort = other.SyslogTCPPort;
            }
            if (other.SyslogProcID.Length != 0)
            {
                SyslogProcID = other.SyslogProcID;
            }
            if (other.OutFilename.Length != 0)
            {
                OutFilename = other.OutFilename;
            }
            if (other.LinkID != 0)
            {
                LinkID = other.LinkID;
            }
            if (other.HostID != 0)
            {
                HostID = other.HostID;
            }
            if (other.SutID != 0)
            {
                SutID = other.SutID;
            }
            if (other.EnableRedaction != false)
            {
                EnableRedaction = other.EnableRedaction;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ProgramName = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            ExecutablePath = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            SharedLibraryFilename = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            GreIRFilename = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            LinkID = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            HostID = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            SutID = input.ReadUInt32();
                            break;
                        }
                    case 66:
                        {
                            LogFilename = input.ReadString();
                            break;
                        }
                    case 74:
                        {
                            SyslogIPAddress = input.ReadString();
                            break;
                        }
                    case 82:
                        {
                            SyslogTCPPort = input.ReadString();
                            break;
                        }
                    case 90:
                        {
                            SyslogProcID = input.ReadString();
                            break;
                        }
                    case 98:
                        {
                            OutFilename = input.ReadString();
                            break;
                        }
                    case 104:
                        {
                            EnableRedaction = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GRETHHostEmulatorLaunchResp : pb::IMessage<GRETHHostEmulatorLaunchResp>
    {
        private static readonly pb::MessageParser<GRETHHostEmulatorLaunchResp> _parser = new pb::MessageParser<GRETHHostEmulatorLaunchResp>(() => new GRETHHostEmulatorLaunchResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GRETHHostEmulatorLaunchResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[130]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostEmulatorLaunchResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostEmulatorLaunchResp(GRETHHostEmulatorLaunchResp other) : this()
        {
            result_ = other.result_;
            hostID_ = other.hostID_;
            pID_ = other.pID_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostEmulatorLaunchResp Clone()
        {
            return new GRETHHostEmulatorLaunchResp(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private uint result_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        /// <summary>Field number for the "hostID" field.</summary>
        public const int HostIDFieldNumber = 2;
        private uint hostID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HostID
        {
            get { return hostID_; }
            set
            {
                hostID_ = value;
            }
        }

        /// <summary>Field number for the "pID" field.</summary>
        public const int PIDFieldNumber = 3;
        private int pID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PID
        {
            get { return pID_; }
            set
            {
                pID_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GRETHHostEmulatorLaunchResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GRETHHostEmulatorLaunchResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Result != other.Result) return false;
            if (HostID != other.HostID) return false;
            if (PID != other.PID) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Result != 0) hash ^= Result.GetHashCode();
            if (HostID != 0) hash ^= HostID.GetHashCode();
            if (PID != 0) hash ^= PID.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Result != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Result);
            }
            if (HostID != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(HostID);
            }
            if (PID != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(PID);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
            }
            if (HostID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostID);
            }
            if (PID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PID);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GRETHHostEmulatorLaunchResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            if (other.HostID != 0)
            {
                HostID = other.HostID;
            }
            if (other.PID != 0)
            {
                PID = other.PID;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Result = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            HostID = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            PID = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GRETHHostEmulatorShutdown : pb::IMessage<GRETHHostEmulatorShutdown>
    {
        private static readonly pb::MessageParser<GRETHHostEmulatorShutdown> _parser = new pb::MessageParser<GRETHHostEmulatorShutdown>(() => new GRETHHostEmulatorShutdown());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GRETHHostEmulatorShutdown> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[131]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostEmulatorShutdown()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostEmulatorShutdown(GRETHHostEmulatorShutdown other) : this()
        {
            shutdownHostID_ = other.shutdownHostID_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostEmulatorShutdown Clone()
        {
            return new GRETHHostEmulatorShutdown(this);
        }

        /// <summary>Field number for the "shutdownHostID" field.</summary>
        public const int ShutdownHostIDFieldNumber = 1;
        private uint shutdownHostID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ShutdownHostID
        {
            get { return shutdownHostID_; }
            set
            {
                shutdownHostID_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GRETHHostEmulatorShutdown);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GRETHHostEmulatorShutdown other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ShutdownHostID != other.ShutdownHostID) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ShutdownHostID != 0) hash ^= ShutdownHostID.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ShutdownHostID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(ShutdownHostID);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ShutdownHostID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShutdownHostID);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GRETHHostEmulatorShutdown other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ShutdownHostID != 0)
            {
                ShutdownHostID = other.ShutdownHostID;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ShutdownHostID = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GRETHHostEmulatorShutdownResp : pb::IMessage<GRETHHostEmulatorShutdownResp>
    {
        private static readonly pb::MessageParser<GRETHHostEmulatorShutdownResp> _parser = new pb::MessageParser<GRETHHostEmulatorShutdownResp>(() => new GRETHHostEmulatorShutdownResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GRETHHostEmulatorShutdownResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[132]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostEmulatorShutdownResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostEmulatorShutdownResp(GRETHHostEmulatorShutdownResp other) : this()
        {
            result_ = other.result_;
            shutdownHostID_ = other.shutdownHostID_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostEmulatorShutdownResp Clone()
        {
            return new GRETHHostEmulatorShutdownResp(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private uint result_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        /// <summary>Field number for the "shutdownHostID" field.</summary>
        public const int ShutdownHostIDFieldNumber = 2;
        private uint shutdownHostID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ShutdownHostID
        {
            get { return shutdownHostID_; }
            set
            {
                shutdownHostID_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GRETHHostEmulatorShutdownResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GRETHHostEmulatorShutdownResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Result != other.Result) return false;
            if (ShutdownHostID != other.ShutdownHostID) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Result != 0) hash ^= Result.GetHashCode();
            if (ShutdownHostID != 0) hash ^= ShutdownHostID.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Result != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Result);
            }
            if (ShutdownHostID != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(ShutdownHostID);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
            }
            if (ShutdownHostID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShutdownHostID);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GRETHHostEmulatorShutdownResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            if (other.ShutdownHostID != 0)
            {
                ShutdownHostID = other.ShutdownHostID;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Result = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            ShutdownHostID = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GRETickMessage : pb::IMessage<GRETickMessage>
    {
        private static readonly pb::MessageParser<GRETickMessage> _parser = new pb::MessageParser<GRETickMessage>(() => new GRETickMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GRETickMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[133]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETickMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETickMessage(GRETickMessage other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETickMessage Clone()
        {
            return new GRETickMessage(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GRETickMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GRETickMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GRETickMessage other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class GRETimeoutMessage : pb::IMessage<GRETimeoutMessage>
    {
        private static readonly pb::MessageParser<GRETimeoutMessage> _parser = new pb::MessageParser<GRETimeoutMessage>(() => new GRETimeoutMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GRETimeoutMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[134]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETimeoutMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETimeoutMessage(GRETimeoutMessage other) : this()
        {
            seatId_ = other.seatId_;
            type_ = other.type_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETimeoutMessage Clone()
        {
            return new GRETimeoutMessage(this);
        }

        /// <summary>Field number for the "seatId" field.</summary>
        public const int SeatIdFieldNumber = 1;
        private uint seatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SeatId
        {
            get { return seatId_; }
            set
            {
                seatId_ = value;
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private TimeoutType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeoutType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GRETimeoutMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GRETimeoutMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SeatId != other.SeatId) return false;
            if (Type != other.Type) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SeatId != 0) hash ^= SeatId.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SeatId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SeatId);
            }
            if (Type != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Type);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
            }
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GRETimeoutMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SeatId != 0)
            {
                SeatId = other.SeatId;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SeatId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            type_ = (TimeoutType)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GRETimerExpiredMessage : pb::IMessage<GRETimerExpiredMessage>
    {
        private static readonly pb::MessageParser<GRETimerExpiredMessage> _parser = new pb::MessageParser<GRETimerExpiredMessage>(() => new GRETimerExpiredMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GRETimerExpiredMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[135]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETimerExpiredMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETimerExpiredMessage(GRETimerExpiredMessage other) : this()
        {
            expiredTimerId_ = other.expiredTimerId_;
            switch (other.MessageCase)
            {
                case MessageOneofCase.ServerToGREMessage:
                    ServerToGREMessage = other.ServerToGREMessage.Clone();
                    break;
                case MessageOneofCase.ClientToGREMessage:
                    ClientToGREMessage = other.ClientToGREMessage.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETimerExpiredMessage Clone()
        {
            return new GRETimerExpiredMessage(this);
        }

        /// <summary>Field number for the "expiredTimerId" field.</summary>
        public const int ExpiredTimerIdFieldNumber = 1;
        private uint expiredTimerId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ExpiredTimerId
        {
            get { return expiredTimerId_; }
            set
            {
                expiredTimerId_ = value;
            }
        }

        /// <summary>Field number for the "serverToGREMessage" field.</summary>
        public const int ServerToGREMessageFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerToGREMessage ServerToGREMessage
        {
            get { return messageCase_ == MessageOneofCase.ServerToGREMessage ? (ServerToGREMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ServerToGREMessage;
            }
        }

        /// <summary>Field number for the "clientToGREMessage" field.</summary>
        public const int ClientToGREMessageFieldNumber = 3;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToGREMessage ClientToGREMessage
        {
            get { return messageCase_ == MessageOneofCase.ClientToGREMessage ? (ClientToGREMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClientToGREMessage;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            ServerToGREMessage = 2,
            ClientToGREMessage = 3,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GRETimerExpiredMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GRETimerExpiredMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ExpiredTimerId != other.ExpiredTimerId) return false;
            if (!object.Equals(ServerToGREMessage, other.ServerToGREMessage)) return false;
            if (!object.Equals(ClientToGREMessage, other.ClientToGREMessage)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ExpiredTimerId != 0) hash ^= ExpiredTimerId.GetHashCode();
            if (messageCase_ == MessageOneofCase.ServerToGREMessage) hash ^= ServerToGREMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.ClientToGREMessage) hash ^= ClientToGREMessage.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ExpiredTimerId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(ExpiredTimerId);
            }
            if (messageCase_ == MessageOneofCase.ServerToGREMessage)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ServerToGREMessage);
            }
            if (messageCase_ == MessageOneofCase.ClientToGREMessage)
            {
                output.WriteRawTag(26);
                output.WriteMessage(ClientToGREMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ExpiredTimerId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpiredTimerId);
            }
            if (messageCase_ == MessageOneofCase.ServerToGREMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerToGREMessage);
            }
            if (messageCase_ == MessageOneofCase.ClientToGREMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientToGREMessage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GRETimerExpiredMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ExpiredTimerId != 0)
            {
                ExpiredTimerId = other.ExpiredTimerId;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.ServerToGREMessage:
                    if (ServerToGREMessage == null)
                    {
                        ServerToGREMessage = new ServerToGREMessage();
                    }
                    ServerToGREMessage.MergeFrom(other.ServerToGREMessage);
                    break;
                case MessageOneofCase.ClientToGREMessage:
                    if (ClientToGREMessage == null)
                    {
                        ClientToGREMessage = new ClientToGREMessage();
                    }
                    ClientToGREMessage.MergeFrom(other.ClientToGREMessage);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ExpiredTimerId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            ServerToGREMessage subBuilder = new ServerToGREMessage();
                            if (messageCase_ == MessageOneofCase.ServerToGREMessage)
                            {
                                subBuilder.MergeFrom(ServerToGREMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ServerToGREMessage = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            ClientToGREMessage subBuilder = new ClientToGREMessage();
                            if (messageCase_ == MessageOneofCase.ClientToGREMessage)
                            {
                                subBuilder.MergeFrom(ClientToGREMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ClientToGREMessage = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GRETimerExpiredNotification : pb::IMessage<GRETimerExpiredNotification>
    {
        private static readonly pb::MessageParser<GRETimerExpiredNotification> _parser = new pb::MessageParser<GRETimerExpiredNotification>(() => new GRETimerExpiredNotification());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GRETimerExpiredNotification> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[136]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETimerExpiredNotification()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETimerExpiredNotification(GRETimerExpiredNotification other) : this()
        {
            timerID_ = other.timerID_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETimerExpiredNotification Clone()
        {
            return new GRETimerExpiredNotification(this);
        }

        /// <summary>Field number for the "timerID" field.</summary>
        public const int TimerIDFieldNumber = 1;
        private uint timerID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimerID
        {
            get { return timerID_; }
            set
            {
                timerID_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GRETimerExpiredNotification);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GRETimerExpiredNotification other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TimerID != other.TimerID) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TimerID != 0) hash ^= TimerID.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TimerID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(TimerID);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TimerID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimerID);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GRETimerExpiredNotification other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TimerID != 0)
            {
                TimerID = other.TimerID;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            TimerID = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREToAnyMessage : pb::IMessage<GREToAnyMessage>
    {
        private static readonly pb::MessageParser<GREToAnyMessage> _parser = new pb::MessageParser<GREToAnyMessage>(() => new GREToAnyMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREToAnyMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[137]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToAnyMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToAnyMessage(GREToAnyMessage other) : this()
        {
            timestamp_ = other.timestamp_;
            switch (other.MessageCase)
            {
                case MessageOneofCase.GREToServerMessage:
                    GREToServerMessage = other.GREToServerMessage.Clone();
                    break;
                case MessageOneofCase.GREToClientMessage:
                    GREToClientMessage = other.GREToClientMessage.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToAnyMessage Clone()
        {
            return new GREToAnyMessage(this);
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 1;
        private long timestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        /// <summary>Field number for the "gREToServerMessage" field.</summary>
        public const int GREToServerMessageFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToServerMessage GREToServerMessage
        {
            get { return messageCase_ == MessageOneofCase.GREToServerMessage ? (GREToServerMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GREToServerMessage;
            }
        }

        /// <summary>Field number for the "gREToClientMessage" field.</summary>
        public const int GREToClientMessageFieldNumber = 3;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToClientMessage GREToClientMessage
        {
            get { return messageCase_ == MessageOneofCase.GREToClientMessage ? (GREToClientMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GREToClientMessage;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            GREToServerMessage = 2,
            GREToClientMessage = 3,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREToAnyMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREToAnyMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Timestamp != other.Timestamp) return false;
            if (!object.Equals(GREToServerMessage, other.GREToServerMessage)) return false;
            if (!object.Equals(GREToClientMessage, other.GREToClientMessage)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
            if (messageCase_ == MessageOneofCase.GREToServerMessage) hash ^= GREToServerMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.GREToClientMessage) hash ^= GREToClientMessage.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Timestamp != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Timestamp);
            }
            if (messageCase_ == MessageOneofCase.GREToServerMessage)
            {
                output.WriteRawTag(18);
                output.WriteMessage(GREToServerMessage);
            }
            if (messageCase_ == MessageOneofCase.GREToClientMessage)
            {
                output.WriteRawTag(26);
                output.WriteMessage(GREToClientMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Timestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (messageCase_ == MessageOneofCase.GREToServerMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GREToServerMessage);
            }
            if (messageCase_ == MessageOneofCase.GREToClientMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GREToClientMessage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREToAnyMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Timestamp != 0L)
            {
                Timestamp = other.Timestamp;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.GREToServerMessage:
                    if (GREToServerMessage == null)
                    {
                        GREToServerMessage = new GREToServerMessage();
                    }
                    GREToServerMessage.MergeFrom(other.GREToServerMessage);
                    break;
                case MessageOneofCase.GREToClientMessage:
                    if (GREToClientMessage == null)
                    {
                        GREToClientMessage = new GREToClientMessage();
                    }
                    GREToClientMessage.MergeFrom(other.GREToClientMessage);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            GREToServerMessage subBuilder = new GREToServerMessage();
                            if (messageCase_ == MessageOneofCase.GREToServerMessage)
                            {
                                subBuilder.MergeFrom(GREToServerMessage);
                            }
                            input.ReadMessage(subBuilder);
                            GREToServerMessage = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            GREToClientMessage subBuilder = new GREToClientMessage();
                            if (messageCase_ == MessageOneofCase.GREToClientMessage)
                            {
                                subBuilder.MergeFrom(GREToClientMessage);
                            }
                            input.ReadMessage(subBuilder);
                            GREToClientMessage = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREToClientMessage : pb::IMessage<GREToClientMessage>
    {
        private static readonly pb::MessageParser<GREToClientMessage> _parser = new pb::MessageParser<GREToClientMessage>(() => new GREToClientMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREToClientMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[138]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToClientMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToClientMessage(GREToClientMessage other) : this()
        {
            systemSeatIds_ = other.systemSeatIds_.Clone();
            type_ = other.type_;
            msgId_ = other.msgId_;
            gameStateId_ = other.gameStateId_;
            gameStateMessage_ = other.gameStateMessage_ != null ? other.gameStateMessage_.Clone() : null;
            prompt_ = other.prompt_ != null ? other.prompt_.Clone() : null;
            chooseStartingPlayerReq_ = other.chooseStartingPlayerReq_ != null ? other.chooseStartingPlayerReq_.Clone() : null;
            optionalActionMessage_ = other.optionalActionMessage_ != null ? other.optionalActionMessage_.Clone() : null;
            actionsAvailableReq_ = other.actionsAvailableReq_ != null ? other.actionsAvailableReq_.Clone() : null;
            orderReq_ = other.orderReq_ != null ? other.orderReq_.Clone() : null;
            groupReq_ = other.groupReq_ != null ? other.groupReq_.Clone() : null;
            selectNReq_ = other.selectNReq_ != null ? other.selectNReq_.Clone() : null;
            modalReq_ = other.modalReq_ != null ? other.modalReq_.Clone() : null;
            getSettingsResp_ = other.getSettingsResp_ != null ? other.getSettingsResp_.Clone() : null;
            setSettingsResp_ = other.setSettingsResp_ != null ? other.setSettingsResp_.Clone() : null;
            connectResp_ = other.connectResp_ != null ? other.connectResp_.Clone() : null;
            illegalRequestMessage_ = other.illegalRequestMessage_ != null ? other.illegalRequestMessage_.Clone() : null;
            binaryGameState_ = other.binaryGameState_ != null ? other.binaryGameState_.Clone() : null;
            declareAttackersReq_ = other.declareAttackersReq_ != null ? other.declareAttackersReq_.Clone() : null;
            submitAttackersResp_ = other.submitAttackersResp_ != null ? other.submitAttackersResp_.Clone() : null;
            declareBlockersReq_ = other.declareBlockersReq_ != null ? other.declareBlockersReq_.Clone() : null;
            submitBlockersResp_ = other.submitBlockersResp_ != null ? other.submitBlockersResp_.Clone() : null;
            assignDamageReq_ = other.assignDamageReq_ != null ? other.assignDamageReq_.Clone() : null;
            assignDamageConfirmation_ = other.assignDamageConfirmation_ != null ? other.assignDamageConfirmation_.Clone() : null;
            orderCombatDamageReq_ = other.orderCombatDamageReq_ != null ? other.orderCombatDamageReq_.Clone() : null;
            orderDamageConfirmation_ = other.orderDamageConfirmation_ != null ? other.orderDamageConfirmation_.Clone() : null;
            selectTargetsReq_ = other.selectTargetsReq_ != null ? other.selectTargetsReq_.Clone() : null;
            submitTargetsResp_ = other.submitTargetsResp_ != null ? other.submitTargetsResp_.Clone() : null;
            payCostsReq_ = other.payCostsReq_ != null ? other.payCostsReq_.Clone() : null;
            nonDecisionPlayerPrompt_ = other.nonDecisionPlayerPrompt_ != null ? other.nonDecisionPlayerPrompt_.Clone() : null;
            intermissionReq_ = other.intermissionReq_ != null ? other.intermissionReq_.Clone() : null;
            dieRollResultsResp_ = other.dieRollResultsResp_ != null ? other.dieRollResultsResp_.Clone() : null;
            selectReplacementReq_ = other.selectReplacementReq_ != null ? other.selectReplacementReq_.Clone() : null;
            selectNGroupReq_ = other.selectNGroupReq_ != null ? other.selectNGroupReq_.Clone() : null;
            alternativeCostReq_ = other.alternativeCostReq_ != null ? other.alternativeCostReq_.Clone() : null;
            distributionReq_ = other.distributionReq_ != null ? other.distributionReq_.Clone() : null;
            numericInputReq_ = other.numericInputReq_ != null ? other.numericInputReq_.Clone() : null;
            searchReq_ = other.searchReq_ != null ? other.searchReq_.Clone() : null;
            castingTimeOptionsReq_ = other.castingTimeOptionsReq_ != null ? other.castingTimeOptionsReq_.Clone() : null;
            informationalUseOnly_ = other.informationalUseOnly_;
            selectManaTypeReq_ = other.selectManaTypeReq_ != null ? other.selectManaTypeReq_.Clone() : null;
            selectFromGroupsReq_ = other.selectFromGroupsReq_ != null ? other.selectFromGroupsReq_.Clone() : null;
            searchFromGroupsReq_ = other.searchFromGroupsReq_ != null ? other.searchFromGroupsReq_.Clone() : null;
            gatherReq_ = other.gatherReq_ != null ? other.gatherReq_.Clone() : null;
            allowCancel_ = other.allowCancel_;
            uiMessage_ = other.uiMessage_ != null ? other.uiMessage_.Clone() : null;
            submitDeckReq_ = other.submitDeckReq_ != null ? other.submitDeckReq_.Clone() : null;
            edictalMessage_ = other.edictalMessage_ != null ? other.edictalMessage_.Clone() : null;
            timeoutMessage_ = other.timeoutMessage_ != null ? other.timeoutMessage_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToClientMessage Clone()
        {
            return new GREToClientMessage(this);
        }

        /// <summary>Field number for the "systemSeatIds" field.</summary>
        public const int SystemSeatIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_systemSeatIds_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> systemSeatIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> SystemSeatIds
        {
            get { return systemSeatIds_; }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private GREMessageType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREMessageType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "msgId" field.</summary>
        public const int MsgIdFieldNumber = 3;
        private uint msgId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MsgId
        {
            get { return msgId_; }
            set
            {
                msgId_ = value;
            }
        }

        /// <summary>Field number for the "gameStateId" field.</summary>
        public const int GameStateIdFieldNumber = 4;
        private uint gameStateId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameStateId
        {
            get { return gameStateId_; }
            set
            {
                gameStateId_ = value;
            }
        }

        /// <summary>Field number for the "gameStateMessage" field.</summary>
        public const int GameStateMessageFieldNumber = 5;
        private GameStateMessage gameStateMessage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameStateMessage GameStateMessage
        {
            get { return gameStateMessage_; }
            set
            {
                gameStateMessage_ = value;
            }
        }

        /// <summary>Field number for the "prompt" field.</summary>
        public const int PromptFieldNumber = 6;
        private Prompt prompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt Prompt
        {
            get { return prompt_; }
            set
            {
                prompt_ = value;
            }
        }

        /// <summary>Field number for the "chooseStartingPlayerReq" field.</summary>
        public const int ChooseStartingPlayerReqFieldNumber = 7;
        private ChooseStartingPlayerReq chooseStartingPlayerReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChooseStartingPlayerReq ChooseStartingPlayerReq
        {
            get { return chooseStartingPlayerReq_; }
            set
            {
                chooseStartingPlayerReq_ = value;
            }
        }

        /// <summary>Field number for the "optionalActionMessage" field.</summary>
        public const int OptionalActionMessageFieldNumber = 8;
        private OptionalActionMessage optionalActionMessage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalActionMessage OptionalActionMessage
        {
            get { return optionalActionMessage_; }
            set
            {
                optionalActionMessage_ = value;
            }
        }

        /// <summary>Field number for the "actionsAvailableReq" field.</summary>
        public const int ActionsAvailableReqFieldNumber = 9;
        private ActionsAvailableReq actionsAvailableReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionsAvailableReq ActionsAvailableReq
        {
            get { return actionsAvailableReq_; }
            set
            {
                actionsAvailableReq_ = value;
            }
        }

        /// <summary>Field number for the "orderReq" field.</summary>
        public const int OrderReqFieldNumber = 10;
        private OrderReq orderReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderReq OrderReq
        {
            get { return orderReq_; }
            set
            {
                orderReq_ = value;
            }
        }

        /// <summary>Field number for the "groupReq" field.</summary>
        public const int GroupReqFieldNumber = 11;
        private GroupReq groupReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupReq GroupReq
        {
            get { return groupReq_; }
            set
            {
                groupReq_ = value;
            }
        }

        /// <summary>Field number for the "selectNReq" field.</summary>
        public const int SelectNReqFieldNumber = 12;
        private SelectNReq selectNReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNReq SelectNReq
        {
            get { return selectNReq_; }
            set
            {
                selectNReq_ = value;
            }
        }

        /// <summary>Field number for the "modalReq" field.</summary>
        public const int ModalReqFieldNumber = 13;
        private ModalReq modalReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModalReq ModalReq
        {
            get { return modalReq_; }
            set
            {
                modalReq_ = value;
            }
        }

        /// <summary>Field number for the "getSettingsResp" field.</summary>
        public const int GetSettingsRespFieldNumber = 16;
        private GetSettingsResp getSettingsResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetSettingsResp GetSettingsResp
        {
            get { return getSettingsResp_; }
            set
            {
                getSettingsResp_ = value;
            }
        }

        /// <summary>Field number for the "setSettingsResp" field.</summary>
        public const int SetSettingsRespFieldNumber = 17;
        private SetSettingsResp setSettingsResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetSettingsResp SetSettingsResp
        {
            get { return setSettingsResp_; }
            set
            {
                setSettingsResp_ = value;
            }
        }

        /// <summary>Field number for the "connectResp" field.</summary>
        public const int ConnectRespFieldNumber = 18;
        private ConnectResp connectResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectResp ConnectResp
        {
            get { return connectResp_; }
            set
            {
                connectResp_ = value;
            }
        }

        /// <summary>Field number for the "illegalRequestMessage" field.</summary>
        public const int IllegalRequestMessageFieldNumber = 19;
        private IllegalRequestMessage illegalRequestMessage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IllegalRequestMessage IllegalRequestMessage
        {
            get { return illegalRequestMessage_; }
            set
            {
                illegalRequestMessage_ = value;
            }
        }

        /// <summary>Field number for the "binaryGameState" field.</summary>
        public const int BinaryGameStateFieldNumber = 23;
        private BinaryGameState binaryGameState_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BinaryGameState BinaryGameState
        {
            get { return binaryGameState_; }
            set
            {
                binaryGameState_ = value;
            }
        }

        /// <summary>Field number for the "declareAttackersReq" field.</summary>
        public const int DeclareAttackersReqFieldNumber = 24;
        private DeclareAttackersReq declareAttackersReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareAttackersReq DeclareAttackersReq
        {
            get { return declareAttackersReq_; }
            set
            {
                declareAttackersReq_ = value;
            }
        }

        /// <summary>Field number for the "submitAttackersResp" field.</summary>
        public const int SubmitAttackersRespFieldNumber = 25;
        private SubmitAttackersResp submitAttackersResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitAttackersResp SubmitAttackersResp
        {
            get { return submitAttackersResp_; }
            set
            {
                submitAttackersResp_ = value;
            }
        }

        /// <summary>Field number for the "declareBlockersReq" field.</summary>
        public const int DeclareBlockersReqFieldNumber = 26;
        private DeclareBlockersReq declareBlockersReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeclareBlockersReq DeclareBlockersReq
        {
            get { return declareBlockersReq_; }
            set
            {
                declareBlockersReq_ = value;
            }
        }

        /// <summary>Field number for the "submitBlockersResp" field.</summary>
        public const int SubmitBlockersRespFieldNumber = 27;
        private SubmitBlockersResp submitBlockersResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitBlockersResp SubmitBlockersResp
        {
            get { return submitBlockersResp_; }
            set
            {
                submitBlockersResp_ = value;
            }
        }

        /// <summary>Field number for the "assignDamageReq" field.</summary>
        public const int AssignDamageReqFieldNumber = 28;
        private AssignDamageReq assignDamageReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssignDamageReq AssignDamageReq
        {
            get { return assignDamageReq_; }
            set
            {
                assignDamageReq_ = value;
            }
        }

        /// <summary>Field number for the "assignDamageConfirmation" field.</summary>
        public const int AssignDamageConfirmationFieldNumber = 29;
        private AssignDamageConfirmation assignDamageConfirmation_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssignDamageConfirmation AssignDamageConfirmation
        {
            get { return assignDamageConfirmation_; }
            set
            {
                assignDamageConfirmation_ = value;
            }
        }

        /// <summary>Field number for the "orderCombatDamageReq" field.</summary>
        public const int OrderCombatDamageReqFieldNumber = 30;
        private OrderCombatDamageReq orderCombatDamageReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderCombatDamageReq OrderCombatDamageReq
        {
            get { return orderCombatDamageReq_; }
            set
            {
                orderCombatDamageReq_ = value;
            }
        }

        /// <summary>Field number for the "orderDamageConfirmation" field.</summary>
        public const int OrderDamageConfirmationFieldNumber = 31;
        private OrderDamageConfirmation orderDamageConfirmation_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderDamageConfirmation OrderDamageConfirmation
        {
            get { return orderDamageConfirmation_; }
            set
            {
                orderDamageConfirmation_ = value;
            }
        }

        /// <summary>Field number for the "selectTargetsReq" field.</summary>
        public const int SelectTargetsReqFieldNumber = 32;
        private SelectTargetsReq selectTargetsReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectTargetsReq SelectTargetsReq
        {
            get { return selectTargetsReq_; }
            set
            {
                selectTargetsReq_ = value;
            }
        }

        /// <summary>Field number for the "submitTargetsResp" field.</summary>
        public const int SubmitTargetsRespFieldNumber = 33;
        private SubmitTargetsResp submitTargetsResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitTargetsResp SubmitTargetsResp
        {
            get { return submitTargetsResp_; }
            set
            {
                submitTargetsResp_ = value;
            }
        }

        /// <summary>Field number for the "payCostsReq" field.</summary>
        public const int PayCostsReqFieldNumber = 34;
        private PayCostsReq payCostsReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PayCostsReq PayCostsReq
        {
            get { return payCostsReq_; }
            set
            {
                payCostsReq_ = value;
            }
        }

        /// <summary>Field number for the "nonDecisionPlayerPrompt" field.</summary>
        public const int NonDecisionPlayerPromptFieldNumber = 35;
        private Prompt nonDecisionPlayerPrompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt NonDecisionPlayerPrompt
        {
            get { return nonDecisionPlayerPrompt_; }
            set
            {
                nonDecisionPlayerPrompt_ = value;
            }
        }

        /// <summary>Field number for the "intermissionReq" field.</summary>
        public const int IntermissionReqFieldNumber = 36;
        private IntermissionReq intermissionReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IntermissionReq IntermissionReq
        {
            get { return intermissionReq_; }
            set
            {
                intermissionReq_ = value;
            }
        }

        /// <summary>Field number for the "dieRollResultsResp" field.</summary>
        public const int DieRollResultsRespFieldNumber = 37;
        private DieRollResultsResp dieRollResultsResp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DieRollResultsResp DieRollResultsResp
        {
            get { return dieRollResultsResp_; }
            set
            {
                dieRollResultsResp_ = value;
            }
        }

        /// <summary>Field number for the "selectReplacementReq" field.</summary>
        public const int SelectReplacementReqFieldNumber = 38;
        private SelectReplacementReq selectReplacementReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectReplacementReq SelectReplacementReq
        {
            get { return selectReplacementReq_; }
            set
            {
                selectReplacementReq_ = value;
            }
        }

        /// <summary>Field number for the "selectNGroupReq" field.</summary>
        public const int SelectNGroupReqFieldNumber = 39;
        private SelectNGroupReq selectNGroupReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNGroupReq SelectNGroupReq
        {
            get { return selectNGroupReq_; }
            set
            {
                selectNGroupReq_ = value;
            }
        }

        /// <summary>Field number for the "alternativeCostReq" field.</summary>
        public const int AlternativeCostReqFieldNumber = 40;
        private AlternativeCostReq alternativeCostReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AlternativeCostReq AlternativeCostReq
        {
            get { return alternativeCostReq_; }
            set
            {
                alternativeCostReq_ = value;
            }
        }

        /// <summary>Field number for the "distributionReq" field.</summary>
        public const int DistributionReqFieldNumber = 41;
        private DistributionReq distributionReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DistributionReq DistributionReq
        {
            get { return distributionReq_; }
            set
            {
                distributionReq_ = value;
            }
        }

        /// <summary>Field number for the "numericInputReq" field.</summary>
        public const int NumericInputReqFieldNumber = 42;
        private NumericInputReq numericInputReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericInputReq NumericInputReq
        {
            get { return numericInputReq_; }
            set
            {
                numericInputReq_ = value;
            }
        }

        /// <summary>Field number for the "searchReq" field.</summary>
        public const int SearchReqFieldNumber = 43;
        private SearchReq searchReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchReq SearchReq
        {
            get { return searchReq_; }
            set
            {
                searchReq_ = value;
            }
        }

        /// <summary>Field number for the "castingTimeOptionsReq" field.</summary>
        public const int CastingTimeOptionsReqFieldNumber = 44;
        private CastingTimeOptionsReq castingTimeOptionsReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastingTimeOptionsReq CastingTimeOptionsReq
        {
            get { return castingTimeOptionsReq_; }
            set
            {
                castingTimeOptionsReq_ = value;
            }
        }

        /// <summary>Field number for the "informationalUseOnly" field.</summary>
        public const int InformationalUseOnlyFieldNumber = 45;
        private bool informationalUseOnly_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool InformationalUseOnly
        {
            get { return informationalUseOnly_; }
            set
            {
                informationalUseOnly_ = value;
            }
        }

        /// <summary>Field number for the "selectManaTypeReq" field.</summary>
        public const int SelectManaTypeReqFieldNumber = 46;
        private SelectManaTypeReq selectManaTypeReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectManaTypeReq SelectManaTypeReq
        {
            get { return selectManaTypeReq_; }
            set
            {
                selectManaTypeReq_ = value;
            }
        }

        /// <summary>Field number for the "selectFromGroupsReq" field.</summary>
        public const int SelectFromGroupsReqFieldNumber = 47;
        private SelectFromGroupsReq selectFromGroupsReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectFromGroupsReq SelectFromGroupsReq
        {
            get { return selectFromGroupsReq_; }
            set
            {
                selectFromGroupsReq_ = value;
            }
        }

        /// <summary>Field number for the "searchFromGroupsReq" field.</summary>
        public const int SearchFromGroupsReqFieldNumber = 48;
        private SearchFromGroupsReq searchFromGroupsReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchFromGroupsReq SearchFromGroupsReq
        {
            get { return searchFromGroupsReq_; }
            set
            {
                searchFromGroupsReq_ = value;
            }
        }

        /// <summary>Field number for the "gatherReq" field.</summary>
        public const int GatherReqFieldNumber = 49;
        private GatherReq gatherReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GatherReq GatherReq
        {
            get { return gatherReq_; }
            set
            {
                gatherReq_ = value;
            }
        }

        /// <summary>Field number for the "allowCancel" field.</summary>
        public const int AllowCancelFieldNumber = 50;
        private AllowCancel allowCancel_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AllowCancel AllowCancel
        {
            get { return allowCancel_; }
            set
            {
                allowCancel_ = value;
            }
        }

        /// <summary>Field number for the "uiMessage" field.</summary>
        public const int UiMessageFieldNumber = 51;
        private UIMessage uiMessage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UIMessage UiMessage
        {
            get { return uiMessage_; }
            set
            {
                uiMessage_ = value;
            }
        }

        /// <summary>Field number for the "submitDeckReq" field.</summary>
        public const int SubmitDeckReqFieldNumber = 52;
        private SubmitDeckReq submitDeckReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitDeckReq SubmitDeckReq
        {
            get { return submitDeckReq_; }
            set
            {
                submitDeckReq_ = value;
            }
        }

        /// <summary>Field number for the "edictalMessage" field.</summary>
        public const int EdictalMessageFieldNumber = 53;
        private EdictalMessage edictalMessage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EdictalMessage EdictalMessage
        {
            get { return edictalMessage_; }
            set
            {
                edictalMessage_ = value;
            }
        }

        /// <summary>Field number for the "timeoutMessage" field.</summary>
        public const int TimeoutMessageFieldNumber = 54;
        private TimeoutMessage timeoutMessage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeoutMessage TimeoutMessage
        {
            get { return timeoutMessage_; }
            set
            {
                timeoutMessage_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREToClientMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREToClientMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!systemSeatIds_.Equals(other.systemSeatIds_)) return false;
            if (Type != other.Type) return false;
            if (MsgId != other.MsgId) return false;
            if (GameStateId != other.GameStateId) return false;
            if (!object.Equals(GameStateMessage, other.GameStateMessage)) return false;
            if (!object.Equals(Prompt, other.Prompt)) return false;
            if (!object.Equals(ChooseStartingPlayerReq, other.ChooseStartingPlayerReq)) return false;
            if (!object.Equals(OptionalActionMessage, other.OptionalActionMessage)) return false;
            if (!object.Equals(ActionsAvailableReq, other.ActionsAvailableReq)) return false;
            if (!object.Equals(OrderReq, other.OrderReq)) return false;
            if (!object.Equals(GroupReq, other.GroupReq)) return false;
            if (!object.Equals(SelectNReq, other.SelectNReq)) return false;
            if (!object.Equals(ModalReq, other.ModalReq)) return false;
            if (!object.Equals(GetSettingsResp, other.GetSettingsResp)) return false;
            if (!object.Equals(SetSettingsResp, other.SetSettingsResp)) return false;
            if (!object.Equals(ConnectResp, other.ConnectResp)) return false;
            if (!object.Equals(IllegalRequestMessage, other.IllegalRequestMessage)) return false;
            if (!object.Equals(BinaryGameState, other.BinaryGameState)) return false;
            if (!object.Equals(DeclareAttackersReq, other.DeclareAttackersReq)) return false;
            if (!object.Equals(SubmitAttackersResp, other.SubmitAttackersResp)) return false;
            if (!object.Equals(DeclareBlockersReq, other.DeclareBlockersReq)) return false;
            if (!object.Equals(SubmitBlockersResp, other.SubmitBlockersResp)) return false;
            if (!object.Equals(AssignDamageReq, other.AssignDamageReq)) return false;
            if (!object.Equals(AssignDamageConfirmation, other.AssignDamageConfirmation)) return false;
            if (!object.Equals(OrderCombatDamageReq, other.OrderCombatDamageReq)) return false;
            if (!object.Equals(OrderDamageConfirmation, other.OrderDamageConfirmation)) return false;
            if (!object.Equals(SelectTargetsReq, other.SelectTargetsReq)) return false;
            if (!object.Equals(SubmitTargetsResp, other.SubmitTargetsResp)) return false;
            if (!object.Equals(PayCostsReq, other.PayCostsReq)) return false;
            if (!object.Equals(NonDecisionPlayerPrompt, other.NonDecisionPlayerPrompt)) return false;
            if (!object.Equals(IntermissionReq, other.IntermissionReq)) return false;
            if (!object.Equals(DieRollResultsResp, other.DieRollResultsResp)) return false;
            if (!object.Equals(SelectReplacementReq, other.SelectReplacementReq)) return false;
            if (!object.Equals(SelectNGroupReq, other.SelectNGroupReq)) return false;
            if (!object.Equals(AlternativeCostReq, other.AlternativeCostReq)) return false;
            if (!object.Equals(DistributionReq, other.DistributionReq)) return false;
            if (!object.Equals(NumericInputReq, other.NumericInputReq)) return false;
            if (!object.Equals(SearchReq, other.SearchReq)) return false;
            if (!object.Equals(CastingTimeOptionsReq, other.CastingTimeOptionsReq)) return false;
            if (InformationalUseOnly != other.InformationalUseOnly) return false;
            if (!object.Equals(SelectManaTypeReq, other.SelectManaTypeReq)) return false;
            if (!object.Equals(SelectFromGroupsReq, other.SelectFromGroupsReq)) return false;
            if (!object.Equals(SearchFromGroupsReq, other.SearchFromGroupsReq)) return false;
            if (!object.Equals(GatherReq, other.GatherReq)) return false;
            if (AllowCancel != other.AllowCancel) return false;
            if (!object.Equals(UiMessage, other.UiMessage)) return false;
            if (!object.Equals(SubmitDeckReq, other.SubmitDeckReq)) return false;
            if (!object.Equals(EdictalMessage, other.EdictalMessage)) return false;
            if (!object.Equals(TimeoutMessage, other.TimeoutMessage)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= systemSeatIds_.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (MsgId != 0) hash ^= MsgId.GetHashCode();
            if (GameStateId != 0) hash ^= GameStateId.GetHashCode();
            if (gameStateMessage_ != null) hash ^= GameStateMessage.GetHashCode();
            if (prompt_ != null) hash ^= Prompt.GetHashCode();
            if (chooseStartingPlayerReq_ != null) hash ^= ChooseStartingPlayerReq.GetHashCode();
            if (optionalActionMessage_ != null) hash ^= OptionalActionMessage.GetHashCode();
            if (actionsAvailableReq_ != null) hash ^= ActionsAvailableReq.GetHashCode();
            if (orderReq_ != null) hash ^= OrderReq.GetHashCode();
            if (groupReq_ != null) hash ^= GroupReq.GetHashCode();
            if (selectNReq_ != null) hash ^= SelectNReq.GetHashCode();
            if (modalReq_ != null) hash ^= ModalReq.GetHashCode();
            if (getSettingsResp_ != null) hash ^= GetSettingsResp.GetHashCode();
            if (setSettingsResp_ != null) hash ^= SetSettingsResp.GetHashCode();
            if (connectResp_ != null) hash ^= ConnectResp.GetHashCode();
            if (illegalRequestMessage_ != null) hash ^= IllegalRequestMessage.GetHashCode();
            if (binaryGameState_ != null) hash ^= BinaryGameState.GetHashCode();
            if (declareAttackersReq_ != null) hash ^= DeclareAttackersReq.GetHashCode();
            if (submitAttackersResp_ != null) hash ^= SubmitAttackersResp.GetHashCode();
            if (declareBlockersReq_ != null) hash ^= DeclareBlockersReq.GetHashCode();
            if (submitBlockersResp_ != null) hash ^= SubmitBlockersResp.GetHashCode();
            if (assignDamageReq_ != null) hash ^= AssignDamageReq.GetHashCode();
            if (assignDamageConfirmation_ != null) hash ^= AssignDamageConfirmation.GetHashCode();
            if (orderCombatDamageReq_ != null) hash ^= OrderCombatDamageReq.GetHashCode();
            if (orderDamageConfirmation_ != null) hash ^= OrderDamageConfirmation.GetHashCode();
            if (selectTargetsReq_ != null) hash ^= SelectTargetsReq.GetHashCode();
            if (submitTargetsResp_ != null) hash ^= SubmitTargetsResp.GetHashCode();
            if (payCostsReq_ != null) hash ^= PayCostsReq.GetHashCode();
            if (nonDecisionPlayerPrompt_ != null) hash ^= NonDecisionPlayerPrompt.GetHashCode();
            if (intermissionReq_ != null) hash ^= IntermissionReq.GetHashCode();
            if (dieRollResultsResp_ != null) hash ^= DieRollResultsResp.GetHashCode();
            if (selectReplacementReq_ != null) hash ^= SelectReplacementReq.GetHashCode();
            if (selectNGroupReq_ != null) hash ^= SelectNGroupReq.GetHashCode();
            if (alternativeCostReq_ != null) hash ^= AlternativeCostReq.GetHashCode();
            if (distributionReq_ != null) hash ^= DistributionReq.GetHashCode();
            if (numericInputReq_ != null) hash ^= NumericInputReq.GetHashCode();
            if (searchReq_ != null) hash ^= SearchReq.GetHashCode();
            if (castingTimeOptionsReq_ != null) hash ^= CastingTimeOptionsReq.GetHashCode();
            if (InformationalUseOnly != false) hash ^= InformationalUseOnly.GetHashCode();
            if (selectManaTypeReq_ != null) hash ^= SelectManaTypeReq.GetHashCode();
            if (selectFromGroupsReq_ != null) hash ^= SelectFromGroupsReq.GetHashCode();
            if (searchFromGroupsReq_ != null) hash ^= SearchFromGroupsReq.GetHashCode();
            if (gatherReq_ != null) hash ^= GatherReq.GetHashCode();
            if (AllowCancel != 0) hash ^= AllowCancel.GetHashCode();
            if (uiMessage_ != null) hash ^= UiMessage.GetHashCode();
            if (submitDeckReq_ != null) hash ^= SubmitDeckReq.GetHashCode();
            if (edictalMessage_ != null) hash ^= EdictalMessage.GetHashCode();
            if (timeoutMessage_ != null) hash ^= TimeoutMessage.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            systemSeatIds_.WriteTo(output, _repeated_systemSeatIds_codec);
            if (MsgId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MsgId);
            }
            if (GameStateId != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(GameStateId);
            }
            if (gameStateMessage_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(GameStateMessage);
            }
            if (prompt_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(Prompt);
            }
            if (chooseStartingPlayerReq_ != null)
            {
                output.WriteRawTag(58);
                output.WriteMessage(ChooseStartingPlayerReq);
            }
            if (optionalActionMessage_ != null)
            {
                output.WriteRawTag(66);
                output.WriteMessage(OptionalActionMessage);
            }
            if (actionsAvailableReq_ != null)
            {
                output.WriteRawTag(74);
                output.WriteMessage(ActionsAvailableReq);
            }
            if (orderReq_ != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(OrderReq);
            }
            if (groupReq_ != null)
            {
                output.WriteRawTag(90);
                output.WriteMessage(GroupReq);
            }
            if (selectNReq_ != null)
            {
                output.WriteRawTag(98);
                output.WriteMessage(SelectNReq);
            }
            if (modalReq_ != null)
            {
                output.WriteRawTag(106);
                output.WriteMessage(ModalReq);
            }
            if (getSettingsResp_ != null)
            {
                output.WriteRawTag(130, 1);
                output.WriteMessage(GetSettingsResp);
            }
            if (setSettingsResp_ != null)
            {
                output.WriteRawTag(138, 1);
                output.WriteMessage(SetSettingsResp);
            }
            if (connectResp_ != null)
            {
                output.WriteRawTag(146, 1);
                output.WriteMessage(ConnectResp);
            }
            if (illegalRequestMessage_ != null)
            {
                output.WriteRawTag(154, 1);
                output.WriteMessage(IllegalRequestMessage);
            }
            if (binaryGameState_ != null)
            {
                output.WriteRawTag(186, 1);
                output.WriteMessage(BinaryGameState);
            }
            if (declareAttackersReq_ != null)
            {
                output.WriteRawTag(194, 1);
                output.WriteMessage(DeclareAttackersReq);
            }
            if (submitAttackersResp_ != null)
            {
                output.WriteRawTag(202, 1);
                output.WriteMessage(SubmitAttackersResp);
            }
            if (declareBlockersReq_ != null)
            {
                output.WriteRawTag(210, 1);
                output.WriteMessage(DeclareBlockersReq);
            }
            if (submitBlockersResp_ != null)
            {
                output.WriteRawTag(218, 1);
                output.WriteMessage(SubmitBlockersResp);
            }
            if (assignDamageReq_ != null)
            {
                output.WriteRawTag(226, 1);
                output.WriteMessage(AssignDamageReq);
            }
            if (assignDamageConfirmation_ != null)
            {
                output.WriteRawTag(234, 1);
                output.WriteMessage(AssignDamageConfirmation);
            }
            if (orderCombatDamageReq_ != null)
            {
                output.WriteRawTag(242, 1);
                output.WriteMessage(OrderCombatDamageReq);
            }
            if (orderDamageConfirmation_ != null)
            {
                output.WriteRawTag(250, 1);
                output.WriteMessage(OrderDamageConfirmation);
            }
            if (selectTargetsReq_ != null)
            {
                output.WriteRawTag(130, 2);
                output.WriteMessage(SelectTargetsReq);
            }
            if (submitTargetsResp_ != null)
            {
                output.WriteRawTag(138, 2);
                output.WriteMessage(SubmitTargetsResp);
            }
            if (payCostsReq_ != null)
            {
                output.WriteRawTag(146, 2);
                output.WriteMessage(PayCostsReq);
            }
            if (nonDecisionPlayerPrompt_ != null)
            {
                output.WriteRawTag(154, 2);
                output.WriteMessage(NonDecisionPlayerPrompt);
            }
            if (intermissionReq_ != null)
            {
                output.WriteRawTag(162, 2);
                output.WriteMessage(IntermissionReq);
            }
            if (dieRollResultsResp_ != null)
            {
                output.WriteRawTag(170, 2);
                output.WriteMessage(DieRollResultsResp);
            }
            if (selectReplacementReq_ != null)
            {
                output.WriteRawTag(178, 2);
                output.WriteMessage(SelectReplacementReq);
            }
            if (selectNGroupReq_ != null)
            {
                output.WriteRawTag(186, 2);
                output.WriteMessage(SelectNGroupReq);
            }
            if (alternativeCostReq_ != null)
            {
                output.WriteRawTag(194, 2);
                output.WriteMessage(AlternativeCostReq);
            }
            if (distributionReq_ != null)
            {
                output.WriteRawTag(202, 2);
                output.WriteMessage(DistributionReq);
            }
            if (numericInputReq_ != null)
            {
                output.WriteRawTag(210, 2);
                output.WriteMessage(NumericInputReq);
            }
            if (searchReq_ != null)
            {
                output.WriteRawTag(218, 2);
                output.WriteMessage(SearchReq);
            }
            if (castingTimeOptionsReq_ != null)
            {
                output.WriteRawTag(226, 2);
                output.WriteMessage(CastingTimeOptionsReq);
            }
            if (InformationalUseOnly != false)
            {
                output.WriteRawTag(232, 2);
                output.WriteBool(InformationalUseOnly);
            }
            if (selectManaTypeReq_ != null)
            {
                output.WriteRawTag(242, 2);
                output.WriteMessage(SelectManaTypeReq);
            }
            if (selectFromGroupsReq_ != null)
            {
                output.WriteRawTag(250, 2);
                output.WriteMessage(SelectFromGroupsReq);
            }
            if (searchFromGroupsReq_ != null)
            {
                output.WriteRawTag(130, 3);
                output.WriteMessage(SearchFromGroupsReq);
            }
            if (gatherReq_ != null)
            {
                output.WriteRawTag(138, 3);
                output.WriteMessage(GatherReq);
            }
            if (AllowCancel != 0)
            {
                output.WriteRawTag(144, 3);
                output.WriteEnum((int)AllowCancel);
            }
            if (uiMessage_ != null)
            {
                output.WriteRawTag(154, 3);
                output.WriteMessage(UiMessage);
            }
            if (submitDeckReq_ != null)
            {
                output.WriteRawTag(162, 3);
                output.WriteMessage(SubmitDeckReq);
            }
            if (edictalMessage_ != null)
            {
                output.WriteRawTag(170, 3);
                output.WriteMessage(EdictalMessage);
            }
            if (timeoutMessage_ != null)
            {
                output.WriteRawTag(178, 3);
                output.WriteMessage(TimeoutMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += systemSeatIds_.CalculateSize(_repeated_systemSeatIds_codec);
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (MsgId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MsgId);
            }
            if (GameStateId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameStateId);
            }
            if (gameStateMessage_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameStateMessage);
            }
            if (prompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prompt);
            }
            if (chooseStartingPlayerReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChooseStartingPlayerReq);
            }
            if (optionalActionMessage_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionalActionMessage);
            }
            if (actionsAvailableReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionsAvailableReq);
            }
            if (orderReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrderReq);
            }
            if (groupReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupReq);
            }
            if (selectNReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectNReq);
            }
            if (modalReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModalReq);
            }
            if (getSettingsResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetSettingsResp);
            }
            if (setSettingsResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetSettingsResp);
            }
            if (connectResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConnectResp);
            }
            if (illegalRequestMessage_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(IllegalRequestMessage);
            }
            if (binaryGameState_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(BinaryGameState);
            }
            if (declareAttackersReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeclareAttackersReq);
            }
            if (submitAttackersResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SubmitAttackersResp);
            }
            if (declareBlockersReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeclareBlockersReq);
            }
            if (submitBlockersResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SubmitBlockersResp);
            }
            if (assignDamageReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AssignDamageReq);
            }
            if (assignDamageConfirmation_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AssignDamageConfirmation);
            }
            if (orderCombatDamageReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderCombatDamageReq);
            }
            if (orderDamageConfirmation_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderDamageConfirmation);
            }
            if (selectTargetsReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectTargetsReq);
            }
            if (submitTargetsResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SubmitTargetsResp);
            }
            if (payCostsReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(PayCostsReq);
            }
            if (nonDecisionPlayerPrompt_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(NonDecisionPlayerPrompt);
            }
            if (intermissionReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(IntermissionReq);
            }
            if (dieRollResultsResp_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DieRollResultsResp);
            }
            if (selectReplacementReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectReplacementReq);
            }
            if (selectNGroupReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectNGroupReq);
            }
            if (alternativeCostReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlternativeCostReq);
            }
            if (distributionReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DistributionReq);
            }
            if (numericInputReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(NumericInputReq);
            }
            if (searchReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SearchReq);
            }
            if (castingTimeOptionsReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(CastingTimeOptionsReq);
            }
            if (InformationalUseOnly != false)
            {
                size += 2 + 1;
            }
            if (selectManaTypeReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectManaTypeReq);
            }
            if (selectFromGroupsReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectFromGroupsReq);
            }
            if (searchFromGroupsReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SearchFromGroupsReq);
            }
            if (gatherReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(GatherReq);
            }
            if (AllowCancel != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)AllowCancel);
            }
            if (uiMessage_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(UiMessage);
            }
            if (submitDeckReq_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SubmitDeckReq);
            }
            if (edictalMessage_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(EdictalMessage);
            }
            if (timeoutMessage_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(TimeoutMessage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREToClientMessage other)
        {
            if (other == null)
            {
                return;
            }
            systemSeatIds_.Add(other.systemSeatIds_);
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.MsgId != 0)
            {
                MsgId = other.MsgId;
            }
            if (other.GameStateId != 0)
            {
                GameStateId = other.GameStateId;
            }
            if (other.gameStateMessage_ != null)
            {
                if (gameStateMessage_ == null)
                {
                    gameStateMessage_ = new GameStateMessage();
                }
                GameStateMessage.MergeFrom(other.GameStateMessage);
            }
            if (other.prompt_ != null)
            {
                if (prompt_ == null)
                {
                    prompt_ = new Prompt();
                }
                Prompt.MergeFrom(other.Prompt);
            }
            if (other.chooseStartingPlayerReq_ != null)
            {
                if (chooseStartingPlayerReq_ == null)
                {
                    chooseStartingPlayerReq_ = new ChooseStartingPlayerReq();
                }
                ChooseStartingPlayerReq.MergeFrom(other.ChooseStartingPlayerReq);
            }
            if (other.optionalActionMessage_ != null)
            {
                if (optionalActionMessage_ == null)
                {
                    optionalActionMessage_ = new OptionalActionMessage();
                }
                OptionalActionMessage.MergeFrom(other.OptionalActionMessage);
            }
            if (other.actionsAvailableReq_ != null)
            {
                if (actionsAvailableReq_ == null)
                {
                    actionsAvailableReq_ = new ActionsAvailableReq();
                }
                ActionsAvailableReq.MergeFrom(other.ActionsAvailableReq);
            }
            if (other.orderReq_ != null)
            {
                if (orderReq_ == null)
                {
                    orderReq_ = new OrderReq();
                }
                OrderReq.MergeFrom(other.OrderReq);
            }
            if (other.groupReq_ != null)
            {
                if (groupReq_ == null)
                {
                    groupReq_ = new GroupReq();
                }
                GroupReq.MergeFrom(other.GroupReq);
            }
            if (other.selectNReq_ != null)
            {
                if (selectNReq_ == null)
                {
                    selectNReq_ = new SelectNReq();
                }
                SelectNReq.MergeFrom(other.SelectNReq);
            }
            if (other.modalReq_ != null)
            {
                if (modalReq_ == null)
                {
                    modalReq_ = new ModalReq();
                }
                ModalReq.MergeFrom(other.ModalReq);
            }
            if (other.getSettingsResp_ != null)
            {
                if (getSettingsResp_ == null)
                {
                    getSettingsResp_ = new GetSettingsResp();
                }
                GetSettingsResp.MergeFrom(other.GetSettingsResp);
            }
            if (other.setSettingsResp_ != null)
            {
                if (setSettingsResp_ == null)
                {
                    setSettingsResp_ = new SetSettingsResp();
                }
                SetSettingsResp.MergeFrom(other.SetSettingsResp);
            }
            if (other.connectResp_ != null)
            {
                if (connectResp_ == null)
                {
                    connectResp_ = new ConnectResp();
                }
                ConnectResp.MergeFrom(other.ConnectResp);
            }
            if (other.illegalRequestMessage_ != null)
            {
                if (illegalRequestMessage_ == null)
                {
                    illegalRequestMessage_ = new IllegalRequestMessage();
                }
                IllegalRequestMessage.MergeFrom(other.IllegalRequestMessage);
            }
            if (other.binaryGameState_ != null)
            {
                if (binaryGameState_ == null)
                {
                    binaryGameState_ = new BinaryGameState();
                }
                BinaryGameState.MergeFrom(other.BinaryGameState);
            }
            if (other.declareAttackersReq_ != null)
            {
                if (declareAttackersReq_ == null)
                {
                    declareAttackersReq_ = new DeclareAttackersReq();
                }
                DeclareAttackersReq.MergeFrom(other.DeclareAttackersReq);
            }
            if (other.submitAttackersResp_ != null)
            {
                if (submitAttackersResp_ == null)
                {
                    submitAttackersResp_ = new SubmitAttackersResp();
                }
                SubmitAttackersResp.MergeFrom(other.SubmitAttackersResp);
            }
            if (other.declareBlockersReq_ != null)
            {
                if (declareBlockersReq_ == null)
                {
                    declareBlockersReq_ = new DeclareBlockersReq();
                }
                DeclareBlockersReq.MergeFrom(other.DeclareBlockersReq);
            }
            if (other.submitBlockersResp_ != null)
            {
                if (submitBlockersResp_ == null)
                {
                    submitBlockersResp_ = new SubmitBlockersResp();
                }
                SubmitBlockersResp.MergeFrom(other.SubmitBlockersResp);
            }
            if (other.assignDamageReq_ != null)
            {
                if (assignDamageReq_ == null)
                {
                    assignDamageReq_ = new AssignDamageReq();
                }
                AssignDamageReq.MergeFrom(other.AssignDamageReq);
            }
            if (other.assignDamageConfirmation_ != null)
            {
                if (assignDamageConfirmation_ == null)
                {
                    assignDamageConfirmation_ = new AssignDamageConfirmation();
                }
                AssignDamageConfirmation.MergeFrom(other.AssignDamageConfirmation);
            }
            if (other.orderCombatDamageReq_ != null)
            {
                if (orderCombatDamageReq_ == null)
                {
                    orderCombatDamageReq_ = new OrderCombatDamageReq();
                }
                OrderCombatDamageReq.MergeFrom(other.OrderCombatDamageReq);
            }
            if (other.orderDamageConfirmation_ != null)
            {
                if (orderDamageConfirmation_ == null)
                {
                    orderDamageConfirmation_ = new OrderDamageConfirmation();
                }
                OrderDamageConfirmation.MergeFrom(other.OrderDamageConfirmation);
            }
            if (other.selectTargetsReq_ != null)
            {
                if (selectTargetsReq_ == null)
                {
                    selectTargetsReq_ = new SelectTargetsReq();
                }
                SelectTargetsReq.MergeFrom(other.SelectTargetsReq);
            }
            if (other.submitTargetsResp_ != null)
            {
                if (submitTargetsResp_ == null)
                {
                    submitTargetsResp_ = new SubmitTargetsResp();
                }
                SubmitTargetsResp.MergeFrom(other.SubmitTargetsResp);
            }
            if (other.payCostsReq_ != null)
            {
                if (payCostsReq_ == null)
                {
                    payCostsReq_ = new PayCostsReq();
                }
                PayCostsReq.MergeFrom(other.PayCostsReq);
            }
            if (other.nonDecisionPlayerPrompt_ != null)
            {
                if (nonDecisionPlayerPrompt_ == null)
                {
                    nonDecisionPlayerPrompt_ = new Prompt();
                }
                NonDecisionPlayerPrompt.MergeFrom(other.NonDecisionPlayerPrompt);
            }
            if (other.intermissionReq_ != null)
            {
                if (intermissionReq_ == null)
                {
                    intermissionReq_ = new IntermissionReq();
                }
                IntermissionReq.MergeFrom(other.IntermissionReq);
            }
            if (other.dieRollResultsResp_ != null)
            {
                if (dieRollResultsResp_ == null)
                {
                    dieRollResultsResp_ = new DieRollResultsResp();
                }
                DieRollResultsResp.MergeFrom(other.DieRollResultsResp);
            }
            if (other.selectReplacementReq_ != null)
            {
                if (selectReplacementReq_ == null)
                {
                    selectReplacementReq_ = new SelectReplacementReq();
                }
                SelectReplacementReq.MergeFrom(other.SelectReplacementReq);
            }
            if (other.selectNGroupReq_ != null)
            {
                if (selectNGroupReq_ == null)
                {
                    selectNGroupReq_ = new SelectNGroupReq();
                }
                SelectNGroupReq.MergeFrom(other.SelectNGroupReq);
            }
            if (other.alternativeCostReq_ != null)
            {
                if (alternativeCostReq_ == null)
                {
                    alternativeCostReq_ = new AlternativeCostReq();
                }
                AlternativeCostReq.MergeFrom(other.AlternativeCostReq);
            }
            if (other.distributionReq_ != null)
            {
                if (distributionReq_ == null)
                {
                    distributionReq_ = new DistributionReq();
                }
                DistributionReq.MergeFrom(other.DistributionReq);
            }
            if (other.numericInputReq_ != null)
            {
                if (numericInputReq_ == null)
                {
                    numericInputReq_ = new NumericInputReq();
                }
                NumericInputReq.MergeFrom(other.NumericInputReq);
            }
            if (other.searchReq_ != null)
            {
                if (searchReq_ == null)
                {
                    searchReq_ = new SearchReq();
                }
                SearchReq.MergeFrom(other.SearchReq);
            }
            if (other.castingTimeOptionsReq_ != null)
            {
                if (castingTimeOptionsReq_ == null)
                {
                    castingTimeOptionsReq_ = new CastingTimeOptionsReq();
                }
                CastingTimeOptionsReq.MergeFrom(other.CastingTimeOptionsReq);
            }
            if (other.InformationalUseOnly != false)
            {
                InformationalUseOnly = other.InformationalUseOnly;
            }
            if (other.selectManaTypeReq_ != null)
            {
                if (selectManaTypeReq_ == null)
                {
                    selectManaTypeReq_ = new SelectManaTypeReq();
                }
                SelectManaTypeReq.MergeFrom(other.SelectManaTypeReq);
            }
            if (other.selectFromGroupsReq_ != null)
            {
                if (selectFromGroupsReq_ == null)
                {
                    selectFromGroupsReq_ = new SelectFromGroupsReq();
                }
                SelectFromGroupsReq.MergeFrom(other.SelectFromGroupsReq);
            }
            if (other.searchFromGroupsReq_ != null)
            {
                if (searchFromGroupsReq_ == null)
                {
                    searchFromGroupsReq_ = new SearchFromGroupsReq();
                }
                SearchFromGroupsReq.MergeFrom(other.SearchFromGroupsReq);
            }
            if (other.gatherReq_ != null)
            {
                if (gatherReq_ == null)
                {
                    gatherReq_ = new GatherReq();
                }
                GatherReq.MergeFrom(other.GatherReq);
            }
            if (other.AllowCancel != 0)
            {
                AllowCancel = other.AllowCancel;
            }
            if (other.uiMessage_ != null)
            {
                if (uiMessage_ == null)
                {
                    uiMessage_ = new UIMessage();
                }
                UiMessage.MergeFrom(other.UiMessage);
            }
            if (other.submitDeckReq_ != null)
            {
                if (submitDeckReq_ == null)
                {
                    submitDeckReq_ = new SubmitDeckReq();
                }
                SubmitDeckReq.MergeFrom(other.SubmitDeckReq);
            }
            if (other.edictalMessage_ != null)
            {
                if (edictalMessage_ == null)
                {
                    edictalMessage_ = new EdictalMessage();
                }
                EdictalMessage.MergeFrom(other.EdictalMessage);
            }
            if (other.timeoutMessage_ != null)
            {
                if (timeoutMessage_ == null)
                {
                    timeoutMessage_ = new TimeoutMessage();
                }
                TimeoutMessage.MergeFrom(other.TimeoutMessage);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            type_ = (GREMessageType)input.ReadEnum();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            systemSeatIds_.AddEntriesFrom(input, _repeated_systemSeatIds_codec);
                            break;
                        }
                    case 24:
                        {
                            MsgId = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            GameStateId = input.ReadUInt32();
                            break;
                        }
                    case 42:
                        {
                            if (gameStateMessage_ == null)
                            {
                                gameStateMessage_ = new GameStateMessage();
                            }
                            input.ReadMessage(gameStateMessage_);
                            break;
                        }
                    case 50:
                        {
                            if (prompt_ == null)
                            {
                                prompt_ = new Prompt();
                            }
                            input.ReadMessage(prompt_);
                            break;
                        }
                    case 58:
                        {
                            if (chooseStartingPlayerReq_ == null)
                            {
                                chooseStartingPlayerReq_ = new ChooseStartingPlayerReq();
                            }
                            input.ReadMessage(chooseStartingPlayerReq_);
                            break;
                        }
                    case 66:
                        {
                            if (optionalActionMessage_ == null)
                            {
                                optionalActionMessage_ = new OptionalActionMessage();
                            }
                            input.ReadMessage(optionalActionMessage_);
                            break;
                        }
                    case 74:
                        {
                            if (actionsAvailableReq_ == null)
                            {
                                actionsAvailableReq_ = new ActionsAvailableReq();
                            }
                            input.ReadMessage(actionsAvailableReq_);
                            break;
                        }
                    case 82:
                        {
                            if (orderReq_ == null)
                            {
                                orderReq_ = new OrderReq();
                            }
                            input.ReadMessage(orderReq_);
                            break;
                        }
                    case 90:
                        {
                            if (groupReq_ == null)
                            {
                                groupReq_ = new GroupReq();
                            }
                            input.ReadMessage(groupReq_);
                            break;
                        }
                    case 98:
                        {
                            if (selectNReq_ == null)
                            {
                                selectNReq_ = new SelectNReq();
                            }
                            input.ReadMessage(selectNReq_);
                            break;
                        }
                    case 106:
                        {
                            if (modalReq_ == null)
                            {
                                modalReq_ = new ModalReq();
                            }
                            input.ReadMessage(modalReq_);
                            break;
                        }
                    case 130:
                        {
                            if (getSettingsResp_ == null)
                            {
                                getSettingsResp_ = new GetSettingsResp();
                            }
                            input.ReadMessage(getSettingsResp_);
                            break;
                        }
                    case 138:
                        {
                            if (setSettingsResp_ == null)
                            {
                                setSettingsResp_ = new SetSettingsResp();
                            }
                            input.ReadMessage(setSettingsResp_);
                            break;
                        }
                    case 146:
                        {
                            if (connectResp_ == null)
                            {
                                connectResp_ = new ConnectResp();
                            }
                            input.ReadMessage(connectResp_);
                            break;
                        }
                    case 154:
                        {
                            if (illegalRequestMessage_ == null)
                            {
                                illegalRequestMessage_ = new IllegalRequestMessage();
                            }
                            input.ReadMessage(illegalRequestMessage_);
                            break;
                        }
                    case 186:
                        {
                            if (binaryGameState_ == null)
                            {
                                binaryGameState_ = new BinaryGameState();
                            }
                            input.ReadMessage(binaryGameState_);
                            break;
                        }
                    case 194:
                        {
                            if (declareAttackersReq_ == null)
                            {
                                declareAttackersReq_ = new DeclareAttackersReq();
                            }
                            input.ReadMessage(declareAttackersReq_);
                            break;
                        }
                    case 202:
                        {
                            if (submitAttackersResp_ == null)
                            {
                                submitAttackersResp_ = new SubmitAttackersResp();
                            }
                            input.ReadMessage(submitAttackersResp_);
                            break;
                        }
                    case 210:
                        {
                            if (declareBlockersReq_ == null)
                            {
                                declareBlockersReq_ = new DeclareBlockersReq();
                            }
                            input.ReadMessage(declareBlockersReq_);
                            break;
                        }
                    case 218:
                        {
                            if (submitBlockersResp_ == null)
                            {
                                submitBlockersResp_ = new SubmitBlockersResp();
                            }
                            input.ReadMessage(submitBlockersResp_);
                            break;
                        }
                    case 226:
                        {
                            if (assignDamageReq_ == null)
                            {
                                assignDamageReq_ = new AssignDamageReq();
                            }
                            input.ReadMessage(assignDamageReq_);
                            break;
                        }
                    case 234:
                        {
                            if (assignDamageConfirmation_ == null)
                            {
                                assignDamageConfirmation_ = new AssignDamageConfirmation();
                            }
                            input.ReadMessage(assignDamageConfirmation_);
                            break;
                        }
                    case 242:
                        {
                            if (orderCombatDamageReq_ == null)
                            {
                                orderCombatDamageReq_ = new OrderCombatDamageReq();
                            }
                            input.ReadMessage(orderCombatDamageReq_);
                            break;
                        }
                    case 250:
                        {
                            if (orderDamageConfirmation_ == null)
                            {
                                orderDamageConfirmation_ = new OrderDamageConfirmation();
                            }
                            input.ReadMessage(orderDamageConfirmation_);
                            break;
                        }
                    case 258:
                        {
                            if (selectTargetsReq_ == null)
                            {
                                selectTargetsReq_ = new SelectTargetsReq();
                            }
                            input.ReadMessage(selectTargetsReq_);
                            break;
                        }
                    case 266:
                        {
                            if (submitTargetsResp_ == null)
                            {
                                submitTargetsResp_ = new SubmitTargetsResp();
                            }
                            input.ReadMessage(submitTargetsResp_);
                            break;
                        }
                    case 274:
                        {
                            if (payCostsReq_ == null)
                            {
                                payCostsReq_ = new PayCostsReq();
                            }
                            input.ReadMessage(payCostsReq_);
                            break;
                        }
                    case 282:
                        {
                            if (nonDecisionPlayerPrompt_ == null)
                            {
                                nonDecisionPlayerPrompt_ = new Prompt();
                            }
                            input.ReadMessage(nonDecisionPlayerPrompt_);
                            break;
                        }
                    case 290:
                        {
                            if (intermissionReq_ == null)
                            {
                                intermissionReq_ = new IntermissionReq();
                            }
                            input.ReadMessage(intermissionReq_);
                            break;
                        }
                    case 298:
                        {
                            if (dieRollResultsResp_ == null)
                            {
                                dieRollResultsResp_ = new DieRollResultsResp();
                            }
                            input.ReadMessage(dieRollResultsResp_);
                            break;
                        }
                    case 306:
                        {
                            if (selectReplacementReq_ == null)
                            {
                                selectReplacementReq_ = new SelectReplacementReq();
                            }
                            input.ReadMessage(selectReplacementReq_);
                            break;
                        }
                    case 314:
                        {
                            if (selectNGroupReq_ == null)
                            {
                                selectNGroupReq_ = new SelectNGroupReq();
                            }
                            input.ReadMessage(selectNGroupReq_);
                            break;
                        }
                    case 322:
                        {
                            if (alternativeCostReq_ == null)
                            {
                                alternativeCostReq_ = new AlternativeCostReq();
                            }
                            input.ReadMessage(alternativeCostReq_);
                            break;
                        }
                    case 330:
                        {
                            if (distributionReq_ == null)
                            {
                                distributionReq_ = new DistributionReq();
                            }
                            input.ReadMessage(distributionReq_);
                            break;
                        }
                    case 338:
                        {
                            if (numericInputReq_ == null)
                            {
                                numericInputReq_ = new NumericInputReq();
                            }
                            input.ReadMessage(numericInputReq_);
                            break;
                        }
                    case 346:
                        {
                            if (searchReq_ == null)
                            {
                                searchReq_ = new SearchReq();
                            }
                            input.ReadMessage(searchReq_);
                            break;
                        }
                    case 354:
                        {
                            if (castingTimeOptionsReq_ == null)
                            {
                                castingTimeOptionsReq_ = new CastingTimeOptionsReq();
                            }
                            input.ReadMessage(castingTimeOptionsReq_);
                            break;
                        }
                    case 360:
                        {
                            InformationalUseOnly = input.ReadBool();
                            break;
                        }
                    case 370:
                        {
                            if (selectManaTypeReq_ == null)
                            {
                                selectManaTypeReq_ = new SelectManaTypeReq();
                            }
                            input.ReadMessage(selectManaTypeReq_);
                            break;
                        }
                    case 378:
                        {
                            if (selectFromGroupsReq_ == null)
                            {
                                selectFromGroupsReq_ = new SelectFromGroupsReq();
                            }
                            input.ReadMessage(selectFromGroupsReq_);
                            break;
                        }
                    case 386:
                        {
                            if (searchFromGroupsReq_ == null)
                            {
                                searchFromGroupsReq_ = new SearchFromGroupsReq();
                            }
                            input.ReadMessage(searchFromGroupsReq_);
                            break;
                        }
                    case 394:
                        {
                            if (gatherReq_ == null)
                            {
                                gatherReq_ = new GatherReq();
                            }
                            input.ReadMessage(gatherReq_);
                            break;
                        }
                    case 400:
                        {
                            allowCancel_ = (AllowCancel)input.ReadEnum();
                            break;
                        }
                    case 410:
                        {
                            if (uiMessage_ == null)
                            {
                                uiMessage_ = new UIMessage();
                            }
                            input.ReadMessage(uiMessage_);
                            break;
                        }
                    case 418:
                        {
                            if (submitDeckReq_ == null)
                            {
                                submitDeckReq_ = new SubmitDeckReq();
                            }
                            input.ReadMessage(submitDeckReq_);
                            break;
                        }
                    case 426:
                        {
                            if (edictalMessage_ == null)
                            {
                                edictalMessage_ = new EdictalMessage();
                            }
                            input.ReadMessage(edictalMessage_);
                            break;
                        }
                    case 434:
                        {
                            if (timeoutMessage_ == null)
                            {
                                timeoutMessage_ = new TimeoutMessage();
                            }
                            input.ReadMessage(timeoutMessage_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GREToServerMessage : pb::IMessage<GREToServerMessage>
    {
        private static readonly pb::MessageParser<GREToServerMessage> _parser = new pb::MessageParser<GREToServerMessage>(() => new GREToServerMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GREToServerMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[139]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToServerMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToServerMessage(GREToServerMessage other) : this()
        {
            msgId_ = other.msgId_;
            switch (other.MessageCase)
            {
                case MessageOneofCase.BinaryGameState:
                    BinaryGameState = other.BinaryGameState.Clone();
                    break;
                case MessageOneofCase.ReportResultMessage:
                    ReportResultMessage = other.ReportResultMessage.Clone();
                    break;
                case MessageOneofCase.ScheduledMessage:
                    ScheduledMessage = other.ScheduledMessage.Clone();
                    break;
                case MessageOneofCase.CancelScheduledMessage:
                    CancelScheduledMessage = other.CancelScheduledMessage.Clone();
                    break;
                case MessageOneofCase.GameMetrics:
                    GameMetrics = other.GameMetrics.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREToServerMessage Clone()
        {
            return new GREToServerMessage(this);
        }

        /// <summary>Field number for the "msgId" field.</summary>
        public const int MsgIdFieldNumber = 1;
        private uint msgId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MsgId
        {
            get { return msgId_; }
            set
            {
                msgId_ = value;
            }
        }

        /// <summary>Field number for the "binaryGameState" field.</summary>
        public const int BinaryGameStateFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BinaryGameState BinaryGameState
        {
            get { return messageCase_ == MessageOneofCase.BinaryGameState ? (BinaryGameState)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.BinaryGameState;
            }
        }

        /// <summary>Field number for the "reportResultMessage" field.</summary>
        public const int ReportResultMessageFieldNumber = 3;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReportResultMessage ReportResultMessage
        {
            get { return messageCase_ == MessageOneofCase.ReportResultMessage ? (ReportResultMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ReportResultMessage;
            }
        }

        /// <summary>Field number for the "scheduledMessage" field.</summary>
        public const int ScheduledMessageFieldNumber = 4;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREScheduledMessage ScheduledMessage
        {
            get { return messageCase_ == MessageOneofCase.ScheduledMessage ? (GREScheduledMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ScheduledMessage;
            }
        }

        /// <summary>Field number for the "cancelScheduledMessage" field.</summary>
        public const int CancelScheduledMessageFieldNumber = 5;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRECancelScheduledMessage CancelScheduledMessage
        {
            get { return messageCase_ == MessageOneofCase.CancelScheduledMessage ? (GRECancelScheduledMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CancelScheduledMessage;
            }
        }

        /// <summary>Field number for the "gameMetrics" field.</summary>
        public const int GameMetricsFieldNumber = 6;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameMetrics GameMetrics
        {
            get { return messageCase_ == MessageOneofCase.GameMetrics ? (GameMetrics)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GameMetrics;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            BinaryGameState = 2,
            ReportResultMessage = 3,
            ScheduledMessage = 4,
            CancelScheduledMessage = 5,
            GameMetrics = 6,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GREToServerMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GREToServerMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MsgId != other.MsgId) return false;
            if (!object.Equals(BinaryGameState, other.BinaryGameState)) return false;
            if (!object.Equals(ReportResultMessage, other.ReportResultMessage)) return false;
            if (!object.Equals(ScheduledMessage, other.ScheduledMessage)) return false;
            if (!object.Equals(CancelScheduledMessage, other.CancelScheduledMessage)) return false;
            if (!object.Equals(GameMetrics, other.GameMetrics)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MsgId != 0) hash ^= MsgId.GetHashCode();
            if (messageCase_ == MessageOneofCase.BinaryGameState) hash ^= BinaryGameState.GetHashCode();
            if (messageCase_ == MessageOneofCase.ReportResultMessage) hash ^= ReportResultMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.ScheduledMessage) hash ^= ScheduledMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.CancelScheduledMessage) hash ^= CancelScheduledMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.GameMetrics) hash ^= GameMetrics.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MsgId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(MsgId);
            }
            if (messageCase_ == MessageOneofCase.BinaryGameState)
            {
                output.WriteRawTag(18);
                output.WriteMessage(BinaryGameState);
            }
            if (messageCase_ == MessageOneofCase.ReportResultMessage)
            {
                output.WriteRawTag(26);
                output.WriteMessage(ReportResultMessage);
            }
            if (messageCase_ == MessageOneofCase.ScheduledMessage)
            {
                output.WriteRawTag(34);
                output.WriteMessage(ScheduledMessage);
            }
            if (messageCase_ == MessageOneofCase.CancelScheduledMessage)
            {
                output.WriteRawTag(42);
                output.WriteMessage(CancelScheduledMessage);
            }
            if (messageCase_ == MessageOneofCase.GameMetrics)
            {
                output.WriteRawTag(50);
                output.WriteMessage(GameMetrics);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MsgId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MsgId);
            }
            if (messageCase_ == MessageOneofCase.BinaryGameState)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(BinaryGameState);
            }
            if (messageCase_ == MessageOneofCase.ReportResultMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReportResultMessage);
            }
            if (messageCase_ == MessageOneofCase.ScheduledMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScheduledMessage);
            }
            if (messageCase_ == MessageOneofCase.CancelScheduledMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelScheduledMessage);
            }
            if (messageCase_ == MessageOneofCase.GameMetrics)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameMetrics);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GREToServerMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MsgId != 0)
            {
                MsgId = other.MsgId;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.BinaryGameState:
                    if (BinaryGameState == null)
                    {
                        BinaryGameState = new BinaryGameState();
                    }
                    BinaryGameState.MergeFrom(other.BinaryGameState);
                    break;
                case MessageOneofCase.ReportResultMessage:
                    if (ReportResultMessage == null)
                    {
                        ReportResultMessage = new ReportResultMessage();
                    }
                    ReportResultMessage.MergeFrom(other.ReportResultMessage);
                    break;
                case MessageOneofCase.ScheduledMessage:
                    if (ScheduledMessage == null)
                    {
                        ScheduledMessage = new GREScheduledMessage();
                    }
                    ScheduledMessage.MergeFrom(other.ScheduledMessage);
                    break;
                case MessageOneofCase.CancelScheduledMessage:
                    if (CancelScheduledMessage == null)
                    {
                        CancelScheduledMessage = new GRECancelScheduledMessage();
                    }
                    CancelScheduledMessage.MergeFrom(other.CancelScheduledMessage);
                    break;
                case MessageOneofCase.GameMetrics:
                    if (GameMetrics == null)
                    {
                        GameMetrics = new GameMetrics();
                    }
                    GameMetrics.MergeFrom(other.GameMetrics);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            MsgId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            BinaryGameState subBuilder = new BinaryGameState();
                            if (messageCase_ == MessageOneofCase.BinaryGameState)
                            {
                                subBuilder.MergeFrom(BinaryGameState);
                            }
                            input.ReadMessage(subBuilder);
                            BinaryGameState = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            ReportResultMessage subBuilder = new ReportResultMessage();
                            if (messageCase_ == MessageOneofCase.ReportResultMessage)
                            {
                                subBuilder.MergeFrom(ReportResultMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ReportResultMessage = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            GREScheduledMessage subBuilder = new GREScheduledMessage();
                            if (messageCase_ == MessageOneofCase.ScheduledMessage)
                            {
                                subBuilder.MergeFrom(ScheduledMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ScheduledMessage = subBuilder;
                            break;
                        }
                    case 42:
                        {
                            GRECancelScheduledMessage subBuilder = new GRECancelScheduledMessage();
                            if (messageCase_ == MessageOneofCase.CancelScheduledMessage)
                            {
                                subBuilder.MergeFrom(CancelScheduledMessage);
                            }
                            input.ReadMessage(subBuilder);
                            CancelScheduledMessage = subBuilder;
                            break;
                        }
                    case 50:
                        {
                            GameMetrics subBuilder = new GameMetrics();
                            if (messageCase_ == MessageOneofCase.GameMetrics)
                            {
                                subBuilder.MergeFrom(GameMetrics);
                            }
                            input.ReadMessage(subBuilder);
                            GameMetrics = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GameInfo : pb::IMessage<GameInfo>
    {
        private static readonly pb::MessageParser<GameInfo> _parser = new pb::MessageParser<GameInfo>(() => new GameInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[140]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameInfo(GameInfo other) : this()
        {
            matchID_ = other.matchID_;
            results_ = other.results_.Clone();
            gameNumber_ = other.gameNumber_;
            stage_ = other.stage_;
            type_ = other.type_;
            variant_ = other.variant_;
            matchState_ = other.matchState_;
            matchWinCondition_ = other.matchWinCondition_;
            maxTimeoutCount_ = other.maxTimeoutCount_;
            maxPipCount_ = other.maxPipCount_;
            timeoutDurationSec_ = other.timeoutDurationSec_;
            superFormat_ = other.superFormat_;
            mulliganType_ = other.mulliganType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameInfo Clone()
        {
            return new GameInfo(this);
        }

        /// <summary>Field number for the "matchID" field.</summary>
        public const int MatchIDFieldNumber = 1;
        private string matchID_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchID
        {
            get { return matchID_; }
            set
            {
                matchID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "results" field.</summary>
        public const int ResultsFieldNumber = 13;
        private static readonly pb::FieldCodec<ResultSpec> _repeated_results_codec
            = pb::FieldCodec.ForMessage(106, ResultSpec.Parser);
        private readonly pbc::RepeatedField<ResultSpec> results_ = new pbc::RepeatedField<ResultSpec>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ResultSpec> Results
        {
            get { return results_; }
        }

        /// <summary>Field number for the "gameNumber" field.</summary>
        public const int GameNumberFieldNumber = 3;
        private uint gameNumber_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameNumber
        {
            get { return gameNumber_; }
            set
            {
                gameNumber_ = value;
            }
        }

        /// <summary>Field number for the "stage" field.</summary>
        public const int StageFieldNumber = 5;
        private GameStage stage_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameStage Stage
        {
            get { return stage_; }
            set
            {
                stage_ = value;
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 6;
        private GameType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "variant" field.</summary>
        public const int VariantFieldNumber = 7;
        private GameVariant variant_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameVariant Variant
        {
            get { return variant_; }
            set
            {
                variant_ = value;
            }
        }

        /// <summary>Field number for the "matchState" field.</summary>
        public const int MatchStateFieldNumber = 8;
        private MatchState matchState_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchState MatchState
        {
            get { return matchState_; }
            set
            {
                matchState_ = value;
            }
        }

        /// <summary>Field number for the "matchWinCondition" field.</summary>
        public const int MatchWinConditionFieldNumber = 9;
        private MatchWinCondition matchWinCondition_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchWinCondition MatchWinCondition
        {
            get { return matchWinCondition_; }
            set
            {
                matchWinCondition_ = value;
            }
        }

        /// <summary>Field number for the "maxTimeoutCount" field.</summary>
        public const int MaxTimeoutCountFieldNumber = 10;
        private uint maxTimeoutCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxTimeoutCount
        {
            get { return maxTimeoutCount_; }
            set
            {
                maxTimeoutCount_ = value;
            }
        }

        /// <summary>Field number for the "maxPipCount" field.</summary>
        public const int MaxPipCountFieldNumber = 11;
        private uint maxPipCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxPipCount
        {
            get { return maxPipCount_; }
            set
            {
                maxPipCount_ = value;
            }
        }

        /// <summary>Field number for the "timeoutDurationSec" field.</summary>
        public const int TimeoutDurationSecFieldNumber = 12;
        private uint timeoutDurationSec_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutDurationSec
        {
            get { return timeoutDurationSec_; }
            set
            {
                timeoutDurationSec_ = value;
            }
        }

        /// <summary>Field number for the "superFormat" field.</summary>
        public const int SuperFormatFieldNumber = 14;
        private SuperFormat superFormat_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SuperFormat SuperFormat
        {
            get { return superFormat_; }
            set
            {
                superFormat_ = value;
            }
        }

        /// <summary>Field number for the "mulliganType" field.</summary>
        public const int MulliganTypeFieldNumber = 15;
        private MulliganType mulliganType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MulliganType MulliganType
        {
            get { return mulliganType_; }
            set
            {
                mulliganType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GameInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchID != other.MatchID) return false;
            if (!results_.Equals(other.results_)) return false;
            if (GameNumber != other.GameNumber) return false;
            if (Stage != other.Stage) return false;
            if (Type != other.Type) return false;
            if (Variant != other.Variant) return false;
            if (MatchState != other.MatchState) return false;
            if (MatchWinCondition != other.MatchWinCondition) return false;
            if (MaxTimeoutCount != other.MaxTimeoutCount) return false;
            if (MaxPipCount != other.MaxPipCount) return false;
            if (TimeoutDurationSec != other.TimeoutDurationSec) return false;
            if (SuperFormat != other.SuperFormat) return false;
            if (MulliganType != other.MulliganType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchID.Length != 0) hash ^= MatchID.GetHashCode();
            hash ^= results_.GetHashCode();
            if (GameNumber != 0) hash ^= GameNumber.GetHashCode();
            if (Stage != 0) hash ^= Stage.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (Variant != 0) hash ^= Variant.GetHashCode();
            if (MatchState != 0) hash ^= MatchState.GetHashCode();
            if (MatchWinCondition != 0) hash ^= MatchWinCondition.GetHashCode();
            if (MaxTimeoutCount != 0) hash ^= MaxTimeoutCount.GetHashCode();
            if (MaxPipCount != 0) hash ^= MaxPipCount.GetHashCode();
            if (TimeoutDurationSec != 0) hash ^= TimeoutDurationSec.GetHashCode();
            if (SuperFormat != 0) hash ^= SuperFormat.GetHashCode();
            if (MulliganType != 0) hash ^= MulliganType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MatchID.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(MatchID);
            }
            if (GameNumber != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(GameNumber);
            }
            if (Stage != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)Stage);
            }
            if (Type != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)Type);
            }
            if (Variant != 0)
            {
                output.WriteRawTag(56);
                output.WriteEnum((int)Variant);
            }
            if (MatchState != 0)
            {
                output.WriteRawTag(64);
                output.WriteEnum((int)MatchState);
            }
            if (MatchWinCondition != 0)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)MatchWinCondition);
            }
            if (MaxTimeoutCount != 0)
            {
                output.WriteRawTag(80);
                output.WriteUInt32(MaxTimeoutCount);
            }
            if (MaxPipCount != 0)
            {
                output.WriteRawTag(88);
                output.WriteUInt32(MaxPipCount);
            }
            if (TimeoutDurationSec != 0)
            {
                output.WriteRawTag(96);
                output.WriteUInt32(TimeoutDurationSec);
            }
            results_.WriteTo(output, _repeated_results_codec);
            if (SuperFormat != 0)
            {
                output.WriteRawTag(112);
                output.WriteEnum((int)SuperFormat);
            }
            if (MulliganType != 0)
            {
                output.WriteRawTag(120);
                output.WriteEnum((int)MulliganType);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchID);
            }
            size += results_.CalculateSize(_repeated_results_codec);
            if (GameNumber != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameNumber);
            }
            if (Stage != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Stage);
            }
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (Variant != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Variant);
            }
            if (MatchState != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MatchState);
            }
            if (MatchWinCondition != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MatchWinCondition);
            }
            if (MaxTimeoutCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTimeoutCount);
            }
            if (MaxPipCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPipCount);
            }
            if (TimeoutDurationSec != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutDurationSec);
            }
            if (SuperFormat != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)SuperFormat);
            }
            if (MulliganType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MulliganType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchID.Length != 0)
            {
                MatchID = other.MatchID;
            }
            results_.Add(other.results_);
            if (other.GameNumber != 0)
            {
                GameNumber = other.GameNumber;
            }
            if (other.Stage != 0)
            {
                Stage = other.Stage;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.Variant != 0)
            {
                Variant = other.Variant;
            }
            if (other.MatchState != 0)
            {
                MatchState = other.MatchState;
            }
            if (other.MatchWinCondition != 0)
            {
                MatchWinCondition = other.MatchWinCondition;
            }
            if (other.MaxTimeoutCount != 0)
            {
                MaxTimeoutCount = other.MaxTimeoutCount;
            }
            if (other.MaxPipCount != 0)
            {
                MaxPipCount = other.MaxPipCount;
            }
            if (other.TimeoutDurationSec != 0)
            {
                TimeoutDurationSec = other.TimeoutDurationSec;
            }
            if (other.SuperFormat != 0)
            {
                SuperFormat = other.SuperFormat;
            }
            if (other.MulliganType != 0)
            {
                MulliganType = other.MulliganType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            MatchID = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            GameNumber = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            stage_ = (GameStage)input.ReadEnum();
                            break;
                        }
                    case 48:
                        {
                            type_ = (GameType)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            variant_ = (GameVariant)input.ReadEnum();
                            break;
                        }
                    case 64:
                        {
                            matchState_ = (MatchState)input.ReadEnum();
                            break;
                        }
                    case 72:
                        {
                            matchWinCondition_ = (MatchWinCondition)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            MaxTimeoutCount = input.ReadUInt32();
                            break;
                        }
                    case 88:
                        {
                            MaxPipCount = input.ReadUInt32();
                            break;
                        }
                    case 96:
                        {
                            TimeoutDurationSec = input.ReadUInt32();
                            break;
                        }
                    case 106:
                        {
                            results_.AddEntriesFrom(input, _repeated_results_codec);
                            break;
                        }
                    case 112:
                        {
                            superFormat_ = (SuperFormat)input.ReadEnum();
                            break;
                        }
                    case 120:
                        {
                            mulliganType_ = (MulliganType)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GameMetrics : pb::IMessage<GameMetrics>
    {
        private static readonly pb::MessageParser<GameMetrics> _parser = new pb::MessageParser<GameMetrics>(() => new GameMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameMetrics> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[141]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameMetrics()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameMetrics(GameMetrics other) : this()
        {
            playerMetrics_ = other.playerMetrics_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameMetrics Clone()
        {
            return new GameMetrics(this);
        }

        /// <summary>Field number for the "playerMetrics" field.</summary>
        public const int PlayerMetricsFieldNumber = 1;
        private static readonly pb::FieldCodec<PlayerMetrics> _repeated_playerMetrics_codec
            = pb::FieldCodec.ForMessage(10, MTGAHelper.Entity.Protobuf.PlayerMetrics.Parser);
        private readonly pbc::RepeatedField<PlayerMetrics> playerMetrics_ = new pbc::RepeatedField<PlayerMetrics>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<PlayerMetrics> PlayerMetrics
        {
            get { return playerMetrics_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GameMetrics);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameMetrics other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!playerMetrics_.Equals(other.playerMetrics_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= playerMetrics_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            playerMetrics_.WriteTo(output, _repeated_playerMetrics_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += playerMetrics_.CalculateSize(_repeated_playerMetrics_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameMetrics other)
        {
            if (other == null)
            {
                return;
            }
            playerMetrics_.Add(other.playerMetrics_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            playerMetrics_.AddEntriesFrom(input, _repeated_playerMetrics_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GameObjectInfo : pb::IMessage<GameObjectInfo>
    {
        private static readonly pb::MessageParser<GameObjectInfo> _parser = new pb::MessageParser<GameObjectInfo>(() => new GameObjectInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameObjectInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[142]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameObjectInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameObjectInfo(GameObjectInfo other) : this()
        {
            superTypes_ = other.superTypes_.Clone();
            cardTypes_ = other.cardTypes_.Clone();
            subtypes_ = other.subtypes_.Clone();
            color_ = other.color_.Clone();
            viewers_ = other.viewers_.Clone();
            abilities_ = other.abilities_.Clone();
            instanceId_ = other.instanceId_;
            grpId_ = other.grpId_;
            groupId_ = other.groupId_;
            type_ = other.type_;
            zoneId_ = other.zoneId_;
            visibility_ = other.visibility_;
            ownerSeatId_ = other.ownerSeatId_;
            controllerSeatId_ = other.controllerSeatId_;
            power_ = other.power_ != null ? other.power_.Clone() : null;
            toughness_ = other.toughness_ != null ? other.toughness_.Clone() : null;
            isCopy_ = other.isCopy_;
            isTapped_ = other.isTapped_;
            hasSummoningSickness_ = other.hasSummoningSickness_;
            attackState_ = other.attackState_;
            blockState_ = other.blockState_;
            damage_ = other.damage_;
            attackInfo_ = other.attackInfo_ != null ? other.attackInfo_.Clone() : null;
            blockInfo_ = other.blockInfo_ != null ? other.blockInfo_.Clone() : null;
            loyalty_ = other.loyalty_ != null ? other.loyalty_.Clone() : null;
            objectSourceGrpId_ = other.objectSourceGrpId_;
            name_ = other.name_;
            parentId_ = other.parentId_;
            overlayGrpId_ = other.overlayGrpId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameObjectInfo Clone()
        {
            return new GameObjectInfo(this);
        }

        /// <summary>Field number for the "superTypes" field.</summary>
        public const int SuperTypesFieldNumber = 9;
        private static readonly pb::FieldCodec<SuperType> _repeated_superTypes_codec
            = pb::FieldCodec.ForEnum(74, x => (int)x, x => (SuperType)x);
        private readonly pbc::RepeatedField<SuperType> superTypes_ = new pbc::RepeatedField<SuperType>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<SuperType> SuperTypes
        {
            get { return superTypes_; }
        }

        /// <summary>Field number for the "cardTypes" field.</summary>
        public const int CardTypesFieldNumber = 10;
        private static readonly pb::FieldCodec<CardType> _repeated_cardTypes_codec
            = pb::FieldCodec.ForEnum(82, x => (int)x, x => (CardType)x);
        private readonly pbc::RepeatedField<CardType> cardTypes_ = new pbc::RepeatedField<CardType>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<CardType> CardTypes
        {
            get { return cardTypes_; }
        }

        /// <summary>Field number for the "subtypes" field.</summary>
        public const int SubtypesFieldNumber = 11;
        private static readonly pb::FieldCodec<SubType> _repeated_subtypes_codec
            = pb::FieldCodec.ForEnum(90, x => (int)x, x => (SubType)x);
        private readonly pbc::RepeatedField<SubType> subtypes_ = new pbc::RepeatedField<SubType>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<SubType> Subtypes
        {
            get { return subtypes_; }
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 12;
        private static readonly pb::FieldCodec<CardColor> _repeated_color_codec
            = pb::FieldCodec.ForEnum(98, x => (int)x, x => (CardColor)x);
        private readonly pbc::RepeatedField<CardColor> color_ = new pbc::RepeatedField<CardColor>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<CardColor> Color
        {
            get { return color_; }
        }

        /// <summary>Field number for the "viewers" field.</summary>
        public const int ViewersFieldNumber = 26;
        private static readonly pb::FieldCodec<uint> _repeated_viewers_codec
            = pb::FieldCodec.ForUInt32(210);
        private readonly pbc::RepeatedField<uint> viewers_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Viewers
        {
            get { return viewers_; }
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 30;
        private static readonly pb::FieldCodec<uint> _repeated_abilities_codec
            = pb::FieldCodec.ForUInt32(242);
        private readonly pbc::RepeatedField<uint> abilities_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Abilities
        {
            get { return abilities_; }
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "grpId" field.</summary>
        public const int GrpIdFieldNumber = 2;
        private uint grpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GrpId
        {
            get { return grpId_; }
            set
            {
                grpId_ = value;
            }
        }

        /// <summary>Field number for the "groupId" field.</summary>
        public const int GroupIdFieldNumber = 3;
        private int groupId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GroupId
        {
            get { return groupId_; }
            set
            {
                groupId_ = value;
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 4;
        private GameObjectType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameObjectType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "zoneId" field.</summary>
        public const int ZoneIdFieldNumber = 5;
        private uint zoneId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ZoneId
        {
            get { return zoneId_; }
            set
            {
                zoneId_ = value;
            }
        }

        /// <summary>Field number for the "visibility" field.</summary>
        public const int VisibilityFieldNumber = 6;
        private Visibility visibility_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Visibility Visibility
        {
            get { return visibility_; }
            set
            {
                visibility_ = value;
            }
        }

        /// <summary>Field number for the "ownerSeatId" field.</summary>
        public const int OwnerSeatIdFieldNumber = 7;
        private uint ownerSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OwnerSeatId
        {
            get { return ownerSeatId_; }
            set
            {
                ownerSeatId_ = value;
            }
        }

        /// <summary>Field number for the "controllerSeatId" field.</summary>
        public const int ControllerSeatIdFieldNumber = 8;
        private uint controllerSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ControllerSeatId
        {
            get { return controllerSeatId_; }
            set
            {
                controllerSeatId_ = value;
            }
        }

        /// <summary>Field number for the "power" field.</summary>
        public const int PowerFieldNumber = 13;
        private Int32Value power_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Int32Value Power
        {
            get { return power_; }
            set
            {
                power_ = value;
            }
        }

        /// <summary>Field number for the "toughness" field.</summary>
        public const int ToughnessFieldNumber = 14;
        private Int32Value toughness_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Int32Value Toughness
        {
            get { return toughness_; }
            set
            {
                toughness_ = value;
            }
        }

        /// <summary>Field number for the "isCopy" field.</summary>
        public const int IsCopyFieldNumber = 16;
        private bool isCopy_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsCopy
        {
            get { return isCopy_; }
            set
            {
                isCopy_ = value;
            }
        }

        /// <summary>Field number for the "isTapped" field.</summary>
        public const int IsTappedFieldNumber = 17;
        private bool isTapped_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsTapped
        {
            get { return isTapped_; }
            set
            {
                isTapped_ = value;
            }
        }

        /// <summary>Field number for the "hasSummoningSickness" field.</summary>
        public const int HasSummoningSicknessFieldNumber = 18;
        private bool hasSummoningSickness_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSummoningSickness
        {
            get { return hasSummoningSickness_; }
            set
            {
                hasSummoningSickness_ = value;
            }
        }

        /// <summary>Field number for the "attackState" field.</summary>
        public const int AttackStateFieldNumber = 19;
        private AttackState attackState_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttackState AttackState
        {
            get { return attackState_; }
            set
            {
                attackState_ = value;
            }
        }

        /// <summary>Field number for the "blockState" field.</summary>
        public const int BlockStateFieldNumber = 20;
        private BlockState blockState_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockState BlockState
        {
            get { return blockState_; }
            set
            {
                blockState_ = value;
            }
        }

        /// <summary>Field number for the "damage" field.</summary>
        public const int DamageFieldNumber = 23;
        private uint damage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Damage
        {
            get { return damage_; }
            set
            {
                damage_ = value;
            }
        }

        /// <summary>Field number for the "attackInfo" field.</summary>
        public const int AttackInfoFieldNumber = 24;
        private AttackInfo attackInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttackInfo AttackInfo
        {
            get { return attackInfo_; }
            set
            {
                attackInfo_ = value;
            }
        }

        /// <summary>Field number for the "blockInfo" field.</summary>
        public const int BlockInfoFieldNumber = 25;
        private BlockInfo blockInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockInfo BlockInfo
        {
            get { return blockInfo_; }
            set
            {
                blockInfo_ = value;
            }
        }

        /// <summary>Field number for the "loyalty" field.</summary>
        public const int LoyaltyFieldNumber = 27;
        private UInt32Value loyalty_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UInt32Value Loyalty
        {
            get { return loyalty_; }
            set
            {
                loyalty_ = value;
            }
        }

        /// <summary>Field number for the "objectSourceGrpId" field.</summary>
        public const int ObjectSourceGrpIdFieldNumber = 28;
        private uint objectSourceGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ObjectSourceGrpId
        {
            get { return objectSourceGrpId_; }
            set
            {
                objectSourceGrpId_ = value;
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 29;
        private uint name_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Name
        {
            get { return name_; }
            set
            {
                name_ = value;
            }
        }

        /// <summary>Field number for the "parentId" field.</summary>
        public const int ParentIdFieldNumber = 31;
        private uint parentId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ParentId
        {
            get { return parentId_; }
            set
            {
                parentId_ = value;
            }
        }

        /// <summary>Field number for the "overlayGrpId" field.</summary>
        public const int OverlayGrpIdFieldNumber = 32;
        private uint overlayGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OverlayGrpId
        {
            get { return overlayGrpId_; }
            set
            {
                overlayGrpId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GameObjectInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameObjectInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!superTypes_.Equals(other.superTypes_)) return false;
            if (!cardTypes_.Equals(other.cardTypes_)) return false;
            if (!subtypes_.Equals(other.subtypes_)) return false;
            if (!color_.Equals(other.color_)) return false;
            if (!viewers_.Equals(other.viewers_)) return false;
            if (!abilities_.Equals(other.abilities_)) return false;
            if (InstanceId != other.InstanceId) return false;
            if (GrpId != other.GrpId) return false;
            if (GroupId != other.GroupId) return false;
            if (Type != other.Type) return false;
            if (ZoneId != other.ZoneId) return false;
            if (Visibility != other.Visibility) return false;
            if (OwnerSeatId != other.OwnerSeatId) return false;
            if (ControllerSeatId != other.ControllerSeatId) return false;
            if (!object.Equals(Power, other.Power)) return false;
            if (!object.Equals(Toughness, other.Toughness)) return false;
            if (IsCopy != other.IsCopy) return false;
            if (IsTapped != other.IsTapped) return false;
            if (HasSummoningSickness != other.HasSummoningSickness) return false;
            if (AttackState != other.AttackState) return false;
            if (BlockState != other.BlockState) return false;
            if (Damage != other.Damage) return false;
            if (!object.Equals(AttackInfo, other.AttackInfo)) return false;
            if (!object.Equals(BlockInfo, other.BlockInfo)) return false;
            if (!object.Equals(Loyalty, other.Loyalty)) return false;
            if (ObjectSourceGrpId != other.ObjectSourceGrpId) return false;
            if (Name != other.Name) return false;
            if (ParentId != other.ParentId) return false;
            if (OverlayGrpId != other.OverlayGrpId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= superTypes_.GetHashCode();
            hash ^= cardTypes_.GetHashCode();
            hash ^= subtypes_.GetHashCode();
            hash ^= color_.GetHashCode();
            hash ^= viewers_.GetHashCode();
            hash ^= abilities_.GetHashCode();
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (GrpId != 0) hash ^= GrpId.GetHashCode();
            if (GroupId != 0) hash ^= GroupId.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (ZoneId != 0) hash ^= ZoneId.GetHashCode();
            if (Visibility != 0) hash ^= Visibility.GetHashCode();
            if (OwnerSeatId != 0) hash ^= OwnerSeatId.GetHashCode();
            if (ControllerSeatId != 0) hash ^= ControllerSeatId.GetHashCode();
            if (power_ != null) hash ^= Power.GetHashCode();
            if (toughness_ != null) hash ^= Toughness.GetHashCode();
            if (IsCopy != false) hash ^= IsCopy.GetHashCode();
            if (IsTapped != false) hash ^= IsTapped.GetHashCode();
            if (HasSummoningSickness != false) hash ^= HasSummoningSickness.GetHashCode();
            if (AttackState != 0) hash ^= AttackState.GetHashCode();
            if (BlockState != 0) hash ^= BlockState.GetHashCode();
            if (Damage != 0) hash ^= Damage.GetHashCode();
            if (attackInfo_ != null) hash ^= AttackInfo.GetHashCode();
            if (blockInfo_ != null) hash ^= BlockInfo.GetHashCode();
            if (loyalty_ != null) hash ^= Loyalty.GetHashCode();
            if (ObjectSourceGrpId != 0) hash ^= ObjectSourceGrpId.GetHashCode();
            if (Name != 0) hash ^= Name.GetHashCode();
            if (ParentId != 0) hash ^= ParentId.GetHashCode();
            if (OverlayGrpId != 0) hash ^= OverlayGrpId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(InstanceId);
            }
            if (GrpId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(GrpId);
            }
            if (GroupId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(GroupId);
            }
            if (Type != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)Type);
            }
            if (ZoneId != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(ZoneId);
            }
            if (Visibility != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)Visibility);
            }
            if (OwnerSeatId != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(OwnerSeatId);
            }
            if (ControllerSeatId != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(ControllerSeatId);
            }
            superTypes_.WriteTo(output, _repeated_superTypes_codec);
            cardTypes_.WriteTo(output, _repeated_cardTypes_codec);
            subtypes_.WriteTo(output, _repeated_subtypes_codec);
            color_.WriteTo(output, _repeated_color_codec);
            if (power_ != null)
            {
                output.WriteRawTag(106);
                output.WriteMessage(Power);
            }
            if (toughness_ != null)
            {
                output.WriteRawTag(114);
                output.WriteMessage(Toughness);
            }
            if (IsCopy != false)
            {
                output.WriteRawTag(128, 1);
                output.WriteBool(IsCopy);
            }
            if (IsTapped != false)
            {
                output.WriteRawTag(136, 1);
                output.WriteBool(IsTapped);
            }
            if (HasSummoningSickness != false)
            {
                output.WriteRawTag(144, 1);
                output.WriteBool(HasSummoningSickness);
            }
            if (AttackState != 0)
            {
                output.WriteRawTag(152, 1);
                output.WriteEnum((int)AttackState);
            }
            if (BlockState != 0)
            {
                output.WriteRawTag(160, 1);
                output.WriteEnum((int)BlockState);
            }
            if (Damage != 0)
            {
                output.WriteRawTag(184, 1);
                output.WriteUInt32(Damage);
            }
            if (attackInfo_ != null)
            {
                output.WriteRawTag(194, 1);
                output.WriteMessage(AttackInfo);
            }
            if (blockInfo_ != null)
            {
                output.WriteRawTag(202, 1);
                output.WriteMessage(BlockInfo);
            }
            viewers_.WriteTo(output, _repeated_viewers_codec);
            if (loyalty_ != null)
            {
                output.WriteRawTag(218, 1);
                output.WriteMessage(Loyalty);
            }
            if (ObjectSourceGrpId != 0)
            {
                output.WriteRawTag(224, 1);
                output.WriteUInt32(ObjectSourceGrpId);
            }
            if (Name != 0)
            {
                output.WriteRawTag(232, 1);
                output.WriteUInt32(Name);
            }
            abilities_.WriteTo(output, _repeated_abilities_codec);
            if (ParentId != 0)
            {
                output.WriteRawTag(248, 1);
                output.WriteUInt32(ParentId);
            }
            if (OverlayGrpId != 0)
            {
                output.WriteRawTag(128, 2);
                output.WriteUInt32(OverlayGrpId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += superTypes_.CalculateSize(_repeated_superTypes_codec);
            size += cardTypes_.CalculateSize(_repeated_cardTypes_codec);
            size += subtypes_.CalculateSize(_repeated_subtypes_codec);
            size += color_.CalculateSize(_repeated_color_codec);
            size += viewers_.CalculateSize(_repeated_viewers_codec);
            size += abilities_.CalculateSize(_repeated_abilities_codec);
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (GrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GrpId);
            }
            if (GroupId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
            }
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (ZoneId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
            }
            if (Visibility != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Visibility);
            }
            if (OwnerSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerSeatId);
            }
            if (ControllerSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerSeatId);
            }
            if (power_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Power);
            }
            if (toughness_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Toughness);
            }
            if (IsCopy != false)
            {
                size += 2 + 1;
            }
            if (IsTapped != false)
            {
                size += 2 + 1;
            }
            if (HasSummoningSickness != false)
            {
                size += 2 + 1;
            }
            if (AttackState != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)AttackState);
            }
            if (BlockState != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)BlockState);
            }
            if (Damage != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Damage);
            }
            if (attackInfo_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackInfo);
            }
            if (blockInfo_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(BlockInfo);
            }
            if (loyalty_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Loyalty);
            }
            if (ObjectSourceGrpId != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ObjectSourceGrpId);
            }
            if (Name != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Name);
            }
            if (ParentId != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ParentId);
            }
            if (OverlayGrpId != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OverlayGrpId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameObjectInfo other)
        {
            if (other == null)
            {
                return;
            }
            superTypes_.Add(other.superTypes_);
            cardTypes_.Add(other.cardTypes_);
            subtypes_.Add(other.subtypes_);
            color_.Add(other.color_);
            viewers_.Add(other.viewers_);
            abilities_.Add(other.abilities_);
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.GrpId != 0)
            {
                GrpId = other.GrpId;
            }
            if (other.GroupId != 0)
            {
                GroupId = other.GroupId;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.ZoneId != 0)
            {
                ZoneId = other.ZoneId;
            }
            if (other.Visibility != 0)
            {
                Visibility = other.Visibility;
            }
            if (other.OwnerSeatId != 0)
            {
                OwnerSeatId = other.OwnerSeatId;
            }
            if (other.ControllerSeatId != 0)
            {
                ControllerSeatId = other.ControllerSeatId;
            }
            if (other.power_ != null)
            {
                if (power_ == null)
                {
                    power_ = new Int32Value();
                }
                Power.MergeFrom(other.Power);
            }
            if (other.toughness_ != null)
            {
                if (toughness_ == null)
                {
                    toughness_ = new Int32Value();
                }
                Toughness.MergeFrom(other.Toughness);
            }
            if (other.IsCopy != false)
            {
                IsCopy = other.IsCopy;
            }
            if (other.IsTapped != false)
            {
                IsTapped = other.IsTapped;
            }
            if (other.HasSummoningSickness != false)
            {
                HasSummoningSickness = other.HasSummoningSickness;
            }
            if (other.AttackState != 0)
            {
                AttackState = other.AttackState;
            }
            if (other.BlockState != 0)
            {
                BlockState = other.BlockState;
            }
            if (other.Damage != 0)
            {
                Damage = other.Damage;
            }
            if (other.attackInfo_ != null)
            {
                if (attackInfo_ == null)
                {
                    attackInfo_ = new AttackInfo();
                }
                AttackInfo.MergeFrom(other.AttackInfo);
            }
            if (other.blockInfo_ != null)
            {
                if (blockInfo_ == null)
                {
                    blockInfo_ = new BlockInfo();
                }
                BlockInfo.MergeFrom(other.BlockInfo);
            }
            if (other.loyalty_ != null)
            {
                if (loyalty_ == null)
                {
                    loyalty_ = new UInt32Value();
                }
                Loyalty.MergeFrom(other.Loyalty);
            }
            if (other.ObjectSourceGrpId != 0)
            {
                ObjectSourceGrpId = other.ObjectSourceGrpId;
            }
            if (other.Name != 0)
            {
                Name = other.Name;
            }
            if (other.ParentId != 0)
            {
                ParentId = other.ParentId;
            }
            if (other.OverlayGrpId != 0)
            {
                OverlayGrpId = other.OverlayGrpId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            GrpId = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            GroupId = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            type_ = (GameObjectType)input.ReadEnum();
                            break;
                        }
                    case 40:
                        {
                            ZoneId = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            visibility_ = (Visibility)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            OwnerSeatId = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            ControllerSeatId = input.ReadUInt32();
                            break;
                        }
                    case 74:
                    case 72:
                        {
                            superTypes_.AddEntriesFrom(input, _repeated_superTypes_codec);
                            break;
                        }
                    case 82:
                    case 80:
                        {
                            cardTypes_.AddEntriesFrom(input, _repeated_cardTypes_codec);
                            break;
                        }
                    case 90:
                    case 88:
                        {
                            subtypes_.AddEntriesFrom(input, _repeated_subtypes_codec);
                            break;
                        }
                    case 98:
                    case 96:
                        {
                            color_.AddEntriesFrom(input, _repeated_color_codec);
                            break;
                        }
                    case 106:
                        {
                            if (power_ == null)
                            {
                                power_ = new Int32Value();
                            }
                            input.ReadMessage(power_);
                            break;
                        }
                    case 114:
                        {
                            if (toughness_ == null)
                            {
                                toughness_ = new Int32Value();
                            }
                            input.ReadMessage(toughness_);
                            break;
                        }
                    case 128:
                        {
                            IsCopy = input.ReadBool();
                            break;
                        }
                    case 136:
                        {
                            IsTapped = input.ReadBool();
                            break;
                        }
                    case 144:
                        {
                            HasSummoningSickness = input.ReadBool();
                            break;
                        }
                    case 152:
                        {
                            attackState_ = (AttackState)input.ReadEnum();
                            break;
                        }
                    case 160:
                        {
                            blockState_ = (BlockState)input.ReadEnum();
                            break;
                        }
                    case 184:
                        {
                            Damage = input.ReadUInt32();
                            break;
                        }
                    case 194:
                        {
                            if (attackInfo_ == null)
                            {
                                attackInfo_ = new AttackInfo();
                            }
                            input.ReadMessage(attackInfo_);
                            break;
                        }
                    case 202:
                        {
                            if (blockInfo_ == null)
                            {
                                blockInfo_ = new BlockInfo();
                            }
                            input.ReadMessage(blockInfo_);
                            break;
                        }
                    case 210:
                    case 208:
                        {
                            viewers_.AddEntriesFrom(input, _repeated_viewers_codec);
                            break;
                        }
                    case 218:
                        {
                            if (loyalty_ == null)
                            {
                                loyalty_ = new UInt32Value();
                            }
                            input.ReadMessage(loyalty_);
                            break;
                        }
                    case 224:
                        {
                            ObjectSourceGrpId = input.ReadUInt32();
                            break;
                        }
                    case 232:
                        {
                            Name = input.ReadUInt32();
                            break;
                        }
                    case 242:
                    case 240:
                        {
                            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                            break;
                        }
                    case 248:
                        {
                            ParentId = input.ReadUInt32();
                            break;
                        }
                    case 256:
                        {
                            OverlayGrpId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GameStateMessage : pb::IMessage<GameStateMessage>
    {
        private static readonly pb::MessageParser<GameStateMessage> _parser = new pb::MessageParser<GameStateMessage>(() => new GameStateMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameStateMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[143]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameStateMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameStateMessage(GameStateMessage other) : this()
        {
            teams_ = other.teams_.Clone();
            players_ = other.players_.Clone();
            zones_ = other.zones_.Clone();
            gameObjects_ = other.gameObjects_.Clone();
            annotations_ = other.annotations_.Clone();
            diffDeletedInstanceIds_ = other.diffDeletedInstanceIds_.Clone();
            timers_ = other.timers_.Clone();
            actions_ = other.actions_.Clone();
            type_ = other.type_;
            gameStateId_ = other.gameStateId_;
            gameInfo_ = other.gameInfo_ != null ? other.gameInfo_.Clone() : null;
            turnInfo_ = other.turnInfo_ != null ? other.turnInfo_.Clone() : null;
            pendingMessageCount_ = other.pendingMessageCount_;
            prevGameStateId_ = other.prevGameStateId_;
            update_ = other.update_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameStateMessage Clone()
        {
            return new GameStateMessage(this);
        }

        /// <summary>Field number for the "teams" field.</summary>
        public const int TeamsFieldNumber = 4;
        private static readonly pb::FieldCodec<TeamInfo> _repeated_teams_codec
            = pb::FieldCodec.ForMessage(34, TeamInfo.Parser);
        private readonly pbc::RepeatedField<TeamInfo> teams_ = new pbc::RepeatedField<TeamInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<TeamInfo> Teams
        {
            get { return teams_; }
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 5;
        private static readonly pb::FieldCodec<PlayerInfo> _repeated_players_codec
            = pb::FieldCodec.ForMessage(42, PlayerInfo.Parser);
        private readonly pbc::RepeatedField<PlayerInfo> players_ = new pbc::RepeatedField<PlayerInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<PlayerInfo> Players
        {
            get { return players_; }
        }

        /// <summary>Field number for the "zones" field.</summary>
        public const int ZonesFieldNumber = 7;
        private static readonly pb::FieldCodec<ZoneInfo> _repeated_zones_codec
            = pb::FieldCodec.ForMessage(58, ZoneInfo.Parser);
        private readonly pbc::RepeatedField<ZoneInfo> zones_ = new pbc::RepeatedField<ZoneInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ZoneInfo> Zones
        {
            get { return zones_; }
        }

        /// <summary>Field number for the "gameObjects" field.</summary>
        public const int GameObjectsFieldNumber = 8;
        private static readonly pb::FieldCodec<GameObjectInfo> _repeated_gameObjects_codec
            = pb::FieldCodec.ForMessage(66, GameObjectInfo.Parser);
        private readonly pbc::RepeatedField<GameObjectInfo> gameObjects_ = new pbc::RepeatedField<GameObjectInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<GameObjectInfo> GameObjects
        {
            get { return gameObjects_; }
        }

        /// <summary>Field number for the "annotations" field.</summary>
        public const int AnnotationsFieldNumber = 9;
        private static readonly pb::FieldCodec<AnnotationInfo> _repeated_annotations_codec
            = pb::FieldCodec.ForMessage(74, AnnotationInfo.Parser);
        private readonly pbc::RepeatedField<AnnotationInfo> annotations_ = new pbc::RepeatedField<AnnotationInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<AnnotationInfo> Annotations
        {
            get { return annotations_; }
        }

        /// <summary>Field number for the "diffDeletedInstanceIds" field.</summary>
        public const int DiffDeletedInstanceIdsFieldNumber = 10;
        private static readonly pb::FieldCodec<uint> _repeated_diffDeletedInstanceIds_codec
            = pb::FieldCodec.ForUInt32(82);
        private readonly pbc::RepeatedField<uint> diffDeletedInstanceIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> DiffDeletedInstanceIds
        {
            get { return diffDeletedInstanceIds_; }
        }

        /// <summary>Field number for the "timers" field.</summary>
        public const int TimersFieldNumber = 13;
        private static readonly pb::FieldCodec<TimerInfo> _repeated_timers_codec
            = pb::FieldCodec.ForMessage(106, TimerInfo.Parser);
        private readonly pbc::RepeatedField<TimerInfo> timers_ = new pbc::RepeatedField<TimerInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<TimerInfo> Timers
        {
            get { return timers_; }
        }

        /// <summary>Field number for the "actions" field.</summary>
        public const int ActionsFieldNumber = 15;
        private static readonly pb::FieldCodec<ActionInfo> _repeated_actions_codec
            = pb::FieldCodec.ForMessage(122, ActionInfo.Parser);
        private readonly pbc::RepeatedField<ActionInfo> actions_ = new pbc::RepeatedField<ActionInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ActionInfo> Actions
        {
            get { return actions_; }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private GameStateType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameStateType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "gameStateId" field.</summary>
        public const int GameStateIdFieldNumber = 2;
        private uint gameStateId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameStateId
        {
            get { return gameStateId_; }
            set
            {
                gameStateId_ = value;
            }
        }

        /// <summary>Field number for the "gameInfo" field.</summary>
        public const int GameInfoFieldNumber = 3;
        private GameInfo gameInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameInfo GameInfo
        {
            get { return gameInfo_; }
            set
            {
                gameInfo_ = value;
            }
        }

        /// <summary>Field number for the "turnInfo" field.</summary>
        public const int TurnInfoFieldNumber = 6;
        private TurnInfo turnInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurnInfo TurnInfo
        {
            get { return turnInfo_; }
            set
            {
                turnInfo_ = value;
            }
        }

        /// <summary>Field number for the "pendingMessageCount" field.</summary>
        public const int PendingMessageCountFieldNumber = 11;
        private uint pendingMessageCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PendingMessageCount
        {
            get { return pendingMessageCount_; }
            set
            {
                pendingMessageCount_ = value;
            }
        }

        /// <summary>Field number for the "prevGameStateId" field.</summary>
        public const int PrevGameStateIdFieldNumber = 12;
        private uint prevGameStateId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PrevGameStateId
        {
            get { return prevGameStateId_; }
            set
            {
                prevGameStateId_ = value;
            }
        }

        /// <summary>Field number for the "update" field.</summary>
        public const int UpdateFieldNumber = 14;
        private GameStateUpdate update_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameStateUpdate Update
        {
            get { return update_; }
            set
            {
                update_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GameStateMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameStateMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!teams_.Equals(other.teams_)) return false;
            if (!players_.Equals(other.players_)) return false;
            if (!zones_.Equals(other.zones_)) return false;
            if (!gameObjects_.Equals(other.gameObjects_)) return false;
            if (!annotations_.Equals(other.annotations_)) return false;
            if (!diffDeletedInstanceIds_.Equals(other.diffDeletedInstanceIds_)) return false;
            if (!timers_.Equals(other.timers_)) return false;
            if (!actions_.Equals(other.actions_)) return false;
            if (Type != other.Type) return false;
            if (GameStateId != other.GameStateId) return false;
            if (!object.Equals(GameInfo, other.GameInfo)) return false;
            if (!object.Equals(TurnInfo, other.TurnInfo)) return false;
            if (PendingMessageCount != other.PendingMessageCount) return false;
            if (PrevGameStateId != other.PrevGameStateId) return false;
            if (Update != other.Update) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= teams_.GetHashCode();
            hash ^= players_.GetHashCode();
            hash ^= zones_.GetHashCode();
            hash ^= gameObjects_.GetHashCode();
            hash ^= annotations_.GetHashCode();
            hash ^= diffDeletedInstanceIds_.GetHashCode();
            hash ^= timers_.GetHashCode();
            hash ^= actions_.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (GameStateId != 0) hash ^= GameStateId.GetHashCode();
            if (gameInfo_ != null) hash ^= GameInfo.GetHashCode();
            if (turnInfo_ != null) hash ^= TurnInfo.GetHashCode();
            if (PendingMessageCount != 0) hash ^= PendingMessageCount.GetHashCode();
            if (PrevGameStateId != 0) hash ^= PrevGameStateId.GetHashCode();
            if (Update != 0) hash ^= Update.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (GameStateId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(GameStateId);
            }
            if (gameInfo_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(GameInfo);
            }
            teams_.WriteTo(output, _repeated_teams_codec);
            players_.WriteTo(output, _repeated_players_codec);
            if (turnInfo_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(TurnInfo);
            }
            zones_.WriteTo(output, _repeated_zones_codec);
            gameObjects_.WriteTo(output, _repeated_gameObjects_codec);
            annotations_.WriteTo(output, _repeated_annotations_codec);
            diffDeletedInstanceIds_.WriteTo(output, _repeated_diffDeletedInstanceIds_codec);
            if (PendingMessageCount != 0)
            {
                output.WriteRawTag(88);
                output.WriteUInt32(PendingMessageCount);
            }
            if (PrevGameStateId != 0)
            {
                output.WriteRawTag(96);
                output.WriteUInt32(PrevGameStateId);
            }
            timers_.WriteTo(output, _repeated_timers_codec);
            if (Update != 0)
            {
                output.WriteRawTag(112);
                output.WriteEnum((int)Update);
            }
            actions_.WriteTo(output, _repeated_actions_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += teams_.CalculateSize(_repeated_teams_codec);
            size += players_.CalculateSize(_repeated_players_codec);
            size += zones_.CalculateSize(_repeated_zones_codec);
            size += gameObjects_.CalculateSize(_repeated_gameObjects_codec);
            size += annotations_.CalculateSize(_repeated_annotations_codec);
            size += diffDeletedInstanceIds_.CalculateSize(_repeated_diffDeletedInstanceIds_codec);
            size += timers_.CalculateSize(_repeated_timers_codec);
            size += actions_.CalculateSize(_repeated_actions_codec);
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (GameStateId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameStateId);
            }
            if (gameInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
            }
            if (turnInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TurnInfo);
            }
            if (PendingMessageCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PendingMessageCount);
            }
            if (PrevGameStateId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrevGameStateId);
            }
            if (Update != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Update);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameStateMessage other)
        {
            if (other == null)
            {
                return;
            }
            teams_.Add(other.teams_);
            players_.Add(other.players_);
            zones_.Add(other.zones_);
            gameObjects_.Add(other.gameObjects_);
            annotations_.Add(other.annotations_);
            diffDeletedInstanceIds_.Add(other.diffDeletedInstanceIds_);
            timers_.Add(other.timers_);
            actions_.Add(other.actions_);
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.GameStateId != 0)
            {
                GameStateId = other.GameStateId;
            }
            if (other.gameInfo_ != null)
            {
                if (gameInfo_ == null)
                {
                    gameInfo_ = new GameInfo();
                }
                GameInfo.MergeFrom(other.GameInfo);
            }
            if (other.turnInfo_ != null)
            {
                if (turnInfo_ == null)
                {
                    turnInfo_ = new TurnInfo();
                }
                TurnInfo.MergeFrom(other.TurnInfo);
            }
            if (other.PendingMessageCount != 0)
            {
                PendingMessageCount = other.PendingMessageCount;
            }
            if (other.PrevGameStateId != 0)
            {
                PrevGameStateId = other.PrevGameStateId;
            }
            if (other.Update != 0)
            {
                Update = other.Update;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            type_ = (GameStateType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            GameStateId = input.ReadUInt32();
                            break;
                        }
                    case 26:
                        {
                            if (gameInfo_ == null)
                            {
                                gameInfo_ = new GameInfo();
                            }
                            input.ReadMessage(gameInfo_);
                            break;
                        }
                    case 34:
                        {
                            teams_.AddEntriesFrom(input, _repeated_teams_codec);
                            break;
                        }
                    case 42:
                        {
                            players_.AddEntriesFrom(input, _repeated_players_codec);
                            break;
                        }
                    case 50:
                        {
                            if (turnInfo_ == null)
                            {
                                turnInfo_ = new TurnInfo();
                            }
                            input.ReadMessage(turnInfo_);
                            break;
                        }
                    case 58:
                        {
                            zones_.AddEntriesFrom(input, _repeated_zones_codec);
                            break;
                        }
                    case 66:
                        {
                            gameObjects_.AddEntriesFrom(input, _repeated_gameObjects_codec);
                            break;
                        }
                    case 74:
                        {
                            annotations_.AddEntriesFrom(input, _repeated_annotations_codec);
                            break;
                        }
                    case 82:
                    case 80:
                        {
                            diffDeletedInstanceIds_.AddEntriesFrom(input, _repeated_diffDeletedInstanceIds_codec);
                            break;
                        }
                    case 88:
                        {
                            PendingMessageCount = input.ReadUInt32();
                            break;
                        }
                    case 96:
                        {
                            PrevGameStateId = input.ReadUInt32();
                            break;
                        }
                    case 106:
                        {
                            timers_.AddEntriesFrom(input, _repeated_timers_codec);
                            break;
                        }
                    case 112:
                        {
                            update_ = (GameStateUpdate)input.ReadEnum();
                            break;
                        }
                    case 122:
                        {
                            actions_.AddEntriesFrom(input, _repeated_actions_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GameStateRedactorConfiguration : pb::IMessage<GameStateRedactorConfiguration>
    {
        private static readonly pb::MessageParser<GameStateRedactorConfiguration> _parser = new pb::MessageParser<GameStateRedactorConfiguration>(() => new GameStateRedactorConfiguration());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameStateRedactorConfiguration> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[144]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameStateRedactorConfiguration()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameStateRedactorConfiguration(GameStateRedactorConfiguration other) : this()
        {
            enableRedaction_ = other.enableRedaction_;
            enableForceDiff_ = other.enableForceDiff_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameStateRedactorConfiguration Clone()
        {
            return new GameStateRedactorConfiguration(this);
        }

        /// <summary>Field number for the "enableRedaction" field.</summary>
        public const int EnableRedactionFieldNumber = 1;
        private bool enableRedaction_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EnableRedaction
        {
            get { return enableRedaction_; }
            set
            {
                enableRedaction_ = value;
            }
        }

        /// <summary>Field number for the "enableForceDiff" field.</summary>
        public const int EnableForceDiffFieldNumber = 2;
        private bool enableForceDiff_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EnableForceDiff
        {
            get { return enableForceDiff_; }
            set
            {
                enableForceDiff_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GameStateRedactorConfiguration);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameStateRedactorConfiguration other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EnableRedaction != other.EnableRedaction) return false;
            if (EnableForceDiff != other.EnableForceDiff) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EnableRedaction != false) hash ^= EnableRedaction.GetHashCode();
            if (EnableForceDiff != false) hash ^= EnableForceDiff.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EnableRedaction != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(EnableRedaction);
            }
            if (EnableForceDiff != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(EnableForceDiff);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EnableRedaction != false)
            {
                size += 1 + 1;
            }
            if (EnableForceDiff != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameStateRedactorConfiguration other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EnableRedaction != false)
            {
                EnableRedaction = other.EnableRedaction;
            }
            if (other.EnableForceDiff != false)
            {
                EnableForceDiff = other.EnableForceDiff;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            EnableRedaction = input.ReadBool();
                            break;
                        }
                    case 16:
                        {
                            EnableForceDiff = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GatherReq : pb::IMessage<GatherReq>
    {
        private static readonly pb::MessageParser<GatherReq> _parser = new pb::MessageParser<GatherReq>(() => new GatherReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GatherReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[145]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GatherReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GatherReq(GatherReq other) : this()
        {
            sources_ = other.sources_.Clone();
            optionIndex_ = other.optionIndex_;
            destinationId_ = other.destinationId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GatherReq Clone()
        {
            return new GatherReq(this);
        }

        /// <summary>Field number for the "sources" field.</summary>
        public const int SourcesFieldNumber = 3;
        private static readonly pb::FieldCodec<GatherSource> _repeated_sources_codec
            = pb::FieldCodec.ForMessage(26, GatherSource.Parser);
        private readonly pbc::RepeatedField<GatherSource> sources_ = new pbc::RepeatedField<GatherSource>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<GatherSource> Sources
        {
            get { return sources_; }
        }

        /// <summary>Field number for the "optionIndex" field.</summary>
        public const int OptionIndexFieldNumber = 1;
        private uint optionIndex_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OptionIndex
        {
            get { return optionIndex_; }
            set
            {
                optionIndex_ = value;
            }
        }

        /// <summary>Field number for the "destinationId" field.</summary>
        public const int DestinationIdFieldNumber = 2;
        private uint destinationId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DestinationId
        {
            get { return destinationId_; }
            set
            {
                destinationId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GatherReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GatherReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!sources_.Equals(other.sources_)) return false;
            if (OptionIndex != other.OptionIndex) return false;
            if (DestinationId != other.DestinationId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= sources_.GetHashCode();
            if (OptionIndex != 0) hash ^= OptionIndex.GetHashCode();
            if (DestinationId != 0) hash ^= DestinationId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OptionIndex != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OptionIndex);
            }
            if (DestinationId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(DestinationId);
            }
            sources_.WriteTo(output, _repeated_sources_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += sources_.CalculateSize(_repeated_sources_codec);
            if (OptionIndex != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptionIndex);
            }
            if (DestinationId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DestinationId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GatherReq other)
        {
            if (other == null)
            {
                return;
            }
            sources_.Add(other.sources_);
            if (other.OptionIndex != 0)
            {
                OptionIndex = other.OptionIndex;
            }
            if (other.DestinationId != 0)
            {
                DestinationId = other.DestinationId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            OptionIndex = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            DestinationId = input.ReadUInt32();
                            break;
                        }
                    case 26:
                        {
                            sources_.AddEntriesFrom(input, _repeated_sources_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GatherResp : pb::IMessage<GatherResp>
    {
        private static readonly pb::MessageParser<GatherResp> _parser = new pb::MessageParser<GatherResp>(() => new GatherResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GatherResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[146]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GatherResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GatherResp(GatherResp other) : this()
        {
            gatherings_ = other.gatherings_.Clone();
            optionIndex_ = other.optionIndex_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GatherResp Clone()
        {
            return new GatherResp(this);
        }

        /// <summary>Field number for the "gatherings" field.</summary>
        public const int GatheringsFieldNumber = 2;
        private static readonly pb::FieldCodec<Gathering> _repeated_gatherings_codec
            = pb::FieldCodec.ForMessage(18, Gathering.Parser);
        private readonly pbc::RepeatedField<Gathering> gatherings_ = new pbc::RepeatedField<Gathering>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Gathering> Gatherings
        {
            get { return gatherings_; }
        }

        /// <summary>Field number for the "optionIndex" field.</summary>
        public const int OptionIndexFieldNumber = 1;
        private uint optionIndex_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OptionIndex
        {
            get { return optionIndex_; }
            set
            {
                optionIndex_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GatherResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GatherResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!gatherings_.Equals(other.gatherings_)) return false;
            if (OptionIndex != other.OptionIndex) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= gatherings_.GetHashCode();
            if (OptionIndex != 0) hash ^= OptionIndex.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OptionIndex != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OptionIndex);
            }
            gatherings_.WriteTo(output, _repeated_gatherings_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += gatherings_.CalculateSize(_repeated_gatherings_codec);
            if (OptionIndex != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptionIndex);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GatherResp other)
        {
            if (other == null)
            {
                return;
            }
            gatherings_.Add(other.gatherings_);
            if (other.OptionIndex != 0)
            {
                OptionIndex = other.OptionIndex;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            OptionIndex = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            gatherings_.AddEntriesFrom(input, _repeated_gatherings_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GatherSource : pb::IMessage<GatherSource>
    {
        private static readonly pb::MessageParser<GatherSource> _parser = new pb::MessageParser<GatherSource>(() => new GatherSource());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GatherSource> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[147]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GatherSource()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GatherSource(GatherSource other) : this()
        {
            sourceId_ = other.sourceId_;
            minAmount_ = other.minAmount_;
            maxAmount_ = other.maxAmount_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GatherSource Clone()
        {
            return new GatherSource(this);
        }

        /// <summary>Field number for the "sourceId" field.</summary>
        public const int SourceIdFieldNumber = 1;
        private uint sourceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SourceId
        {
            get { return sourceId_; }
            set
            {
                sourceId_ = value;
            }
        }

        /// <summary>Field number for the "minAmount" field.</summary>
        public const int MinAmountFieldNumber = 2;
        private uint minAmount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinAmount
        {
            get { return minAmount_; }
            set
            {
                minAmount_ = value;
            }
        }

        /// <summary>Field number for the "maxAmount" field.</summary>
        public const int MaxAmountFieldNumber = 3;
        private uint maxAmount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxAmount
        {
            get { return maxAmount_; }
            set
            {
                maxAmount_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GatherSource);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GatherSource other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SourceId != other.SourceId) return false;
            if (MinAmount != other.MinAmount) return false;
            if (MaxAmount != other.MaxAmount) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SourceId != 0) hash ^= SourceId.GetHashCode();
            if (MinAmount != 0) hash ^= MinAmount.GetHashCode();
            if (MaxAmount != 0) hash ^= MaxAmount.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SourceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SourceId);
            }
            if (MinAmount != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MinAmount);
            }
            if (MaxAmount != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MaxAmount);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SourceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceId);
            }
            if (MinAmount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinAmount);
            }
            if (MaxAmount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxAmount);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GatherSource other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SourceId != 0)
            {
                SourceId = other.SourceId;
            }
            if (other.MinAmount != 0)
            {
                MinAmount = other.MinAmount;
            }
            if (other.MaxAmount != 0)
            {
                MaxAmount = other.MaxAmount;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SourceId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            MinAmount = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            MaxAmount = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Gathering : pb::IMessage<Gathering>
    {
        private static readonly pb::MessageParser<Gathering> _parser = new pb::MessageParser<Gathering>(() => new Gathering());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Gathering> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[148]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Gathering()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Gathering(Gathering other) : this()
        {
            instanceId_ = other.instanceId_;
            amount_ = other.amount_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Gathering Clone()
        {
            return new Gathering(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private uint amount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Amount
        {
            get { return amount_; }
            set
            {
                amount_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Gathering);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Gathering other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            if (Amount != other.Amount) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (Amount != 0) hash ^= Amount.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(InstanceId);
            }
            if (Amount != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Amount);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (Amount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Gathering other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.Amount != 0)
            {
                Amount = other.Amount;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            Amount = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GeneralConfiguration : pb::IMessage<GeneralConfiguration>
    {
        private static readonly pb::MessageParser<GeneralConfiguration> _parser = new pb::MessageParser<GeneralConfiguration>(() => new GeneralConfiguration());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GeneralConfiguration> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[149]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeneralConfiguration()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeneralConfiguration(GeneralConfiguration other) : this()
        {
            operationMode_ = other.operationMode_;
            maxLogLevel_ = other.maxLogLevel_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeneralConfiguration Clone()
        {
            return new GeneralConfiguration(this);
        }

        /// <summary>Field number for the "operationMode" field.</summary>
        public const int OperationModeFieldNumber = 1;
        private GRETHHostOperationMode operationMode_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostOperationMode OperationMode
        {
            get { return operationMode_; }
            set
            {
                operationMode_ = value;
            }
        }

        /// <summary>Field number for the "maxLogLevel" field.</summary>
        public const int MaxLogLevelFieldNumber = 2;
        private uint maxLogLevel_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxLogLevel
        {
            get { return maxLogLevel_; }
            set
            {
                maxLogLevel_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GeneralConfiguration);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GeneralConfiguration other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (OperationMode != other.OperationMode) return false;
            if (MaxLogLevel != other.MaxLogLevel) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (OperationMode != 0) hash ^= OperationMode.GetHashCode();
            if (MaxLogLevel != 0) hash ^= MaxLogLevel.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OperationMode != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)OperationMode);
            }
            if (MaxLogLevel != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MaxLogLevel);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (OperationMode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)OperationMode);
            }
            if (MaxLogLevel != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxLogLevel);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GeneralConfiguration other)
        {
            if (other == null)
            {
                return;
            }
            if (other.OperationMode != 0)
            {
                OperationMode = other.OperationMode;
            }
            if (other.MaxLogLevel != 0)
            {
                MaxLogLevel = other.MaxLogLevel;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            operationMode_ = (GRETHHostOperationMode)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            MaxLogLevel = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetGameRoomIdsRequest : pb::IMessage<GetGameRoomIdsRequest>
    {
        private static readonly pb::MessageParser<GetGameRoomIdsRequest> _parser = new pb::MessageParser<GetGameRoomIdsRequest>(() => new GetGameRoomIdsRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetGameRoomIdsRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[150]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomIdsRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomIdsRequest(GetGameRoomIdsRequest other) : this()
        {
            eventId_ = other.eventId_;
            gameRoomStateTypeFilter_ = other.gameRoomStateTypeFilter_.Clone();
            gameRoomType_ = other.gameRoomType_;
            includeInvisibleRooms_ = other.includeInvisibleRooms_;
            includeReservedRooms_ = other.includeReservedRooms_;
            sortFilterPagingOptions_ = other.sortFilterPagingOptions_ != null ? other.sortFilterPagingOptions_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomIdsRequest Clone()
        {
            return new GetGameRoomIdsRequest(this);
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 1;
        private string eventId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "gameRoomStateTypeFilter" field.</summary>
        public const int GameRoomStateTypeFilterFieldNumber = 5;
        private static readonly pb::FieldCodec<MatchGameRoomStateType> _repeated_gameRoomStateTypeFilter_codec
            = pb::FieldCodec.ForEnum(42, x => (int)x, x => (MatchGameRoomStateType)x);
        private readonly pbc::RepeatedField<MatchGameRoomStateType> gameRoomStateTypeFilter_ = new pbc::RepeatedField<MatchGameRoomStateType>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<MatchGameRoomStateType> GameRoomStateTypeFilter
        {
            get { return gameRoomStateTypeFilter_; }
        }

        /// <summary>Field number for the "gameRoomType" field.</summary>
        public const int GameRoomTypeFieldNumber = 2;
        private GameRoomType gameRoomType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameRoomType GameRoomType
        {
            get { return gameRoomType_; }
            set
            {
                gameRoomType_ = value;
            }
        }

        /// <summary>Field number for the "includeInvisibleRooms" field.</summary>
        public const int IncludeInvisibleRoomsFieldNumber = 7;
        private bool includeInvisibleRooms_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IncludeInvisibleRooms
        {
            get { return includeInvisibleRooms_; }
            set
            {
                includeInvisibleRooms_ = value;
            }
        }

        /// <summary>Field number for the "includeReservedRooms" field.</summary>
        public const int IncludeReservedRoomsFieldNumber = 8;
        private bool includeReservedRooms_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IncludeReservedRooms
        {
            get { return includeReservedRooms_; }
            set
            {
                includeReservedRooms_ = value;
            }
        }

        /// <summary>Field number for the "sortFilterPagingOptions" field.</summary>
        public const int SortFilterPagingOptionsFieldNumber = 10;
        private SortFilterPagingOptions sortFilterPagingOptions_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SortFilterPagingOptions SortFilterPagingOptions
        {
            get { return sortFilterPagingOptions_; }
            set
            {
                sortFilterPagingOptions_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetGameRoomIdsRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetGameRoomIdsRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventId != other.EventId) return false;
            if (!gameRoomStateTypeFilter_.Equals(other.gameRoomStateTypeFilter_)) return false;
            if (GameRoomType != other.GameRoomType) return false;
            if (IncludeInvisibleRooms != other.IncludeInvisibleRooms) return false;
            if (IncludeReservedRooms != other.IncludeReservedRooms) return false;
            if (!object.Equals(SortFilterPagingOptions, other.SortFilterPagingOptions)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventId.Length != 0) hash ^= EventId.GetHashCode();
            hash ^= gameRoomStateTypeFilter_.GetHashCode();
            if (GameRoomType != 0) hash ^= GameRoomType.GetHashCode();
            if (IncludeInvisibleRooms != false) hash ^= IncludeInvisibleRooms.GetHashCode();
            if (IncludeReservedRooms != false) hash ^= IncludeReservedRooms.GetHashCode();
            if (sortFilterPagingOptions_ != null) hash ^= SortFilterPagingOptions.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EventId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(EventId);
            }
            if (GameRoomType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)GameRoomType);
            }
            gameRoomStateTypeFilter_.WriteTo(output, _repeated_gameRoomStateTypeFilter_codec);
            if (IncludeInvisibleRooms != false)
            {
                output.WriteRawTag(56);
                output.WriteBool(IncludeInvisibleRooms);
            }
            if (IncludeReservedRooms != false)
            {
                output.WriteRawTag(64);
                output.WriteBool(IncludeReservedRooms);
            }
            if (sortFilterPagingOptions_ != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(SortFilterPagingOptions);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
            }
            size += gameRoomStateTypeFilter_.CalculateSize(_repeated_gameRoomStateTypeFilter_codec);
            if (GameRoomType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GameRoomType);
            }
            if (IncludeInvisibleRooms != false)
            {
                size += 1 + 1;
            }
            if (IncludeReservedRooms != false)
            {
                size += 1 + 1;
            }
            if (sortFilterPagingOptions_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SortFilterPagingOptions);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetGameRoomIdsRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventId.Length != 0)
            {
                EventId = other.EventId;
            }
            gameRoomStateTypeFilter_.Add(other.gameRoomStateTypeFilter_);
            if (other.GameRoomType != 0)
            {
                GameRoomType = other.GameRoomType;
            }
            if (other.IncludeInvisibleRooms != false)
            {
                IncludeInvisibleRooms = other.IncludeInvisibleRooms;
            }
            if (other.IncludeReservedRooms != false)
            {
                IncludeReservedRooms = other.IncludeReservedRooms;
            }
            if (other.sortFilterPagingOptions_ != null)
            {
                if (sortFilterPagingOptions_ == null)
                {
                    sortFilterPagingOptions_ = new SortFilterPagingOptions();
                }
                SortFilterPagingOptions.MergeFrom(other.SortFilterPagingOptions);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            EventId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            gameRoomType_ = (GameRoomType)input.ReadEnum();
                            break;
                        }
                    case 42:
                    case 40:
                        {
                            gameRoomStateTypeFilter_.AddEntriesFrom(input, _repeated_gameRoomStateTypeFilter_codec);
                            break;
                        }
                    case 56:
                        {
                            IncludeInvisibleRooms = input.ReadBool();
                            break;
                        }
                    case 64:
                        {
                            IncludeReservedRooms = input.ReadBool();
                            break;
                        }
                    case 82:
                        {
                            if (sortFilterPagingOptions_ == null)
                            {
                                sortFilterPagingOptions_ = new SortFilterPagingOptions();
                            }
                            input.ReadMessage(sortFilterPagingOptions_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetGameRoomIdsResponse : pb::IMessage<GetGameRoomIdsResponse>
    {
        private static readonly pb::MessageParser<GetGameRoomIdsResponse> _parser = new pb::MessageParser<GetGameRoomIdsResponse>(() => new GetGameRoomIdsResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetGameRoomIdsResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[151]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomIdsResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomIdsResponse(GetGameRoomIdsResponse other) : this()
        {
            gameRoomIds_ = other.gameRoomIds_.Clone();
            continuationToken_ = other.continuationToken_ != null ? other.continuationToken_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomIdsResponse Clone()
        {
            return new GetGameRoomIdsResponse(this);
        }

        /// <summary>Field number for the "gameRoomIds" field.</summary>
        public const int GameRoomIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_gameRoomIds_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> gameRoomIds_ = new pbc::RepeatedField<string>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> GameRoomIds
        {
            get { return gameRoomIds_; }
        }

        /// <summary>Field number for the "continuationToken" field.</summary>
        public const int ContinuationTokenFieldNumber = 10;
        private ContinuationToken continuationToken_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContinuationToken ContinuationToken
        {
            get { return continuationToken_; }
            set
            {
                continuationToken_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetGameRoomIdsResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetGameRoomIdsResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!gameRoomIds_.Equals(other.gameRoomIds_)) return false;
            if (!object.Equals(ContinuationToken, other.ContinuationToken)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= gameRoomIds_.GetHashCode();
            if (continuationToken_ != null) hash ^= ContinuationToken.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            gameRoomIds_.WriteTo(output, _repeated_gameRoomIds_codec);
            if (continuationToken_ != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(ContinuationToken);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += gameRoomIds_.CalculateSize(_repeated_gameRoomIds_codec);
            if (continuationToken_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContinuationToken);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetGameRoomIdsResponse other)
        {
            if (other == null)
            {
                return;
            }
            gameRoomIds_.Add(other.gameRoomIds_);
            if (other.continuationToken_ != null)
            {
                if (continuationToken_ == null)
                {
                    continuationToken_ = new ContinuationToken();
                }
                ContinuationToken.MergeFrom(other.ContinuationToken);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            gameRoomIds_.AddEntriesFrom(input, _repeated_gameRoomIds_codec);
                            break;
                        }
                    case 82:
                        {
                            if (continuationToken_ == null)
                            {
                                continuationToken_ = new ContinuationToken();
                            }
                            input.ReadMessage(continuationToken_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetGameRoomInfoRequest : pb::IMessage<GetGameRoomInfoRequest>
    {
        private static readonly pb::MessageParser<GetGameRoomInfoRequest> _parser = new pb::MessageParser<GetGameRoomInfoRequest>(() => new GetGameRoomInfoRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetGameRoomInfoRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[152]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomInfoRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomInfoRequest(GetGameRoomInfoRequest other) : this()
        {
            gameRoomId_ = other.gameRoomId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomInfoRequest Clone()
        {
            return new GetGameRoomInfoRequest(this);
        }

        /// <summary>Field number for the "gameRoomId" field.</summary>
        public const int GameRoomIdFieldNumber = 1;
        private string gameRoomId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameRoomId
        {
            get { return gameRoomId_; }
            set
            {
                gameRoomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetGameRoomInfoRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetGameRoomInfoRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GameRoomId != other.GameRoomId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (GameRoomId.Length != 0) hash ^= GameRoomId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GameRoomId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(GameRoomId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (GameRoomId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GameRoomId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetGameRoomInfoRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.GameRoomId.Length != 0)
            {
                GameRoomId = other.GameRoomId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            GameRoomId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetGameRoomInfoResponse : pb::IMessage<GetGameRoomInfoResponse>
    {
        private static readonly pb::MessageParser<GetGameRoomInfoResponse> _parser = new pb::MessageParser<GetGameRoomInfoResponse>(() => new GetGameRoomInfoResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetGameRoomInfoResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[153]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomInfoResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomInfoResponse(GetGameRoomInfoResponse other) : this()
        {
            switch (other.MessageCase)
            {
                case MessageOneofCase.MatchRoomInfo:
                    MatchRoomInfo = other.MatchRoomInfo.Clone();
                    break;
                case MessageOneofCase.DraftRoomInfo:
                    DraftRoomInfo = other.DraftRoomInfo.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomInfoResponse Clone()
        {
            return new GetGameRoomInfoResponse(this);
        }

        /// <summary>Field number for the "matchRoomInfo" field.</summary>
        public const int MatchRoomInfoFieldNumber = 1;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomInfo MatchRoomInfo
        {
            get { return messageCase_ == MessageOneofCase.MatchRoomInfo ? (MatchGameRoomInfo)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchRoomInfo;
            }
        }

        /// <summary>Field number for the "draftRoomInfo" field.</summary>
        public const int DraftRoomInfoFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DraftGameRoomInfo DraftRoomInfo
        {
            get { return messageCase_ == MessageOneofCase.DraftRoomInfo ? (DraftGameRoomInfo)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DraftRoomInfo;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            MatchRoomInfo = 1,
            DraftRoomInfo = 2,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetGameRoomInfoResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetGameRoomInfoResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(MatchRoomInfo, other.MatchRoomInfo)) return false;
            if (!object.Equals(DraftRoomInfo, other.DraftRoomInfo)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (messageCase_ == MessageOneofCase.MatchRoomInfo) hash ^= MatchRoomInfo.GetHashCode();
            if (messageCase_ == MessageOneofCase.DraftRoomInfo) hash ^= DraftRoomInfo.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (messageCase_ == MessageOneofCase.MatchRoomInfo)
            {
                output.WriteRawTag(10);
                output.WriteMessage(MatchRoomInfo);
            }
            if (messageCase_ == MessageOneofCase.DraftRoomInfo)
            {
                output.WriteRawTag(18);
                output.WriteMessage(DraftRoomInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (messageCase_ == MessageOneofCase.MatchRoomInfo)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchRoomInfo);
            }
            if (messageCase_ == MessageOneofCase.DraftRoomInfo)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DraftRoomInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetGameRoomInfoResponse other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.MatchRoomInfo:
                    if (MatchRoomInfo == null)
                    {
                        MatchRoomInfo = new MatchGameRoomInfo();
                    }
                    MatchRoomInfo.MergeFrom(other.MatchRoomInfo);
                    break;
                case MessageOneofCase.DraftRoomInfo:
                    if (DraftRoomInfo == null)
                    {
                        DraftRoomInfo = new DraftGameRoomInfo();
                    }
                    DraftRoomInfo.MergeFrom(other.DraftRoomInfo);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            MatchGameRoomInfo subBuilder = new MatchGameRoomInfo();
                            if (messageCase_ == MessageOneofCase.MatchRoomInfo)
                            {
                                subBuilder.MergeFrom(MatchRoomInfo);
                            }
                            input.ReadMessage(subBuilder);
                            MatchRoomInfo = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            DraftGameRoomInfo subBuilder = new DraftGameRoomInfo();
                            if (messageCase_ == MessageOneofCase.DraftRoomInfo)
                            {
                                subBuilder.MergeFrom(DraftRoomInfo);
                            }
                            input.ReadMessage(subBuilder);
                            DraftRoomInfo = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetLobbyUserIdsRequest : pb::IMessage<GetLobbyUserIdsRequest>
    {
        private static readonly pb::MessageParser<GetLobbyUserIdsRequest> _parser = new pb::MessageParser<GetLobbyUserIdsRequest>(() => new GetLobbyUserIdsRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetLobbyUserIdsRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[154]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserIdsRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserIdsRequest(GetLobbyUserIdsRequest other) : this()
        {
            sortFilterPagingOptions_ = other.sortFilterPagingOptions_ != null ? other.sortFilterPagingOptions_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserIdsRequest Clone()
        {
            return new GetLobbyUserIdsRequest(this);
        }

        /// <summary>Field number for the "sortFilterPagingOptions" field.</summary>
        public const int SortFilterPagingOptionsFieldNumber = 10;
        private SortFilterPagingOptions sortFilterPagingOptions_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SortFilterPagingOptions SortFilterPagingOptions
        {
            get { return sortFilterPagingOptions_; }
            set
            {
                sortFilterPagingOptions_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetLobbyUserIdsRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetLobbyUserIdsRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(SortFilterPagingOptions, other.SortFilterPagingOptions)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (sortFilterPagingOptions_ != null) hash ^= SortFilterPagingOptions.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (sortFilterPagingOptions_ != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(SortFilterPagingOptions);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (sortFilterPagingOptions_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SortFilterPagingOptions);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetLobbyUserIdsRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.sortFilterPagingOptions_ != null)
            {
                if (sortFilterPagingOptions_ == null)
                {
                    sortFilterPagingOptions_ = new SortFilterPagingOptions();
                }
                SortFilterPagingOptions.MergeFrom(other.SortFilterPagingOptions);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 82:
                        {
                            if (sortFilterPagingOptions_ == null)
                            {
                                sortFilterPagingOptions_ = new SortFilterPagingOptions();
                            }
                            input.ReadMessage(sortFilterPagingOptions_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetLobbyUserIdsResponse : pb::IMessage<GetLobbyUserIdsResponse>
    {
        private static readonly pb::MessageParser<GetLobbyUserIdsResponse> _parser = new pb::MessageParser<GetLobbyUserIdsResponse>(() => new GetLobbyUserIdsResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetLobbyUserIdsResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[155]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserIdsResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserIdsResponse(GetLobbyUserIdsResponse other) : this()
        {
            userIds_ = other.userIds_.Clone();
            continuationToken_ = other.continuationToken_ != null ? other.continuationToken_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserIdsResponse Clone()
        {
            return new GetLobbyUserIdsResponse(this);
        }

        /// <summary>Field number for the "userIds" field.</summary>
        public const int UserIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_userIds_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> userIds_ = new pbc::RepeatedField<string>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> UserIds
        {
            get { return userIds_; }
        }

        /// <summary>Field number for the "continuationToken" field.</summary>
        public const int ContinuationTokenFieldNumber = 10;
        private ContinuationToken continuationToken_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContinuationToken ContinuationToken
        {
            get { return continuationToken_; }
            set
            {
                continuationToken_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetLobbyUserIdsResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetLobbyUserIdsResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!userIds_.Equals(other.userIds_)) return false;
            if (!object.Equals(ContinuationToken, other.ContinuationToken)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= userIds_.GetHashCode();
            if (continuationToken_ != null) hash ^= ContinuationToken.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            userIds_.WriteTo(output, _repeated_userIds_codec);
            if (continuationToken_ != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(ContinuationToken);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += userIds_.CalculateSize(_repeated_userIds_codec);
            if (continuationToken_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContinuationToken);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetLobbyUserIdsResponse other)
        {
            if (other == null)
            {
                return;
            }
            userIds_.Add(other.userIds_);
            if (other.continuationToken_ != null)
            {
                if (continuationToken_ == null)
                {
                    continuationToken_ = new ContinuationToken();
                }
                ContinuationToken.MergeFrom(other.ContinuationToken);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 18:
                        {
                            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
                            break;
                        }
                    case 82:
                        {
                            if (continuationToken_ == null)
                            {
                                continuationToken_ = new ContinuationToken();
                            }
                            input.ReadMessage(continuationToken_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetLobbyUserInfoRequest : pb::IMessage<GetLobbyUserInfoRequest>
    {
        private static readonly pb::MessageParser<GetLobbyUserInfoRequest> _parser = new pb::MessageParser<GetLobbyUserInfoRequest>(() => new GetLobbyUserInfoRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetLobbyUserInfoRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[156]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserInfoRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserInfoRequest(GetLobbyUserInfoRequest other) : this()
        {
            userId_ = other.userId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserInfoRequest Clone()
        {
            return new GetLobbyUserInfoRequest(this);
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetLobbyUserInfoRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetLobbyUserInfoRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetLobbyUserInfoRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetLobbyUserInfoResponse : pb::IMessage<GetLobbyUserInfoResponse>
    {
        private static readonly pb::MessageParser<GetLobbyUserInfoResponse> _parser = new pb::MessageParser<GetLobbyUserInfoResponse>(() => new GetLobbyUserInfoResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetLobbyUserInfoResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[157]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserInfoResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserInfoResponse(GetLobbyUserInfoResponse other) : this()
        {
            userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserInfoResponse Clone()
        {
            return new GetLobbyUserInfoResponse(this);
        }

        /// <summary>Field number for the "userInfo" field.</summary>
        public const int UserInfoFieldNumber = 2;
        private LobbyUserInfo userInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyUserInfo UserInfo
        {
            get { return userInfo_; }
            set
            {
                userInfo_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetLobbyUserInfoResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetLobbyUserInfoResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(UserInfo, other.UserInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (userInfo_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(UserInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (userInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetLobbyUserInfoResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.userInfo_ != null)
            {
                if (userInfo_ == null)
                {
                    userInfo_ = new LobbyUserInfo();
                }
                UserInfo.MergeFrom(other.UserInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 18:
                        {
                            if (userInfo_ == null)
                            {
                                userInfo_ = new LobbyUserInfo();
                            }
                            input.ReadMessage(userInfo_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetSettingsResp : pb::IMessage<GetSettingsResp>
    {
        private static readonly pb::MessageParser<GetSettingsResp> _parser = new pb::MessageParser<GetSettingsResp>(() => new GetSettingsResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetSettingsResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[158]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetSettingsResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetSettingsResp(GetSettingsResp other) : this()
        {
            settings_ = other.settings_ != null ? other.settings_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetSettingsResp Clone()
        {
            return new GetSettingsResp(this);
        }

        /// <summary>Field number for the "settings" field.</summary>
        public const int SettingsFieldNumber = 1;
        private SettingsMessage settings_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingsMessage Settings
        {
            get { return settings_; }
            set
            {
                settings_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetSettingsResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetSettingsResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Settings, other.Settings)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (settings_ != null) hash ^= Settings.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (settings_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Settings);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (settings_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetSettingsResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.settings_ != null)
            {
                if (settings_ == null)
                {
                    settings_ = new SettingsMessage();
                }
                Settings.MergeFrom(other.Settings);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (settings_ == null)
                            {
                                settings_ = new SettingsMessage();
                            }
                            input.ReadMessage(settings_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GreToClientEvent : pb::IMessage<GreToClientEvent>
    {
        private static readonly pb::MessageParser<GreToClientEvent> _parser = new pb::MessageParser<GreToClientEvent>(() => new GreToClientEvent());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GreToClientEvent> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[159]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GreToClientEvent()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GreToClientEvent(GreToClientEvent other) : this()
        {
            greToClientMessages_ = other.greToClientMessages_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GreToClientEvent Clone()
        {
            return new GreToClientEvent(this);
        }

        /// <summary>Field number for the "greToClientMessages" field.</summary>
        public const int GreToClientMessagesFieldNumber = 1;
        private static readonly pb::FieldCodec<GREToClientMessage> _repeated_greToClientMessages_codec
            = pb::FieldCodec.ForMessage(10, GREToClientMessage.Parser);
        private readonly pbc::RepeatedField<GREToClientMessage> greToClientMessages_ = new pbc::RepeatedField<GREToClientMessage>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<GREToClientMessage> GreToClientMessages
        {
            get { return greToClientMessages_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GreToClientEvent);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GreToClientEvent other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!greToClientMessages_.Equals(other.greToClientMessages_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= greToClientMessages_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            greToClientMessages_.WriteTo(output, _repeated_greToClientMessages_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += greToClientMessages_.CalculateSize(_repeated_greToClientMessages_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GreToClientEvent other)
        {
            if (other == null)
            {
                return;
            }
            greToClientMessages_.Add(other.greToClientMessages_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            greToClientMessages_.AddEntriesFrom(input, _repeated_greToClientMessages_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Group : pb::IMessage<Group>
    {
        private static readonly pb::MessageParser<Group> _parser = new pb::MessageParser<Group>(() => new Group());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Group> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[160]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group(Group other) : this()
        {
            ids_ = other.ids_.Clone();
            groupId_ = other.groupId_;
            zoneType_ = other.zoneType_;
            subZoneType_ = other.subZoneType_;
            minSelect_ = other.minSelect_;
            maxSelect_ = other.maxSelect_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group Clone()
        {
            return new Group(this);
        }

        /// <summary>Field number for the "ids" field.</summary>
        public const int IdsFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_ids_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> ids_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Ids
        {
            get { return ids_; }
        }

        /// <summary>Field number for the "groupId" field.</summary>
        public const int GroupIdFieldNumber = 2;
        private int groupId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GroupId
        {
            get { return groupId_; }
            set
            {
                groupId_ = value;
            }
        }

        /// <summary>Field number for the "zoneType" field.</summary>
        public const int ZoneTypeFieldNumber = 3;
        private ZoneType zoneType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ZoneType ZoneType
        {
            get { return zoneType_; }
            set
            {
                zoneType_ = value;
            }
        }

        /// <summary>Field number for the "subZoneType" field.</summary>
        public const int SubZoneTypeFieldNumber = 4;
        private SubZoneType subZoneType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubZoneType SubZoneType
        {
            get { return subZoneType_; }
            set
            {
                subZoneType_ = value;
            }
        }

        /// <summary>Field number for the "minSelect" field.</summary>
        public const int MinSelectFieldNumber = 5;
        private int minSelect_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MinSelect
        {
            get { return minSelect_; }
            set
            {
                minSelect_ = value;
            }
        }

        /// <summary>Field number for the "maxSelect" field.</summary>
        public const int MaxSelectFieldNumber = 6;
        private int maxSelect_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxSelect
        {
            get { return maxSelect_; }
            set
            {
                maxSelect_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Group);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Group other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!ids_.Equals(other.ids_)) return false;
            if (GroupId != other.GroupId) return false;
            if (ZoneType != other.ZoneType) return false;
            if (SubZoneType != other.SubZoneType) return false;
            if (MinSelect != other.MinSelect) return false;
            if (MaxSelect != other.MaxSelect) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= ids_.GetHashCode();
            if (GroupId != 0) hash ^= GroupId.GetHashCode();
            if (ZoneType != 0) hash ^= ZoneType.GetHashCode();
            if (SubZoneType != 0) hash ^= SubZoneType.GetHashCode();
            if (MinSelect != 0) hash ^= MinSelect.GetHashCode();
            if (MaxSelect != 0) hash ^= MaxSelect.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            ids_.WriteTo(output, _repeated_ids_codec);
            if (GroupId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(GroupId);
            }
            if (ZoneType != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)ZoneType);
            }
            if (SubZoneType != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)SubZoneType);
            }
            if (MinSelect != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(MinSelect);
            }
            if (MaxSelect != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(MaxSelect);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += ids_.CalculateSize(_repeated_ids_codec);
            if (GroupId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
            }
            if (ZoneType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ZoneType);
            }
            if (SubZoneType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)SubZoneType);
            }
            if (MinSelect != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinSelect);
            }
            if (MaxSelect != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxSelect);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Group other)
        {
            if (other == null)
            {
                return;
            }
            ids_.Add(other.ids_);
            if (other.GroupId != 0)
            {
                GroupId = other.GroupId;
            }
            if (other.ZoneType != 0)
            {
                ZoneType = other.ZoneType;
            }
            if (other.SubZoneType != 0)
            {
                SubZoneType = other.SubZoneType;
            }
            if (other.MinSelect != 0)
            {
                MinSelect = other.MinSelect;
            }
            if (other.MaxSelect != 0)
            {
                MaxSelect = other.MaxSelect;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                        {
                            ids_.AddEntriesFrom(input, _repeated_ids_codec);
                            break;
                        }
                    case 16:
                        {
                            GroupId = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            zoneType_ = (ZoneType)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            subZoneType_ = (SubZoneType)input.ReadEnum();
                            break;
                        }
                    case 40:
                        {
                            MinSelect = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            MaxSelect = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GroupReq : pb::IMessage<GroupReq>
    {
        private static readonly pb::MessageParser<GroupReq> _parser = new pb::MessageParser<GroupReq>(() => new GroupReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[161]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupReq(GroupReq other) : this()
        {
            instanceIds_ = other.instanceIds_.Clone();
            groupSpecs_ = other.groupSpecs_.Clone();
            totalSelected_ = other.totalSelected_;
            idx_ = other.idx_;
            groupType_ = other.groupType_;
            context_ = other.context_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupReq Clone()
        {
            return new GroupReq(this);
        }

        /// <summary>Field number for the "instanceIds" field.</summary>
        public const int InstanceIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_instanceIds_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> instanceIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> InstanceIds
        {
            get { return instanceIds_; }
        }

        /// <summary>Field number for the "groupSpecs" field.</summary>
        public const int GroupSpecsFieldNumber = 2;
        private static readonly pb::FieldCodec<GroupSpecification> _repeated_groupSpecs_codec
            = pb::FieldCodec.ForMessage(18, GroupSpecification.Parser);
        private readonly pbc::RepeatedField<GroupSpecification> groupSpecs_ = new pbc::RepeatedField<GroupSpecification>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<GroupSpecification> GroupSpecs
        {
            get { return groupSpecs_; }
        }

        /// <summary>Field number for the "totalSelected" field.</summary>
        public const int TotalSelectedFieldNumber = 3;
        private uint totalSelected_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TotalSelected
        {
            get { return totalSelected_; }
            set
            {
                totalSelected_ = value;
            }
        }

        /// <summary>Field number for the "idx" field.</summary>
        public const int IdxFieldNumber = 4;
        private uint idx_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Idx
        {
            get { return idx_; }
            set
            {
                idx_ = value;
            }
        }

        /// <summary>Field number for the "groupType" field.</summary>
        public const int GroupTypeFieldNumber = 5;
        private GroupType groupType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupType GroupType
        {
            get { return groupType_; }
            set
            {
                groupType_ = value;
            }
        }

        /// <summary>Field number for the "context" field.</summary>
        public const int ContextFieldNumber = 6;
        private GroupingContext context_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupingContext Context
        {
            get { return context_; }
            set
            {
                context_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GroupReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!instanceIds_.Equals(other.instanceIds_)) return false;
            if (!groupSpecs_.Equals(other.groupSpecs_)) return false;
            if (TotalSelected != other.TotalSelected) return false;
            if (Idx != other.Idx) return false;
            if (GroupType != other.GroupType) return false;
            if (Context != other.Context) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= instanceIds_.GetHashCode();
            hash ^= groupSpecs_.GetHashCode();
            if (TotalSelected != 0) hash ^= TotalSelected.GetHashCode();
            if (Idx != 0) hash ^= Idx.GetHashCode();
            if (GroupType != 0) hash ^= GroupType.GetHashCode();
            if (Context != 0) hash ^= Context.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            instanceIds_.WriteTo(output, _repeated_instanceIds_codec);
            groupSpecs_.WriteTo(output, _repeated_groupSpecs_codec);
            if (TotalSelected != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(TotalSelected);
            }
            if (Idx != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(Idx);
            }
            if (GroupType != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)GroupType);
            }
            if (Context != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)Context);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += instanceIds_.CalculateSize(_repeated_instanceIds_codec);
            size += groupSpecs_.CalculateSize(_repeated_groupSpecs_codec);
            if (TotalSelected != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalSelected);
            }
            if (Idx != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idx);
            }
            if (GroupType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GroupType);
            }
            if (Context != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Context);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupReq other)
        {
            if (other == null)
            {
                return;
            }
            instanceIds_.Add(other.instanceIds_);
            groupSpecs_.Add(other.groupSpecs_);
            if (other.TotalSelected != 0)
            {
                TotalSelected = other.TotalSelected;
            }
            if (other.Idx != 0)
            {
                Idx = other.Idx;
            }
            if (other.GroupType != 0)
            {
                GroupType = other.GroupType;
            }
            if (other.Context != 0)
            {
                Context = other.Context;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                        {
                            instanceIds_.AddEntriesFrom(input, _repeated_instanceIds_codec);
                            break;
                        }
                    case 18:
                        {
                            groupSpecs_.AddEntriesFrom(input, _repeated_groupSpecs_codec);
                            break;
                        }
                    case 24:
                        {
                            TotalSelected = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            Idx = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            groupType_ = (GroupType)input.ReadEnum();
                            break;
                        }
                    case 48:
                        {
                            context_ = (GroupingContext)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GroupResp : pb::IMessage<GroupResp>
    {
        private static readonly pb::MessageParser<GroupResp> _parser = new pb::MessageParser<GroupResp>(() => new GroupResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[162]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupResp(GroupResp other) : this()
        {
            groups_ = other.groups_.Clone();
            idx_ = other.idx_;
            groupType_ = other.groupType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupResp Clone()
        {
            return new GroupResp(this);
        }

        /// <summary>Field number for the "groups" field.</summary>
        public const int GroupsFieldNumber = 1;
        private static readonly pb::FieldCodec<Group> _repeated_groups_codec
            = pb::FieldCodec.ForMessage(10, Group.Parser);
        private readonly pbc::RepeatedField<Group> groups_ = new pbc::RepeatedField<Group>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Group> Groups
        {
            get { return groups_; }
        }

        /// <summary>Field number for the "idx" field.</summary>
        public const int IdxFieldNumber = 2;
        private uint idx_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Idx
        {
            get { return idx_; }
            set
            {
                idx_ = value;
            }
        }

        /// <summary>Field number for the "groupType" field.</summary>
        public const int GroupTypeFieldNumber = 3;
        private GroupType groupType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupType GroupType
        {
            get { return groupType_; }
            set
            {
                groupType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GroupResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!groups_.Equals(other.groups_)) return false;
            if (Idx != other.Idx) return false;
            if (GroupType != other.GroupType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= groups_.GetHashCode();
            if (Idx != 0) hash ^= Idx.GetHashCode();
            if (GroupType != 0) hash ^= GroupType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            groups_.WriteTo(output, _repeated_groups_codec);
            if (Idx != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Idx);
            }
            if (GroupType != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)GroupType);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += groups_.CalculateSize(_repeated_groups_codec);
            if (Idx != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idx);
            }
            if (GroupType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GroupType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupResp other)
        {
            if (other == null)
            {
                return;
            }
            groups_.Add(other.groups_);
            if (other.Idx != 0)
            {
                Idx = other.Idx;
            }
            if (other.GroupType != 0)
            {
                GroupType = other.GroupType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            groups_.AddEntriesFrom(input, _repeated_groups_codec);
                            break;
                        }
                    case 16:
                        {
                            Idx = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            groupType_ = (GroupType)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GroupSpecification : pb::IMessage<GroupSpecification>
    {
        private static readonly pb::MessageParser<GroupSpecification> _parser = new pb::MessageParser<GroupSpecification>(() => new GroupSpecification());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupSpecification> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[163]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupSpecification()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupSpecification(GroupSpecification other) : this()
        {
            lowerBound_ = other.lowerBound_;
            upperBound_ = other.upperBound_;
            zoneType_ = other.zoneType_;
            subZoneType_ = other.subZoneType_;
            prompt_ = other.prompt_ != null ? other.prompt_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupSpecification Clone()
        {
            return new GroupSpecification(this);
        }

        /// <summary>Field number for the "lowerBound" field.</summary>
        public const int LowerBoundFieldNumber = 1;
        private uint lowerBound_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LowerBound
        {
            get { return lowerBound_; }
            set
            {
                lowerBound_ = value;
            }
        }

        /// <summary>Field number for the "upperBound" field.</summary>
        public const int UpperBoundFieldNumber = 2;
        private uint upperBound_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint UpperBound
        {
            get { return upperBound_; }
            set
            {
                upperBound_ = value;
            }
        }

        /// <summary>Field number for the "zoneType" field.</summary>
        public const int ZoneTypeFieldNumber = 3;
        private ZoneType zoneType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ZoneType ZoneType
        {
            get { return zoneType_; }
            set
            {
                zoneType_ = value;
            }
        }

        /// <summary>Field number for the "subZoneType" field.</summary>
        public const int SubZoneTypeFieldNumber = 4;
        private SubZoneType subZoneType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubZoneType SubZoneType
        {
            get { return subZoneType_; }
            set
            {
                subZoneType_ = value;
            }
        }

        /// <summary>Field number for the "prompt" field.</summary>
        public const int PromptFieldNumber = 5;
        private Prompt prompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt Prompt
        {
            get { return prompt_; }
            set
            {
                prompt_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GroupSpecification);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupSpecification other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (LowerBound != other.LowerBound) return false;
            if (UpperBound != other.UpperBound) return false;
            if (ZoneType != other.ZoneType) return false;
            if (SubZoneType != other.SubZoneType) return false;
            if (!object.Equals(Prompt, other.Prompt)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (LowerBound != 0) hash ^= LowerBound.GetHashCode();
            if (UpperBound != 0) hash ^= UpperBound.GetHashCode();
            if (ZoneType != 0) hash ^= ZoneType.GetHashCode();
            if (SubZoneType != 0) hash ^= SubZoneType.GetHashCode();
            if (prompt_ != null) hash ^= Prompt.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (LowerBound != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(LowerBound);
            }
            if (UpperBound != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(UpperBound);
            }
            if (ZoneType != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)ZoneType);
            }
            if (SubZoneType != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)SubZoneType);
            }
            if (prompt_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(Prompt);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (LowerBound != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LowerBound);
            }
            if (UpperBound != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpperBound);
            }
            if (ZoneType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ZoneType);
            }
            if (SubZoneType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)SubZoneType);
            }
            if (prompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prompt);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupSpecification other)
        {
            if (other == null)
            {
                return;
            }
            if (other.LowerBound != 0)
            {
                LowerBound = other.LowerBound;
            }
            if (other.UpperBound != 0)
            {
                UpperBound = other.UpperBound;
            }
            if (other.ZoneType != 0)
            {
                ZoneType = other.ZoneType;
            }
            if (other.SubZoneType != 0)
            {
                SubZoneType = other.SubZoneType;
            }
            if (other.prompt_ != null)
            {
                if (prompt_ == null)
                {
                    prompt_ = new Prompt();
                }
                Prompt.MergeFrom(other.Prompt);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            LowerBound = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            UpperBound = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            zoneType_ = (ZoneType)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            subZoneType_ = (SubZoneType)input.ReadEnum();
                            break;
                        }
                    case 42:
                        {
                            if (prompt_ == null)
                            {
                                prompt_ = new Prompt();
                            }
                            input.ReadMessage(prompt_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class IRLoaderConfiguration : pb::IMessage<IRLoaderConfiguration>
    {
        private static readonly pb::MessageParser<IRLoaderConfiguration> _parser = new pb::MessageParser<IRLoaderConfiguration>(() => new IRLoaderConfiguration());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IRLoaderConfiguration> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[164]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IRLoaderConfiguration()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IRLoaderConfiguration(IRLoaderConfiguration other) : this()
        {
            enableLimitedIRLoading_ = other.enableLimitedIRLoading_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IRLoaderConfiguration Clone()
        {
            return new IRLoaderConfiguration(this);
        }

        /// <summary>Field number for the "enableLimitedIRLoading" field.</summary>
        public const int EnableLimitedIRLoadingFieldNumber = 1;
        private bool enableLimitedIRLoading_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EnableLimitedIRLoading
        {
            get { return enableLimitedIRLoading_; }
            set
            {
                enableLimitedIRLoading_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as IRLoaderConfiguration);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IRLoaderConfiguration other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EnableLimitedIRLoading != other.EnableLimitedIRLoading) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EnableLimitedIRLoading != false) hash ^= EnableLimitedIRLoading.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EnableLimitedIRLoading != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(EnableLimitedIRLoading);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EnableLimitedIRLoading != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IRLoaderConfiguration other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EnableLimitedIRLoading != false)
            {
                EnableLimitedIRLoading = other.EnableLimitedIRLoading;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            EnableLimitedIRLoading = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class IllegalRequestMessage : pb::IMessage<IllegalRequestMessage>
    {
        private static readonly pb::MessageParser<IllegalRequestMessage> _parser = new pb::MessageParser<IllegalRequestMessage>(() => new IllegalRequestMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IllegalRequestMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[165]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IllegalRequestMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IllegalRequestMessage(IllegalRequestMessage other) : this()
        {
            invalidMessage_ = other.invalidMessage_ != null ? other.invalidMessage_.Clone() : null;
            reason_ = other.reason_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IllegalRequestMessage Clone()
        {
            return new IllegalRequestMessage(this);
        }

        /// <summary>Field number for the "invalidMessage" field.</summary>
        public const int InvalidMessageFieldNumber = 1;
        private ClientToGREMessage invalidMessage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToGREMessage InvalidMessage
        {
            get { return invalidMessage_; }
            set
            {
                invalidMessage_ = value;
            }
        }

        /// <summary>Field number for the "reason" field.</summary>
        public const int ReasonFieldNumber = 2;
        private FailureReason reason_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FailureReason Reason
        {
            get { return reason_; }
            set
            {
                reason_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as IllegalRequestMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IllegalRequestMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(InvalidMessage, other.InvalidMessage)) return false;
            if (Reason != other.Reason) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (invalidMessage_ != null) hash ^= InvalidMessage.GetHashCode();
            if (Reason != 0) hash ^= Reason.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (invalidMessage_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(InvalidMessage);
            }
            if (Reason != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Reason);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (invalidMessage_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(InvalidMessage);
            }
            if (Reason != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Reason);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IllegalRequestMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.invalidMessage_ != null)
            {
                if (invalidMessage_ == null)
                {
                    invalidMessage_ = new ClientToGREMessage();
                }
                InvalidMessage.MergeFrom(other.InvalidMessage);
            }
            if (other.Reason != 0)
            {
                Reason = other.Reason;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (invalidMessage_ == null)
                            {
                                invalidMessage_ = new ClientToGREMessage();
                            }
                            input.ReadMessage(invalidMessage_);
                            break;
                        }
                    case 16:
                        {
                            reason_ = (FailureReason)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Int32Value : pb::IMessage<Int32Value>
    {
        private static readonly pb::MessageParser<Int32Value> _parser = new pb::MessageParser<Int32Value>(() => new Int32Value());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Int32Value> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[166]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Int32Value()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Int32Value(Int32Value other) : this()
        {
            value_ = other.value_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Int32Value Clone()
        {
            return new Int32Value(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private int value_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Value
        {
            get { return value_; }
            set
            {
                value_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Int32Value);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Int32Value other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Value != other.Value) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Value != 0) hash ^= Value.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Value != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(Value);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Value != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Int32Value other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Value != 0)
            {
                Value = other.Value;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Value = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class IntermissionReq : pb::IMessage<IntermissionReq>
    {
        private static readonly pb::MessageParser<IntermissionReq> _parser = new pb::MessageParser<IntermissionReq>(() => new IntermissionReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IntermissionReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[167]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IntermissionReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IntermissionReq(IntermissionReq other) : this()
        {
            options_ = other.options_.Clone();
            intermissionPrompt_ = other.intermissionPrompt_ != null ? other.intermissionPrompt_.Clone() : null;
            gameResultType_ = other.gameResultType_;
            winningTeamId_ = other.winningTeamId_;
            result_ = other.result_ != null ? other.result_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IntermissionReq Clone()
        {
            return new IntermissionReq(this);
        }

        /// <summary>Field number for the "options" field.</summary>
        public const int OptionsFieldNumber = 1;
        private static readonly pb::FieldCodec<UserOption> _repeated_options_codec
            = pb::FieldCodec.ForMessage(10, UserOption.Parser);
        private readonly pbc::RepeatedField<UserOption> options_ = new pbc::RepeatedField<UserOption>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<UserOption> Options
        {
            get { return options_; }
        }

        /// <summary>Field number for the "intermissionPrompt" field.</summary>
        public const int IntermissionPromptFieldNumber = 2;
        private Prompt intermissionPrompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt IntermissionPrompt
        {
            get { return intermissionPrompt_; }
            set
            {
                intermissionPrompt_ = value;
            }
        }

        /// <summary>Field number for the "gameResultType" field.</summary>
        public const int GameResultTypeFieldNumber = 3;
        private ResultType gameResultType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultType GameResultType
        {
            get { return gameResultType_; }
            set
            {
                gameResultType_ = value;
            }
        }

        /// <summary>Field number for the "winningTeamId" field.</summary>
        public const int WinningTeamIdFieldNumber = 4;
        private uint winningTeamId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WinningTeamId
        {
            get { return winningTeamId_; }
            set
            {
                winningTeamId_ = value;
            }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 5;
        private ResultSpec result_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultSpec Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as IntermissionReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IntermissionReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!options_.Equals(other.options_)) return false;
            if (!object.Equals(IntermissionPrompt, other.IntermissionPrompt)) return false;
            if (GameResultType != other.GameResultType) return false;
            if (WinningTeamId != other.WinningTeamId) return false;
            if (!object.Equals(Result, other.Result)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= options_.GetHashCode();
            if (intermissionPrompt_ != null) hash ^= IntermissionPrompt.GetHashCode();
            if (GameResultType != 0) hash ^= GameResultType.GetHashCode();
            if (WinningTeamId != 0) hash ^= WinningTeamId.GetHashCode();
            if (result_ != null) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            options_.WriteTo(output, _repeated_options_codec);
            if (intermissionPrompt_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(IntermissionPrompt);
            }
            if (GameResultType != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)GameResultType);
            }
            if (WinningTeamId != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(WinningTeamId);
            }
            if (result_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += options_.CalculateSize(_repeated_options_codec);
            if (intermissionPrompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(IntermissionPrompt);
            }
            if (GameResultType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GameResultType);
            }
            if (WinningTeamId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinningTeamId);
            }
            if (result_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IntermissionReq other)
        {
            if (other == null)
            {
                return;
            }
            options_.Add(other.options_);
            if (other.intermissionPrompt_ != null)
            {
                if (intermissionPrompt_ == null)
                {
                    intermissionPrompt_ = new Prompt();
                }
                IntermissionPrompt.MergeFrom(other.IntermissionPrompt);
            }
            if (other.GameResultType != 0)
            {
                GameResultType = other.GameResultType;
            }
            if (other.WinningTeamId != 0)
            {
                WinningTeamId = other.WinningTeamId;
            }
            if (other.result_ != null)
            {
                if (result_ == null)
                {
                    result_ = new ResultSpec();
                }
                Result.MergeFrom(other.Result);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            options_.AddEntriesFrom(input, _repeated_options_codec);
                            break;
                        }
                    case 18:
                        {
                            if (intermissionPrompt_ == null)
                            {
                                intermissionPrompt_ = new Prompt();
                            }
                            input.ReadMessage(intermissionPrompt_);
                            break;
                        }
                    case 24:
                        {
                            gameResultType_ = (ResultType)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            WinningTeamId = input.ReadUInt32();
                            break;
                        }
                    case 42:
                        {
                            if (result_ == null)
                            {
                                result_ = new ResultSpec();
                            }
                            input.ReadMessage(result_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class InvalidAttacker : pb::IMessage<InvalidAttacker>
    {
        private static readonly pb::MessageParser<InvalidAttacker> _parser = new pb::MessageParser<InvalidAttacker>(() => new InvalidAttacker());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InvalidAttacker> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[168]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidAttacker()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidAttacker(InvalidAttacker other) : this()
        {
            result_ = other.result_;
            attack_ = other.attack_ != null ? other.attack_.Clone() : null;
            decisionPrompt_ = other.decisionPrompt_ != null ? other.decisionPrompt_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidAttacker Clone()
        {
            return new InvalidAttacker(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private ResultCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        /// <summary>Field number for the "attack" field.</summary>
        public const int AttackFieldNumber = 2;
        private Attacker attack_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attacker Attack
        {
            get { return attack_; }
            set
            {
                attack_ = value;
            }
        }

        /// <summary>Field number for the "decisionPrompt" field.</summary>
        public const int DecisionPromptFieldNumber = 3;
        private Prompt decisionPrompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt DecisionPrompt
        {
            get { return decisionPrompt_; }
            set
            {
                decisionPrompt_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InvalidAttacker);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InvalidAttacker other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Result != other.Result) return false;
            if (!object.Equals(Attack, other.Attack)) return false;
            if (!object.Equals(DecisionPrompt, other.DecisionPrompt)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Result != 0) hash ^= Result.GetHashCode();
            if (attack_ != null) hash ^= Attack.GetHashCode();
            if (decisionPrompt_ != null) hash ^= DecisionPrompt.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Result != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Result);
            }
            if (attack_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Attack);
            }
            if (decisionPrompt_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(DecisionPrompt);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (attack_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attack);
            }
            if (decisionPrompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DecisionPrompt);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InvalidAttacker other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            if (other.attack_ != null)
            {
                if (attack_ == null)
                {
                    attack_ = new Attacker();
                }
                Attack.MergeFrom(other.Attack);
            }
            if (other.decisionPrompt_ != null)
            {
                if (decisionPrompt_ == null)
                {
                    decisionPrompt_ = new Prompt();
                }
                DecisionPrompt.MergeFrom(other.DecisionPrompt);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            result_ = (ResultCode)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            if (attack_ == null)
                            {
                                attack_ = new Attacker();
                            }
                            input.ReadMessage(attack_);
                            break;
                        }
                    case 26:
                        {
                            if (decisionPrompt_ == null)
                            {
                                decisionPrompt_ = new Prompt();
                            }
                            input.ReadMessage(decisionPrompt_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class InvalidBlocker : pb::IMessage<InvalidBlocker>
    {
        private static readonly pb::MessageParser<InvalidBlocker> _parser = new pb::MessageParser<InvalidBlocker>(() => new InvalidBlocker());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InvalidBlocker> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[169]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidBlocker()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidBlocker(InvalidBlocker other) : this()
        {
            result_ = other.result_;
            block_ = other.block_ != null ? other.block_.Clone() : null;
            decisionPrompt_ = other.decisionPrompt_ != null ? other.decisionPrompt_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidBlocker Clone()
        {
            return new InvalidBlocker(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private ResultCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        /// <summary>Field number for the "block" field.</summary>
        public const int BlockFieldNumber = 2;
        private Blocker block_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Blocker Block
        {
            get { return block_; }
            set
            {
                block_ = value;
            }
        }

        /// <summary>Field number for the "decisionPrompt" field.</summary>
        public const int DecisionPromptFieldNumber = 3;
        private Prompt decisionPrompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt DecisionPrompt
        {
            get { return decisionPrompt_; }
            set
            {
                decisionPrompt_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InvalidBlocker);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InvalidBlocker other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Result != other.Result) return false;
            if (!object.Equals(Block, other.Block)) return false;
            if (!object.Equals(DecisionPrompt, other.DecisionPrompt)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Result != 0) hash ^= Result.GetHashCode();
            if (block_ != null) hash ^= Block.GetHashCode();
            if (decisionPrompt_ != null) hash ^= DecisionPrompt.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Result != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Result);
            }
            if (block_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Block);
            }
            if (decisionPrompt_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(DecisionPrompt);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (block_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
            }
            if (decisionPrompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DecisionPrompt);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InvalidBlocker other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            if (other.block_ != null)
            {
                if (block_ == null)
                {
                    block_ = new Blocker();
                }
                Block.MergeFrom(other.Block);
            }
            if (other.decisionPrompt_ != null)
            {
                if (decisionPrompt_ == null)
                {
                    decisionPrompt_ = new Prompt();
                }
                DecisionPrompt.MergeFrom(other.DecisionPrompt);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            result_ = (ResultCode)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            if (block_ == null)
                            {
                                block_ = new Blocker();
                            }
                            input.ReadMessage(block_);
                            break;
                        }
                    case 26:
                        {
                            if (decisionPrompt_ == null)
                            {
                                decisionPrompt_ = new Prompt();
                            }
                            input.ReadMessage(decisionPrompt_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class InvalidCombatDamageOrderAssignment : pb::IMessage<InvalidCombatDamageOrderAssignment>
    {
        private static readonly pb::MessageParser<InvalidCombatDamageOrderAssignment> _parser = new pb::MessageParser<InvalidCombatDamageOrderAssignment>(() => new InvalidCombatDamageOrderAssignment());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InvalidCombatDamageOrderAssignment> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[170]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidCombatDamageOrderAssignment()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidCombatDamageOrderAssignment(InvalidCombatDamageOrderAssignment other) : this()
        {
            result_ = other.result_;
            order_ = other.order_ != null ? other.order_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidCombatDamageOrderAssignment Clone()
        {
            return new InvalidCombatDamageOrderAssignment(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private ResultCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        /// <summary>Field number for the "order" field.</summary>
        public const int OrderFieldNumber = 2;
        private CombatDamageOrderAssignment order_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CombatDamageOrderAssignment Order
        {
            get { return order_; }
            set
            {
                order_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InvalidCombatDamageOrderAssignment);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InvalidCombatDamageOrderAssignment other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Result != other.Result) return false;
            if (!object.Equals(Order, other.Order)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Result != 0) hash ^= Result.GetHashCode();
            if (order_ != null) hash ^= Order.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Result != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Result);
            }
            if (order_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Order);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (order_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Order);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InvalidCombatDamageOrderAssignment other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            if (other.order_ != null)
            {
                if (order_ == null)
                {
                    order_ = new CombatDamageOrderAssignment();
                }
                Order.MergeFrom(other.Order);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            result_ = (ResultCode)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            if (order_ == null)
                            {
                                order_ = new CombatDamageOrderAssignment();
                            }
                            input.ReadMessage(order_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class InvalidDamageAssignment : pb::IMessage<InvalidDamageAssignment>
    {
        private static readonly pb::MessageParser<InvalidDamageAssignment> _parser = new pb::MessageParser<InvalidDamageAssignment>(() => new InvalidDamageAssignment());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InvalidDamageAssignment> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[171]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidDamageAssignment()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidDamageAssignment(InvalidDamageAssignment other) : this()
        {
            result_ = other.result_;
            assignment_ = other.assignment_ != null ? other.assignment_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidDamageAssignment Clone()
        {
            return new InvalidDamageAssignment(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private ResultCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        /// <summary>Field number for the "assignment" field.</summary>
        public const int AssignmentFieldNumber = 2;
        private DamageAssigner assignment_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageAssigner Assignment
        {
            get { return assignment_; }
            set
            {
                assignment_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InvalidDamageAssignment);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InvalidDamageAssignment other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Result != other.Result) return false;
            if (!object.Equals(Assignment, other.Assignment)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Result != 0) hash ^= Result.GetHashCode();
            if (assignment_ != null) hash ^= Assignment.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Result != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Result);
            }
            if (assignment_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Assignment);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (assignment_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Assignment);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InvalidDamageAssignment other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            if (other.assignment_ != null)
            {
                if (assignment_ == null)
                {
                    assignment_ = new DamageAssigner();
                }
                Assignment.MergeFrom(other.Assignment);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            result_ = (ResultCode)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            if (assignment_ == null)
                            {
                                assignment_ = new DamageAssigner();
                            }
                            input.ReadMessage(assignment_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class InvalidTargetSelection : pb::IMessage<InvalidTargetSelection>
    {
        private static readonly pb::MessageParser<InvalidTargetSelection> _parser = new pb::MessageParser<InvalidTargetSelection>(() => new InvalidTargetSelection());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InvalidTargetSelection> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[172]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidTargetSelection()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidTargetSelection(InvalidTargetSelection other) : this()
        {
            target_ = other.target_ != null ? other.target_.Clone() : null;
            result_ = other.result_;
            decisionPrompt_ = other.decisionPrompt_ != null ? other.decisionPrompt_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InvalidTargetSelection Clone()
        {
            return new InvalidTargetSelection(this);
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 1;
        private TargetSelection target_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetSelection Target
        {
            get { return target_; }
            set
            {
                target_ = value;
            }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private ResultCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        /// <summary>Field number for the "decisionPrompt" field.</summary>
        public const int DecisionPromptFieldNumber = 3;
        private Prompt decisionPrompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt DecisionPrompt
        {
            get { return decisionPrompt_; }
            set
            {
                decisionPrompt_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InvalidTargetSelection);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InvalidTargetSelection other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Target, other.Target)) return false;
            if (Result != other.Result) return false;
            if (!object.Equals(DecisionPrompt, other.DecisionPrompt)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (target_ != null) hash ^= Target.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (decisionPrompt_ != null) hash ^= DecisionPrompt.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (target_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Target);
            }
            if (Result != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Result);
            }
            if (decisionPrompt_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(DecisionPrompt);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (target_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
            }
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (decisionPrompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DecisionPrompt);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InvalidTargetSelection other)
        {
            if (other == null)
            {
                return;
            }
            if (other.target_ != null)
            {
                if (target_ == null)
                {
                    target_ = new TargetSelection();
                }
                Target.MergeFrom(other.Target);
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            if (other.decisionPrompt_ != null)
            {
                if (decisionPrompt_ == null)
                {
                    decisionPrompt_ = new Prompt();
                }
                DecisionPrompt.MergeFrom(other.DecisionPrompt);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (target_ == null)
                            {
                                target_ = new TargetSelection();
                            }
                            input.ReadMessage(target_);
                            break;
                        }
                    case 16:
                        {
                            result_ = (ResultCode)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            if (decisionPrompt_ == null)
                            {
                                decisionPrompt_ = new Prompt();
                            }
                            input.ReadMessage(decisionPrompt_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Inverter : pb::IMessage<Inverter>
    {
        private static readonly pb::MessageParser<Inverter> _parser = new pb::MessageParser<Inverter>(() => new Inverter());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Inverter> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[173]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Inverter()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Inverter(Inverter other) : this()
        {
            child_ = other.child_ != null ? other.child_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Inverter Clone()
        {
            return new Inverter(this);
        }

        /// <summary>Field number for the "child" field.</summary>
        public const int ChildFieldNumber = 1;
        private Node child_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Node Child
        {
            get { return child_; }
            set
            {
                child_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Inverter);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Inverter other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Child, other.Child)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (child_ != null) hash ^= Child.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (child_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Child);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (child_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Child);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Inverter other)
        {
            if (other == null)
            {
                return;
            }
            if (other.child_ != null)
            {
                if (child_ == null)
                {
                    child_ = new Node();
                }
                Child.MergeFrom(other.Child);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (child_ == null)
                            {
                                child_ = new Node();
                            }
                            input.ReadMessage(child_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class JoinConstructedMatchmakingRequest : pb::IMessage<JoinConstructedMatchmakingRequest>
    {
        private static readonly pb::MessageParser<JoinConstructedMatchmakingRequest> _parser = new pb::MessageParser<JoinConstructedMatchmakingRequest>(() => new JoinConstructedMatchmakingRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<JoinConstructedMatchmakingRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[174]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinConstructedMatchmakingRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinConstructedMatchmakingRequest(JoinConstructedMatchmakingRequest other) : this()
        {
            deckId_ = other.deckId_;
            matchType_ = other.matchType_;
            numberOfGames_ = other.numberOfGames_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinConstructedMatchmakingRequest Clone()
        {
            return new JoinConstructedMatchmakingRequest(this);
        }

        /// <summary>Field number for the "deckId" field.</summary>
        public const int DeckIdFieldNumber = 3;
        private string deckId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeckId
        {
            get { return deckId_; }
            set
            {
                deckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "matchType" field.</summary>
        public const int MatchTypeFieldNumber = 1;
        private ConstructedMatchType matchType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConstructedMatchType MatchType
        {
            get { return matchType_; }
            set
            {
                matchType_ = value;
            }
        }

        /// <summary>Field number for the "numberOfGames" field.</summary>
        public const int NumberOfGamesFieldNumber = 2;
        private int numberOfGames_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NumberOfGames
        {
            get { return numberOfGames_; }
            set
            {
                numberOfGames_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as JoinConstructedMatchmakingRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(JoinConstructedMatchmakingRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (DeckId != other.DeckId) return false;
            if (MatchType != other.MatchType) return false;
            if (NumberOfGames != other.NumberOfGames) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (DeckId.Length != 0) hash ^= DeckId.GetHashCode();
            if (MatchType != 0) hash ^= MatchType.GetHashCode();
            if (NumberOfGames != 0) hash ^= NumberOfGames.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MatchType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)MatchType);
            }
            if (NumberOfGames != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(NumberOfGames);
            }
            if (DeckId.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(DeckId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (DeckId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckId);
            }
            if (MatchType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MatchType);
            }
            if (NumberOfGames != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfGames);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(JoinConstructedMatchmakingRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.DeckId.Length != 0)
            {
                DeckId = other.DeckId;
            }
            if (other.MatchType != 0)
            {
                MatchType = other.MatchType;
            }
            if (other.NumberOfGames != 0)
            {
                NumberOfGames = other.NumberOfGames;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            matchType_ = (ConstructedMatchType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            NumberOfGames = input.ReadInt32();
                            break;
                        }
                    case 26:
                        {
                            DeckId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class JoinMatchGameRoomRequest : pb::IMessage<JoinMatchGameRoomRequest>
    {
        private static readonly pb::MessageParser<JoinMatchGameRoomRequest> _parser = new pb::MessageParser<JoinMatchGameRoomRequest>(() => new JoinMatchGameRoomRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<JoinMatchGameRoomRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[175]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchGameRoomRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchGameRoomRequest(JoinMatchGameRoomRequest other) : this()
        {
            gameRoomId_ = other.gameRoomId_;
            gameRoomPassword_ = other.gameRoomPassword_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchGameRoomRequest Clone()
        {
            return new JoinMatchGameRoomRequest(this);
        }

        /// <summary>Field number for the "gameRoomId" field.</summary>
        public const int GameRoomIdFieldNumber = 1;
        private string gameRoomId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameRoomId
        {
            get { return gameRoomId_; }
            set
            {
                gameRoomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "gameRoomPassword" field.</summary>
        public const int GameRoomPasswordFieldNumber = 2;
        private string gameRoomPassword_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameRoomPassword
        {
            get { return gameRoomPassword_; }
            set
            {
                gameRoomPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as JoinMatchGameRoomRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(JoinMatchGameRoomRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GameRoomId != other.GameRoomId) return false;
            if (GameRoomPassword != other.GameRoomPassword) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (GameRoomId.Length != 0) hash ^= GameRoomId.GetHashCode();
            if (GameRoomPassword.Length != 0) hash ^= GameRoomPassword.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GameRoomId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(GameRoomId);
            }
            if (GameRoomPassword.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(GameRoomPassword);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (GameRoomId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GameRoomId);
            }
            if (GameRoomPassword.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GameRoomPassword);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(JoinMatchGameRoomRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.GameRoomId.Length != 0)
            {
                GameRoomId = other.GameRoomId;
            }
            if (other.GameRoomPassword.Length != 0)
            {
                GameRoomPassword = other.GameRoomPassword;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            GameRoomId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            GameRoomPassword = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class JoinMatchGameRoomResponse : pb::IMessage<JoinMatchGameRoomResponse>
    {
        private static readonly pb::MessageParser<JoinMatchGameRoomResponse> _parser = new pb::MessageParser<JoinMatchGameRoomResponse>(() => new JoinMatchGameRoomResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<JoinMatchGameRoomResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[176]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchGameRoomResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchGameRoomResponse(JoinMatchGameRoomResponse other) : this()
        {
            gameRoomInfo_ = other.gameRoomInfo_ != null ? other.gameRoomInfo_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchGameRoomResponse Clone()
        {
            return new JoinMatchGameRoomResponse(this);
        }

        /// <summary>Field number for the "gameRoomInfo" field.</summary>
        public const int GameRoomInfoFieldNumber = 1;
        private MatchGameRoomInfo gameRoomInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomInfo GameRoomInfo
        {
            get { return gameRoomInfo_; }
            set
            {
                gameRoomInfo_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as JoinMatchGameRoomResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(JoinMatchGameRoomResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(GameRoomInfo, other.GameRoomInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (gameRoomInfo_ != null) hash ^= GameRoomInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (gameRoomInfo_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(GameRoomInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (gameRoomInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRoomInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(JoinMatchGameRoomResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.gameRoomInfo_ != null)
            {
                if (gameRoomInfo_ == null)
                {
                    gameRoomInfo_ = new MatchGameRoomInfo();
                }
                GameRoomInfo.MergeFrom(other.GameRoomInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (gameRoomInfo_ == null)
                            {
                                gameRoomInfo_ = new MatchGameRoomInfo();
                            }
                            input.ReadMessage(gameRoomInfo_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class JoinMatchGameRoomResponseV2 : pb::IMessage<JoinMatchGameRoomResponseV2>
    {
        private static readonly pb::MessageParser<JoinMatchGameRoomResponseV2> _parser = new pb::MessageParser<JoinMatchGameRoomResponseV2>(() => new JoinMatchGameRoomResponseV2());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<JoinMatchGameRoomResponseV2> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[177]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchGameRoomResponseV2()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchGameRoomResponseV2(JoinMatchGameRoomResponseV2 other) : this()
        {
            seatId_ = other.seatId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchGameRoomResponseV2 Clone()
        {
            return new JoinMatchGameRoomResponseV2(this);
        }

        /// <summary>Field number for the "seatId" field.</summary>
        public const int SeatIdFieldNumber = 1;
        private int seatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SeatId
        {
            get { return seatId_; }
            set
            {
                seatId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as JoinMatchGameRoomResponseV2);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(JoinMatchGameRoomResponseV2 other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SeatId != other.SeatId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SeatId != 0) hash ^= SeatId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SeatId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(SeatId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(JoinMatchGameRoomResponseV2 other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SeatId != 0)
            {
                SeatId = other.SeatId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SeatId = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class JoinMatchmakingRequestV2 : pb::IMessage<JoinMatchmakingRequestV2>
    {
        private static readonly pb::MessageParser<JoinMatchmakingRequestV2> _parser = new pb::MessageParser<JoinMatchmakingRequestV2>(() => new JoinMatchmakingRequestV2());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<JoinMatchmakingRequestV2> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[178]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingRequestV2()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingRequestV2(JoinMatchmakingRequestV2 other) : this()
        {
            eventId_ = other.eventId_;
            courseId_ = other.courseId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingRequestV2 Clone()
        {
            return new JoinMatchmakingRequestV2(this);
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 1;
        private string eventId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "courseId" field.</summary>
        public const int CourseIdFieldNumber = 2;
        private string courseId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CourseId
        {
            get { return courseId_; }
            set
            {
                courseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as JoinMatchmakingRequestV2);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(JoinMatchmakingRequestV2 other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventId != other.EventId) return false;
            if (CourseId != other.CourseId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventId.Length != 0) hash ^= EventId.GetHashCode();
            if (CourseId.Length != 0) hash ^= CourseId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EventId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(EventId);
            }
            if (CourseId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(CourseId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
            }
            if (CourseId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CourseId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(JoinMatchmakingRequestV2 other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventId.Length != 0)
            {
                EventId = other.EventId;
            }
            if (other.CourseId.Length != 0)
            {
                CourseId = other.CourseId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            EventId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            CourseId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class JoinMatchmakingResponse : pb::IMessage<JoinMatchmakingResponse>
    {
        private static readonly pb::MessageParser<JoinMatchmakingResponse> _parser = new pb::MessageParser<JoinMatchmakingResponse>(() => new JoinMatchmakingResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<JoinMatchmakingResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[179]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingResponse(JoinMatchmakingResponse other) : this()
        {
            responseCode_ = other.responseCode_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingResponse Clone()
        {
            return new JoinMatchmakingResponse(this);
        }

        /// <summary>Field number for the "responseCode" field.</summary>
        public const int ResponseCodeFieldNumber = 1;
        private JoinMatchmakingResponseCode responseCode_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingResponseCode ResponseCode
        {
            get { return responseCode_; }
            set
            {
                responseCode_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as JoinMatchmakingResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(JoinMatchmakingResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ResponseCode != other.ResponseCode) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ResponseCode != 0) hash ^= ResponseCode.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ResponseCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ResponseCode);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ResponseCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ResponseCode);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(JoinMatchmakingResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ResponseCode != 0)
            {
                ResponseCode = other.ResponseCode;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            responseCode_ = (JoinMatchmakingResponseCode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class JoinMatchmakingResponseV2 : pb::IMessage<JoinMatchmakingResponseV2>
    {
        private static readonly pb::MessageParser<JoinMatchmakingResponseV2> _parser = new pb::MessageParser<JoinMatchmakingResponseV2>(() => new JoinMatchmakingResponseV2());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<JoinMatchmakingResponseV2> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[180]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingResponseV2()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingResponseV2(JoinMatchmakingResponseV2 other) : this()
        {
            responseCode_ = other.responseCode_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingResponseV2 Clone()
        {
            return new JoinMatchmakingResponseV2(this);
        }

        /// <summary>Field number for the "responseCode" field.</summary>
        public const int ResponseCodeFieldNumber = 1;
        private JoinMatchmakingResponseCode responseCode_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingResponseCode ResponseCode
        {
            get { return responseCode_; }
            set
            {
                responseCode_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as JoinMatchmakingResponseV2);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(JoinMatchmakingResponseV2 other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ResponseCode != other.ResponseCode) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ResponseCode != 0) hash ^= ResponseCode.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ResponseCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ResponseCode);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ResponseCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ResponseCode);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(JoinMatchmakingResponseV2 other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ResponseCode != 0)
            {
                ResponseCode = other.ResponseCode;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            responseCode_ = (JoinMatchmakingResponseCode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class JoinQueueRequest : pb::IMessage<JoinQueueRequest>
    {
        private static readonly pb::MessageParser<JoinQueueRequest> _parser = new pb::MessageParser<JoinQueueRequest>(() => new JoinQueueRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<JoinQueueRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[181]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinQueueRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinQueueRequest(JoinQueueRequest other) : this()
        {
            eventId_ = other.eventId_;
            deckId_ = other.deckId_;
            courseId_ = other.courseId_;
            matchmakingFilter_ = other.matchmakingFilter_;
            queueType_ = other.queueType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinQueueRequest Clone()
        {
            return new JoinQueueRequest(this);
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 2;
        private string eventId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "deckId" field.</summary>
        public const int DeckIdFieldNumber = 3;
        private string deckId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeckId
        {
            get { return deckId_; }
            set
            {
                deckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "courseId" field.</summary>
        public const int CourseIdFieldNumber = 5;
        private string courseId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CourseId
        {
            get { return courseId_; }
            set
            {
                courseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "matchmakingFilter" field.</summary>
        public const int MatchmakingFilterFieldNumber = 4;
        private string matchmakingFilter_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchmakingFilter
        {
            get { return matchmakingFilter_; }
            set
            {
                matchmakingFilter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "queueType" field.</summary>
        public const int QueueTypeFieldNumber = 1;
        private QueueType queueType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueueType QueueType
        {
            get { return queueType_; }
            set
            {
                queueType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as JoinQueueRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(JoinQueueRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventId != other.EventId) return false;
            if (DeckId != other.DeckId) return false;
            if (CourseId != other.CourseId) return false;
            if (MatchmakingFilter != other.MatchmakingFilter) return false;
            if (QueueType != other.QueueType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventId.Length != 0) hash ^= EventId.GetHashCode();
            if (DeckId.Length != 0) hash ^= DeckId.GetHashCode();
            if (CourseId.Length != 0) hash ^= CourseId.GetHashCode();
            if (MatchmakingFilter.Length != 0) hash ^= MatchmakingFilter.GetHashCode();
            if (QueueType != 0) hash ^= QueueType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (QueueType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)QueueType);
            }
            if (EventId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(EventId);
            }
            if (DeckId.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(DeckId);
            }
            if (MatchmakingFilter.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(MatchmakingFilter);
            }
            if (CourseId.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(CourseId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
            }
            if (DeckId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckId);
            }
            if (CourseId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CourseId);
            }
            if (MatchmakingFilter.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchmakingFilter);
            }
            if (QueueType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)QueueType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(JoinQueueRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventId.Length != 0)
            {
                EventId = other.EventId;
            }
            if (other.DeckId.Length != 0)
            {
                DeckId = other.DeckId;
            }
            if (other.CourseId.Length != 0)
            {
                CourseId = other.CourseId;
            }
            if (other.MatchmakingFilter.Length != 0)
            {
                MatchmakingFilter = other.MatchmakingFilter;
            }
            if (other.QueueType != 0)
            {
                QueueType = other.QueueType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            queueType_ = (QueueType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            EventId = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            DeckId = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            MatchmakingFilter = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            CourseId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class JoinQueueResponse : pb::IMessage<JoinQueueResponse>
    {
        private static readonly pb::MessageParser<JoinQueueResponse> _parser = new pb::MessageParser<JoinQueueResponse>(() => new JoinQueueResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<JoinQueueResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[182]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinQueueResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinQueueResponse(JoinQueueResponse other) : this()
        {
            queueInfo_ = other.queueInfo_ != null ? other.queueInfo_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinQueueResponse Clone()
        {
            return new JoinQueueResponse(this);
        }

        /// <summary>Field number for the "queueInfo" field.</summary>
        public const int QueueInfoFieldNumber = 5;
        private LobbyUserQueueInfo queueInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyUserQueueInfo QueueInfo
        {
            get { return queueInfo_; }
            set
            {
                queueInfo_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as JoinQueueResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(JoinQueueResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(QueueInfo, other.QueueInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (queueInfo_ != null) hash ^= QueueInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (queueInfo_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(QueueInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (queueInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueueInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(JoinQueueResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.queueInfo_ != null)
            {
                if (queueInfo_ == null)
                {
                    queueInfo_ = new LobbyUserQueueInfo();
                }
                QueueInfo.MergeFrom(other.QueueInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 42:
                        {
                            if (queueInfo_ == null)
                            {
                                queueInfo_ = new LobbyUserQueueInfo();
                            }
                            input.ReadMessage(queueInfo_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class KeyValuePairInfo : pb::IMessage<KeyValuePairInfo>
    {
        private static readonly pb::MessageParser<KeyValuePairInfo> _parser = new pb::MessageParser<KeyValuePairInfo>(() => new KeyValuePairInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KeyValuePairInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[183]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyValuePairInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyValuePairInfo(KeyValuePairInfo other) : this()
        {
            key_ = other.key_;
            valueUint32_ = other.valueUint32_.Clone();
            valueInt32_ = other.valueInt32_.Clone();
            valueUint64_ = other.valueUint64_.Clone();
            valueInt64_ = other.valueInt64_.Clone();
            valueBool_ = other.valueBool_.Clone();
            valueString_ = other.valueString_.Clone();
            valueFloat_ = other.valueFloat_.Clone();
            valueDouble_ = other.valueDouble_.Clone();
            type_ = other.type_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyValuePairInfo Clone()
        {
            return new KeyValuePairInfo(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key
        {
            get { return key_; }
            set
            {
                key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "valueUint32" field.</summary>
        public const int ValueUint32FieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_valueUint32_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> valueUint32_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ValueUint32
        {
            get { return valueUint32_; }
        }

        /// <summary>Field number for the "valueInt32" field.</summary>
        public const int ValueInt32FieldNumber = 4;
        private static readonly pb::FieldCodec<int> _repeated_valueInt32_codec
            = pb::FieldCodec.ForInt32(34);
        private readonly pbc::RepeatedField<int> valueInt32_ = new pbc::RepeatedField<int>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> ValueInt32
        {
            get { return valueInt32_; }
        }

        /// <summary>Field number for the "valueUint64" field.</summary>
        public const int ValueUint64FieldNumber = 5;
        private static readonly pb::FieldCodec<ulong> _repeated_valueUint64_codec
            = pb::FieldCodec.ForUInt64(42);
        private readonly pbc::RepeatedField<ulong> valueUint64_ = new pbc::RepeatedField<ulong>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ulong> ValueUint64
        {
            get { return valueUint64_; }
        }

        /// <summary>Field number for the "valueInt64" field.</summary>
        public const int ValueInt64FieldNumber = 6;
        private static readonly pb::FieldCodec<long> _repeated_valueInt64_codec
            = pb::FieldCodec.ForInt64(50);
        private readonly pbc::RepeatedField<long> valueInt64_ = new pbc::RepeatedField<long>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> ValueInt64
        {
            get { return valueInt64_; }
        }

        /// <summary>Field number for the "valueBool" field.</summary>
        public const int ValueBoolFieldNumber = 7;
        private static readonly pb::FieldCodec<bool> _repeated_valueBool_codec
            = pb::FieldCodec.ForBool(58);
        private readonly pbc::RepeatedField<bool> valueBool_ = new pbc::RepeatedField<bool>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<bool> ValueBool
        {
            get { return valueBool_; }
        }

        /// <summary>Field number for the "valueString" field.</summary>
        public const int ValueStringFieldNumber = 8;
        private static readonly pb::FieldCodec<string> _repeated_valueString_codec
            = pb::FieldCodec.ForString(66);
        private readonly pbc::RepeatedField<string> valueString_ = new pbc::RepeatedField<string>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> ValueString
        {
            get { return valueString_; }
        }

        /// <summary>Field number for the "valueFloat" field.</summary>
        public const int ValueFloatFieldNumber = 9;
        private static readonly pb::FieldCodec<float> _repeated_valueFloat_codec
            = pb::FieldCodec.ForFloat(74);
        private readonly pbc::RepeatedField<float> valueFloat_ = new pbc::RepeatedField<float>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ValueFloat
        {
            get { return valueFloat_; }
        }

        /// <summary>Field number for the "valueDouble" field.</summary>
        public const int ValueDoubleFieldNumber = 10;
        private static readonly pb::FieldCodec<double> _repeated_valueDouble_codec
            = pb::FieldCodec.ForDouble(82);
        private readonly pbc::RepeatedField<double> valueDouble_ = new pbc::RepeatedField<double>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> ValueDouble
        {
            get { return valueDouble_; }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private KeyValuePairValueType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyValuePairValueType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as KeyValuePairInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KeyValuePairInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Key != other.Key) return false;
            if (!valueUint32_.Equals(other.valueUint32_)) return false;
            if (!valueInt32_.Equals(other.valueInt32_)) return false;
            if (!valueUint64_.Equals(other.valueUint64_)) return false;
            if (!valueInt64_.Equals(other.valueInt64_)) return false;
            if (!valueBool_.Equals(other.valueBool_)) return false;
            if (!valueString_.Equals(other.valueString_)) return false;
            if (!valueFloat_.Equals(other.valueFloat_)) return false;
            if (!valueDouble_.Equals(other.valueDouble_)) return false;
            if (Type != other.Type) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Key.Length != 0) hash ^= Key.GetHashCode();
            hash ^= valueUint32_.GetHashCode();
            hash ^= valueInt32_.GetHashCode();
            hash ^= valueUint64_.GetHashCode();
            hash ^= valueInt64_.GetHashCode();
            hash ^= valueBool_.GetHashCode();
            hash ^= valueString_.GetHashCode();
            hash ^= valueFloat_.GetHashCode();
            hash ^= valueDouble_.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Key.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Key);
            }
            if (Type != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Type);
            }
            valueUint32_.WriteTo(output, _repeated_valueUint32_codec);
            valueInt32_.WriteTo(output, _repeated_valueInt32_codec);
            valueUint64_.WriteTo(output, _repeated_valueUint64_codec);
            valueInt64_.WriteTo(output, _repeated_valueInt64_codec);
            valueBool_.WriteTo(output, _repeated_valueBool_codec);
            valueString_.WriteTo(output, _repeated_valueString_codec);
            valueFloat_.WriteTo(output, _repeated_valueFloat_codec);
            valueDouble_.WriteTo(output, _repeated_valueDouble_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Key.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
            }
            size += valueUint32_.CalculateSize(_repeated_valueUint32_codec);
            size += valueInt32_.CalculateSize(_repeated_valueInt32_codec);
            size += valueUint64_.CalculateSize(_repeated_valueUint64_codec);
            size += valueInt64_.CalculateSize(_repeated_valueInt64_codec);
            size += valueBool_.CalculateSize(_repeated_valueBool_codec);
            size += valueString_.CalculateSize(_repeated_valueString_codec);
            size += valueFloat_.CalculateSize(_repeated_valueFloat_codec);
            size += valueDouble_.CalculateSize(_repeated_valueDouble_codec);
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KeyValuePairInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Key.Length != 0)
            {
                Key = other.Key;
            }
            valueUint32_.Add(other.valueUint32_);
            valueInt32_.Add(other.valueInt32_);
            valueUint64_.Add(other.valueUint64_);
            valueInt64_.Add(other.valueInt64_);
            valueBool_.Add(other.valueBool_);
            valueString_.Add(other.valueString_);
            valueFloat_.Add(other.valueFloat_);
            valueDouble_.Add(other.valueDouble_);
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Key = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            type_ = (KeyValuePairValueType)input.ReadEnum();
                            break;
                        }
                    case 26:
                    case 24:
                        {
                            valueUint32_.AddEntriesFrom(input, _repeated_valueUint32_codec);
                            break;
                        }
                    case 34:
                    case 32:
                        {
                            valueInt32_.AddEntriesFrom(input, _repeated_valueInt32_codec);
                            break;
                        }
                    case 42:
                    case 40:
                        {
                            valueUint64_.AddEntriesFrom(input, _repeated_valueUint64_codec);
                            break;
                        }
                    case 50:
                    case 48:
                        {
                            valueInt64_.AddEntriesFrom(input, _repeated_valueInt64_codec);
                            break;
                        }
                    case 58:
                    case 56:
                        {
                            valueBool_.AddEntriesFrom(input, _repeated_valueBool_codec);
                            break;
                        }
                    case 66:
                        {
                            valueString_.AddEntriesFrom(input, _repeated_valueString_codec);
                            break;
                        }
                    case 74:
                    case 77:
                        {
                            valueFloat_.AddEntriesFrom(input, _repeated_valueFloat_codec);
                            break;
                        }
                    case 82:
                    case 81:
                        {
                            valueDouble_.AddEntriesFrom(input, _repeated_valueDouble_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LobbyDraftInfo : pb::IMessage<LobbyDraftInfo>
    {
        private static readonly pb::MessageParser<LobbyDraftInfo> _parser = new pb::MessageParser<LobbyDraftInfo>(() => new LobbyDraftInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyDraftInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[184]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyDraftInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyDraftInfo(LobbyDraftInfo other) : this()
        {
            userId_ = other.userId_;
            eventId_ = other.eventId_;
            draftId_ = other.draftId_;
            draftStartedTimestamp_ = other.draftStartedTimestamp_;
            draftCompletedTimestamp_ = other.draftCompletedTimestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyDraftInfo Clone()
        {
            return new LobbyDraftInfo(this);
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 2;
        private string eventId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "draftId" field.</summary>
        public const int DraftIdFieldNumber = 3;
        private string draftId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DraftId
        {
            get { return draftId_; }
            set
            {
                draftId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "draftStartedTimestamp" field.</summary>
        public const int DraftStartedTimestampFieldNumber = 20;
        private long draftStartedTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DraftStartedTimestamp
        {
            get { return draftStartedTimestamp_; }
            set
            {
                draftStartedTimestamp_ = value;
            }
        }

        /// <summary>Field number for the "draftCompletedTimestamp" field.</summary>
        public const int DraftCompletedTimestampFieldNumber = 21;
        private long draftCompletedTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DraftCompletedTimestamp
        {
            get { return draftCompletedTimestamp_; }
            set
            {
                draftCompletedTimestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LobbyDraftInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyDraftInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (EventId != other.EventId) return false;
            if (DraftId != other.DraftId) return false;
            if (DraftStartedTimestamp != other.DraftStartedTimestamp) return false;
            if (DraftCompletedTimestamp != other.DraftCompletedTimestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (EventId.Length != 0) hash ^= EventId.GetHashCode();
            if (DraftId.Length != 0) hash ^= DraftId.GetHashCode();
            if (DraftStartedTimestamp != 0L) hash ^= DraftStartedTimestamp.GetHashCode();
            if (DraftCompletedTimestamp != 0L) hash ^= DraftCompletedTimestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (EventId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(EventId);
            }
            if (DraftId.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(DraftId);
            }
            if (DraftStartedTimestamp != 0L)
            {
                output.WriteRawTag(160, 1);
                output.WriteInt64(DraftStartedTimestamp);
            }
            if (DraftCompletedTimestamp != 0L)
            {
                output.WriteRawTag(168, 1);
                output.WriteInt64(DraftCompletedTimestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (EventId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
            }
            if (DraftId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DraftId);
            }
            if (DraftStartedTimestamp != 0L)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(DraftStartedTimestamp);
            }
            if (DraftCompletedTimestamp != 0L)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(DraftCompletedTimestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyDraftInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.EventId.Length != 0)
            {
                EventId = other.EventId;
            }
            if (other.DraftId.Length != 0)
            {
                DraftId = other.DraftId;
            }
            if (other.DraftStartedTimestamp != 0L)
            {
                DraftStartedTimestamp = other.DraftStartedTimestamp;
            }
            if (other.DraftCompletedTimestamp != 0L)
            {
                DraftCompletedTimestamp = other.DraftCompletedTimestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            EventId = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            DraftId = input.ReadString();
                            break;
                        }
                    case 160:
                        {
                            DraftStartedTimestamp = input.ReadInt64();
                            break;
                        }
                    case 168:
                        {
                            DraftCompletedTimestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LobbyError : pb::IMessage<LobbyError>
    {
        private static readonly pb::MessageParser<LobbyError> _parser = new pb::MessageParser<LobbyError>(() => new LobbyError());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyError> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[185]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyError()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyError(LobbyError other) : this()
        {
            errorMessage_ = other.errorMessage_;
            lobbyErrorCode_ = other.lobbyErrorCode_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyError Clone()
        {
            return new LobbyError(this);
        }

        /// <summary>Field number for the "errorMessage" field.</summary>
        public const int ErrorMessageFieldNumber = 3;
        private string errorMessage_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorMessage
        {
            get { return errorMessage_; }
            set
            {
                errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "lobbyErrorCode" field.</summary>
        public const int LobbyErrorCodeFieldNumber = 2;
        private LobbyErrorCode lobbyErrorCode_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyErrorCode LobbyErrorCode
        {
            get { return lobbyErrorCode_; }
            set
            {
                lobbyErrorCode_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LobbyError);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyError other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ErrorMessage != other.ErrorMessage) return false;
            if (LobbyErrorCode != other.LobbyErrorCode) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
            if (LobbyErrorCode != 0) hash ^= LobbyErrorCode.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (LobbyErrorCode != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)LobbyErrorCode);
            }
            if (ErrorMessage.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(ErrorMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ErrorMessage.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
            }
            if (LobbyErrorCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)LobbyErrorCode);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyError other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ErrorMessage.Length != 0)
            {
                ErrorMessage = other.ErrorMessage;
            }
            if (other.LobbyErrorCode != 0)
            {
                LobbyErrorCode = other.LobbyErrorCode;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 16:
                        {
                            lobbyErrorCode_ = (LobbyErrorCode)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            ErrorMessage = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LobbyMatchCompletedEvent : pb::IMessage<LobbyMatchCompletedEvent>
    {
        private static readonly pb::MessageParser<LobbyMatchCompletedEvent> _parser = new pb::MessageParser<LobbyMatchCompletedEvent>(() => new LobbyMatchCompletedEvent());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyMatchCompletedEvent> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[186]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchCompletedEvent()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchCompletedEvent(LobbyMatchCompletedEvent other) : this()
        {
            matchInfo_ = other.matchInfo_ != null ? other.matchInfo_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchCompletedEvent Clone()
        {
            return new LobbyMatchCompletedEvent(this);
        }

        /// <summary>Field number for the "matchInfo" field.</summary>
        public const int MatchInfoFieldNumber = 1;
        private LobbyMatchInfo matchInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchInfo MatchInfo
        {
            get { return matchInfo_; }
            set
            {
                matchInfo_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LobbyMatchCompletedEvent);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyMatchCompletedEvent other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(MatchInfo, other.MatchInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (matchInfo_ != null) hash ^= MatchInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (matchInfo_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(MatchInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (matchInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyMatchCompletedEvent other)
        {
            if (other == null)
            {
                return;
            }
            if (other.matchInfo_ != null)
            {
                if (matchInfo_ == null)
                {
                    matchInfo_ = new LobbyMatchInfo();
                }
                MatchInfo.MergeFrom(other.MatchInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (matchInfo_ == null)
                            {
                                matchInfo_ = new LobbyMatchInfo();
                            }
                            input.ReadMessage(matchInfo_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LobbyMatchConfig : pb::IMessage<LobbyMatchConfig>
    {
        private static readonly pb::MessageParser<LobbyMatchConfig> _parser = new pb::MessageParser<LobbyMatchConfig>(() => new LobbyMatchConfig());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyMatchConfig> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[187]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchConfig()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchConfig(LobbyMatchConfig other) : this()
        {
            matchId_ = other.matchId_;
            eventId_ = other.eventId_;
            matchGatewayUrl_ = other.matchGatewayUrl_;
            mcFabricUri_ = other.mcFabricUri_;
            players_ = other.players_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchConfig Clone()
        {
            return new LobbyMatchConfig(this);
        }

        /// <summary>Field number for the "matchId" field.</summary>
        public const int MatchIdFieldNumber = 1;
        private string matchId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchId
        {
            get { return matchId_; }
            set
            {
                matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 2;
        private string eventId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "matchGatewayUrl" field.</summary>
        public const int MatchGatewayUrlFieldNumber = 3;
        private string matchGatewayUrl_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchGatewayUrl
        {
            get { return matchGatewayUrl_; }
            set
            {
                matchGatewayUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "mcFabricUri" field.</summary>
        public const int McFabricUriFieldNumber = 4;
        private string mcFabricUri_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string McFabricUri
        {
            get { return mcFabricUri_; }
            set
            {
                mcFabricUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 10;
        private static readonly pb::FieldCodec<LobbyMatchPlayerInfo> _repeated_players_codec
            = pb::FieldCodec.ForMessage(82, LobbyMatchPlayerInfo.Parser);
        private readonly pbc::RepeatedField<LobbyMatchPlayerInfo> players_ = new pbc::RepeatedField<LobbyMatchPlayerInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<LobbyMatchPlayerInfo> Players
        {
            get { return players_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LobbyMatchConfig);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyMatchConfig other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchId != other.MatchId) return false;
            if (EventId != other.EventId) return false;
            if (MatchGatewayUrl != other.MatchGatewayUrl) return false;
            if (McFabricUri != other.McFabricUri) return false;
            if (!players_.Equals(other.players_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
            if (EventId.Length != 0) hash ^= EventId.GetHashCode();
            if (MatchGatewayUrl.Length != 0) hash ^= MatchGatewayUrl.GetHashCode();
            if (McFabricUri.Length != 0) hash ^= McFabricUri.GetHashCode();
            hash ^= players_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MatchId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(MatchId);
            }
            if (EventId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(EventId);
            }
            if (MatchGatewayUrl.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(MatchGatewayUrl);
            }
            if (McFabricUri.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(McFabricUri);
            }
            players_.WriteTo(output, _repeated_players_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
            }
            if (EventId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
            }
            if (MatchGatewayUrl.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchGatewayUrl);
            }
            if (McFabricUri.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(McFabricUri);
            }
            size += players_.CalculateSize(_repeated_players_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyMatchConfig other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchId.Length != 0)
            {
                MatchId = other.MatchId;
            }
            if (other.EventId.Length != 0)
            {
                EventId = other.EventId;
            }
            if (other.MatchGatewayUrl.Length != 0)
            {
                MatchGatewayUrl = other.MatchGatewayUrl;
            }
            if (other.McFabricUri.Length != 0)
            {
                McFabricUri = other.McFabricUri;
            }
            players_.Add(other.players_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            MatchId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            EventId = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            MatchGatewayUrl = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            McFabricUri = input.ReadString();
                            break;
                        }
                    case 82:
                        {
                            players_.AddEntriesFrom(input, _repeated_players_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LobbyMatchCreatePendingEvent : pb::IMessage<LobbyMatchCreatePendingEvent>
    {
        private static readonly pb::MessageParser<LobbyMatchCreatePendingEvent> _parser = new pb::MessageParser<LobbyMatchCreatePendingEvent>(() => new LobbyMatchCreatePendingEvent());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyMatchCreatePendingEvent> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[188]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchCreatePendingEvent()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchCreatePendingEvent(LobbyMatchCreatePendingEvent other) : this()
        {
            matchCreatePendingTimestamp_ = other.matchCreatePendingTimestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchCreatePendingEvent Clone()
        {
            return new LobbyMatchCreatePendingEvent(this);
        }

        /// <summary>Field number for the "matchCreatePendingTimestamp" field.</summary>
        public const int MatchCreatePendingTimestampFieldNumber = 10;
        private long matchCreatePendingTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MatchCreatePendingTimestamp
        {
            get { return matchCreatePendingTimestamp_; }
            set
            {
                matchCreatePendingTimestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LobbyMatchCreatePendingEvent);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyMatchCreatePendingEvent other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchCreatePendingTimestamp != other.MatchCreatePendingTimestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchCreatePendingTimestamp != 0L) hash ^= MatchCreatePendingTimestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MatchCreatePendingTimestamp != 0L)
            {
                output.WriteRawTag(80);
                output.WriteInt64(MatchCreatePendingTimestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchCreatePendingTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchCreatePendingTimestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyMatchCreatePendingEvent other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchCreatePendingTimestamp != 0L)
            {
                MatchCreatePendingTimestamp = other.MatchCreatePendingTimestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 80:
                        {
                            MatchCreatePendingTimestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LobbyMatchCreatedEvent : pb::IMessage<LobbyMatchCreatedEvent>
    {
        private static readonly pb::MessageParser<LobbyMatchCreatedEvent> _parser = new pb::MessageParser<LobbyMatchCreatedEvent>(() => new LobbyMatchCreatedEvent());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyMatchCreatedEvent> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[189]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchCreatedEvent()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchCreatedEvent(LobbyMatchCreatedEvent other) : this()
        {
            matchConfig_ = other.matchConfig_ != null ? other.matchConfig_.Clone() : null;
            matchCreatedTimestamp_ = other.matchCreatedTimestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchCreatedEvent Clone()
        {
            return new LobbyMatchCreatedEvent(this);
        }

        /// <summary>Field number for the "matchConfig" field.</summary>
        public const int MatchConfigFieldNumber = 1;
        private LobbyMatchConfig matchConfig_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchConfig MatchConfig
        {
            get { return matchConfig_; }
            set
            {
                matchConfig_ = value;
            }
        }

        /// <summary>Field number for the "matchCreatedTimestamp" field.</summary>
        public const int MatchCreatedTimestampFieldNumber = 10;
        private long matchCreatedTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MatchCreatedTimestamp
        {
            get { return matchCreatedTimestamp_; }
            set
            {
                matchCreatedTimestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LobbyMatchCreatedEvent);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyMatchCreatedEvent other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(MatchConfig, other.MatchConfig)) return false;
            if (MatchCreatedTimestamp != other.MatchCreatedTimestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (matchConfig_ != null) hash ^= MatchConfig.GetHashCode();
            if (MatchCreatedTimestamp != 0L) hash ^= MatchCreatedTimestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (matchConfig_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(MatchConfig);
            }
            if (MatchCreatedTimestamp != 0L)
            {
                output.WriteRawTag(80);
                output.WriteInt64(MatchCreatedTimestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (matchConfig_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchConfig);
            }
            if (MatchCreatedTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchCreatedTimestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyMatchCreatedEvent other)
        {
            if (other == null)
            {
                return;
            }
            if (other.matchConfig_ != null)
            {
                if (matchConfig_ == null)
                {
                    matchConfig_ = new LobbyMatchConfig();
                }
                MatchConfig.MergeFrom(other.MatchConfig);
            }
            if (other.MatchCreatedTimestamp != 0L)
            {
                MatchCreatedTimestamp = other.MatchCreatedTimestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (matchConfig_ == null)
                            {
                                matchConfig_ = new LobbyMatchConfig();
                            }
                            input.ReadMessage(matchConfig_);
                            break;
                        }
                    case 80:
                        {
                            MatchCreatedTimestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LobbyMatchInfo : pb::IMessage<LobbyMatchInfo>
    {
        private static readonly pb::MessageParser<LobbyMatchInfo> _parser = new pb::MessageParser<LobbyMatchInfo>(() => new LobbyMatchInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyMatchInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[190]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchInfo(LobbyMatchInfo other) : this()
        {
            config_ = other.config_ != null ? other.config_.Clone() : null;
            matchGameRoomInfo_ = other.matchGameRoomInfo_ != null ? other.matchGameRoomInfo_.Clone() : null;
            matchCreatedTimestamp_ = other.matchCreatedTimestamp_;
            matchStartedTimestamp_ = other.matchStartedTimestamp_;
            matchCompletedTimestamp_ = other.matchCompletedTimestamp_;
            matchResultsSavedTimestamp_ = other.matchResultsSavedTimestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchInfo Clone()
        {
            return new LobbyMatchInfo(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private LobbyMatchConfig config_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchConfig Config
        {
            get { return config_; }
            set
            {
                config_ = value;
            }
        }

        /// <summary>Field number for the "matchGameRoomInfo" field.</summary>
        public const int MatchGameRoomInfoFieldNumber = 2;
        private MatchGameRoomInfo matchGameRoomInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomInfo MatchGameRoomInfo
        {
            get { return matchGameRoomInfo_; }
            set
            {
                matchGameRoomInfo_ = value;
            }
        }

        /// <summary>Field number for the "matchCreatedTimestamp" field.</summary>
        public const int MatchCreatedTimestampFieldNumber = 10;
        private long matchCreatedTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MatchCreatedTimestamp
        {
            get { return matchCreatedTimestamp_; }
            set
            {
                matchCreatedTimestamp_ = value;
            }
        }

        /// <summary>Field number for the "matchStartedTimestamp" field.</summary>
        public const int MatchStartedTimestampFieldNumber = 11;
        private long matchStartedTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MatchStartedTimestamp
        {
            get { return matchStartedTimestamp_; }
            set
            {
                matchStartedTimestamp_ = value;
            }
        }

        /// <summary>Field number for the "matchCompletedTimestamp" field.</summary>
        public const int MatchCompletedTimestampFieldNumber = 12;
        private long matchCompletedTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MatchCompletedTimestamp
        {
            get { return matchCompletedTimestamp_; }
            set
            {
                matchCompletedTimestamp_ = value;
            }
        }

        /// <summary>Field number for the "matchResultsSavedTimestamp" field.</summary>
        public const int MatchResultsSavedTimestampFieldNumber = 13;
        private long matchResultsSavedTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MatchResultsSavedTimestamp
        {
            get { return matchResultsSavedTimestamp_; }
            set
            {
                matchResultsSavedTimestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LobbyMatchInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyMatchInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Config, other.Config)) return false;
            if (!object.Equals(MatchGameRoomInfo, other.MatchGameRoomInfo)) return false;
            if (MatchCreatedTimestamp != other.MatchCreatedTimestamp) return false;
            if (MatchStartedTimestamp != other.MatchStartedTimestamp) return false;
            if (MatchCompletedTimestamp != other.MatchCompletedTimestamp) return false;
            if (MatchResultsSavedTimestamp != other.MatchResultsSavedTimestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (config_ != null) hash ^= Config.GetHashCode();
            if (matchGameRoomInfo_ != null) hash ^= MatchGameRoomInfo.GetHashCode();
            if (MatchCreatedTimestamp != 0L) hash ^= MatchCreatedTimestamp.GetHashCode();
            if (MatchStartedTimestamp != 0L) hash ^= MatchStartedTimestamp.GetHashCode();
            if (MatchCompletedTimestamp != 0L) hash ^= MatchCompletedTimestamp.GetHashCode();
            if (MatchResultsSavedTimestamp != 0L) hash ^= MatchResultsSavedTimestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (config_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Config);
            }
            if (matchGameRoomInfo_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(MatchGameRoomInfo);
            }
            if (MatchCreatedTimestamp != 0L)
            {
                output.WriteRawTag(80);
                output.WriteInt64(MatchCreatedTimestamp);
            }
            if (MatchStartedTimestamp != 0L)
            {
                output.WriteRawTag(88);
                output.WriteInt64(MatchStartedTimestamp);
            }
            if (MatchCompletedTimestamp != 0L)
            {
                output.WriteRawTag(96);
                output.WriteInt64(MatchCompletedTimestamp);
            }
            if (MatchResultsSavedTimestamp != 0L)
            {
                output.WriteRawTag(104);
                output.WriteInt64(MatchResultsSavedTimestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (config_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
            }
            if (matchGameRoomInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchGameRoomInfo);
            }
            if (MatchCreatedTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchCreatedTimestamp);
            }
            if (MatchStartedTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchStartedTimestamp);
            }
            if (MatchCompletedTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchCompletedTimestamp);
            }
            if (MatchResultsSavedTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchResultsSavedTimestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyMatchInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.config_ != null)
            {
                if (config_ == null)
                {
                    config_ = new LobbyMatchConfig();
                }
                Config.MergeFrom(other.Config);
            }
            if (other.matchGameRoomInfo_ != null)
            {
                if (matchGameRoomInfo_ == null)
                {
                    matchGameRoomInfo_ = new MatchGameRoomInfo();
                }
                MatchGameRoomInfo.MergeFrom(other.MatchGameRoomInfo);
            }
            if (other.MatchCreatedTimestamp != 0L)
            {
                MatchCreatedTimestamp = other.MatchCreatedTimestamp;
            }
            if (other.MatchStartedTimestamp != 0L)
            {
                MatchStartedTimestamp = other.MatchStartedTimestamp;
            }
            if (other.MatchCompletedTimestamp != 0L)
            {
                MatchCompletedTimestamp = other.MatchCompletedTimestamp;
            }
            if (other.MatchResultsSavedTimestamp != 0L)
            {
                MatchResultsSavedTimestamp = other.MatchResultsSavedTimestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (config_ == null)
                            {
                                config_ = new LobbyMatchConfig();
                            }
                            input.ReadMessage(config_);
                            break;
                        }
                    case 18:
                        {
                            if (matchGameRoomInfo_ == null)
                            {
                                matchGameRoomInfo_ = new MatchGameRoomInfo();
                            }
                            input.ReadMessage(matchGameRoomInfo_);
                            break;
                        }
                    case 80:
                        {
                            MatchCreatedTimestamp = input.ReadInt64();
                            break;
                        }
                    case 88:
                        {
                            MatchStartedTimestamp = input.ReadInt64();
                            break;
                        }
                    case 96:
                        {
                            MatchCompletedTimestamp = input.ReadInt64();
                            break;
                        }
                    case 104:
                        {
                            MatchResultsSavedTimestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LobbyMatchPlayerInfo : pb::IMessage<LobbyMatchPlayerInfo>
    {
        private static readonly pb::MessageParser<LobbyMatchPlayerInfo> _parser = new pb::MessageParser<LobbyMatchPlayerInfo>(() => new LobbyMatchPlayerInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyMatchPlayerInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[191]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchPlayerInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchPlayerInfo(LobbyMatchPlayerInfo other) : this()
        {
            playerName_ = other.playerName_;
            systemSeatId_ = other.systemSeatId_;
            teamId_ = other.teamId_;
            isWotc_ = other.isWotc_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchPlayerInfo Clone()
        {
            return new LobbyMatchPlayerInfo(this);
        }

        /// <summary>Field number for the "playerName" field.</summary>
        public const int PlayerNameFieldNumber = 1;
        private string playerName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerName
        {
            get { return playerName_; }
            set
            {
                playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 2;
        private int systemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SystemSeatId
        {
            get { return systemSeatId_; }
            set
            {
                systemSeatId_ = value;
            }
        }

        /// <summary>Field number for the "teamId" field.</summary>
        public const int TeamIdFieldNumber = 3;
        private int teamId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TeamId
        {
            get { return teamId_; }
            set
            {
                teamId_ = value;
            }
        }

        /// <summary>Field number for the "isWotc" field.</summary>
        public const int IsWotcFieldNumber = 4;
        private bool isWotc_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsWotc
        {
            get { return isWotc_; }
            set
            {
                isWotc_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LobbyMatchPlayerInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyMatchPlayerInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PlayerName != other.PlayerName) return false;
            if (SystemSeatId != other.SystemSeatId) return false;
            if (TeamId != other.TeamId) return false;
            if (IsWotc != other.IsWotc) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
            if (SystemSeatId != 0) hash ^= SystemSeatId.GetHashCode();
            if (TeamId != 0) hash ^= TeamId.GetHashCode();
            if (IsWotc != false) hash ^= IsWotc.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PlayerName.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(PlayerName);
            }
            if (SystemSeatId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(SystemSeatId);
            }
            if (TeamId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(TeamId);
            }
            if (IsWotc != false)
            {
                output.WriteRawTag(32);
                output.WriteBool(IsWotc);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (PlayerName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
            }
            if (SystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SystemSeatId);
            }
            if (TeamId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
            }
            if (IsWotc != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyMatchPlayerInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.PlayerName.Length != 0)
            {
                PlayerName = other.PlayerName;
            }
            if (other.SystemSeatId != 0)
            {
                SystemSeatId = other.SystemSeatId;
            }
            if (other.TeamId != 0)
            {
                TeamId = other.TeamId;
            }
            if (other.IsWotc != false)
            {
                IsWotc = other.IsWotc;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            PlayerName = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            SystemSeatId = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            TeamId = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            IsWotc = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LobbyServiceInfo : pb::IMessage<LobbyServiceInfo>
    {
        private static readonly pb::MessageParser<LobbyServiceInfo> _parser = new pb::MessageParser<LobbyServiceInfo>(() => new LobbyServiceInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyServiceInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[192]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyServiceInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyServiceInfo(LobbyServiceInfo other) : this()
        {
            environmentId_ = other.environmentId_;
            serviceFabricServiceInfo_ = other.serviceFabricServiceInfo_ != null ? other.serviceFabricServiceInfo_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyServiceInfo Clone()
        {
            return new LobbyServiceInfo(this);
        }

        /// <summary>Field number for the "environmentId" field.</summary>
        public const int EnvironmentIdFieldNumber = 2;
        private string environmentId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EnvironmentId
        {
            get { return environmentId_; }
            set
            {
                environmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "serviceFabricServiceInfo" field.</summary>
        public const int ServiceFabricServiceInfoFieldNumber = 1;
        private ServiceFabricServiceInfo serviceFabricServiceInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServiceFabricServiceInfo ServiceFabricServiceInfo
        {
            get { return serviceFabricServiceInfo_; }
            set
            {
                serviceFabricServiceInfo_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LobbyServiceInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyServiceInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EnvironmentId != other.EnvironmentId) return false;
            if (!object.Equals(ServiceFabricServiceInfo, other.ServiceFabricServiceInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EnvironmentId.Length != 0) hash ^= EnvironmentId.GetHashCode();
            if (serviceFabricServiceInfo_ != null) hash ^= ServiceFabricServiceInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (serviceFabricServiceInfo_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(ServiceFabricServiceInfo);
            }
            if (EnvironmentId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(EnvironmentId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EnvironmentId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EnvironmentId);
            }
            if (serviceFabricServiceInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceFabricServiceInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyServiceInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EnvironmentId.Length != 0)
            {
                EnvironmentId = other.EnvironmentId;
            }
            if (other.serviceFabricServiceInfo_ != null)
            {
                if (serviceFabricServiceInfo_ == null)
                {
                    serviceFabricServiceInfo_ = new ServiceFabricServiceInfo();
                }
                ServiceFabricServiceInfo.MergeFrom(other.ServiceFabricServiceInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (serviceFabricServiceInfo_ == null)
                            {
                                serviceFabricServiceInfo_ = new ServiceFabricServiceInfo();
                            }
                            input.ReadMessage(serviceFabricServiceInfo_);
                            break;
                        }
                    case 18:
                        {
                            EnvironmentId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LobbyToClientMessage : pb::IMessage<LobbyToClientMessage>
    {
        private static readonly pb::MessageParser<LobbyToClientMessage> _parser = new pb::MessageParser<LobbyToClientMessage>(() => new LobbyToClientMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyToClientMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[193]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyToClientMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyToClientMessage(LobbyToClientMessage other) : this()
        {
            error_ = other.error_ != null ? other.error_.Clone() : null;
            requestId_ = other.requestId_;
            timestamp_ = other.timestamp_;
            correlationInfo_ = other.correlationInfo_ != null ? other.correlationInfo_.Clone() : null;
            switch (other.MessageCase)
            {
                case MessageOneofCase.AuthenticateResponse:
                    AuthenticateResponse = other.AuthenticateResponse.Clone();
                    break;
                case MessageOneofCase.ServiceInfoResponse:
                    ServiceInfoResponse = other.ServiceInfoResponse.Clone();
                    break;
                case MessageOneofCase.GetUserIdsResponse:
                    GetUserIdsResponse = other.GetUserIdsResponse.Clone();
                    break;
                case MessageOneofCase.GetUserInfoResponse:
                    GetUserInfoResponse = other.GetUserInfoResponse.Clone();
                    break;
                case MessageOneofCase.ClearLobbyUserStatusResponse:
                    ClearLobbyUserStatusResponse = other.ClearLobbyUserStatusResponse.Clone();
                    break;
                case MessageOneofCase.JoinQueueResponse:
                    JoinQueueResponse = other.JoinQueueResponse.Clone();
                    break;
                case MessageOneofCase.DropQueueResponse:
                    DropQueueResponse = other.DropQueueResponse.Clone();
                    break;
                case MessageOneofCase.DeleteQueueResponse:
                    DeleteQueueResponse = other.DeleteQueueResponse.Clone();
                    break;
                case MessageOneofCase.JoinMatchmakingResponseV2:
                    JoinMatchmakingResponseV2 = other.JoinMatchmakingResponseV2.Clone();
                    break;
                case MessageOneofCase.DropMatchmakingResponseV2:
                    DropMatchmakingResponseV2 = other.DropMatchmakingResponseV2.Clone();
                    break;
                case MessageOneofCase.JoinMatchmakingResponse:
                    JoinMatchmakingResponse = other.JoinMatchmakingResponse.Clone();
                    break;
                case MessageOneofCase.DropMatchmakingResponse:
                    DropMatchmakingResponse = other.DropMatchmakingResponse.Clone();
                    break;
                case MessageOneofCase.ClientToMatchServiceMessage:
                    ClientToMatchServiceMessage = other.ClientToMatchServiceMessage.Clone();
                    break;
                case MessageOneofCase.MatchCreatedEvent:
                    MatchCreatedEvent = other.MatchCreatedEvent.Clone();
                    break;
                case MessageOneofCase.MatchCompletedEvent:
                    MatchCompletedEvent = other.MatchCompletedEvent.Clone();
                    break;
                case MessageOneofCase.MatchCreatePendingEvent:
                    MatchCreatePendingEvent = other.MatchCreatePendingEvent.Clone();
                    break;
                case MessageOneofCase.EchoResponse:
                    EchoResponse = other.EchoResponse.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyToClientMessage Clone()
        {
            return new LobbyToClientMessage(this);
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 2;
        private LobbyError error_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyError Error
        {
            get { return error_; }
            set
            {
                error_ = value;
            }
        }

        /// <summary>Field number for the "requestId" field.</summary>
        public const int RequestIdFieldNumber = 3;
        private int requestId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RequestId
        {
            get { return requestId_; }
            set
            {
                requestId_ = value;
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 4;
        private long timestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        /// <summary>Field number for the "correlationInfo" field.</summary>
        public const int CorrelationInfoFieldNumber = 5;
        private CorrelationInfo correlationInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CorrelationInfo CorrelationInfo
        {
            get { return correlationInfo_; }
            set
            {
                correlationInfo_ = value;
            }
        }

        /// <summary>Field number for the "authenticateResponse" field.</summary>
        public const int AuthenticateResponseFieldNumber = 100;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticateResponse AuthenticateResponse
        {
            get { return messageCase_ == MessageOneofCase.AuthenticateResponse ? (AuthenticateResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.AuthenticateResponse;
            }
        }

        /// <summary>Field number for the "serviceInfoResponse" field.</summary>
        public const int ServiceInfoResponseFieldNumber = 101;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyServiceInfo ServiceInfoResponse
        {
            get { return messageCase_ == MessageOneofCase.ServiceInfoResponse ? (LobbyServiceInfo)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ServiceInfoResponse;
            }
        }

        /// <summary>Field number for the "getUserIdsResponse" field.</summary>
        public const int GetUserIdsResponseFieldNumber = 110;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserIdsResponse GetUserIdsResponse
        {
            get { return messageCase_ == MessageOneofCase.GetUserIdsResponse ? (GetLobbyUserIdsResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GetUserIdsResponse;
            }
        }

        /// <summary>Field number for the "getUserInfoResponse" field.</summary>
        public const int GetUserInfoResponseFieldNumber = 111;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetLobbyUserInfoResponse GetUserInfoResponse
        {
            get { return messageCase_ == MessageOneofCase.GetUserInfoResponse ? (GetLobbyUserInfoResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GetUserInfoResponse;
            }
        }

        /// <summary>Field number for the "clearLobbyUserStatusResponse" field.</summary>
        public const int ClearLobbyUserStatusResponseFieldNumber = 112;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClearLobbyUserStatusResponse ClearLobbyUserStatusResponse
        {
            get { return messageCase_ == MessageOneofCase.ClearLobbyUserStatusResponse ? (ClearLobbyUserStatusResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClearLobbyUserStatusResponse;
            }
        }

        /// <summary>Field number for the "joinQueueResponse" field.</summary>
        public const int JoinQueueResponseFieldNumber = 200;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinQueueResponse JoinQueueResponse
        {
            get { return messageCase_ == MessageOneofCase.JoinQueueResponse ? (JoinQueueResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.JoinQueueResponse;
            }
        }

        /// <summary>Field number for the "dropQueueResponse" field.</summary>
        public const int DropQueueResponseFieldNumber = 201;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropQueueResponse DropQueueResponse
        {
            get { return messageCase_ == MessageOneofCase.DropQueueResponse ? (DropQueueResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DropQueueResponse;
            }
        }

        /// <summary>Field number for the "deleteQueueResponse" field.</summary>
        public const int DeleteQueueResponseFieldNumber = 202;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteQueueResponse DeleteQueueResponse
        {
            get { return messageCase_ == MessageOneofCase.DeleteQueueResponse ? (DeleteQueueResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DeleteQueueResponse;
            }
        }

        /// <summary>Field number for the "joinMatchmakingResponseV2" field.</summary>
        public const int JoinMatchmakingResponseV2FieldNumber = 203;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingResponseV2 JoinMatchmakingResponseV2
        {
            get { return messageCase_ == MessageOneofCase.JoinMatchmakingResponseV2 ? (JoinMatchmakingResponseV2)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.JoinMatchmakingResponseV2;
            }
        }

        /// <summary>Field number for the "dropMatchmakingResponseV2" field.</summary>
        public const int DropMatchmakingResponseV2FieldNumber = 204;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingResponseV2 DropMatchmakingResponseV2
        {
            get { return messageCase_ == MessageOneofCase.DropMatchmakingResponseV2 ? (DropMatchmakingResponseV2)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DropMatchmakingResponseV2;
            }
        }

        /// <summary>Field number for the "joinMatchmakingResponse" field.</summary>
        public const int JoinMatchmakingResponseFieldNumber = 205;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchmakingResponse JoinMatchmakingResponse
        {
            get { return messageCase_ == MessageOneofCase.JoinMatchmakingResponse ? (JoinMatchmakingResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.JoinMatchmakingResponse;
            }
        }

        /// <summary>Field number for the "dropMatchmakingResponse" field.</summary>
        public const int DropMatchmakingResponseFieldNumber = 206;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DropMatchmakingResponse DropMatchmakingResponse
        {
            get { return messageCase_ == MessageOneofCase.DropMatchmakingResponse ? (DropMatchmakingResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DropMatchmakingResponse;
            }
        }

        /// <summary>Field number for the "clientToMatchServiceMessage" field.</summary>
        public const int ClientToMatchServiceMessageFieldNumber = 400;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToMatchServiceMessage ClientToMatchServiceMessage
        {
            get { return messageCase_ == MessageOneofCase.ClientToMatchServiceMessage ? (ClientToMatchServiceMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClientToMatchServiceMessage;
            }
        }

        /// <summary>Field number for the "matchCreatedEvent" field.</summary>
        public const int MatchCreatedEventFieldNumber = 500;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchCreatedEvent MatchCreatedEvent
        {
            get { return messageCase_ == MessageOneofCase.MatchCreatedEvent ? (LobbyMatchCreatedEvent)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchCreatedEvent;
            }
        }

        /// <summary>Field number for the "matchCompletedEvent" field.</summary>
        public const int MatchCompletedEventFieldNumber = 501;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchCompletedEvent MatchCompletedEvent
        {
            get { return messageCase_ == MessageOneofCase.MatchCompletedEvent ? (LobbyMatchCompletedEvent)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchCompletedEvent;
            }
        }

        /// <summary>Field number for the "matchCreatePendingEvent" field.</summary>
        public const int MatchCreatePendingEventFieldNumber = 502;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchCreatePendingEvent MatchCreatePendingEvent
        {
            get { return messageCase_ == MessageOneofCase.MatchCreatePendingEvent ? (LobbyMatchCreatePendingEvent)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchCreatePendingEvent;
            }
        }

        /// <summary>Field number for the "echoResponse" field.</summary>
        public const int EchoResponseFieldNumber = 1000;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EchoResponse EchoResponse
        {
            get { return messageCase_ == MessageOneofCase.EchoResponse ? (EchoResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.EchoResponse;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            AuthenticateResponse = 100,
            ServiceInfoResponse = 101,
            GetUserIdsResponse = 110,
            GetUserInfoResponse = 111,
            ClearLobbyUserStatusResponse = 112,
            JoinQueueResponse = 200,
            DropQueueResponse = 201,
            DeleteQueueResponse = 202,
            JoinMatchmakingResponseV2 = 203,
            DropMatchmakingResponseV2 = 204,
            JoinMatchmakingResponse = 205,
            DropMatchmakingResponse = 206,
            ClientToMatchServiceMessage = 400,
            MatchCreatedEvent = 500,
            MatchCompletedEvent = 501,
            MatchCreatePendingEvent = 502,
            EchoResponse = 1000,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LobbyToClientMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyToClientMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Error, other.Error)) return false;
            if (RequestId != other.RequestId) return false;
            if (Timestamp != other.Timestamp) return false;
            if (!object.Equals(CorrelationInfo, other.CorrelationInfo)) return false;
            if (!object.Equals(AuthenticateResponse, other.AuthenticateResponse)) return false;
            if (!object.Equals(ServiceInfoResponse, other.ServiceInfoResponse)) return false;
            if (!object.Equals(GetUserIdsResponse, other.GetUserIdsResponse)) return false;
            if (!object.Equals(GetUserInfoResponse, other.GetUserInfoResponse)) return false;
            if (!object.Equals(ClearLobbyUserStatusResponse, other.ClearLobbyUserStatusResponse)) return false;
            if (!object.Equals(JoinQueueResponse, other.JoinQueueResponse)) return false;
            if (!object.Equals(DropQueueResponse, other.DropQueueResponse)) return false;
            if (!object.Equals(DeleteQueueResponse, other.DeleteQueueResponse)) return false;
            if (!object.Equals(JoinMatchmakingResponseV2, other.JoinMatchmakingResponseV2)) return false;
            if (!object.Equals(DropMatchmakingResponseV2, other.DropMatchmakingResponseV2)) return false;
            if (!object.Equals(JoinMatchmakingResponse, other.JoinMatchmakingResponse)) return false;
            if (!object.Equals(DropMatchmakingResponse, other.DropMatchmakingResponse)) return false;
            if (!object.Equals(ClientToMatchServiceMessage, other.ClientToMatchServiceMessage)) return false;
            if (!object.Equals(MatchCreatedEvent, other.MatchCreatedEvent)) return false;
            if (!object.Equals(MatchCompletedEvent, other.MatchCompletedEvent)) return false;
            if (!object.Equals(MatchCreatePendingEvent, other.MatchCreatePendingEvent)) return false;
            if (!object.Equals(EchoResponse, other.EchoResponse)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (error_ != null) hash ^= Error.GetHashCode();
            if (RequestId != 0) hash ^= RequestId.GetHashCode();
            if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
            if (correlationInfo_ != null) hash ^= CorrelationInfo.GetHashCode();
            if (messageCase_ == MessageOneofCase.AuthenticateResponse) hash ^= AuthenticateResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.ServiceInfoResponse) hash ^= ServiceInfoResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.GetUserIdsResponse) hash ^= GetUserIdsResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.GetUserInfoResponse) hash ^= GetUserInfoResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.ClearLobbyUserStatusResponse) hash ^= ClearLobbyUserStatusResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.JoinQueueResponse) hash ^= JoinQueueResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.DropQueueResponse) hash ^= DropQueueResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.DeleteQueueResponse) hash ^= DeleteQueueResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.JoinMatchmakingResponseV2) hash ^= JoinMatchmakingResponseV2.GetHashCode();
            if (messageCase_ == MessageOneofCase.DropMatchmakingResponseV2) hash ^= DropMatchmakingResponseV2.GetHashCode();
            if (messageCase_ == MessageOneofCase.JoinMatchmakingResponse) hash ^= JoinMatchmakingResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.DropMatchmakingResponse) hash ^= DropMatchmakingResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.ClientToMatchServiceMessage) hash ^= ClientToMatchServiceMessage.GetHashCode();
            if (messageCase_ == MessageOneofCase.MatchCreatedEvent) hash ^= MatchCreatedEvent.GetHashCode();
            if (messageCase_ == MessageOneofCase.MatchCompletedEvent) hash ^= MatchCompletedEvent.GetHashCode();
            if (messageCase_ == MessageOneofCase.MatchCreatePendingEvent) hash ^= MatchCreatePendingEvent.GetHashCode();
            if (messageCase_ == MessageOneofCase.EchoResponse) hash ^= EchoResponse.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (error_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Error);
            }
            if (RequestId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(RequestId);
            }
            if (Timestamp != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(Timestamp);
            }
            if (correlationInfo_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(CorrelationInfo);
            }
            if (messageCase_ == MessageOneofCase.AuthenticateResponse)
            {
                output.WriteRawTag(162, 6);
                output.WriteMessage(AuthenticateResponse);
            }
            if (messageCase_ == MessageOneofCase.ServiceInfoResponse)
            {
                output.WriteRawTag(170, 6);
                output.WriteMessage(ServiceInfoResponse);
            }
            if (messageCase_ == MessageOneofCase.GetUserIdsResponse)
            {
                output.WriteRawTag(242, 6);
                output.WriteMessage(GetUserIdsResponse);
            }
            if (messageCase_ == MessageOneofCase.GetUserInfoResponse)
            {
                output.WriteRawTag(250, 6);
                output.WriteMessage(GetUserInfoResponse);
            }
            if (messageCase_ == MessageOneofCase.ClearLobbyUserStatusResponse)
            {
                output.WriteRawTag(130, 7);
                output.WriteMessage(ClearLobbyUserStatusResponse);
            }
            if (messageCase_ == MessageOneofCase.JoinQueueResponse)
            {
                output.WriteRawTag(194, 12);
                output.WriteMessage(JoinQueueResponse);
            }
            if (messageCase_ == MessageOneofCase.DropQueueResponse)
            {
                output.WriteRawTag(202, 12);
                output.WriteMessage(DropQueueResponse);
            }
            if (messageCase_ == MessageOneofCase.DeleteQueueResponse)
            {
                output.WriteRawTag(210, 12);
                output.WriteMessage(DeleteQueueResponse);
            }
            if (messageCase_ == MessageOneofCase.JoinMatchmakingResponseV2)
            {
                output.WriteRawTag(218, 12);
                output.WriteMessage(JoinMatchmakingResponseV2);
            }
            if (messageCase_ == MessageOneofCase.DropMatchmakingResponseV2)
            {
                output.WriteRawTag(226, 12);
                output.WriteMessage(DropMatchmakingResponseV2);
            }
            if (messageCase_ == MessageOneofCase.JoinMatchmakingResponse)
            {
                output.WriteRawTag(234, 12);
                output.WriteMessage(JoinMatchmakingResponse);
            }
            if (messageCase_ == MessageOneofCase.DropMatchmakingResponse)
            {
                output.WriteRawTag(242, 12);
                output.WriteMessage(DropMatchmakingResponse);
            }
            if (messageCase_ == MessageOneofCase.ClientToMatchServiceMessage)
            {
                output.WriteRawTag(130, 25);
                output.WriteMessage(ClientToMatchServiceMessage);
            }
            if (messageCase_ == MessageOneofCase.MatchCreatedEvent)
            {
                output.WriteRawTag(162, 31);
                output.WriteMessage(MatchCreatedEvent);
            }
            if (messageCase_ == MessageOneofCase.MatchCompletedEvent)
            {
                output.WriteRawTag(170, 31);
                output.WriteMessage(MatchCompletedEvent);
            }
            if (messageCase_ == MessageOneofCase.MatchCreatePendingEvent)
            {
                output.WriteRawTag(178, 31);
                output.WriteMessage(MatchCreatePendingEvent);
            }
            if (messageCase_ == MessageOneofCase.EchoResponse)
            {
                output.WriteRawTag(194, 62);
                output.WriteMessage(EchoResponse);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (error_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
            }
            if (RequestId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestId);
            }
            if (Timestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (correlationInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CorrelationInfo);
            }
            if (messageCase_ == MessageOneofCase.AuthenticateResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AuthenticateResponse);
            }
            if (messageCase_ == MessageOneofCase.ServiceInfoResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ServiceInfoResponse);
            }
            if (messageCase_ == MessageOneofCase.GetUserIdsResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetUserIdsResponse);
            }
            if (messageCase_ == MessageOneofCase.GetUserInfoResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetUserInfoResponse);
            }
            if (messageCase_ == MessageOneofCase.ClearLobbyUserStatusResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClearLobbyUserStatusResponse);
            }
            if (messageCase_ == MessageOneofCase.JoinQueueResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinQueueResponse);
            }
            if (messageCase_ == MessageOneofCase.DropQueueResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropQueueResponse);
            }
            if (messageCase_ == MessageOneofCase.DeleteQueueResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeleteQueueResponse);
            }
            if (messageCase_ == MessageOneofCase.JoinMatchmakingResponseV2)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinMatchmakingResponseV2);
            }
            if (messageCase_ == MessageOneofCase.DropMatchmakingResponseV2)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropMatchmakingResponseV2);
            }
            if (messageCase_ == MessageOneofCase.JoinMatchmakingResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinMatchmakingResponse);
            }
            if (messageCase_ == MessageOneofCase.DropMatchmakingResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropMatchmakingResponse);
            }
            if (messageCase_ == MessageOneofCase.ClientToMatchServiceMessage)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClientToMatchServiceMessage);
            }
            if (messageCase_ == MessageOneofCase.MatchCreatedEvent)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchCreatedEvent);
            }
            if (messageCase_ == MessageOneofCase.MatchCompletedEvent)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchCompletedEvent);
            }
            if (messageCase_ == MessageOneofCase.MatchCreatePendingEvent)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchCreatePendingEvent);
            }
            if (messageCase_ == MessageOneofCase.EchoResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(EchoResponse);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyToClientMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.error_ != null)
            {
                if (error_ == null)
                {
                    error_ = new LobbyError();
                }
                Error.MergeFrom(other.Error);
            }
            if (other.RequestId != 0)
            {
                RequestId = other.RequestId;
            }
            if (other.Timestamp != 0L)
            {
                Timestamp = other.Timestamp;
            }
            if (other.correlationInfo_ != null)
            {
                if (correlationInfo_ == null)
                {
                    correlationInfo_ = new CorrelationInfo();
                }
                CorrelationInfo.MergeFrom(other.CorrelationInfo);
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.AuthenticateResponse:
                    if (AuthenticateResponse == null)
                    {
                        AuthenticateResponse = new AuthenticateResponse();
                    }
                    AuthenticateResponse.MergeFrom(other.AuthenticateResponse);
                    break;
                case MessageOneofCase.ServiceInfoResponse:
                    if (ServiceInfoResponse == null)
                    {
                        ServiceInfoResponse = new LobbyServiceInfo();
                    }
                    ServiceInfoResponse.MergeFrom(other.ServiceInfoResponse);
                    break;
                case MessageOneofCase.GetUserIdsResponse:
                    if (GetUserIdsResponse == null)
                    {
                        GetUserIdsResponse = new GetLobbyUserIdsResponse();
                    }
                    GetUserIdsResponse.MergeFrom(other.GetUserIdsResponse);
                    break;
                case MessageOneofCase.GetUserInfoResponse:
                    if (GetUserInfoResponse == null)
                    {
                        GetUserInfoResponse = new GetLobbyUserInfoResponse();
                    }
                    GetUserInfoResponse.MergeFrom(other.GetUserInfoResponse);
                    break;
                case MessageOneofCase.ClearLobbyUserStatusResponse:
                    if (ClearLobbyUserStatusResponse == null)
                    {
                        ClearLobbyUserStatusResponse = new ClearLobbyUserStatusResponse();
                    }
                    ClearLobbyUserStatusResponse.MergeFrom(other.ClearLobbyUserStatusResponse);
                    break;
                case MessageOneofCase.JoinQueueResponse:
                    if (JoinQueueResponse == null)
                    {
                        JoinQueueResponse = new JoinQueueResponse();
                    }
                    JoinQueueResponse.MergeFrom(other.JoinQueueResponse);
                    break;
                case MessageOneofCase.DropQueueResponse:
                    if (DropQueueResponse == null)
                    {
                        DropQueueResponse = new DropQueueResponse();
                    }
                    DropQueueResponse.MergeFrom(other.DropQueueResponse);
                    break;
                case MessageOneofCase.DeleteQueueResponse:
                    if (DeleteQueueResponse == null)
                    {
                        DeleteQueueResponse = new DeleteQueueResponse();
                    }
                    DeleteQueueResponse.MergeFrom(other.DeleteQueueResponse);
                    break;
                case MessageOneofCase.JoinMatchmakingResponseV2:
                    if (JoinMatchmakingResponseV2 == null)
                    {
                        JoinMatchmakingResponseV2 = new JoinMatchmakingResponseV2();
                    }
                    JoinMatchmakingResponseV2.MergeFrom(other.JoinMatchmakingResponseV2);
                    break;
                case MessageOneofCase.DropMatchmakingResponseV2:
                    if (DropMatchmakingResponseV2 == null)
                    {
                        DropMatchmakingResponseV2 = new DropMatchmakingResponseV2();
                    }
                    DropMatchmakingResponseV2.MergeFrom(other.DropMatchmakingResponseV2);
                    break;
                case MessageOneofCase.JoinMatchmakingResponse:
                    if (JoinMatchmakingResponse == null)
                    {
                        JoinMatchmakingResponse = new JoinMatchmakingResponse();
                    }
                    JoinMatchmakingResponse.MergeFrom(other.JoinMatchmakingResponse);
                    break;
                case MessageOneofCase.DropMatchmakingResponse:
                    if (DropMatchmakingResponse == null)
                    {
                        DropMatchmakingResponse = new DropMatchmakingResponse();
                    }
                    DropMatchmakingResponse.MergeFrom(other.DropMatchmakingResponse);
                    break;
                case MessageOneofCase.ClientToMatchServiceMessage:
                    if (ClientToMatchServiceMessage == null)
                    {
                        ClientToMatchServiceMessage = new ClientToMatchServiceMessage();
                    }
                    ClientToMatchServiceMessage.MergeFrom(other.ClientToMatchServiceMessage);
                    break;
                case MessageOneofCase.MatchCreatedEvent:
                    if (MatchCreatedEvent == null)
                    {
                        MatchCreatedEvent = new LobbyMatchCreatedEvent();
                    }
                    MatchCreatedEvent.MergeFrom(other.MatchCreatedEvent);
                    break;
                case MessageOneofCase.MatchCompletedEvent:
                    if (MatchCompletedEvent == null)
                    {
                        MatchCompletedEvent = new LobbyMatchCompletedEvent();
                    }
                    MatchCompletedEvent.MergeFrom(other.MatchCompletedEvent);
                    break;
                case MessageOneofCase.MatchCreatePendingEvent:
                    if (MatchCreatePendingEvent == null)
                    {
                        MatchCreatePendingEvent = new LobbyMatchCreatePendingEvent();
                    }
                    MatchCreatePendingEvent.MergeFrom(other.MatchCreatePendingEvent);
                    break;
                case MessageOneofCase.EchoResponse:
                    if (EchoResponse == null)
                    {
                        EchoResponse = new EchoResponse();
                    }
                    EchoResponse.MergeFrom(other.EchoResponse);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 18:
                        {
                            if (error_ == null)
                            {
                                error_ = new LobbyError();
                            }
                            input.ReadMessage(error_);
                            break;
                        }
                    case 24:
                        {
                            RequestId = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                    case 42:
                        {
                            if (correlationInfo_ == null)
                            {
                                correlationInfo_ = new CorrelationInfo();
                            }
                            input.ReadMessage(correlationInfo_);
                            break;
                        }
                    case 802:
                        {
                            AuthenticateResponse subBuilder = new AuthenticateResponse();
                            if (messageCase_ == MessageOneofCase.AuthenticateResponse)
                            {
                                subBuilder.MergeFrom(AuthenticateResponse);
                            }
                            input.ReadMessage(subBuilder);
                            AuthenticateResponse = subBuilder;
                            break;
                        }
                    case 810:
                        {
                            LobbyServiceInfo subBuilder = new LobbyServiceInfo();
                            if (messageCase_ == MessageOneofCase.ServiceInfoResponse)
                            {
                                subBuilder.MergeFrom(ServiceInfoResponse);
                            }
                            input.ReadMessage(subBuilder);
                            ServiceInfoResponse = subBuilder;
                            break;
                        }
                    case 882:
                        {
                            GetLobbyUserIdsResponse subBuilder = new GetLobbyUserIdsResponse();
                            if (messageCase_ == MessageOneofCase.GetUserIdsResponse)
                            {
                                subBuilder.MergeFrom(GetUserIdsResponse);
                            }
                            input.ReadMessage(subBuilder);
                            GetUserIdsResponse = subBuilder;
                            break;
                        }
                    case 890:
                        {
                            GetLobbyUserInfoResponse subBuilder = new GetLobbyUserInfoResponse();
                            if (messageCase_ == MessageOneofCase.GetUserInfoResponse)
                            {
                                subBuilder.MergeFrom(GetUserInfoResponse);
                            }
                            input.ReadMessage(subBuilder);
                            GetUserInfoResponse = subBuilder;
                            break;
                        }
                    case 898:
                        {
                            ClearLobbyUserStatusResponse subBuilder = new ClearLobbyUserStatusResponse();
                            if (messageCase_ == MessageOneofCase.ClearLobbyUserStatusResponse)
                            {
                                subBuilder.MergeFrom(ClearLobbyUserStatusResponse);
                            }
                            input.ReadMessage(subBuilder);
                            ClearLobbyUserStatusResponse = subBuilder;
                            break;
                        }
                    case 1602:
                        {
                            JoinQueueResponse subBuilder = new JoinQueueResponse();
                            if (messageCase_ == MessageOneofCase.JoinQueueResponse)
                            {
                                subBuilder.MergeFrom(JoinQueueResponse);
                            }
                            input.ReadMessage(subBuilder);
                            JoinQueueResponse = subBuilder;
                            break;
                        }
                    case 1610:
                        {
                            DropQueueResponse subBuilder = new DropQueueResponse();
                            if (messageCase_ == MessageOneofCase.DropQueueResponse)
                            {
                                subBuilder.MergeFrom(DropQueueResponse);
                            }
                            input.ReadMessage(subBuilder);
                            DropQueueResponse = subBuilder;
                            break;
                        }
                    case 1618:
                        {
                            DeleteQueueResponse subBuilder = new DeleteQueueResponse();
                            if (messageCase_ == MessageOneofCase.DeleteQueueResponse)
                            {
                                subBuilder.MergeFrom(DeleteQueueResponse);
                            }
                            input.ReadMessage(subBuilder);
                            DeleteQueueResponse = subBuilder;
                            break;
                        }
                    case 1626:
                        {
                            JoinMatchmakingResponseV2 subBuilder = new JoinMatchmakingResponseV2();
                            if (messageCase_ == MessageOneofCase.JoinMatchmakingResponseV2)
                            {
                                subBuilder.MergeFrom(JoinMatchmakingResponseV2);
                            }
                            input.ReadMessage(subBuilder);
                            JoinMatchmakingResponseV2 = subBuilder;
                            break;
                        }
                    case 1634:
                        {
                            DropMatchmakingResponseV2 subBuilder = new DropMatchmakingResponseV2();
                            if (messageCase_ == MessageOneofCase.DropMatchmakingResponseV2)
                            {
                                subBuilder.MergeFrom(DropMatchmakingResponseV2);
                            }
                            input.ReadMessage(subBuilder);
                            DropMatchmakingResponseV2 = subBuilder;
                            break;
                        }
                    case 1642:
                        {
                            JoinMatchmakingResponse subBuilder = new JoinMatchmakingResponse();
                            if (messageCase_ == MessageOneofCase.JoinMatchmakingResponse)
                            {
                                subBuilder.MergeFrom(JoinMatchmakingResponse);
                            }
                            input.ReadMessage(subBuilder);
                            JoinMatchmakingResponse = subBuilder;
                            break;
                        }
                    case 1650:
                        {
                            DropMatchmakingResponse subBuilder = new DropMatchmakingResponse();
                            if (messageCase_ == MessageOneofCase.DropMatchmakingResponse)
                            {
                                subBuilder.MergeFrom(DropMatchmakingResponse);
                            }
                            input.ReadMessage(subBuilder);
                            DropMatchmakingResponse = subBuilder;
                            break;
                        }
                    case 3202:
                        {
                            ClientToMatchServiceMessage subBuilder = new ClientToMatchServiceMessage();
                            if (messageCase_ == MessageOneofCase.ClientToMatchServiceMessage)
                            {
                                subBuilder.MergeFrom(ClientToMatchServiceMessage);
                            }
                            input.ReadMessage(subBuilder);
                            ClientToMatchServiceMessage = subBuilder;
                            break;
                        }
                    case 4002:
                        {
                            LobbyMatchCreatedEvent subBuilder = new LobbyMatchCreatedEvent();
                            if (messageCase_ == MessageOneofCase.MatchCreatedEvent)
                            {
                                subBuilder.MergeFrom(MatchCreatedEvent);
                            }
                            input.ReadMessage(subBuilder);
                            MatchCreatedEvent = subBuilder;
                            break;
                        }
                    case 4010:
                        {
                            LobbyMatchCompletedEvent subBuilder = new LobbyMatchCompletedEvent();
                            if (messageCase_ == MessageOneofCase.MatchCompletedEvent)
                            {
                                subBuilder.MergeFrom(MatchCompletedEvent);
                            }
                            input.ReadMessage(subBuilder);
                            MatchCompletedEvent = subBuilder;
                            break;
                        }
                    case 4018:
                        {
                            LobbyMatchCreatePendingEvent subBuilder = new LobbyMatchCreatePendingEvent();
                            if (messageCase_ == MessageOneofCase.MatchCreatePendingEvent)
                            {
                                subBuilder.MergeFrom(MatchCreatePendingEvent);
                            }
                            input.ReadMessage(subBuilder);
                            MatchCreatePendingEvent = subBuilder;
                            break;
                        }
                    case 8002:
                        {
                            EchoResponse subBuilder = new EchoResponse();
                            if (messageCase_ == MessageOneofCase.EchoResponse)
                            {
                                subBuilder.MergeFrom(EchoResponse);
                            }
                            input.ReadMessage(subBuilder);
                            EchoResponse = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LobbyUserInfo : pb::IMessage<LobbyUserInfo>
    {
        private static readonly pb::MessageParser<LobbyUserInfo> _parser = new pb::MessageParser<LobbyUserInfo>(() => new LobbyUserInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyUserInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[194]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyUserInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyUserInfo(LobbyUserInfo other) : this()
        {
            userId_ = other.userId_;
            stateType_ = other.stateType_;
            stateUpdatedTimestamp_ = other.stateUpdatedTimestamp_;
            userConnectionInfo_ = other.userConnectionInfo_ != null ? other.userConnectionInfo_.Clone() : null;
            presenceState_ = other.presenceState_;
            queueInfo_ = other.queueInfo_ != null ? other.queueInfo_.Clone() : null;
            draftInfo_ = other.draftInfo_ != null ? other.draftInfo_.Clone() : null;
            matchInfo_ = other.matchInfo_ != null ? other.matchInfo_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyUserInfo Clone()
        {
            return new LobbyUserInfo(this);
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "stateType" field.</summary>
        public const int StateTypeFieldNumber = 2;
        private LobbyUserStateType stateType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyUserStateType StateType
        {
            get { return stateType_; }
            set
            {
                stateType_ = value;
            }
        }

        /// <summary>Field number for the "stateUpdatedTimestamp" field.</summary>
        public const int StateUpdatedTimestampFieldNumber = 3;
        private long stateUpdatedTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long StateUpdatedTimestamp
        {
            get { return stateUpdatedTimestamp_; }
            set
            {
                stateUpdatedTimestamp_ = value;
            }
        }

        /// <summary>Field number for the "userConnectionInfo" field.</summary>
        public const int UserConnectionInfoFieldNumber = 10;
        private UserConnectionInfo userConnectionInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserConnectionInfo UserConnectionInfo
        {
            get { return userConnectionInfo_; }
            set
            {
                userConnectionInfo_ = value;
            }
        }

        /// <summary>Field number for the "presenceState" field.</summary>
        public const int PresenceStateFieldNumber = 11;
        private PresenceState presenceState_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PresenceState PresenceState
        {
            get { return presenceState_; }
            set
            {
                presenceState_ = value;
            }
        }

        /// <summary>Field number for the "queueInfo" field.</summary>
        public const int QueueInfoFieldNumber = 15;
        private LobbyUserQueueInfo queueInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyUserQueueInfo QueueInfo
        {
            get { return queueInfo_; }
            set
            {
                queueInfo_ = value;
            }
        }

        /// <summary>Field number for the "draftInfo" field.</summary>
        public const int DraftInfoFieldNumber = 20;
        private LobbyDraftInfo draftInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyDraftInfo DraftInfo
        {
            get { return draftInfo_; }
            set
            {
                draftInfo_ = value;
            }
        }

        /// <summary>Field number for the "matchInfo" field.</summary>
        public const int MatchInfoFieldNumber = 25;
        private LobbyMatchInfo matchInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMatchInfo MatchInfo
        {
            get { return matchInfo_; }
            set
            {
                matchInfo_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LobbyUserInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyUserInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (StateType != other.StateType) return false;
            if (StateUpdatedTimestamp != other.StateUpdatedTimestamp) return false;
            if (!object.Equals(UserConnectionInfo, other.UserConnectionInfo)) return false;
            if (PresenceState != other.PresenceState) return false;
            if (!object.Equals(QueueInfo, other.QueueInfo)) return false;
            if (!object.Equals(DraftInfo, other.DraftInfo)) return false;
            if (!object.Equals(MatchInfo, other.MatchInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (StateType != 0) hash ^= StateType.GetHashCode();
            if (StateUpdatedTimestamp != 0L) hash ^= StateUpdatedTimestamp.GetHashCode();
            if (userConnectionInfo_ != null) hash ^= UserConnectionInfo.GetHashCode();
            if (PresenceState != 0) hash ^= PresenceState.GetHashCode();
            if (queueInfo_ != null) hash ^= QueueInfo.GetHashCode();
            if (draftInfo_ != null) hash ^= DraftInfo.GetHashCode();
            if (matchInfo_ != null) hash ^= MatchInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (StateType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)StateType);
            }
            if (StateUpdatedTimestamp != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(StateUpdatedTimestamp);
            }
            if (userConnectionInfo_ != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(UserConnectionInfo);
            }
            if (PresenceState != 0)
            {
                output.WriteRawTag(88);
                output.WriteEnum((int)PresenceState);
            }
            if (queueInfo_ != null)
            {
                output.WriteRawTag(122);
                output.WriteMessage(QueueInfo);
            }
            if (draftInfo_ != null)
            {
                output.WriteRawTag(162, 1);
                output.WriteMessage(DraftInfo);
            }
            if (matchInfo_ != null)
            {
                output.WriteRawTag(202, 1);
                output.WriteMessage(MatchInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (StateType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)StateType);
            }
            if (StateUpdatedTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(StateUpdatedTimestamp);
            }
            if (userConnectionInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserConnectionInfo);
            }
            if (PresenceState != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PresenceState);
            }
            if (queueInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueueInfo);
            }
            if (draftInfo_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DraftInfo);
            }
            if (matchInfo_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyUserInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.StateType != 0)
            {
                StateType = other.StateType;
            }
            if (other.StateUpdatedTimestamp != 0L)
            {
                StateUpdatedTimestamp = other.StateUpdatedTimestamp;
            }
            if (other.userConnectionInfo_ != null)
            {
                if (userConnectionInfo_ == null)
                {
                    userConnectionInfo_ = new UserConnectionInfo();
                }
                UserConnectionInfo.MergeFrom(other.UserConnectionInfo);
            }
            if (other.PresenceState != 0)
            {
                PresenceState = other.PresenceState;
            }
            if (other.queueInfo_ != null)
            {
                if (queueInfo_ == null)
                {
                    queueInfo_ = new LobbyUserQueueInfo();
                }
                QueueInfo.MergeFrom(other.QueueInfo);
            }
            if (other.draftInfo_ != null)
            {
                if (draftInfo_ == null)
                {
                    draftInfo_ = new LobbyDraftInfo();
                }
                DraftInfo.MergeFrom(other.DraftInfo);
            }
            if (other.matchInfo_ != null)
            {
                if (matchInfo_ == null)
                {
                    matchInfo_ = new LobbyMatchInfo();
                }
                MatchInfo.MergeFrom(other.MatchInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            stateType_ = (LobbyUserStateType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            StateUpdatedTimestamp = input.ReadInt64();
                            break;
                        }
                    case 82:
                        {
                            if (userConnectionInfo_ == null)
                            {
                                userConnectionInfo_ = new UserConnectionInfo();
                            }
                            input.ReadMessage(userConnectionInfo_);
                            break;
                        }
                    case 88:
                        {
                            presenceState_ = (PresenceState)input.ReadEnum();
                            break;
                        }
                    case 122:
                        {
                            if (queueInfo_ == null)
                            {
                                queueInfo_ = new LobbyUserQueueInfo();
                            }
                            input.ReadMessage(queueInfo_);
                            break;
                        }
                    case 162:
                        {
                            if (draftInfo_ == null)
                            {
                                draftInfo_ = new LobbyDraftInfo();
                            }
                            input.ReadMessage(draftInfo_);
                            break;
                        }
                    case 202:
                        {
                            if (matchInfo_ == null)
                            {
                                matchInfo_ = new LobbyMatchInfo();
                            }
                            input.ReadMessage(matchInfo_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LobbyUserQueueInfo : pb::IMessage<LobbyUserQueueInfo>
    {
        private static readonly pb::MessageParser<LobbyUserQueueInfo> _parser = new pb::MessageParser<LobbyUserQueueInfo>(() => new LobbyUserQueueInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyUserQueueInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[195]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyUserQueueInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyUserQueueInfo(LobbyUserQueueInfo other) : this()
        {
            userId_ = other.userId_;
            eventId_ = other.eventId_;
            joinQueueRequest_ = other.joinQueueRequest_ != null ? other.joinQueueRequest_.Clone() : null;
            joinQueueResponse_ = other.joinQueueResponse_ != null ? other.joinQueueResponse_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyUserQueueInfo Clone()
        {
            return new LobbyUserQueueInfo(this);
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 2;
        private string eventId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "joinQueueRequest" field.</summary>
        public const int JoinQueueRequestFieldNumber = 11;
        private ClientToLobbyMessage joinQueueRequest_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientToLobbyMessage JoinQueueRequest
        {
            get { return joinQueueRequest_; }
            set
            {
                joinQueueRequest_ = value;
            }
        }

        /// <summary>Field number for the "joinQueueResponse" field.</summary>
        public const int JoinQueueResponseFieldNumber = 12;
        private LobbyToClientMessage joinQueueResponse_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyToClientMessage JoinQueueResponse
        {
            get { return joinQueueResponse_; }
            set
            {
                joinQueueResponse_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LobbyUserQueueInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyUserQueueInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (EventId != other.EventId) return false;
            if (!object.Equals(JoinQueueRequest, other.JoinQueueRequest)) return false;
            if (!object.Equals(JoinQueueResponse, other.JoinQueueResponse)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (EventId.Length != 0) hash ^= EventId.GetHashCode();
            if (joinQueueRequest_ != null) hash ^= JoinQueueRequest.GetHashCode();
            if (joinQueueResponse_ != null) hash ^= JoinQueueResponse.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (EventId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(EventId);
            }
            if (joinQueueRequest_ != null)
            {
                output.WriteRawTag(90);
                output.WriteMessage(JoinQueueRequest);
            }
            if (joinQueueResponse_ != null)
            {
                output.WriteRawTag(98);
                output.WriteMessage(JoinQueueResponse);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (EventId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
            }
            if (joinQueueRequest_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinQueueRequest);
            }
            if (joinQueueResponse_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinQueueResponse);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyUserQueueInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.EventId.Length != 0)
            {
                EventId = other.EventId;
            }
            if (other.joinQueueRequest_ != null)
            {
                if (joinQueueRequest_ == null)
                {
                    joinQueueRequest_ = new ClientToLobbyMessage();
                }
                JoinQueueRequest.MergeFrom(other.JoinQueueRequest);
            }
            if (other.joinQueueResponse_ != null)
            {
                if (joinQueueResponse_ == null)
                {
                    joinQueueResponse_ = new LobbyToClientMessage();
                }
                JoinQueueResponse.MergeFrom(other.JoinQueueResponse);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            EventId = input.ReadString();
                            break;
                        }
                    case 90:
                        {
                            if (joinQueueRequest_ == null)
                            {
                                joinQueueRequest_ = new ClientToLobbyMessage();
                            }
                            input.ReadMessage(joinQueueRequest_);
                            break;
                        }
                    case 98:
                        {
                            if (joinQueueResponse_ == null)
                            {
                                joinQueueResponse_ = new LobbyToClientMessage();
                            }
                            input.ReadMessage(joinQueueResponse_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Loop : pb::IMessage<Loop>
    {
        private static readonly pb::MessageParser<Loop> _parser = new pb::MessageParser<Loop>(() => new Loop());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Loop> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[196]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Loop()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Loop(Loop other) : this()
        {
            child_ = other.child_ != null ? other.child_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Loop Clone()
        {
            return new Loop(this);
        }

        /// <summary>Field number for the "child" field.</summary>
        public const int ChildFieldNumber = 1;
        private Node child_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Node Child
        {
            get { return child_; }
            set
            {
                child_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Loop);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Loop other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Child, other.Child)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (child_ != null) hash ^= Child.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (child_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Child);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (child_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Child);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Loop other)
        {
            if (other == null)
            {
                return;
            }
            if (other.child_ != null)
            {
                if (child_ == null)
                {
                    child_ = new Node();
                }
                Child.MergeFrom(other.Child);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (child_ == null)
                            {
                                child_ = new Node();
                            }
                            input.ReadMessage(child_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LoopbackRequest : pb::IMessage<LoopbackRequest>
    {
        private static readonly pb::MessageParser<LoopbackRequest> _parser = new pb::MessageParser<LoopbackRequest>(() => new LoopbackRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LoopbackRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[197]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoopbackRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoopbackRequest(LoopbackRequest other) : this()
        {
            contents_ = other.contents_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoopbackRequest Clone()
        {
            return new LoopbackRequest(this);
        }

        /// <summary>Field number for the "contents" field.</summary>
        public const int ContentsFieldNumber = 1;
        private string contents_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Contents
        {
            get { return contents_; }
            set
            {
                contents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LoopbackRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LoopbackRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Contents != other.Contents) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Contents.Length != 0) hash ^= Contents.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Contents.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Contents);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Contents.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Contents);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LoopbackRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Contents.Length != 0)
            {
                Contents = other.Contents;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Contents = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LoopbackResponse : pb::IMessage<LoopbackResponse>
    {
        private static readonly pb::MessageParser<LoopbackResponse> _parser = new pb::MessageParser<LoopbackResponse>(() => new LoopbackResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LoopbackResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[198]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoopbackResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoopbackResponse(LoopbackResponse other) : this()
        {
            contents_ = other.contents_;
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoopbackResponse Clone()
        {
            return new LoopbackResponse(this);
        }

        /// <summary>Field number for the "contents" field.</summary>
        public const int ContentsFieldNumber = 1;
        private string contents_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Contents
        {
            get { return contents_; }
            set
            {
                contents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private GRETHHostErrorCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETHHostErrorCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LoopbackResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LoopbackResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Contents != other.Contents) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Contents.Length != 0) hash ^= Contents.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Contents.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Contents);
            }
            if (Result != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Contents.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Contents);
            }
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LoopbackResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Contents.Length != 0)
            {
                Contents = other.Contents;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Contents = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            result_ = (GRETHHostErrorCode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ManaInfo : pb::IMessage<ManaInfo>
    {
        private static readonly pb::MessageParser<ManaInfo> _parser = new pb::MessageParser<ManaInfo>(() => new ManaInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ManaInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[199]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaInfo(ManaInfo other) : this()
        {
            specs_ = other.specs_.Clone();
            manaId_ = other.manaId_;
            color_ = other.color_;
            srcInstanceId_ = other.srcInstanceId_;
            abilityGrpId_ = other.abilityGrpId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaInfo Clone()
        {
            return new ManaInfo(this);
        }

        /// <summary>Field number for the "specs" field.</summary>
        public const int SpecsFieldNumber = 4;
        private static readonly pb::FieldCodec<ManaInfoTypesSpec> _repeated_specs_codec
            = pb::FieldCodec.ForMessage(34, ManaInfoTypesSpec.Parser);
        private readonly pbc::RepeatedField<ManaInfoTypesSpec> specs_ = new pbc::RepeatedField<ManaInfoTypesSpec>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaInfoTypesSpec> Specs
        {
            get { return specs_; }
        }

        /// <summary>Field number for the "manaId" field.</summary>
        public const int ManaIdFieldNumber = 1;
        private uint manaId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ManaId
        {
            get { return manaId_; }
            set
            {
                manaId_ = value;
            }
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 2;
        private ManaColor color_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaColor Color
        {
            get { return color_; }
            set
            {
                color_ = value;
            }
        }

        /// <summary>Field number for the "srcInstanceId" field.</summary>
        public const int SrcInstanceIdFieldNumber = 3;
        private uint srcInstanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SrcInstanceId
        {
            get { return srcInstanceId_; }
            set
            {
                srcInstanceId_ = value;
            }
        }

        /// <summary>Field number for the "abilityGrpId" field.</summary>
        public const int AbilityGrpIdFieldNumber = 5;
        private uint abilityGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityGrpId
        {
            get { return abilityGrpId_; }
            set
            {
                abilityGrpId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ManaInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ManaInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!specs_.Equals(other.specs_)) return false;
            if (ManaId != other.ManaId) return false;
            if (Color != other.Color) return false;
            if (SrcInstanceId != other.SrcInstanceId) return false;
            if (AbilityGrpId != other.AbilityGrpId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= specs_.GetHashCode();
            if (ManaId != 0) hash ^= ManaId.GetHashCode();
            if (Color != 0) hash ^= Color.GetHashCode();
            if (SrcInstanceId != 0) hash ^= SrcInstanceId.GetHashCode();
            if (AbilityGrpId != 0) hash ^= AbilityGrpId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ManaId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(ManaId);
            }
            if (Color != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Color);
            }
            if (SrcInstanceId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(SrcInstanceId);
            }
            specs_.WriteTo(output, _repeated_specs_codec);
            if (AbilityGrpId != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(AbilityGrpId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += specs_.CalculateSize(_repeated_specs_codec);
            if (ManaId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManaId);
            }
            if (Color != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Color);
            }
            if (SrcInstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcInstanceId);
            }
            if (AbilityGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityGrpId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ManaInfo other)
        {
            if (other == null)
            {
                return;
            }
            specs_.Add(other.specs_);
            if (other.ManaId != 0)
            {
                ManaId = other.ManaId;
            }
            if (other.Color != 0)
            {
                Color = other.Color;
            }
            if (other.SrcInstanceId != 0)
            {
                SrcInstanceId = other.SrcInstanceId;
            }
            if (other.AbilityGrpId != 0)
            {
                AbilityGrpId = other.AbilityGrpId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ManaId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            color_ = (ManaColor)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            SrcInstanceId = input.ReadUInt32();
                            break;
                        }
                    case 34:
                        {
                            specs_.AddEntriesFrom(input, _repeated_specs_codec);
                            break;
                        }
                    case 40:
                        {
                            AbilityGrpId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ManaInfoTypesSpec : pb::IMessage<ManaInfoTypesSpec>
    {
        private static readonly pb::MessageParser<ManaInfoTypesSpec> _parser = new pb::MessageParser<ManaInfoTypesSpec>(() => new ManaInfoTypesSpec());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ManaInfoTypesSpec> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[200]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaInfoTypesSpec()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaInfoTypesSpec(ManaInfoTypesSpec other) : this()
        {
            type_ = other.type_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaInfoTypesSpec Clone()
        {
            return new ManaInfoTypesSpec(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private ManaSpecType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaSpecType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ManaInfoTypesSpec);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ManaInfoTypesSpec other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ManaInfoTypesSpec other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            type_ = (ManaSpecType)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ManaPayment : pb::IMessage<ManaPayment>
    {
        private static readonly pb::MessageParser<ManaPayment> _parser = new pb::MessageParser<ManaPayment>(() => new ManaPayment());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ManaPayment> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[201]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaPayment()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaPayment(ManaPayment other) : this()
        {
            color_ = other.color_;
            count_ = other.count_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaPayment Clone()
        {
            return new ManaPayment(this);
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 1;
        private ManaColor color_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaColor Color
        {
            get { return color_; }
            set
            {
                color_ = value;
            }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count
        {
            get { return count_; }
            set
            {
                count_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ManaPayment);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ManaPayment other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Color != other.Color) return false;
            if (Count != other.Count) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Color != 0) hash ^= Color.GetHashCode();
            if (Count != 0) hash ^= Count.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Color != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Color);
            }
            if (Count != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Count);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Color != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Color);
            }
            if (Count != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ManaPayment other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Color != 0)
            {
                Color = other.Color;
            }
            if (other.Count != 0)
            {
                Count = other.Count;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            color_ = (ManaColor)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            Count = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ManaPaymentOption : pb::IMessage<ManaPaymentOption>
    {
        private static readonly pb::MessageParser<ManaPaymentOption> _parser = new pb::MessageParser<ManaPaymentOption>(() => new ManaPaymentOption());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ManaPaymentOption> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[202]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaPaymentOption()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaPaymentOption(ManaPaymentOption other) : this()
        {
            payments_ = other.payments_.Clone();
            mana_ = other.mana_.Clone();
            maxActivations_ = other.maxActivations_;
            optionIndex_ = other.optionIndex_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaPaymentOption Clone()
        {
            return new ManaPaymentOption(this);
        }

        /// <summary>Field number for the "payments" field.</summary>
        public const int PaymentsFieldNumber = 1;
        private static readonly pb::FieldCodec<ManaPayment> _repeated_payments_codec
            = pb::FieldCodec.ForMessage(10, ManaPayment.Parser);
        private readonly pbc::RepeatedField<ManaPayment> payments_ = new pbc::RepeatedField<ManaPayment>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaPayment> Payments
        {
            get { return payments_; }
        }

        /// <summary>Field number for the "mana" field.</summary>
        public const int ManaFieldNumber = 2;
        private static readonly pb::FieldCodec<ManaInfo> _repeated_mana_codec
            = pb::FieldCodec.ForMessage(18, ManaInfo.Parser);
        private readonly pbc::RepeatedField<ManaInfo> mana_ = new pbc::RepeatedField<ManaInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaInfo> Mana
        {
            get { return mana_; }
        }

        /// <summary>Field number for the "maxActivations" field.</summary>
        public const int MaxActivationsFieldNumber = 3;
        private uint maxActivations_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxActivations
        {
            get { return maxActivations_; }
            set
            {
                maxActivations_ = value;
            }
        }

        /// <summary>Field number for the "optionIndex" field.</summary>
        public const int OptionIndexFieldNumber = 4;
        private uint optionIndex_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OptionIndex
        {
            get { return optionIndex_; }
            set
            {
                optionIndex_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ManaPaymentOption);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ManaPaymentOption other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!payments_.Equals(other.payments_)) return false;
            if (!mana_.Equals(other.mana_)) return false;
            if (MaxActivations != other.MaxActivations) return false;
            if (OptionIndex != other.OptionIndex) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= payments_.GetHashCode();
            hash ^= mana_.GetHashCode();
            if (MaxActivations != 0) hash ^= MaxActivations.GetHashCode();
            if (OptionIndex != 0) hash ^= OptionIndex.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            payments_.WriteTo(output, _repeated_payments_codec);
            mana_.WriteTo(output, _repeated_mana_codec);
            if (MaxActivations != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MaxActivations);
            }
            if (OptionIndex != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(OptionIndex);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += payments_.CalculateSize(_repeated_payments_codec);
            size += mana_.CalculateSize(_repeated_mana_codec);
            if (MaxActivations != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxActivations);
            }
            if (OptionIndex != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptionIndex);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ManaPaymentOption other)
        {
            if (other == null)
            {
                return;
            }
            payments_.Add(other.payments_);
            mana_.Add(other.mana_);
            if (other.MaxActivations != 0)
            {
                MaxActivations = other.MaxActivations;
            }
            if (other.OptionIndex != 0)
            {
                OptionIndex = other.OptionIndex;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            payments_.AddEntriesFrom(input, _repeated_payments_codec);
                            break;
                        }
                    case 18:
                        {
                            mana_.AddEntriesFrom(input, _repeated_mana_codec);
                            break;
                        }
                    case 24:
                        {
                            MaxActivations = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            OptionIndex = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ManaRequirement : pb::IMessage<ManaRequirement>
    {
        private static readonly pb::MessageParser<ManaRequirement> _parser = new pb::MessageParser<ManaRequirement>(() => new ManaRequirement());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ManaRequirement> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[203]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaRequirement()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaRequirement(ManaRequirement other) : this()
        {
            color_ = other.color_.Clone();
            count_ = other.count_;
            costId_ = other.costId_;
            objectId_ = other.objectId_;
            abilityGrpId_ = other.abilityGrpId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaRequirement Clone()
        {
            return new ManaRequirement(this);
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 1;
        private static readonly pb::FieldCodec<ManaColor> _repeated_color_codec
            = pb::FieldCodec.ForEnum(10, x => (int)x, x => (ManaColor)x);
        private readonly pbc::RepeatedField<ManaColor> color_ = new pbc::RepeatedField<ManaColor>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaColor> Color
        {
            get { return color_; }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private int count_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Count
        {
            get { return count_; }
            set
            {
                count_ = value;
            }
        }

        /// <summary>Field number for the "costId" field.</summary>
        public const int CostIdFieldNumber = 3;
        private uint costId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CostId
        {
            get { return costId_; }
            set
            {
                costId_ = value;
            }
        }

        /// <summary>Field number for the "objectId" field.</summary>
        public const int ObjectIdFieldNumber = 4;
        private uint objectId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ObjectId
        {
            get { return objectId_; }
            set
            {
                objectId_ = value;
            }
        }

        /// <summary>Field number for the "abilityGrpId" field.</summary>
        public const int AbilityGrpIdFieldNumber = 5;
        private uint abilityGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityGrpId
        {
            get { return abilityGrpId_; }
            set
            {
                abilityGrpId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ManaRequirement);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ManaRequirement other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!color_.Equals(other.color_)) return false;
            if (Count != other.Count) return false;
            if (CostId != other.CostId) return false;
            if (ObjectId != other.ObjectId) return false;
            if (AbilityGrpId != other.AbilityGrpId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= color_.GetHashCode();
            if (Count != 0) hash ^= Count.GetHashCode();
            if (CostId != 0) hash ^= CostId.GetHashCode();
            if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
            if (AbilityGrpId != 0) hash ^= AbilityGrpId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            color_.WriteTo(output, _repeated_color_codec);
            if (Count != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Count);
            }
            if (CostId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(CostId);
            }
            if (ObjectId != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(ObjectId);
            }
            if (AbilityGrpId != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(AbilityGrpId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += color_.CalculateSize(_repeated_color_codec);
            if (Count != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
            }
            if (CostId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CostId);
            }
            if (ObjectId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
            }
            if (AbilityGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityGrpId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ManaRequirement other)
        {
            if (other == null)
            {
                return;
            }
            color_.Add(other.color_);
            if (other.Count != 0)
            {
                Count = other.Count;
            }
            if (other.CostId != 0)
            {
                CostId = other.CostId;
            }
            if (other.ObjectId != 0)
            {
                ObjectId = other.ObjectId;
            }
            if (other.AbilityGrpId != 0)
            {
                AbilityGrpId = other.AbilityGrpId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                        {
                            color_.AddEntriesFrom(input, _repeated_color_codec);
                            break;
                        }
                    case 16:
                        {
                            Count = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            CostId = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            ObjectId = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            AbilityGrpId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchConfig : pb::IMessage<MatchConfig>
    {
        private static readonly pb::MessageParser<MatchConfig> _parser = new pb::MessageParser<MatchConfig>(() => new MatchConfig());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchConfig> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[204]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchConfig()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchConfig(MatchConfig other) : this()
        {
            teams_ = other.teams_.Clone();
            timerConfigs_ = other.timerConfigs_.Clone();
            cosmeticConfigs_ = other.cosmeticConfigs_.Clone();
            gameType_ = other.gameType_;
            gameVariant_ = other.gameVariant_;
            winCondition_ = other.winCondition_;
            matchOptionBitmask_ = other.matchOptionBitmask_;
            maxPlayerHandSize_ = other.maxPlayerHandSize_;
            matchTimeLimitSec_ = other.matchTimeLimitSec_;
            inactivityTimeLimitSec_ = other.inactivityTimeLimitSec_;
            testConfig_ = other.testConfig_ != null ? other.testConfig_.Clone() : null;
            mulliganType_ = other.mulliganType_;
            timerPackage_ = other.timerPackage_;
            timeoutConfig_ = other.timeoutConfig_ != null ? other.timeoutConfig_.Clone() : null;
            superFormat_ = other.superFormat_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchConfig Clone()
        {
            return new MatchConfig(this);
        }

        /// <summary>Field number for the "teams" field.</summary>
        public const int TeamsFieldNumber = 6;
        private static readonly pb::FieldCodec<TeamConfig> _repeated_teams_codec
            = pb::FieldCodec.ForMessage(50, TeamConfig.Parser);
        private readonly pbc::RepeatedField<TeamConfig> teams_ = new pbc::RepeatedField<TeamConfig>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<TeamConfig> Teams
        {
            get { return teams_; }
        }

        /// <summary>Field number for the "timerConfigs" field.</summary>
        public const int TimerConfigsFieldNumber = 11;
        private static readonly pb::FieldCodec<TimerConfig> _repeated_timerConfigs_codec
            = pb::FieldCodec.ForMessage(90, TimerConfig.Parser);
        private readonly pbc::RepeatedField<TimerConfig> timerConfigs_ = new pbc::RepeatedField<TimerConfig>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<TimerConfig> TimerConfigs
        {
            get { return timerConfigs_; }
        }

        /// <summary>Field number for the "cosmeticConfigs" field.</summary>
        public const int CosmeticConfigsFieldNumber = 14;
        private static readonly pb::FieldCodec<CosmeticConfig> _repeated_cosmeticConfigs_codec
            = pb::FieldCodec.ForMessage(114, CosmeticConfig.Parser);
        private readonly pbc::RepeatedField<CosmeticConfig> cosmeticConfigs_ = new pbc::RepeatedField<CosmeticConfig>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<CosmeticConfig> CosmeticConfigs
        {
            get { return cosmeticConfigs_; }
        }

        /// <summary>Field number for the "gameType" field.</summary>
        public const int GameTypeFieldNumber = 1;
        private GameType gameType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameType GameType
        {
            get { return gameType_; }
            set
            {
                gameType_ = value;
            }
        }

        /// <summary>Field number for the "gameVariant" field.</summary>
        public const int GameVariantFieldNumber = 2;
        private GameVariant gameVariant_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameVariant GameVariant
        {
            get { return gameVariant_; }
            set
            {
                gameVariant_ = value;
            }
        }

        /// <summary>Field number for the "winCondition" field.</summary>
        public const int WinConditionFieldNumber = 3;
        private MatchWinCondition winCondition_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchWinCondition WinCondition
        {
            get { return winCondition_; }
            set
            {
                winCondition_ = value;
            }
        }

        /// <summary>Field number for the "matchOptionBitmask" field.</summary>
        public const int MatchOptionBitmaskFieldNumber = 4;
        private uint matchOptionBitmask_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MatchOptionBitmask
        {
            get { return matchOptionBitmask_; }
            set
            {
                matchOptionBitmask_ = value;
            }
        }

        /// <summary>Field number for the "maxPlayerHandSize" field.</summary>
        public const int MaxPlayerHandSizeFieldNumber = 5;
        private uint maxPlayerHandSize_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxPlayerHandSize
        {
            get { return maxPlayerHandSize_; }
            set
            {
                maxPlayerHandSize_ = value;
            }
        }

        /// <summary>Field number for the "matchTimeLimitSec" field.</summary>
        public const int MatchTimeLimitSecFieldNumber = 7;
        private uint matchTimeLimitSec_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MatchTimeLimitSec
        {
            get { return matchTimeLimitSec_; }
            set
            {
                matchTimeLimitSec_ = value;
            }
        }

        /// <summary>Field number for the "inactivityTimeLimitSec" field.</summary>
        public const int InactivityTimeLimitSecFieldNumber = 8;
        private uint inactivityTimeLimitSec_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InactivityTimeLimitSec
        {
            get { return inactivityTimeLimitSec_; }
            set
            {
                inactivityTimeLimitSec_ = value;
            }
        }

        /// <summary>Field number for the "testConfig" field.</summary>
        public const int TestConfigFieldNumber = 9;
        private TestConfig testConfig_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestConfig TestConfig
        {
            get { return testConfig_; }
            set
            {
                testConfig_ = value;
            }
        }

        /// <summary>Field number for the "mulliganType" field.</summary>
        public const int MulliganTypeFieldNumber = 10;
        private MulliganType mulliganType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MulliganType MulliganType
        {
            get { return mulliganType_; }
            set
            {
                mulliganType_ = value;
            }
        }

        /// <summary>Field number for the "timerPackage" field.</summary>
        public const int TimerPackageFieldNumber = 12;
        private TimerPackage timerPackage_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerPackage TimerPackage
        {
            get { return timerPackage_; }
            set
            {
                timerPackage_ = value;
            }
        }

        /// <summary>Field number for the "timeoutConfig" field.</summary>
        public const int TimeoutConfigFieldNumber = 13;
        private TimeoutConfig timeoutConfig_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeoutConfig TimeoutConfig
        {
            get { return timeoutConfig_; }
            set
            {
                timeoutConfig_ = value;
            }
        }

        /// <summary>Field number for the "superFormat" field.</summary>
        public const int SuperFormatFieldNumber = 15;
        private SuperFormat superFormat_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SuperFormat SuperFormat
        {
            get { return superFormat_; }
            set
            {
                superFormat_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchConfig);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchConfig other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!teams_.Equals(other.teams_)) return false;
            if (!timerConfigs_.Equals(other.timerConfigs_)) return false;
            if (!cosmeticConfigs_.Equals(other.cosmeticConfigs_)) return false;
            if (GameType != other.GameType) return false;
            if (GameVariant != other.GameVariant) return false;
            if (WinCondition != other.WinCondition) return false;
            if (MatchOptionBitmask != other.MatchOptionBitmask) return false;
            if (MaxPlayerHandSize != other.MaxPlayerHandSize) return false;
            if (MatchTimeLimitSec != other.MatchTimeLimitSec) return false;
            if (InactivityTimeLimitSec != other.InactivityTimeLimitSec) return false;
            if (!object.Equals(TestConfig, other.TestConfig)) return false;
            if (MulliganType != other.MulliganType) return false;
            if (TimerPackage != other.TimerPackage) return false;
            if (!object.Equals(TimeoutConfig, other.TimeoutConfig)) return false;
            if (SuperFormat != other.SuperFormat) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= teams_.GetHashCode();
            hash ^= timerConfigs_.GetHashCode();
            hash ^= cosmeticConfigs_.GetHashCode();
            if (GameType != 0) hash ^= GameType.GetHashCode();
            if (GameVariant != 0) hash ^= GameVariant.GetHashCode();
            if (WinCondition != 0) hash ^= WinCondition.GetHashCode();
            if (MatchOptionBitmask != 0) hash ^= MatchOptionBitmask.GetHashCode();
            if (MaxPlayerHandSize != 0) hash ^= MaxPlayerHandSize.GetHashCode();
            if (MatchTimeLimitSec != 0) hash ^= MatchTimeLimitSec.GetHashCode();
            if (InactivityTimeLimitSec != 0) hash ^= InactivityTimeLimitSec.GetHashCode();
            if (testConfig_ != null) hash ^= TestConfig.GetHashCode();
            if (MulliganType != 0) hash ^= MulliganType.GetHashCode();
            if (TimerPackage != 0) hash ^= TimerPackage.GetHashCode();
            if (timeoutConfig_ != null) hash ^= TimeoutConfig.GetHashCode();
            if (SuperFormat != 0) hash ^= SuperFormat.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GameType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)GameType);
            }
            if (GameVariant != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)GameVariant);
            }
            if (WinCondition != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)WinCondition);
            }
            if (MatchOptionBitmask != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(MatchOptionBitmask);
            }
            if (MaxPlayerHandSize != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(MaxPlayerHandSize);
            }
            teams_.WriteTo(output, _repeated_teams_codec);
            if (MatchTimeLimitSec != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(MatchTimeLimitSec);
            }
            if (InactivityTimeLimitSec != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(InactivityTimeLimitSec);
            }
            if (testConfig_ != null)
            {
                output.WriteRawTag(74);
                output.WriteMessage(TestConfig);
            }
            if (MulliganType != 0)
            {
                output.WriteRawTag(80);
                output.WriteEnum((int)MulliganType);
            }
            timerConfigs_.WriteTo(output, _repeated_timerConfigs_codec);
            if (TimerPackage != 0)
            {
                output.WriteRawTag(96);
                output.WriteEnum((int)TimerPackage);
            }
            if (timeoutConfig_ != null)
            {
                output.WriteRawTag(106);
                output.WriteMessage(TimeoutConfig);
            }
            cosmeticConfigs_.WriteTo(output, _repeated_cosmeticConfigs_codec);
            if (SuperFormat != 0)
            {
                output.WriteRawTag(120);
                output.WriteEnum((int)SuperFormat);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += teams_.CalculateSize(_repeated_teams_codec);
            size += timerConfigs_.CalculateSize(_repeated_timerConfigs_codec);
            size += cosmeticConfigs_.CalculateSize(_repeated_cosmeticConfigs_codec);
            if (GameType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GameType);
            }
            if (GameVariant != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GameVariant);
            }
            if (WinCondition != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)WinCondition);
            }
            if (MatchOptionBitmask != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchOptionBitmask);
            }
            if (MaxPlayerHandSize != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayerHandSize);
            }
            if (MatchTimeLimitSec != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchTimeLimitSec);
            }
            if (InactivityTimeLimitSec != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InactivityTimeLimitSec);
            }
            if (testConfig_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestConfig);
            }
            if (MulliganType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MulliganType);
            }
            if (TimerPackage != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)TimerPackage);
            }
            if (timeoutConfig_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeoutConfig);
            }
            if (SuperFormat != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)SuperFormat);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchConfig other)
        {
            if (other == null)
            {
                return;
            }
            teams_.Add(other.teams_);
            timerConfigs_.Add(other.timerConfigs_);
            cosmeticConfigs_.Add(other.cosmeticConfigs_);
            if (other.GameType != 0)
            {
                GameType = other.GameType;
            }
            if (other.GameVariant != 0)
            {
                GameVariant = other.GameVariant;
            }
            if (other.WinCondition != 0)
            {
                WinCondition = other.WinCondition;
            }
            if (other.MatchOptionBitmask != 0)
            {
                MatchOptionBitmask = other.MatchOptionBitmask;
            }
            if (other.MaxPlayerHandSize != 0)
            {
                MaxPlayerHandSize = other.MaxPlayerHandSize;
            }
            if (other.MatchTimeLimitSec != 0)
            {
                MatchTimeLimitSec = other.MatchTimeLimitSec;
            }
            if (other.InactivityTimeLimitSec != 0)
            {
                InactivityTimeLimitSec = other.InactivityTimeLimitSec;
            }
            if (other.testConfig_ != null)
            {
                if (testConfig_ == null)
                {
                    testConfig_ = new TestConfig();
                }
                TestConfig.MergeFrom(other.TestConfig);
            }
            if (other.MulliganType != 0)
            {
                MulliganType = other.MulliganType;
            }
            if (other.TimerPackage != 0)
            {
                TimerPackage = other.TimerPackage;
            }
            if (other.timeoutConfig_ != null)
            {
                if (timeoutConfig_ == null)
                {
                    timeoutConfig_ = new TimeoutConfig();
                }
                TimeoutConfig.MergeFrom(other.TimeoutConfig);
            }
            if (other.SuperFormat != 0)
            {
                SuperFormat = other.SuperFormat;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            gameType_ = (GameType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            gameVariant_ = (GameVariant)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            winCondition_ = (MatchWinCondition)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            MatchOptionBitmask = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            MaxPlayerHandSize = input.ReadUInt32();
                            break;
                        }
                    case 50:
                        {
                            teams_.AddEntriesFrom(input, _repeated_teams_codec);
                            break;
                        }
                    case 56:
                        {
                            MatchTimeLimitSec = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            InactivityTimeLimitSec = input.ReadUInt32();
                            break;
                        }
                    case 74:
                        {
                            if (testConfig_ == null)
                            {
                                testConfig_ = new TestConfig();
                            }
                            input.ReadMessage(testConfig_);
                            break;
                        }
                    case 80:
                        {
                            mulliganType_ = (MulliganType)input.ReadEnum();
                            break;
                        }
                    case 90:
                        {
                            timerConfigs_.AddEntriesFrom(input, _repeated_timerConfigs_codec);
                            break;
                        }
                    case 96:
                        {
                            timerPackage_ = (TimerPackage)input.ReadEnum();
                            break;
                        }
                    case 106:
                        {
                            if (timeoutConfig_ == null)
                            {
                                timeoutConfig_ = new TimeoutConfig();
                            }
                            input.ReadMessage(timeoutConfig_);
                            break;
                        }
                    case 114:
                        {
                            cosmeticConfigs_.AddEntriesFrom(input, _repeated_cosmeticConfigs_codec);
                            break;
                        }
                    case 120:
                        {
                            superFormat_ = (SuperFormat)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchControllerClientSessionSettings : pb::IMessage<MatchControllerClientSessionSettings>
    {
        private static readonly pb::MessageParser<MatchControllerClientSessionSettings> _parser = new pb::MessageParser<MatchControllerClientSessionSettings>(() => new MatchControllerClientSessionSettings());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchControllerClientSessionSettings> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[205]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerClientSessionSettings()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerClientSessionSettings(MatchControllerClientSessionSettings other) : this()
        {
            subscribedEventTypes_ = other.subscribedEventTypes_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerClientSessionSettings Clone()
        {
            return new MatchControllerClientSessionSettings(this);
        }

        /// <summary>Field number for the "subscribedEventTypes" field.</summary>
        public const int SubscribedEventTypesFieldNumber = 10;
        private static readonly pb::FieldCodec<MatchControllerEventType> _repeated_subscribedEventTypes_codec
            = pb::FieldCodec.ForEnum(82, x => (int)x, x => (MatchControllerEventType)x);
        private readonly pbc::RepeatedField<MatchControllerEventType> subscribedEventTypes_ = new pbc::RepeatedField<MatchControllerEventType>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<MatchControllerEventType> SubscribedEventTypes
        {
            get { return subscribedEventTypes_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchControllerClientSessionSettings);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchControllerClientSessionSettings other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!subscribedEventTypes_.Equals(other.subscribedEventTypes_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= subscribedEventTypes_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            subscribedEventTypes_.WriteTo(output, _repeated_subscribedEventTypes_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += subscribedEventTypes_.CalculateSize(_repeated_subscribedEventTypes_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchControllerClientSessionSettings other)
        {
            if (other == null)
            {
                return;
            }
            subscribedEventTypes_.Add(other.subscribedEventTypes_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 82:
                    case 80:
                        {
                            subscribedEventTypes_.AddEntriesFrom(input, _repeated_subscribedEventTypes_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchControllerGetSettingsRequest : pb::IMessage<MatchControllerGetSettingsRequest>
    {
        private static readonly pb::MessageParser<MatchControllerGetSettingsRequest> _parser = new pb::MessageParser<MatchControllerGetSettingsRequest>(() => new MatchControllerGetSettingsRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchControllerGetSettingsRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[206]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerGetSettingsRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerGetSettingsRequest(MatchControllerGetSettingsRequest other) : this()
        {
            propertyNames_ = other.propertyNames_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerGetSettingsRequest Clone()
        {
            return new MatchControllerGetSettingsRequest(this);
        }

        /// <summary>Field number for the "propertyNames" field.</summary>
        public const int PropertyNamesFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_propertyNames_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> propertyNames_ = new pbc::RepeatedField<string>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> PropertyNames
        {
            get { return propertyNames_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchControllerGetSettingsRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchControllerGetSettingsRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!propertyNames_.Equals(other.propertyNames_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= propertyNames_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            propertyNames_.WriteTo(output, _repeated_propertyNames_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += propertyNames_.CalculateSize(_repeated_propertyNames_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchControllerGetSettingsRequest other)
        {
            if (other == null)
            {
                return;
            }
            propertyNames_.Add(other.propertyNames_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            propertyNames_.AddEntriesFrom(input, _repeated_propertyNames_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchControllerGetSettingsResponse : pb::IMessage<MatchControllerGetSettingsResponse>
    {
        private static readonly pb::MessageParser<MatchControllerGetSettingsResponse> _parser = new pb::MessageParser<MatchControllerGetSettingsResponse>(() => new MatchControllerGetSettingsResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchControllerGetSettingsResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[207]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerGetSettingsResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerGetSettingsResponse(MatchControllerGetSettingsResponse other) : this()
        {
            matchControllerSettings_ = other.matchControllerSettings_ != null ? other.matchControllerSettings_.Clone() : null;
            clientSessionSettings_ = other.clientSessionSettings_ != null ? other.clientSessionSettings_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerGetSettingsResponse Clone()
        {
            return new MatchControllerGetSettingsResponse(this);
        }

        /// <summary>Field number for the "matchControllerSettings" field.</summary>
        public const int MatchControllerSettingsFieldNumber = 1;
        private MatchControllerSettings matchControllerSettings_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSettings MatchControllerSettings
        {
            get { return matchControllerSettings_; }
            set
            {
                matchControllerSettings_ = value;
            }
        }

        /// <summary>Field number for the "clientSessionSettings" field.</summary>
        public const int ClientSessionSettingsFieldNumber = 2;
        private MatchControllerClientSessionSettings clientSessionSettings_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerClientSessionSettings ClientSessionSettings
        {
            get { return clientSessionSettings_; }
            set
            {
                clientSessionSettings_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchControllerGetSettingsResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchControllerGetSettingsResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(MatchControllerSettings, other.MatchControllerSettings)) return false;
            if (!object.Equals(ClientSessionSettings, other.ClientSessionSettings)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (matchControllerSettings_ != null) hash ^= MatchControllerSettings.GetHashCode();
            if (clientSessionSettings_ != null) hash ^= ClientSessionSettings.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (matchControllerSettings_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(MatchControllerSettings);
            }
            if (clientSessionSettings_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ClientSessionSettings);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (matchControllerSettings_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchControllerSettings);
            }
            if (clientSessionSettings_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientSessionSettings);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchControllerGetSettingsResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.matchControllerSettings_ != null)
            {
                if (matchControllerSettings_ == null)
                {
                    matchControllerSettings_ = new MatchControllerSettings();
                }
                MatchControllerSettings.MergeFrom(other.MatchControllerSettings);
            }
            if (other.clientSessionSettings_ != null)
            {
                if (clientSessionSettings_ == null)
                {
                    clientSessionSettings_ = new MatchControllerClientSessionSettings();
                }
                ClientSessionSettings.MergeFrom(other.ClientSessionSettings);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (matchControllerSettings_ == null)
                            {
                                matchControllerSettings_ = new MatchControllerSettings();
                            }
                            input.ReadMessage(matchControllerSettings_);
                            break;
                        }
                    case 18:
                        {
                            if (clientSessionSettings_ == null)
                            {
                                clientSessionSettings_ = new MatchControllerClientSessionSettings();
                            }
                            input.ReadMessage(clientSessionSettings_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchControllerHealthReport : pb::IMessage<MatchControllerHealthReport>
    {
        private static readonly pb::MessageParser<MatchControllerHealthReport> _parser = new pb::MessageParser<MatchControllerHealthReport>(() => new MatchControllerHealthReport());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchControllerHealthReport> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[208]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerHealthReport()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerHealthReport(MatchControllerHealthReport other) : this()
        {
            serviceInfo_ = other.serviceInfo_ != null ? other.serviceInfo_.Clone() : null;
            timestamp_ = other.timestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerHealthReport Clone()
        {
            return new MatchControllerHealthReport(this);
        }

        /// <summary>Field number for the "serviceInfo" field.</summary>
        public const int ServiceInfoFieldNumber = 1;
        private MatchControllerServiceInfo serviceInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerServiceInfo ServiceInfo
        {
            get { return serviceInfo_; }
            set
            {
                serviceInfo_ = value;
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private long timestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchControllerHealthReport);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchControllerHealthReport other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(ServiceInfo, other.ServiceInfo)) return false;
            if (Timestamp != other.Timestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (serviceInfo_ != null) hash ^= ServiceInfo.GetHashCode();
            if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (serviceInfo_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(ServiceInfo);
            }
            if (Timestamp != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(Timestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (serviceInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceInfo);
            }
            if (Timestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchControllerHealthReport other)
        {
            if (other == null)
            {
                return;
            }
            if (other.serviceInfo_ != null)
            {
                if (serviceInfo_ == null)
                {
                    serviceInfo_ = new MatchControllerServiceInfo();
                }
                ServiceInfo.MergeFrom(other.ServiceInfo);
            }
            if (other.Timestamp != 0L)
            {
                Timestamp = other.Timestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (serviceInfo_ == null)
                            {
                                serviceInfo_ = new MatchControllerServiceInfo();
                            }
                            input.ReadMessage(serviceInfo_);
                            break;
                        }
                    case 16:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchControllerServiceInfo : pb::IMessage<MatchControllerServiceInfo>
    {
        private static readonly pb::MessageParser<MatchControllerServiceInfo> _parser = new pb::MessageParser<MatchControllerServiceInfo>(() => new MatchControllerServiceInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchControllerServiceInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[209]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerServiceInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerServiceInfo(MatchControllerServiceInfo other) : this()
        {
            environmentId_ = other.environmentId_;
            serviceFabricServiceInfo_ = other.serviceFabricServiceInfo_ != null ? other.serviceFabricServiceInfo_.Clone() : null;
            matchControllerState_ = other.matchControllerState_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerServiceInfo Clone()
        {
            return new MatchControllerServiceInfo(this);
        }

        /// <summary>Field number for the "environmentId" field.</summary>
        public const int EnvironmentIdFieldNumber = 2;
        private string environmentId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EnvironmentId
        {
            get { return environmentId_; }
            set
            {
                environmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "serviceFabricServiceInfo" field.</summary>
        public const int ServiceFabricServiceInfoFieldNumber = 1;
        private ServiceFabricServiceInfo serviceFabricServiceInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServiceFabricServiceInfo ServiceFabricServiceInfo
        {
            get { return serviceFabricServiceInfo_; }
            set
            {
                serviceFabricServiceInfo_ = value;
            }
        }

        /// <summary>Field number for the "matchControllerState" field.</summary>
        public const int MatchControllerStateFieldNumber = 3;
        private MatchControllerState matchControllerState_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerState MatchControllerState
        {
            get { return matchControllerState_; }
            set
            {
                matchControllerState_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchControllerServiceInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchControllerServiceInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EnvironmentId != other.EnvironmentId) return false;
            if (!object.Equals(ServiceFabricServiceInfo, other.ServiceFabricServiceInfo)) return false;
            if (MatchControllerState != other.MatchControllerState) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EnvironmentId.Length != 0) hash ^= EnvironmentId.GetHashCode();
            if (serviceFabricServiceInfo_ != null) hash ^= ServiceFabricServiceInfo.GetHashCode();
            if (MatchControllerState != 0) hash ^= MatchControllerState.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (serviceFabricServiceInfo_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(ServiceFabricServiceInfo);
            }
            if (EnvironmentId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(EnvironmentId);
            }
            if (MatchControllerState != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)MatchControllerState);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EnvironmentId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EnvironmentId);
            }
            if (serviceFabricServiceInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceFabricServiceInfo);
            }
            if (MatchControllerState != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MatchControllerState);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchControllerServiceInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EnvironmentId.Length != 0)
            {
                EnvironmentId = other.EnvironmentId;
            }
            if (other.serviceFabricServiceInfo_ != null)
            {
                if (serviceFabricServiceInfo_ == null)
                {
                    serviceFabricServiceInfo_ = new ServiceFabricServiceInfo();
                }
                ServiceFabricServiceInfo.MergeFrom(other.ServiceFabricServiceInfo);
            }
            if (other.MatchControllerState != 0)
            {
                MatchControllerState = other.MatchControllerState;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (serviceFabricServiceInfo_ == null)
                            {
                                serviceFabricServiceInfo_ = new ServiceFabricServiceInfo();
                            }
                            input.ReadMessage(serviceFabricServiceInfo_);
                            break;
                        }
                    case 18:
                        {
                            EnvironmentId = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            matchControllerState_ = (MatchControllerState)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchControllerSetSettingsRequest : pb::IMessage<MatchControllerSetSettingsRequest>
    {
        private static readonly pb::MessageParser<MatchControllerSetSettingsRequest> _parser = new pb::MessageParser<MatchControllerSetSettingsRequest>(() => new MatchControllerSetSettingsRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchControllerSetSettingsRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[210]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSetSettingsRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSetSettingsRequest(MatchControllerSetSettingsRequest other) : this()
        {
            settings_ = other.settings_ != null ? other.settings_.Clone() : null;
            clientSessionSettings_ = other.clientSessionSettings_ != null ? other.clientSessionSettings_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSetSettingsRequest Clone()
        {
            return new MatchControllerSetSettingsRequest(this);
        }

        /// <summary>Field number for the "settings" field.</summary>
        public const int SettingsFieldNumber = 1;
        private MatchControllerSettings settings_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSettings Settings
        {
            get { return settings_; }
            set
            {
                settings_ = value;
            }
        }

        /// <summary>Field number for the "clientSessionSettings" field.</summary>
        public const int ClientSessionSettingsFieldNumber = 2;
        private MatchControllerClientSessionSettings clientSessionSettings_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerClientSessionSettings ClientSessionSettings
        {
            get { return clientSessionSettings_; }
            set
            {
                clientSessionSettings_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchControllerSetSettingsRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchControllerSetSettingsRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Settings, other.Settings)) return false;
            if (!object.Equals(ClientSessionSettings, other.ClientSessionSettings)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (settings_ != null) hash ^= Settings.GetHashCode();
            if (clientSessionSettings_ != null) hash ^= ClientSessionSettings.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (settings_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Settings);
            }
            if (clientSessionSettings_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ClientSessionSettings);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (settings_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
            }
            if (clientSessionSettings_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientSessionSettings);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchControllerSetSettingsRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.settings_ != null)
            {
                if (settings_ == null)
                {
                    settings_ = new MatchControllerSettings();
                }
                Settings.MergeFrom(other.Settings);
            }
            if (other.clientSessionSettings_ != null)
            {
                if (clientSessionSettings_ == null)
                {
                    clientSessionSettings_ = new MatchControllerClientSessionSettings();
                }
                ClientSessionSettings.MergeFrom(other.ClientSessionSettings);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (settings_ == null)
                            {
                                settings_ = new MatchControllerSettings();
                            }
                            input.ReadMessage(settings_);
                            break;
                        }
                    case 18:
                        {
                            if (clientSessionSettings_ == null)
                            {
                                clientSessionSettings_ = new MatchControllerClientSessionSettings();
                            }
                            input.ReadMessage(clientSessionSettings_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchControllerSetSettingsResponse : pb::IMessage<MatchControllerSetSettingsResponse>
    {
        private static readonly pb::MessageParser<MatchControllerSetSettingsResponse> _parser = new pb::MessageParser<MatchControllerSetSettingsResponse>(() => new MatchControllerSetSettingsResponse());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchControllerSetSettingsResponse> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[211]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSetSettingsResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSetSettingsResponse(MatchControllerSetSettingsResponse other) : this()
        {
            settings_ = other.settings_ != null ? other.settings_.Clone() : null;
            clientSessionSettings_ = other.clientSessionSettings_ != null ? other.clientSessionSettings_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSetSettingsResponse Clone()
        {
            return new MatchControllerSetSettingsResponse(this);
        }

        /// <summary>Field number for the "settings" field.</summary>
        public const int SettingsFieldNumber = 1;
        private MatchControllerSettings settings_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSettings Settings
        {
            get { return settings_; }
            set
            {
                settings_ = value;
            }
        }

        /// <summary>Field number for the "clientSessionSettings" field.</summary>
        public const int ClientSessionSettingsFieldNumber = 2;
        private MatchControllerClientSessionSettings clientSessionSettings_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerClientSessionSettings ClientSessionSettings
        {
            get { return clientSessionSettings_; }
            set
            {
                clientSessionSettings_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchControllerSetSettingsResponse);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchControllerSetSettingsResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Settings, other.Settings)) return false;
            if (!object.Equals(ClientSessionSettings, other.ClientSessionSettings)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (settings_ != null) hash ^= Settings.GetHashCode();
            if (clientSessionSettings_ != null) hash ^= ClientSessionSettings.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (settings_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Settings);
            }
            if (clientSessionSettings_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ClientSessionSettings);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (settings_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
            }
            if (clientSessionSettings_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientSessionSettings);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchControllerSetSettingsResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.settings_ != null)
            {
                if (settings_ == null)
                {
                    settings_ = new MatchControllerSettings();
                }
                Settings.MergeFrom(other.Settings);
            }
            if (other.clientSessionSettings_ != null)
            {
                if (clientSessionSettings_ == null)
                {
                    clientSessionSettings_ = new MatchControllerClientSessionSettings();
                }
                ClientSessionSettings.MergeFrom(other.ClientSessionSettings);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (settings_ == null)
                            {
                                settings_ = new MatchControllerSettings();
                            }
                            input.ReadMessage(settings_);
                            break;
                        }
                    case 18:
                        {
                            if (clientSessionSettings_ == null)
                            {
                                clientSessionSettings_ = new MatchControllerClientSessionSettings();
                            }
                            input.ReadMessage(clientSessionSettings_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchControllerSettings : pb::IMessage<MatchControllerSettings>
    {
        private static readonly pb::MessageParser<MatchControllerSettings> _parser = new pb::MessageParser<MatchControllerSettings>(() => new MatchControllerSettings());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchControllerSettings> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[212]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSettings()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSettings(MatchControllerSettings other) : this()
        {
            greIrBin_ = other.greIrBin_;
            grpdXml_ = other.grpdXml_;
            currentSeason_ = other.currentSeason_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSettings Clone()
        {
            return new MatchControllerSettings(this);
        }

        /// <summary>Field number for the "greIrBin" field.</summary>
        public const int GreIrBinFieldNumber = 5;
        private string greIrBin_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GreIrBin
        {
            get { return greIrBin_; }
            set
            {
                greIrBin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "grpdXml" field.</summary>
        public const int GrpdXmlFieldNumber = 6;
        private string grpdXml_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GrpdXml
        {
            get { return grpdXml_; }
            set
            {
                grpdXml_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "currentSeason" field.</summary>
        public const int CurrentSeasonFieldNumber = 20;
        private string currentSeason_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentSeason
        {
            get { return currentSeason_; }
            set
            {
                currentSeason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchControllerSettings);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchControllerSettings other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GreIrBin != other.GreIrBin) return false;
            if (GrpdXml != other.GrpdXml) return false;
            if (CurrentSeason != other.CurrentSeason) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (GreIrBin.Length != 0) hash ^= GreIrBin.GetHashCode();
            if (GrpdXml.Length != 0) hash ^= GrpdXml.GetHashCode();
            if (CurrentSeason.Length != 0) hash ^= CurrentSeason.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GreIrBin.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(GreIrBin);
            }
            if (GrpdXml.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(GrpdXml);
            }
            if (CurrentSeason.Length != 0)
            {
                output.WriteRawTag(162, 1);
                output.WriteString(CurrentSeason);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (GreIrBin.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GreIrBin);
            }
            if (GrpdXml.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GrpdXml);
            }
            if (CurrentSeason.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(CurrentSeason);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchControllerSettings other)
        {
            if (other == null)
            {
                return;
            }
            if (other.GreIrBin.Length != 0)
            {
                GreIrBin = other.GreIrBin;
            }
            if (other.GrpdXml.Length != 0)
            {
                GrpdXml = other.GrpdXml;
            }
            if (other.CurrentSeason.Length != 0)
            {
                CurrentSeason = other.CurrentSeason;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 42:
                        {
                            GreIrBin = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            GrpdXml = input.ReadString();
                            break;
                        }
                    case 162:
                        {
                            CurrentSeason = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchControllerStateChangedEvent : pb::IMessage<MatchControllerStateChangedEvent>
    {
        private static readonly pb::MessageParser<MatchControllerStateChangedEvent> _parser = new pb::MessageParser<MatchControllerStateChangedEvent>(() => new MatchControllerStateChangedEvent());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchControllerStateChangedEvent> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[213]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerStateChangedEvent()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerStateChangedEvent(MatchControllerStateChangedEvent other) : this()
        {
            serviceInfo_ = other.serviceInfo_ != null ? other.serviceInfo_.Clone() : null;
            timestamp_ = other.timestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerStateChangedEvent Clone()
        {
            return new MatchControllerStateChangedEvent(this);
        }

        /// <summary>Field number for the "serviceInfo" field.</summary>
        public const int ServiceInfoFieldNumber = 1;
        private MatchControllerServiceInfo serviceInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerServiceInfo ServiceInfo
        {
            get { return serviceInfo_; }
            set
            {
                serviceInfo_ = value;
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private long timestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchControllerStateChangedEvent);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchControllerStateChangedEvent other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(ServiceInfo, other.ServiceInfo)) return false;
            if (Timestamp != other.Timestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (serviceInfo_ != null) hash ^= ServiceInfo.GetHashCode();
            if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (serviceInfo_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(ServiceInfo);
            }
            if (Timestamp != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(Timestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (serviceInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceInfo);
            }
            if (Timestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchControllerStateChangedEvent other)
        {
            if (other == null)
            {
                return;
            }
            if (other.serviceInfo_ != null)
            {
                if (serviceInfo_ == null)
                {
                    serviceInfo_ = new MatchControllerServiceInfo();
                }
                ServiceInfo.MergeFrom(other.ServiceInfo);
            }
            if (other.Timestamp != 0L)
            {
                Timestamp = other.Timestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (serviceInfo_ == null)
                            {
                                serviceInfo_ = new MatchControllerServiceInfo();
                            }
                            input.ReadMessage(serviceInfo_);
                            break;
                        }
                    case 16:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchGameRoomConfig : pb::IMessage<MatchGameRoomConfig>
    {
        private static readonly pb::MessageParser<MatchGameRoomConfig> _parser = new pb::MessageParser<MatchGameRoomConfig>(() => new MatchGameRoomConfig());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchGameRoomConfig> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[214]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomConfig()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomConfig(MatchGameRoomConfig other) : this()
        {
            gameRoomId_ = other.gameRoomId_;
            eventId_ = other.eventId_;
            reservedPlayers_ = other.reservedPlayers_.Clone();
            matchId_ = other.matchId_;
            password_ = other.password_;
            greIrBinPath_ = other.greIrBinPath_;
            greHostLoggerLevel_ = other.greHostLoggerLevel_;
            greRecorderConfig_ = other.greRecorderConfig_;
            matchConfig_ = other.matchConfig_ != null ? other.matchConfig_.Clone() : null;
            greConfig_ = other.greConfig_ != null ? other.greConfig_.Clone() : null;
            isVisible_ = other.isVisible_;
            joinRoomTimeoutSecs_ = other.joinRoomTimeoutSecs_;
            playerDisconnectTimeoutSecs_ = other.playerDisconnectTimeoutSecs_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomConfig Clone()
        {
            return new MatchGameRoomConfig(this);
        }

        /// <summary>Field number for the "gameRoomId" field.</summary>
        public const int GameRoomIdFieldNumber = 1;
        private string gameRoomId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameRoomId
        {
            get { return gameRoomId_; }
            set
            {
                gameRoomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 2;
        private string eventId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "reservedPlayers" field.</summary>
        public const int ReservedPlayersFieldNumber = 8;
        private static readonly pb::FieldCodec<MatchGameRoomPlayerInfo> _repeated_reservedPlayers_codec
            = pb::FieldCodec.ForMessage(66, MatchGameRoomPlayerInfo.Parser);
        private readonly pbc::RepeatedField<MatchGameRoomPlayerInfo> reservedPlayers_ = new pbc::RepeatedField<MatchGameRoomPlayerInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<MatchGameRoomPlayerInfo> ReservedPlayers
        {
            get { return reservedPlayers_; }
        }

        /// <summary>Field number for the "matchId" field.</summary>
        public const int MatchIdFieldNumber = 11;
        private string matchId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchId
        {
            get { return matchId_; }
            set
            {
                matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "password" field.</summary>
        public const int PasswordFieldNumber = 21;
        private string password_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Password
        {
            get { return password_; }
            set
            {
                password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "greIrBinPath" field.</summary>
        public const int GreIrBinPathFieldNumber = 30;
        private string greIrBinPath_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GreIrBinPath
        {
            get { return greIrBinPath_; }
            set
            {
                greIrBinPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "greHostLoggerLevel" field.</summary>
        public const int GreHostLoggerLevelFieldNumber = 31;
        private string greHostLoggerLevel_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GreHostLoggerLevel
        {
            get { return greHostLoggerLevel_; }
            set
            {
                greHostLoggerLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "greRecorderConfig" field.</summary>
        public const int GreRecorderConfigFieldNumber = 32;
        private string greRecorderConfig_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GreRecorderConfig
        {
            get { return greRecorderConfig_; }
            set
            {
                greRecorderConfig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "matchConfig" field.</summary>
        public const int MatchConfigFieldNumber = 12;
        private MatchConfig matchConfig_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchConfig MatchConfig
        {
            get { return matchConfig_; }
            set
            {
                matchConfig_ = value;
            }
        }

        /// <summary>Field number for the "greConfig" field.</summary>
        public const int GreConfigFieldNumber = 13;
        private GREConfiguration greConfig_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREConfiguration GreConfig
        {
            get { return greConfig_; }
            set
            {
                greConfig_ = value;
            }
        }

        /// <summary>Field number for the "isVisible" field.</summary>
        public const int IsVisibleFieldNumber = 20;
        private bool isVisible_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsVisible
        {
            get { return isVisible_; }
            set
            {
                isVisible_ = value;
            }
        }

        /// <summary>Field number for the "joinRoomTimeoutSecs" field.</summary>
        public const int JoinRoomTimeoutSecsFieldNumber = 35;
        private int joinRoomTimeoutSecs_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int JoinRoomTimeoutSecs
        {
            get { return joinRoomTimeoutSecs_; }
            set
            {
                joinRoomTimeoutSecs_ = value;
            }
        }

        /// <summary>Field number for the "playerDisconnectTimeoutSecs" field.</summary>
        public const int PlayerDisconnectTimeoutSecsFieldNumber = 36;
        private int playerDisconnectTimeoutSecs_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerDisconnectTimeoutSecs
        {
            get { return playerDisconnectTimeoutSecs_; }
            set
            {
                playerDisconnectTimeoutSecs_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchGameRoomConfig);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchGameRoomConfig other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GameRoomId != other.GameRoomId) return false;
            if (EventId != other.EventId) return false;
            if (!reservedPlayers_.Equals(other.reservedPlayers_)) return false;
            if (MatchId != other.MatchId) return false;
            if (Password != other.Password) return false;
            if (GreIrBinPath != other.GreIrBinPath) return false;
            if (GreHostLoggerLevel != other.GreHostLoggerLevel) return false;
            if (GreRecorderConfig != other.GreRecorderConfig) return false;
            if (!object.Equals(MatchConfig, other.MatchConfig)) return false;
            if (!object.Equals(GreConfig, other.GreConfig)) return false;
            if (IsVisible != other.IsVisible) return false;
            if (JoinRoomTimeoutSecs != other.JoinRoomTimeoutSecs) return false;
            if (PlayerDisconnectTimeoutSecs != other.PlayerDisconnectTimeoutSecs) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (GameRoomId.Length != 0) hash ^= GameRoomId.GetHashCode();
            if (EventId.Length != 0) hash ^= EventId.GetHashCode();
            hash ^= reservedPlayers_.GetHashCode();
            if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
            if (Password.Length != 0) hash ^= Password.GetHashCode();
            if (GreIrBinPath.Length != 0) hash ^= GreIrBinPath.GetHashCode();
            if (GreHostLoggerLevel.Length != 0) hash ^= GreHostLoggerLevel.GetHashCode();
            if (GreRecorderConfig.Length != 0) hash ^= GreRecorderConfig.GetHashCode();
            if (matchConfig_ != null) hash ^= MatchConfig.GetHashCode();
            if (greConfig_ != null) hash ^= GreConfig.GetHashCode();
            if (IsVisible != false) hash ^= IsVisible.GetHashCode();
            if (JoinRoomTimeoutSecs != 0) hash ^= JoinRoomTimeoutSecs.GetHashCode();
            if (PlayerDisconnectTimeoutSecs != 0) hash ^= PlayerDisconnectTimeoutSecs.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GameRoomId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(GameRoomId);
            }
            if (EventId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(EventId);
            }
            reservedPlayers_.WriteTo(output, _repeated_reservedPlayers_codec);
            if (MatchId.Length != 0)
            {
                output.WriteRawTag(90);
                output.WriteString(MatchId);
            }
            if (matchConfig_ != null)
            {
                output.WriteRawTag(98);
                output.WriteMessage(MatchConfig);
            }
            if (greConfig_ != null)
            {
                output.WriteRawTag(106);
                output.WriteMessage(GreConfig);
            }
            if (IsVisible != false)
            {
                output.WriteRawTag(160, 1);
                output.WriteBool(IsVisible);
            }
            if (Password.Length != 0)
            {
                output.WriteRawTag(170, 1);
                output.WriteString(Password);
            }
            if (GreIrBinPath.Length != 0)
            {
                output.WriteRawTag(242, 1);
                output.WriteString(GreIrBinPath);
            }
            if (GreHostLoggerLevel.Length != 0)
            {
                output.WriteRawTag(250, 1);
                output.WriteString(GreHostLoggerLevel);
            }
            if (GreRecorderConfig.Length != 0)
            {
                output.WriteRawTag(130, 2);
                output.WriteString(GreRecorderConfig);
            }
            if (JoinRoomTimeoutSecs != 0)
            {
                output.WriteRawTag(152, 2);
                output.WriteInt32(JoinRoomTimeoutSecs);
            }
            if (PlayerDisconnectTimeoutSecs != 0)
            {
                output.WriteRawTag(160, 2);
                output.WriteInt32(PlayerDisconnectTimeoutSecs);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (GameRoomId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GameRoomId);
            }
            if (EventId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
            }
            size += reservedPlayers_.CalculateSize(_repeated_reservedPlayers_codec);
            if (MatchId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
            }
            if (Password.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
            }
            if (GreIrBinPath.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(GreIrBinPath);
            }
            if (GreHostLoggerLevel.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(GreHostLoggerLevel);
            }
            if (GreRecorderConfig.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(GreRecorderConfig);
            }
            if (matchConfig_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchConfig);
            }
            if (greConfig_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GreConfig);
            }
            if (IsVisible != false)
            {
                size += 2 + 1;
            }
            if (JoinRoomTimeoutSecs != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(JoinRoomTimeoutSecs);
            }
            if (PlayerDisconnectTimeoutSecs != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerDisconnectTimeoutSecs);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchGameRoomConfig other)
        {
            if (other == null)
            {
                return;
            }
            if (other.GameRoomId.Length != 0)
            {
                GameRoomId = other.GameRoomId;
            }
            if (other.EventId.Length != 0)
            {
                EventId = other.EventId;
            }
            reservedPlayers_.Add(other.reservedPlayers_);
            if (other.MatchId.Length != 0)
            {
                MatchId = other.MatchId;
            }
            if (other.Password.Length != 0)
            {
                Password = other.Password;
            }
            if (other.GreIrBinPath.Length != 0)
            {
                GreIrBinPath = other.GreIrBinPath;
            }
            if (other.GreHostLoggerLevel.Length != 0)
            {
                GreHostLoggerLevel = other.GreHostLoggerLevel;
            }
            if (other.GreRecorderConfig.Length != 0)
            {
                GreRecorderConfig = other.GreRecorderConfig;
            }
            if (other.matchConfig_ != null)
            {
                if (matchConfig_ == null)
                {
                    matchConfig_ = new MatchConfig();
                }
                MatchConfig.MergeFrom(other.MatchConfig);
            }
            if (other.greConfig_ != null)
            {
                if (greConfig_ == null)
                {
                    greConfig_ = new GREConfiguration();
                }
                GreConfig.MergeFrom(other.GreConfig);
            }
            if (other.IsVisible != false)
            {
                IsVisible = other.IsVisible;
            }
            if (other.JoinRoomTimeoutSecs != 0)
            {
                JoinRoomTimeoutSecs = other.JoinRoomTimeoutSecs;
            }
            if (other.PlayerDisconnectTimeoutSecs != 0)
            {
                PlayerDisconnectTimeoutSecs = other.PlayerDisconnectTimeoutSecs;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            GameRoomId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            EventId = input.ReadString();
                            break;
                        }
                    case 66:
                        {
                            reservedPlayers_.AddEntriesFrom(input, _repeated_reservedPlayers_codec);
                            break;
                        }
                    case 90:
                        {
                            MatchId = input.ReadString();
                            break;
                        }
                    case 98:
                        {
                            if (matchConfig_ == null)
                            {
                                matchConfig_ = new MatchConfig();
                            }
                            input.ReadMessage(matchConfig_);
                            break;
                        }
                    case 106:
                        {
                            if (greConfig_ == null)
                            {
                                greConfig_ = new GREConfiguration();
                            }
                            input.ReadMessage(greConfig_);
                            break;
                        }
                    case 160:
                        {
                            IsVisible = input.ReadBool();
                            break;
                        }
                    case 170:
                        {
                            Password = input.ReadString();
                            break;
                        }
                    case 242:
                        {
                            GreIrBinPath = input.ReadString();
                            break;
                        }
                    case 250:
                        {
                            GreHostLoggerLevel = input.ReadString();
                            break;
                        }
                    case 258:
                        {
                            GreRecorderConfig = input.ReadString();
                            break;
                        }
                    case 280:
                        {
                            JoinRoomTimeoutSecs = input.ReadInt32();
                            break;
                        }
                    case 288:
                        {
                            PlayerDisconnectTimeoutSecs = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchGameRoomInfo : pb::IMessage<MatchGameRoomInfo>
    {
        private static readonly pb::MessageParser<MatchGameRoomInfo> _parser = new pb::MessageParser<MatchGameRoomInfo>(() => new MatchGameRoomInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchGameRoomInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[215]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomInfo(MatchGameRoomInfo other) : this()
        {
            gameRoomId_ = other.gameRoomId_;
            interimMatchResultList_ = other.interimMatchResultList_.Clone();
            players_ = other.players_.Clone();
            playerMetrics_ = other.playerMetrics_.Clone();
            matchControllerUri_ = other.matchControllerUri_;
            matchClusterUri_ = other.matchClusterUri_;
            creatorId_ = other.creatorId_;
            gameRoomConfig_ = other.gameRoomConfig_ != null ? other.gameRoomConfig_.Clone() : null;
            stateType_ = other.stateType_;
            finalMatchResult_ = other.finalMatchResult_ != null ? other.finalMatchResult_.Clone() : null;
            createdTimestamp_ = other.createdTimestamp_;
            updatedTimestamp_ = other.updatedTimestamp_;
            matchResultSavedTimestamp_ = other.matchResultSavedTimestamp_;
            creatorClientType_ = other.creatorClientType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomInfo Clone()
        {
            return new MatchGameRoomInfo(this);
        }

        /// <summary>Field number for the "gameRoomId" field.</summary>
        public const int GameRoomIdFieldNumber = 1;
        private string gameRoomId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameRoomId
        {
            get { return gameRoomId_; }
            set
            {
                gameRoomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "interimMatchResultList" field.</summary>
        public const int InterimMatchResultListFieldNumber = 5;
        private static readonly pb::FieldCodec<ResultSpec> _repeated_interimMatchResultList_codec
            = pb::FieldCodec.ForMessage(42, ResultSpec.Parser);
        private readonly pbc::RepeatedField<ResultSpec> interimMatchResultList_ = new pbc::RepeatedField<ResultSpec>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ResultSpec> InterimMatchResultList
        {
            get { return interimMatchResultList_; }
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 6;
        private static readonly pb::FieldCodec<MatchGameRoomPlayerInfo> _repeated_players_codec
            = pb::FieldCodec.ForMessage(50, MatchGameRoomPlayerInfo.Parser);
        private readonly pbc::RepeatedField<MatchGameRoomPlayerInfo> players_ = new pbc::RepeatedField<MatchGameRoomPlayerInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<MatchGameRoomPlayerInfo> Players
        {
            get { return players_; }
        }

        /// <summary>Field number for the "playerMetrics" field.</summary>
        public const int PlayerMetricsFieldNumber = 7;
        private static readonly pb::FieldCodec<MatchPlayerMetrics> _repeated_playerMetrics_codec
            = pb::FieldCodec.ForMessage(58, MatchPlayerMetrics.Parser);
        private readonly pbc::RepeatedField<MatchPlayerMetrics> playerMetrics_ = new pbc::RepeatedField<MatchPlayerMetrics>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<MatchPlayerMetrics> PlayerMetrics
        {
            get { return playerMetrics_; }
        }

        /// <summary>Field number for the "matchControllerUri" field.</summary>
        public const int MatchControllerUriFieldNumber = 8;
        private string matchControllerUri_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchControllerUri
        {
            get { return matchControllerUri_; }
            set
            {
                matchControllerUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "matchClusterUri" field.</summary>
        public const int MatchClusterUriFieldNumber = 9;
        private string matchClusterUri_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchClusterUri
        {
            get { return matchClusterUri_; }
            set
            {
                matchClusterUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "creatorId" field.</summary>
        public const int CreatorIdFieldNumber = 21;
        private string creatorId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CreatorId
        {
            get { return creatorId_; }
            set
            {
                creatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "gameRoomConfig" field.</summary>
        public const int GameRoomConfigFieldNumber = 2;
        private MatchGameRoomConfig gameRoomConfig_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomConfig GameRoomConfig
        {
            get { return gameRoomConfig_; }
            set
            {
                gameRoomConfig_ = value;
            }
        }

        /// <summary>Field number for the "stateType" field.</summary>
        public const int StateTypeFieldNumber = 3;
        private MatchGameRoomStateType stateType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomStateType StateType
        {
            get { return stateType_; }
            set
            {
                stateType_ = value;
            }
        }

        /// <summary>Field number for the "finalMatchResult" field.</summary>
        public const int FinalMatchResultFieldNumber = 4;
        private FinalMatchResult finalMatchResult_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FinalMatchResult FinalMatchResult
        {
            get { return finalMatchResult_; }
            set
            {
                finalMatchResult_ = value;
            }
        }

        /// <summary>Field number for the "createdTimestamp" field.</summary>
        public const int CreatedTimestampFieldNumber = 10;
        private long createdTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CreatedTimestamp
        {
            get { return createdTimestamp_; }
            set
            {
                createdTimestamp_ = value;
            }
        }

        /// <summary>Field number for the "updatedTimestamp" field.</summary>
        public const int UpdatedTimestampFieldNumber = 11;
        private long updatedTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long UpdatedTimestamp
        {
            get { return updatedTimestamp_; }
            set
            {
                updatedTimestamp_ = value;
            }
        }

        /// <summary>Field number for the "matchResultSavedTimestamp" field.</summary>
        public const int MatchResultSavedTimestampFieldNumber = 12;
        private long matchResultSavedTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MatchResultSavedTimestamp
        {
            get { return matchResultSavedTimestamp_; }
            set
            {
                matchResultSavedTimestamp_ = value;
            }
        }

        /// <summary>Field number for the "creatorClientType" field.</summary>
        public const int CreatorClientTypeFieldNumber = 20;
        private ClientType creatorClientType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientType CreatorClientType
        {
            get { return creatorClientType_; }
            set
            {
                creatorClientType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchGameRoomInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchGameRoomInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GameRoomId != other.GameRoomId) return false;
            if (!interimMatchResultList_.Equals(other.interimMatchResultList_)) return false;
            if (!players_.Equals(other.players_)) return false;
            if (!playerMetrics_.Equals(other.playerMetrics_)) return false;
            if (MatchControllerUri != other.MatchControllerUri) return false;
            if (MatchClusterUri != other.MatchClusterUri) return false;
            if (CreatorId != other.CreatorId) return false;
            if (!object.Equals(GameRoomConfig, other.GameRoomConfig)) return false;
            if (StateType != other.StateType) return false;
            if (!object.Equals(FinalMatchResult, other.FinalMatchResult)) return false;
            if (CreatedTimestamp != other.CreatedTimestamp) return false;
            if (UpdatedTimestamp != other.UpdatedTimestamp) return false;
            if (MatchResultSavedTimestamp != other.MatchResultSavedTimestamp) return false;
            if (CreatorClientType != other.CreatorClientType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (GameRoomId.Length != 0) hash ^= GameRoomId.GetHashCode();
            hash ^= interimMatchResultList_.GetHashCode();
            hash ^= players_.GetHashCode();
            hash ^= playerMetrics_.GetHashCode();
            if (MatchControllerUri.Length != 0) hash ^= MatchControllerUri.GetHashCode();
            if (MatchClusterUri.Length != 0) hash ^= MatchClusterUri.GetHashCode();
            if (CreatorId.Length != 0) hash ^= CreatorId.GetHashCode();
            if (gameRoomConfig_ != null) hash ^= GameRoomConfig.GetHashCode();
            if (StateType != 0) hash ^= StateType.GetHashCode();
            if (finalMatchResult_ != null) hash ^= FinalMatchResult.GetHashCode();
            if (CreatedTimestamp != 0L) hash ^= CreatedTimestamp.GetHashCode();
            if (UpdatedTimestamp != 0L) hash ^= UpdatedTimestamp.GetHashCode();
            if (MatchResultSavedTimestamp != 0L) hash ^= MatchResultSavedTimestamp.GetHashCode();
            if (CreatorClientType != 0) hash ^= CreatorClientType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GameRoomId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(GameRoomId);
            }
            if (gameRoomConfig_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(GameRoomConfig);
            }
            if (StateType != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)StateType);
            }
            if (finalMatchResult_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(FinalMatchResult);
            }
            interimMatchResultList_.WriteTo(output, _repeated_interimMatchResultList_codec);
            players_.WriteTo(output, _repeated_players_codec);
            playerMetrics_.WriteTo(output, _repeated_playerMetrics_codec);
            if (MatchControllerUri.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(MatchControllerUri);
            }
            if (MatchClusterUri.Length != 0)
            {
                output.WriteRawTag(74);
                output.WriteString(MatchClusterUri);
            }
            if (CreatedTimestamp != 0L)
            {
                output.WriteRawTag(80);
                output.WriteInt64(CreatedTimestamp);
            }
            if (UpdatedTimestamp != 0L)
            {
                output.WriteRawTag(88);
                output.WriteInt64(UpdatedTimestamp);
            }
            if (MatchResultSavedTimestamp != 0L)
            {
                output.WriteRawTag(96);
                output.WriteInt64(MatchResultSavedTimestamp);
            }
            if (CreatorClientType != 0)
            {
                output.WriteRawTag(160, 1);
                output.WriteEnum((int)CreatorClientType);
            }
            if (CreatorId.Length != 0)
            {
                output.WriteRawTag(170, 1);
                output.WriteString(CreatorId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (GameRoomId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GameRoomId);
            }
            size += interimMatchResultList_.CalculateSize(_repeated_interimMatchResultList_codec);
            size += players_.CalculateSize(_repeated_players_codec);
            size += playerMetrics_.CalculateSize(_repeated_playerMetrics_codec);
            if (MatchControllerUri.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchControllerUri);
            }
            if (MatchClusterUri.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchClusterUri);
            }
            if (CreatorId.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(CreatorId);
            }
            if (gameRoomConfig_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRoomConfig);
            }
            if (StateType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)StateType);
            }
            if (finalMatchResult_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(FinalMatchResult);
            }
            if (CreatedTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedTimestamp);
            }
            if (UpdatedTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedTimestamp);
            }
            if (MatchResultSavedTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchResultSavedTimestamp);
            }
            if (CreatorClientType != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)CreatorClientType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchGameRoomInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.GameRoomId.Length != 0)
            {
                GameRoomId = other.GameRoomId;
            }
            interimMatchResultList_.Add(other.interimMatchResultList_);
            players_.Add(other.players_);
            playerMetrics_.Add(other.playerMetrics_);
            if (other.MatchControllerUri.Length != 0)
            {
                MatchControllerUri = other.MatchControllerUri;
            }
            if (other.MatchClusterUri.Length != 0)
            {
                MatchClusterUri = other.MatchClusterUri;
            }
            if (other.CreatorId.Length != 0)
            {
                CreatorId = other.CreatorId;
            }
            if (other.gameRoomConfig_ != null)
            {
                if (gameRoomConfig_ == null)
                {
                    gameRoomConfig_ = new MatchGameRoomConfig();
                }
                GameRoomConfig.MergeFrom(other.GameRoomConfig);
            }
            if (other.StateType != 0)
            {
                StateType = other.StateType;
            }
            if (other.finalMatchResult_ != null)
            {
                if (finalMatchResult_ == null)
                {
                    finalMatchResult_ = new FinalMatchResult();
                }
                FinalMatchResult.MergeFrom(other.FinalMatchResult);
            }
            if (other.CreatedTimestamp != 0L)
            {
                CreatedTimestamp = other.CreatedTimestamp;
            }
            if (other.UpdatedTimestamp != 0L)
            {
                UpdatedTimestamp = other.UpdatedTimestamp;
            }
            if (other.MatchResultSavedTimestamp != 0L)
            {
                MatchResultSavedTimestamp = other.MatchResultSavedTimestamp;
            }
            if (other.CreatorClientType != 0)
            {
                CreatorClientType = other.CreatorClientType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            GameRoomId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            if (gameRoomConfig_ == null)
                            {
                                gameRoomConfig_ = new MatchGameRoomConfig();
                            }
                            input.ReadMessage(gameRoomConfig_);
                            break;
                        }
                    case 24:
                        {
                            stateType_ = (MatchGameRoomStateType)input.ReadEnum();
                            break;
                        }
                    case 34:
                        {
                            if (finalMatchResult_ == null)
                            {
                                finalMatchResult_ = new FinalMatchResult();
                            }
                            input.ReadMessage(finalMatchResult_);
                            break;
                        }
                    case 42:
                        {
                            interimMatchResultList_.AddEntriesFrom(input, _repeated_interimMatchResultList_codec);
                            break;
                        }
                    case 50:
                        {
                            players_.AddEntriesFrom(input, _repeated_players_codec);
                            break;
                        }
                    case 58:
                        {
                            playerMetrics_.AddEntriesFrom(input, _repeated_playerMetrics_codec);
                            break;
                        }
                    case 66:
                        {
                            MatchControllerUri = input.ReadString();
                            break;
                        }
                    case 74:
                        {
                            MatchClusterUri = input.ReadString();
                            break;
                        }
                    case 80:
                        {
                            CreatedTimestamp = input.ReadInt64();
                            break;
                        }
                    case 88:
                        {
                            UpdatedTimestamp = input.ReadInt64();
                            break;
                        }
                    case 96:
                        {
                            MatchResultSavedTimestamp = input.ReadInt64();
                            break;
                        }
                    case 160:
                        {
                            creatorClientType_ = (ClientType)input.ReadEnum();
                            break;
                        }
                    case 170:
                        {
                            CreatorId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchGameRoomOpponentConnectionStateChangedEvent : pb::IMessage<MatchGameRoomOpponentConnectionStateChangedEvent>
    {
        private static readonly pb::MessageParser<MatchGameRoomOpponentConnectionStateChangedEvent> _parser = new pb::MessageParser<MatchGameRoomOpponentConnectionStateChangedEvent>(() => new MatchGameRoomOpponentConnectionStateChangedEvent());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchGameRoomOpponentConnectionStateChangedEvent> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[216]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomOpponentConnectionStateChangedEvent()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomOpponentConnectionStateChangedEvent(MatchGameRoomOpponentConnectionStateChangedEvent other) : this()
        {
            matchId_ = other.matchId_;
            systemSeatId_ = other.systemSeatId_;
            eventType_ = other.eventType_;
            timestamp_ = other.timestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomOpponentConnectionStateChangedEvent Clone()
        {
            return new MatchGameRoomOpponentConnectionStateChangedEvent(this);
        }

        /// <summary>Field number for the "matchId" field.</summary>
        public const int MatchIdFieldNumber = 1;
        private string matchId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchId
        {
            get { return matchId_; }
            set
            {
                matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 2;
        private int systemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SystemSeatId
        {
            get { return systemSeatId_; }
            set
            {
                systemSeatId_ = value;
            }
        }

        /// <summary>Field number for the "eventType" field.</summary>
        public const int EventTypeFieldNumber = 3;
        private ConnectionStateChangedEventType eventType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectionStateChangedEventType EventType
        {
            get { return eventType_; }
            set
            {
                eventType_ = value;
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 10;
        private long timestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchGameRoomOpponentConnectionStateChangedEvent);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchGameRoomOpponentConnectionStateChangedEvent other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchId != other.MatchId) return false;
            if (SystemSeatId != other.SystemSeatId) return false;
            if (EventType != other.EventType) return false;
            if (Timestamp != other.Timestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
            if (SystemSeatId != 0) hash ^= SystemSeatId.GetHashCode();
            if (EventType != 0) hash ^= EventType.GetHashCode();
            if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MatchId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(MatchId);
            }
            if (SystemSeatId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(SystemSeatId);
            }
            if (EventType != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)EventType);
            }
            if (Timestamp != 0L)
            {
                output.WriteRawTag(80);
                output.WriteInt64(Timestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
            }
            if (SystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SystemSeatId);
            }
            if (EventType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)EventType);
            }
            if (Timestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchGameRoomOpponentConnectionStateChangedEvent other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchId.Length != 0)
            {
                MatchId = other.MatchId;
            }
            if (other.SystemSeatId != 0)
            {
                SystemSeatId = other.SystemSeatId;
            }
            if (other.EventType != 0)
            {
                EventType = other.EventType;
            }
            if (other.Timestamp != 0L)
            {
                Timestamp = other.Timestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            MatchId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            SystemSeatId = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            eventType_ = (ConnectionStateChangedEventType)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchGameRoomPlayerInfo : pb::IMessage<MatchGameRoomPlayerInfo>
    {
        private static readonly pb::MessageParser<MatchGameRoomPlayerInfo> _parser = new pb::MessageParser<MatchGameRoomPlayerInfo>(() => new MatchGameRoomPlayerInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchGameRoomPlayerInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[217]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomPlayerInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomPlayerInfo(MatchGameRoomPlayerInfo other) : this()
        {
            userId_ = other.userId_;
            playerName_ = other.playerName_;
            courseId_ = other.courseId_;
            deckId_ = other.deckId_;
            clientAuthToken_ = other.clientAuthToken_;
            systemSeatId_ = other.systemSeatId_;
            teamId_ = other.teamId_;
            connectionInfo_ = other.connectionInfo_ != null ? other.connectionInfo_.Clone() : null;
            joinTimestamp_ = other.joinTimestamp_;
            inactivityTimeoutTimestamp_ = other.inactivityTimeoutTimestamp_;
            disconnectTimeoutTimestamp_ = other.disconnectTimeoutTimestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomPlayerInfo Clone()
        {
            return new MatchGameRoomPlayerInfo(this);
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "playerName" field.</summary>
        public const int PlayerNameFieldNumber = 2;
        private string playerName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerName
        {
            get { return playerName_; }
            set
            {
                playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "courseId" field.</summary>
        public const int CourseIdFieldNumber = 10;
        private string courseId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CourseId
        {
            get { return courseId_; }
            set
            {
                courseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "deckId" field.</summary>
        public const int DeckIdFieldNumber = 11;
        private string deckId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeckId
        {
            get { return deckId_; }
            set
            {
                deckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "clientAuthToken" field.</summary>
        public const int ClientAuthTokenFieldNumber = 12;
        private string clientAuthToken_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientAuthToken
        {
            get { return clientAuthToken_; }
            set
            {
                clientAuthToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 3;
        private int systemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SystemSeatId
        {
            get { return systemSeatId_; }
            set
            {
                systemSeatId_ = value;
            }
        }

        /// <summary>Field number for the "teamId" field.</summary>
        public const int TeamIdFieldNumber = 4;
        private int teamId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TeamId
        {
            get { return teamId_; }
            set
            {
                teamId_ = value;
            }
        }

        /// <summary>Field number for the "connectionInfo" field.</summary>
        public const int ConnectionInfoFieldNumber = 5;
        private UserConnectionInfo connectionInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserConnectionInfo ConnectionInfo
        {
            get { return connectionInfo_; }
            set
            {
                connectionInfo_ = value;
            }
        }

        /// <summary>Field number for the "joinTimestamp" field.</summary>
        public const int JoinTimestampFieldNumber = 20;
        private long joinTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long JoinTimestamp
        {
            get { return joinTimestamp_; }
            set
            {
                joinTimestamp_ = value;
            }
        }

        /// <summary>Field number for the "inactivityTimeoutTimestamp" field.</summary>
        public const int InactivityTimeoutTimestampFieldNumber = 21;
        private long inactivityTimeoutTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long InactivityTimeoutTimestamp
        {
            get { return inactivityTimeoutTimestamp_; }
            set
            {
                inactivityTimeoutTimestamp_ = value;
            }
        }

        /// <summary>Field number for the "disconnectTimeoutTimestamp" field.</summary>
        public const int DisconnectTimeoutTimestampFieldNumber = 22;
        private long disconnectTimeoutTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DisconnectTimeoutTimestamp
        {
            get { return disconnectTimeoutTimestamp_; }
            set
            {
                disconnectTimeoutTimestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchGameRoomPlayerInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchGameRoomPlayerInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (PlayerName != other.PlayerName) return false;
            if (CourseId != other.CourseId) return false;
            if (DeckId != other.DeckId) return false;
            if (ClientAuthToken != other.ClientAuthToken) return false;
            if (SystemSeatId != other.SystemSeatId) return false;
            if (TeamId != other.TeamId) return false;
            if (!object.Equals(ConnectionInfo, other.ConnectionInfo)) return false;
            if (JoinTimestamp != other.JoinTimestamp) return false;
            if (InactivityTimeoutTimestamp != other.InactivityTimeoutTimestamp) return false;
            if (DisconnectTimeoutTimestamp != other.DisconnectTimeoutTimestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
            if (CourseId.Length != 0) hash ^= CourseId.GetHashCode();
            if (DeckId.Length != 0) hash ^= DeckId.GetHashCode();
            if (ClientAuthToken.Length != 0) hash ^= ClientAuthToken.GetHashCode();
            if (SystemSeatId != 0) hash ^= SystemSeatId.GetHashCode();
            if (TeamId != 0) hash ^= TeamId.GetHashCode();
            if (connectionInfo_ != null) hash ^= ConnectionInfo.GetHashCode();
            if (JoinTimestamp != 0L) hash ^= JoinTimestamp.GetHashCode();
            if (InactivityTimeoutTimestamp != 0L) hash ^= InactivityTimeoutTimestamp.GetHashCode();
            if (DisconnectTimeoutTimestamp != 0L) hash ^= DisconnectTimeoutTimestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (PlayerName.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(PlayerName);
            }
            if (SystemSeatId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(SystemSeatId);
            }
            if (TeamId != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(TeamId);
            }
            if (connectionInfo_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(ConnectionInfo);
            }
            if (CourseId.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteString(CourseId);
            }
            if (DeckId.Length != 0)
            {
                output.WriteRawTag(90);
                output.WriteString(DeckId);
            }
            if (ClientAuthToken.Length != 0)
            {
                output.WriteRawTag(98);
                output.WriteString(ClientAuthToken);
            }
            if (JoinTimestamp != 0L)
            {
                output.WriteRawTag(160, 1);
                output.WriteInt64(JoinTimestamp);
            }
            if (InactivityTimeoutTimestamp != 0L)
            {
                output.WriteRawTag(168, 1);
                output.WriteInt64(InactivityTimeoutTimestamp);
            }
            if (DisconnectTimeoutTimestamp != 0L)
            {
                output.WriteRawTag(176, 1);
                output.WriteInt64(DisconnectTimeoutTimestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (PlayerName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
            }
            if (CourseId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CourseId);
            }
            if (DeckId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckId);
            }
            if (ClientAuthToken.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientAuthToken);
            }
            if (SystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SystemSeatId);
            }
            if (TeamId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
            }
            if (connectionInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectionInfo);
            }
            if (JoinTimestamp != 0L)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(JoinTimestamp);
            }
            if (InactivityTimeoutTimestamp != 0L)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(InactivityTimeoutTimestamp);
            }
            if (DisconnectTimeoutTimestamp != 0L)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(DisconnectTimeoutTimestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchGameRoomPlayerInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.PlayerName.Length != 0)
            {
                PlayerName = other.PlayerName;
            }
            if (other.CourseId.Length != 0)
            {
                CourseId = other.CourseId;
            }
            if (other.DeckId.Length != 0)
            {
                DeckId = other.DeckId;
            }
            if (other.ClientAuthToken.Length != 0)
            {
                ClientAuthToken = other.ClientAuthToken;
            }
            if (other.SystemSeatId != 0)
            {
                SystemSeatId = other.SystemSeatId;
            }
            if (other.TeamId != 0)
            {
                TeamId = other.TeamId;
            }
            if (other.connectionInfo_ != null)
            {
                if (connectionInfo_ == null)
                {
                    connectionInfo_ = new UserConnectionInfo();
                }
                ConnectionInfo.MergeFrom(other.ConnectionInfo);
            }
            if (other.JoinTimestamp != 0L)
            {
                JoinTimestamp = other.JoinTimestamp;
            }
            if (other.InactivityTimeoutTimestamp != 0L)
            {
                InactivityTimeoutTimestamp = other.InactivityTimeoutTimestamp;
            }
            if (other.DisconnectTimeoutTimestamp != 0L)
            {
                DisconnectTimeoutTimestamp = other.DisconnectTimeoutTimestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            PlayerName = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            SystemSeatId = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            TeamId = input.ReadInt32();
                            break;
                        }
                    case 42:
                        {
                            if (connectionInfo_ == null)
                            {
                                connectionInfo_ = new UserConnectionInfo();
                            }
                            input.ReadMessage(connectionInfo_);
                            break;
                        }
                    case 82:
                        {
                            CourseId = input.ReadString();
                            break;
                        }
                    case 90:
                        {
                            DeckId = input.ReadString();
                            break;
                        }
                    case 98:
                        {
                            ClientAuthToken = input.ReadString();
                            break;
                        }
                    case 160:
                        {
                            JoinTimestamp = input.ReadInt64();
                            break;
                        }
                    case 168:
                        {
                            InactivityTimeoutTimestamp = input.ReadInt64();
                            break;
                        }
                    case 176:
                        {
                            DisconnectTimeoutTimestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchGameRoomStateChangedEvent : pb::IMessage<MatchGameRoomStateChangedEvent>
    {
        private static readonly pb::MessageParser<MatchGameRoomStateChangedEvent> _parser = new pb::MessageParser<MatchGameRoomStateChangedEvent>(() => new MatchGameRoomStateChangedEvent());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchGameRoomStateChangedEvent> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[218]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomStateChangedEvent()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomStateChangedEvent(MatchGameRoomStateChangedEvent other) : this()
        {
            gameRoomInfo_ = other.gameRoomInfo_ != null ? other.gameRoomInfo_.Clone() : null;
            timestamp_ = other.timestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomStateChangedEvent Clone()
        {
            return new MatchGameRoomStateChangedEvent(this);
        }

        /// <summary>Field number for the "gameRoomInfo" field.</summary>
        public const int GameRoomInfoFieldNumber = 1;
        private MatchGameRoomInfo gameRoomInfo_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomInfo GameRoomInfo
        {
            get { return gameRoomInfo_; }
            set
            {
                gameRoomInfo_ = value;
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private long timestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchGameRoomStateChangedEvent);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchGameRoomStateChangedEvent other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(GameRoomInfo, other.GameRoomInfo)) return false;
            if (Timestamp != other.Timestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (gameRoomInfo_ != null) hash ^= GameRoomInfo.GetHashCode();
            if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (gameRoomInfo_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(GameRoomInfo);
            }
            if (Timestamp != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(Timestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (gameRoomInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRoomInfo);
            }
            if (Timestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchGameRoomStateChangedEvent other)
        {
            if (other == null)
            {
                return;
            }
            if (other.gameRoomInfo_ != null)
            {
                if (gameRoomInfo_ == null)
                {
                    gameRoomInfo_ = new MatchGameRoomInfo();
                }
                GameRoomInfo.MergeFrom(other.GameRoomInfo);
            }
            if (other.Timestamp != 0L)
            {
                Timestamp = other.Timestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (gameRoomInfo_ == null)
                            {
                                gameRoomInfo_ = new MatchGameRoomInfo();
                            }
                            input.ReadMessage(gameRoomInfo_);
                            break;
                        }
                    case 16:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchPlayerMetrics : pb::IMessage<MatchPlayerMetrics>
    {
        private static readonly pb::MessageParser<MatchPlayerMetrics> _parser = new pb::MessageParser<MatchPlayerMetrics>(() => new MatchPlayerMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchPlayerMetrics> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[219]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchPlayerMetrics()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchPlayerMetrics(MatchPlayerMetrics other) : this()
        {
            userId_ = other.userId_;
            metrics_ = other.metrics_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchPlayerMetrics Clone()
        {
            return new MatchPlayerMetrics(this);
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "metrics" field.</summary>
        public const int MetricsFieldNumber = 2;
        private static readonly pb::FieldCodec<PlayerMetricKeyValuePair> _repeated_metrics_codec
            = pb::FieldCodec.ForMessage(18, PlayerMetricKeyValuePair.Parser);
        private readonly pbc::RepeatedField<PlayerMetricKeyValuePair> metrics_ = new pbc::RepeatedField<PlayerMetricKeyValuePair>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<PlayerMetricKeyValuePair> Metrics
        {
            get { return metrics_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchPlayerMetrics);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchPlayerMetrics other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (!metrics_.Equals(other.metrics_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            hash ^= metrics_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            metrics_.WriteTo(output, _repeated_metrics_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            size += metrics_.CalculateSize(_repeated_metrics_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchPlayerMetrics other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            metrics_.Add(other.metrics_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchResultSaved : pb::IMessage<MatchResultSaved>
    {
        private static readonly pb::MessageParser<MatchResultSaved> _parser = new pb::MessageParser<MatchResultSaved>(() => new MatchResultSaved());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchResultSaved> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[220]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchResultSaved()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchResultSaved(MatchResultSaved other) : this()
        {
            matchId_ = other.matchId_;
            timestamp_ = other.timestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchResultSaved Clone()
        {
            return new MatchResultSaved(this);
        }

        /// <summary>Field number for the "matchId" field.</summary>
        public const int MatchIdFieldNumber = 1;
        private string matchId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchId
        {
            get { return matchId_; }
            set
            {
                matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 10;
        private long timestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchResultSaved);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchResultSaved other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchId != other.MatchId) return false;
            if (Timestamp != other.Timestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
            if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MatchId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(MatchId);
            }
            if (Timestamp != 0L)
            {
                output.WriteRawTag(80);
                output.WriteInt64(Timestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
            }
            if (Timestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchResultSaved other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchId.Length != 0)
            {
                MatchId = other.MatchId;
            }
            if (other.Timestamp != 0L)
            {
                Timestamp = other.Timestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            MatchId = input.ReadString();
                            break;
                        }
                    case 80:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchServiceError : pb::IMessage<MatchServiceError>
    {
        private static readonly pb::MessageParser<MatchServiceError> _parser = new pb::MessageParser<MatchServiceError>(() => new MatchServiceError());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchServiceError> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[221]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchServiceError()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchServiceError(MatchServiceError other) : this()
        {
            errorMessage_ = other.errorMessage_;
            errorCode_ = other.errorCode_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchServiceError Clone()
        {
            return new MatchServiceError(this);
        }

        /// <summary>Field number for the "errorMessage" field.</summary>
        public const int ErrorMessageFieldNumber = 3;
        private string errorMessage_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorMessage
        {
            get { return errorMessage_; }
            set
            {
                errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "errorCode" field.</summary>
        public const int ErrorCodeFieldNumber = 2;
        private MatchServiceErrorCode errorCode_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchServiceErrorCode ErrorCode
        {
            get { return errorCode_; }
            set
            {
                errorCode_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchServiceError);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchServiceError other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ErrorMessage != other.ErrorMessage) return false;
            if (ErrorCode != other.ErrorCode) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
            if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ErrorCode != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)ErrorCode);
            }
            if (ErrorMessage.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(ErrorMessage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ErrorMessage.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
            }
            if (ErrorCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ErrorCode);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchServiceError other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ErrorMessage.Length != 0)
            {
                ErrorMessage = other.ErrorMessage;
            }
            if (other.ErrorCode != 0)
            {
                ErrorCode = other.ErrorCode;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 16:
                        {
                            errorCode_ = (MatchServiceErrorCode)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            ErrorMessage = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchServiceToClientMessage : pb::IMessage<MatchServiceToClientMessage>
    {
        private static readonly pb::MessageParser<MatchServiceToClientMessage> _parser = new pb::MessageParser<MatchServiceToClientMessage>(() => new MatchServiceToClientMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchServiceToClientMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[222]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchServiceToClientMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchServiceToClientMessage(MatchServiceToClientMessage other) : this()
        {
            transactionId_ = other.transactionId_;
            requestId_ = other.requestId_;
            timestamp_ = other.timestamp_;
            switch (other.MessageCase)
            {
                case MessageOneofCase.Error:
                    Error = other.Error.Clone();
                    break;
                case MessageOneofCase.GreToClientEvent:
                    GreToClientEvent = other.GreToClientEvent.Clone();
                    break;
                case MessageOneofCase.MatchGameRoomStateChangedEvent:
                    MatchGameRoomStateChangedEvent = other.MatchGameRoomStateChangedEvent.Clone();
                    break;
                case MessageOneofCase.MatchControllerStateChangedEvent:
                    MatchControllerStateChangedEvent = other.MatchControllerStateChangedEvent.Clone();
                    break;
                case MessageOneofCase.MatchControllerHealthReport:
                    MatchControllerHealthReport = other.MatchControllerHealthReport.Clone();
                    break;
                case MessageOneofCase.OpponentConnectionStateChangedEvent:
                    OpponentConnectionStateChangedEvent = other.OpponentConnectionStateChangedEvent.Clone();
                    break;
                case MessageOneofCase.AuthenticateResponse:
                    AuthenticateResponse = other.AuthenticateResponse.Clone();
                    break;
                case MessageOneofCase.ServiceInfoResponse:
                    ServiceInfoResponse = other.ServiceInfoResponse.Clone();
                    break;
                case MessageOneofCase.GetSettingsResponse:
                    GetSettingsResponse = other.GetSettingsResponse.Clone();
                    break;
                case MessageOneofCase.SetSettingsResponse:
                    SetSettingsResponse = other.SetSettingsResponse.Clone();
                    break;
                case MessageOneofCase.CreateMatchGameRoomResponse:
                    CreateMatchGameRoomResponse = other.CreateMatchGameRoomResponse.Clone();
                    break;
                case MessageOneofCase.CreateMatchGameRoomResponseV2:
                    CreateMatchGameRoomResponseV2 = other.CreateMatchGameRoomResponseV2.Clone();
                    break;
                case MessageOneofCase.JoinMatchGameRoomResponse:
                    JoinMatchGameRoomResponse = other.JoinMatchGameRoomResponse.Clone();
                    break;
                case MessageOneofCase.JoinMatchGameRoomResponseV2:
                    JoinMatchGameRoomResponseV2 = other.JoinMatchGameRoomResponseV2.Clone();
                    break;
                case MessageOneofCase.GetGameRoomIdsResponse:
                    GetGameRoomIdsResponse = other.GetGameRoomIdsResponse.Clone();
                    break;
                case MessageOneofCase.GetGameRoomInfoResponse:
                    GetGameRoomInfoResponse = other.GetGameRoomInfoResponse.Clone();
                    break;
                case MessageOneofCase.EchoResponse:
                    EchoResponse = other.EchoResponse.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchServiceToClientMessage Clone()
        {
            return new MatchServiceToClientMessage(this);
        }

        /// <summary>Field number for the "transactionId" field.</summary>
        public const int TransactionIdFieldNumber = 1;
        private string transactionId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TransactionId
        {
            get { return transactionId_; }
            set
            {
                transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "requestId" field.</summary>
        public const int RequestIdFieldNumber = 3;
        private int requestId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RequestId
        {
            get { return requestId_; }
            set
            {
                requestId_ = value;
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 4;
        private long timestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 7;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyError Error
        {
            get { return messageCase_ == MessageOneofCase.Error ? (LobbyError)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Error;
            }
        }

        /// <summary>Field number for the "greToClientEvent" field.</summary>
        public const int GreToClientEventFieldNumber = 8;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GreToClientEvent GreToClientEvent
        {
            get { return messageCase_ == MessageOneofCase.GreToClientEvent ? (GreToClientEvent)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GreToClientEvent;
            }
        }

        /// <summary>Field number for the "matchGameRoomStateChangedEvent" field.</summary>
        public const int MatchGameRoomStateChangedEventFieldNumber = 9;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomStateChangedEvent MatchGameRoomStateChangedEvent
        {
            get { return messageCase_ == MessageOneofCase.MatchGameRoomStateChangedEvent ? (MatchGameRoomStateChangedEvent)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchGameRoomStateChangedEvent;
            }
        }

        /// <summary>Field number for the "matchControllerStateChangedEvent" field.</summary>
        public const int MatchControllerStateChangedEventFieldNumber = 10;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerStateChangedEvent MatchControllerStateChangedEvent
        {
            get { return messageCase_ == MessageOneofCase.MatchControllerStateChangedEvent ? (MatchControllerStateChangedEvent)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchControllerStateChangedEvent;
            }
        }

        /// <summary>Field number for the "matchControllerHealthReport" field.</summary>
        public const int MatchControllerHealthReportFieldNumber = 11;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerHealthReport MatchControllerHealthReport
        {
            get { return messageCase_ == MessageOneofCase.MatchControllerHealthReport ? (MatchControllerHealthReport)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchControllerHealthReport;
            }
        }

        /// <summary>Field number for the "opponentConnectionStateChangedEvent" field.</summary>
        public const int OpponentConnectionStateChangedEventFieldNumber = 12;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchGameRoomOpponentConnectionStateChangedEvent OpponentConnectionStateChangedEvent
        {
            get { return messageCase_ == MessageOneofCase.OpponentConnectionStateChangedEvent ? (MatchGameRoomOpponentConnectionStateChangedEvent)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.OpponentConnectionStateChangedEvent;
            }
        }

        /// <summary>Field number for the "authenticateResponse" field.</summary>
        public const int AuthenticateResponseFieldNumber = 100;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticateResponse AuthenticateResponse
        {
            get { return messageCase_ == MessageOneofCase.AuthenticateResponse ? (AuthenticateResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.AuthenticateResponse;
            }
        }

        /// <summary>Field number for the "serviceInfoResponse" field.</summary>
        public const int ServiceInfoResponseFieldNumber = 101;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyServiceInfo ServiceInfoResponse
        {
            get { return messageCase_ == MessageOneofCase.ServiceInfoResponse ? (LobbyServiceInfo)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ServiceInfoResponse;
            }
        }

        /// <summary>Field number for the "getSettingsResponse" field.</summary>
        public const int GetSettingsResponseFieldNumber = 110;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerGetSettingsResponse GetSettingsResponse
        {
            get { return messageCase_ == MessageOneofCase.GetSettingsResponse ? (MatchControllerGetSettingsResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GetSettingsResponse;
            }
        }

        /// <summary>Field number for the "setSettingsResponse" field.</summary>
        public const int SetSettingsResponseFieldNumber = 111;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchControllerSetSettingsResponse SetSettingsResponse
        {
            get { return messageCase_ == MessageOneofCase.SetSettingsResponse ? (MatchControllerSetSettingsResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.SetSettingsResponse;
            }
        }

        /// <summary>Field number for the "createMatchGameRoomResponse" field.</summary>
        public const int CreateMatchGameRoomResponseFieldNumber = 200;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateMatchGameRoomResponse CreateMatchGameRoomResponse
        {
            get { return messageCase_ == MessageOneofCase.CreateMatchGameRoomResponse ? (CreateMatchGameRoomResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CreateMatchGameRoomResponse;
            }
        }

        /// <summary>Field number for the "createMatchGameRoomResponseV2" field.</summary>
        public const int CreateMatchGameRoomResponseV2FieldNumber = 201;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateMatchGameRoomResponseV2 CreateMatchGameRoomResponseV2
        {
            get { return messageCase_ == MessageOneofCase.CreateMatchGameRoomResponseV2 ? (CreateMatchGameRoomResponseV2)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CreateMatchGameRoomResponseV2;
            }
        }

        /// <summary>Field number for the "joinMatchGameRoomResponse" field.</summary>
        public const int JoinMatchGameRoomResponseFieldNumber = 210;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchGameRoomResponse JoinMatchGameRoomResponse
        {
            get { return messageCase_ == MessageOneofCase.JoinMatchGameRoomResponse ? (JoinMatchGameRoomResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.JoinMatchGameRoomResponse;
            }
        }

        /// <summary>Field number for the "joinMatchGameRoomResponseV2" field.</summary>
        public const int JoinMatchGameRoomResponseV2FieldNumber = 211;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoinMatchGameRoomResponseV2 JoinMatchGameRoomResponseV2
        {
            get { return messageCase_ == MessageOneofCase.JoinMatchGameRoomResponseV2 ? (JoinMatchGameRoomResponseV2)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.JoinMatchGameRoomResponseV2;
            }
        }

        /// <summary>Field number for the "getGameRoomIdsResponse" field.</summary>
        public const int GetGameRoomIdsResponseFieldNumber = 240;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomIdsResponse GetGameRoomIdsResponse
        {
            get { return messageCase_ == MessageOneofCase.GetGameRoomIdsResponse ? (GetGameRoomIdsResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GetGameRoomIdsResponse;
            }
        }

        /// <summary>Field number for the "getGameRoomInfoResponse" field.</summary>
        public const int GetGameRoomInfoResponseFieldNumber = 241;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameRoomInfoResponse GetGameRoomInfoResponse
        {
            get { return messageCase_ == MessageOneofCase.GetGameRoomInfoResponse ? (GetGameRoomInfoResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GetGameRoomInfoResponse;
            }
        }

        /// <summary>Field number for the "echoResponse" field.</summary>
        public const int EchoResponseFieldNumber = 1000;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EchoResponse EchoResponse
        {
            get { return messageCase_ == MessageOneofCase.EchoResponse ? (EchoResponse)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.EchoResponse;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            Error = 7,
            GreToClientEvent = 8,
            MatchGameRoomStateChangedEvent = 9,
            MatchControllerStateChangedEvent = 10,
            MatchControllerHealthReport = 11,
            OpponentConnectionStateChangedEvent = 12,
            AuthenticateResponse = 100,
            ServiceInfoResponse = 101,
            GetSettingsResponse = 110,
            SetSettingsResponse = 111,
            CreateMatchGameRoomResponse = 200,
            CreateMatchGameRoomResponseV2 = 201,
            JoinMatchGameRoomResponse = 210,
            JoinMatchGameRoomResponseV2 = 211,
            GetGameRoomIdsResponse = 240,
            GetGameRoomInfoResponse = 241,
            EchoResponse = 1000,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchServiceToClientMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchServiceToClientMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TransactionId != other.TransactionId) return false;
            if (RequestId != other.RequestId) return false;
            if (Timestamp != other.Timestamp) return false;
            if (!object.Equals(Error, other.Error)) return false;
            if (!object.Equals(GreToClientEvent, other.GreToClientEvent)) return false;
            if (!object.Equals(MatchGameRoomStateChangedEvent, other.MatchGameRoomStateChangedEvent)) return false;
            if (!object.Equals(MatchControllerStateChangedEvent, other.MatchControllerStateChangedEvent)) return false;
            if (!object.Equals(MatchControllerHealthReport, other.MatchControllerHealthReport)) return false;
            if (!object.Equals(OpponentConnectionStateChangedEvent, other.OpponentConnectionStateChangedEvent)) return false;
            if (!object.Equals(AuthenticateResponse, other.AuthenticateResponse)) return false;
            if (!object.Equals(ServiceInfoResponse, other.ServiceInfoResponse)) return false;
            if (!object.Equals(GetSettingsResponse, other.GetSettingsResponse)) return false;
            if (!object.Equals(SetSettingsResponse, other.SetSettingsResponse)) return false;
            if (!object.Equals(CreateMatchGameRoomResponse, other.CreateMatchGameRoomResponse)) return false;
            if (!object.Equals(CreateMatchGameRoomResponseV2, other.CreateMatchGameRoomResponseV2)) return false;
            if (!object.Equals(JoinMatchGameRoomResponse, other.JoinMatchGameRoomResponse)) return false;
            if (!object.Equals(JoinMatchGameRoomResponseV2, other.JoinMatchGameRoomResponseV2)) return false;
            if (!object.Equals(GetGameRoomIdsResponse, other.GetGameRoomIdsResponse)) return false;
            if (!object.Equals(GetGameRoomInfoResponse, other.GetGameRoomInfoResponse)) return false;
            if (!object.Equals(EchoResponse, other.EchoResponse)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TransactionId.Length != 0) hash ^= TransactionId.GetHashCode();
            if (RequestId != 0) hash ^= RequestId.GetHashCode();
            if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
            if (messageCase_ == MessageOneofCase.Error) hash ^= Error.GetHashCode();
            if (messageCase_ == MessageOneofCase.GreToClientEvent) hash ^= GreToClientEvent.GetHashCode();
            if (messageCase_ == MessageOneofCase.MatchGameRoomStateChangedEvent) hash ^= MatchGameRoomStateChangedEvent.GetHashCode();
            if (messageCase_ == MessageOneofCase.MatchControllerStateChangedEvent) hash ^= MatchControllerStateChangedEvent.GetHashCode();
            if (messageCase_ == MessageOneofCase.MatchControllerHealthReport) hash ^= MatchControllerHealthReport.GetHashCode();
            if (messageCase_ == MessageOneofCase.OpponentConnectionStateChangedEvent) hash ^= OpponentConnectionStateChangedEvent.GetHashCode();
            if (messageCase_ == MessageOneofCase.AuthenticateResponse) hash ^= AuthenticateResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.ServiceInfoResponse) hash ^= ServiceInfoResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.GetSettingsResponse) hash ^= GetSettingsResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.SetSettingsResponse) hash ^= SetSettingsResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.CreateMatchGameRoomResponse) hash ^= CreateMatchGameRoomResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.CreateMatchGameRoomResponseV2) hash ^= CreateMatchGameRoomResponseV2.GetHashCode();
            if (messageCase_ == MessageOneofCase.JoinMatchGameRoomResponse) hash ^= JoinMatchGameRoomResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.JoinMatchGameRoomResponseV2) hash ^= JoinMatchGameRoomResponseV2.GetHashCode();
            if (messageCase_ == MessageOneofCase.GetGameRoomIdsResponse) hash ^= GetGameRoomIdsResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.GetGameRoomInfoResponse) hash ^= GetGameRoomInfoResponse.GetHashCode();
            if (messageCase_ == MessageOneofCase.EchoResponse) hash ^= EchoResponse.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TransactionId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(TransactionId);
            }
            if (RequestId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(RequestId);
            }
            if (Timestamp != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(Timestamp);
            }
            if (messageCase_ == MessageOneofCase.Error)
            {
                output.WriteRawTag(58);
                output.WriteMessage(Error);
            }
            if (messageCase_ == MessageOneofCase.GreToClientEvent)
            {
                output.WriteRawTag(66);
                output.WriteMessage(GreToClientEvent);
            }
            if (messageCase_ == MessageOneofCase.MatchGameRoomStateChangedEvent)
            {
                output.WriteRawTag(74);
                output.WriteMessage(MatchGameRoomStateChangedEvent);
            }
            if (messageCase_ == MessageOneofCase.MatchControllerStateChangedEvent)
            {
                output.WriteRawTag(82);
                output.WriteMessage(MatchControllerStateChangedEvent);
            }
            if (messageCase_ == MessageOneofCase.MatchControllerHealthReport)
            {
                output.WriteRawTag(90);
                output.WriteMessage(MatchControllerHealthReport);
            }
            if (messageCase_ == MessageOneofCase.OpponentConnectionStateChangedEvent)
            {
                output.WriteRawTag(98);
                output.WriteMessage(OpponentConnectionStateChangedEvent);
            }
            if (messageCase_ == MessageOneofCase.AuthenticateResponse)
            {
                output.WriteRawTag(162, 6);
                output.WriteMessage(AuthenticateResponse);
            }
            if (messageCase_ == MessageOneofCase.ServiceInfoResponse)
            {
                output.WriteRawTag(170, 6);
                output.WriteMessage(ServiceInfoResponse);
            }
            if (messageCase_ == MessageOneofCase.GetSettingsResponse)
            {
                output.WriteRawTag(242, 6);
                output.WriteMessage(GetSettingsResponse);
            }
            if (messageCase_ == MessageOneofCase.SetSettingsResponse)
            {
                output.WriteRawTag(250, 6);
                output.WriteMessage(SetSettingsResponse);
            }
            if (messageCase_ == MessageOneofCase.CreateMatchGameRoomResponse)
            {
                output.WriteRawTag(194, 12);
                output.WriteMessage(CreateMatchGameRoomResponse);
            }
            if (messageCase_ == MessageOneofCase.CreateMatchGameRoomResponseV2)
            {
                output.WriteRawTag(202, 12);
                output.WriteMessage(CreateMatchGameRoomResponseV2);
            }
            if (messageCase_ == MessageOneofCase.JoinMatchGameRoomResponse)
            {
                output.WriteRawTag(146, 13);
                output.WriteMessage(JoinMatchGameRoomResponse);
            }
            if (messageCase_ == MessageOneofCase.JoinMatchGameRoomResponseV2)
            {
                output.WriteRawTag(154, 13);
                output.WriteMessage(JoinMatchGameRoomResponseV2);
            }
            if (messageCase_ == MessageOneofCase.GetGameRoomIdsResponse)
            {
                output.WriteRawTag(130, 15);
                output.WriteMessage(GetGameRoomIdsResponse);
            }
            if (messageCase_ == MessageOneofCase.GetGameRoomInfoResponse)
            {
                output.WriteRawTag(138, 15);
                output.WriteMessage(GetGameRoomInfoResponse);
            }
            if (messageCase_ == MessageOneofCase.EchoResponse)
            {
                output.WriteRawTag(194, 62);
                output.WriteMessage(EchoResponse);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TransactionId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionId);
            }
            if (RequestId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestId);
            }
            if (Timestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
            }
            if (messageCase_ == MessageOneofCase.Error)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
            }
            if (messageCase_ == MessageOneofCase.GreToClientEvent)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GreToClientEvent);
            }
            if (messageCase_ == MessageOneofCase.MatchGameRoomStateChangedEvent)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchGameRoomStateChangedEvent);
            }
            if (messageCase_ == MessageOneofCase.MatchControllerStateChangedEvent)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchControllerStateChangedEvent);
            }
            if (messageCase_ == MessageOneofCase.MatchControllerHealthReport)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchControllerHealthReport);
            }
            if (messageCase_ == MessageOneofCase.OpponentConnectionStateChangedEvent)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpponentConnectionStateChangedEvent);
            }
            if (messageCase_ == MessageOneofCase.AuthenticateResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AuthenticateResponse);
            }
            if (messageCase_ == MessageOneofCase.ServiceInfoResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ServiceInfoResponse);
            }
            if (messageCase_ == MessageOneofCase.GetSettingsResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetSettingsResponse);
            }
            if (messageCase_ == MessageOneofCase.SetSettingsResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetSettingsResponse);
            }
            if (messageCase_ == MessageOneofCase.CreateMatchGameRoomResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(CreateMatchGameRoomResponse);
            }
            if (messageCase_ == MessageOneofCase.CreateMatchGameRoomResponseV2)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(CreateMatchGameRoomResponseV2);
            }
            if (messageCase_ == MessageOneofCase.JoinMatchGameRoomResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinMatchGameRoomResponse);
            }
            if (messageCase_ == MessageOneofCase.JoinMatchGameRoomResponseV2)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinMatchGameRoomResponseV2);
            }
            if (messageCase_ == MessageOneofCase.GetGameRoomIdsResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetGameRoomIdsResponse);
            }
            if (messageCase_ == MessageOneofCase.GetGameRoomInfoResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetGameRoomInfoResponse);
            }
            if (messageCase_ == MessageOneofCase.EchoResponse)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(EchoResponse);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchServiceToClientMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TransactionId.Length != 0)
            {
                TransactionId = other.TransactionId;
            }
            if (other.RequestId != 0)
            {
                RequestId = other.RequestId;
            }
            if (other.Timestamp != 0L)
            {
                Timestamp = other.Timestamp;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.Error:
                    if (Error == null)
                    {
                        Error = new LobbyError();
                    }
                    Error.MergeFrom(other.Error);
                    break;
                case MessageOneofCase.GreToClientEvent:
                    if (GreToClientEvent == null)
                    {
                        GreToClientEvent = new GreToClientEvent();
                    }
                    GreToClientEvent.MergeFrom(other.GreToClientEvent);
                    break;
                case MessageOneofCase.MatchGameRoomStateChangedEvent:
                    if (MatchGameRoomStateChangedEvent == null)
                    {
                        MatchGameRoomStateChangedEvent = new MatchGameRoomStateChangedEvent();
                    }
                    MatchGameRoomStateChangedEvent.MergeFrom(other.MatchGameRoomStateChangedEvent);
                    break;
                case MessageOneofCase.MatchControllerStateChangedEvent:
                    if (MatchControllerStateChangedEvent == null)
                    {
                        MatchControllerStateChangedEvent = new MatchControllerStateChangedEvent();
                    }
                    MatchControllerStateChangedEvent.MergeFrom(other.MatchControllerStateChangedEvent);
                    break;
                case MessageOneofCase.MatchControllerHealthReport:
                    if (MatchControllerHealthReport == null)
                    {
                        MatchControllerHealthReport = new MatchControllerHealthReport();
                    }
                    MatchControllerHealthReport.MergeFrom(other.MatchControllerHealthReport);
                    break;
                case MessageOneofCase.OpponentConnectionStateChangedEvent:
                    if (OpponentConnectionStateChangedEvent == null)
                    {
                        OpponentConnectionStateChangedEvent = new MatchGameRoomOpponentConnectionStateChangedEvent();
                    }
                    OpponentConnectionStateChangedEvent.MergeFrom(other.OpponentConnectionStateChangedEvent);
                    break;
                case MessageOneofCase.AuthenticateResponse:
                    if (AuthenticateResponse == null)
                    {
                        AuthenticateResponse = new AuthenticateResponse();
                    }
                    AuthenticateResponse.MergeFrom(other.AuthenticateResponse);
                    break;
                case MessageOneofCase.ServiceInfoResponse:
                    if (ServiceInfoResponse == null)
                    {
                        ServiceInfoResponse = new LobbyServiceInfo();
                    }
                    ServiceInfoResponse.MergeFrom(other.ServiceInfoResponse);
                    break;
                case MessageOneofCase.GetSettingsResponse:
                    if (GetSettingsResponse == null)
                    {
                        GetSettingsResponse = new MatchControllerGetSettingsResponse();
                    }
                    GetSettingsResponse.MergeFrom(other.GetSettingsResponse);
                    break;
                case MessageOneofCase.SetSettingsResponse:
                    if (SetSettingsResponse == null)
                    {
                        SetSettingsResponse = new MatchControllerSetSettingsResponse();
                    }
                    SetSettingsResponse.MergeFrom(other.SetSettingsResponse);
                    break;
                case MessageOneofCase.CreateMatchGameRoomResponse:
                    if (CreateMatchGameRoomResponse == null)
                    {
                        CreateMatchGameRoomResponse = new CreateMatchGameRoomResponse();
                    }
                    CreateMatchGameRoomResponse.MergeFrom(other.CreateMatchGameRoomResponse);
                    break;
                case MessageOneofCase.CreateMatchGameRoomResponseV2:
                    if (CreateMatchGameRoomResponseV2 == null)
                    {
                        CreateMatchGameRoomResponseV2 = new CreateMatchGameRoomResponseV2();
                    }
                    CreateMatchGameRoomResponseV2.MergeFrom(other.CreateMatchGameRoomResponseV2);
                    break;
                case MessageOneofCase.JoinMatchGameRoomResponse:
                    if (JoinMatchGameRoomResponse == null)
                    {
                        JoinMatchGameRoomResponse = new JoinMatchGameRoomResponse();
                    }
                    JoinMatchGameRoomResponse.MergeFrom(other.JoinMatchGameRoomResponse);
                    break;
                case MessageOneofCase.JoinMatchGameRoomResponseV2:
                    if (JoinMatchGameRoomResponseV2 == null)
                    {
                        JoinMatchGameRoomResponseV2 = new JoinMatchGameRoomResponseV2();
                    }
                    JoinMatchGameRoomResponseV2.MergeFrom(other.JoinMatchGameRoomResponseV2);
                    break;
                case MessageOneofCase.GetGameRoomIdsResponse:
                    if (GetGameRoomIdsResponse == null)
                    {
                        GetGameRoomIdsResponse = new GetGameRoomIdsResponse();
                    }
                    GetGameRoomIdsResponse.MergeFrom(other.GetGameRoomIdsResponse);
                    break;
                case MessageOneofCase.GetGameRoomInfoResponse:
                    if (GetGameRoomInfoResponse == null)
                    {
                        GetGameRoomInfoResponse = new GetGameRoomInfoResponse();
                    }
                    GetGameRoomInfoResponse.MergeFrom(other.GetGameRoomInfoResponse);
                    break;
                case MessageOneofCase.EchoResponse:
                    if (EchoResponse == null)
                    {
                        EchoResponse = new EchoResponse();
                    }
                    EchoResponse.MergeFrom(other.EchoResponse);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            TransactionId = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            RequestId = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            Timestamp = input.ReadInt64();
                            break;
                        }
                    case 58:
                        {
                            LobbyError subBuilder = new LobbyError();
                            if (messageCase_ == MessageOneofCase.Error)
                            {
                                subBuilder.MergeFrom(Error);
                            }
                            input.ReadMessage(subBuilder);
                            Error = subBuilder;
                            break;
                        }
                    case 66:
                        {
                            GreToClientEvent subBuilder = new GreToClientEvent();
                            if (messageCase_ == MessageOneofCase.GreToClientEvent)
                            {
                                subBuilder.MergeFrom(GreToClientEvent);
                            }
                            input.ReadMessage(subBuilder);
                            GreToClientEvent = subBuilder;
                            break;
                        }
                    case 74:
                        {
                            MatchGameRoomStateChangedEvent subBuilder = new MatchGameRoomStateChangedEvent();
                            if (messageCase_ == MessageOneofCase.MatchGameRoomStateChangedEvent)
                            {
                                subBuilder.MergeFrom(MatchGameRoomStateChangedEvent);
                            }
                            input.ReadMessage(subBuilder);
                            MatchGameRoomStateChangedEvent = subBuilder;
                            break;
                        }
                    case 82:
                        {
                            MatchControllerStateChangedEvent subBuilder = new MatchControllerStateChangedEvent();
                            if (messageCase_ == MessageOneofCase.MatchControllerStateChangedEvent)
                            {
                                subBuilder.MergeFrom(MatchControllerStateChangedEvent);
                            }
                            input.ReadMessage(subBuilder);
                            MatchControllerStateChangedEvent = subBuilder;
                            break;
                        }
                    case 90:
                        {
                            MatchControllerHealthReport subBuilder = new MatchControllerHealthReport();
                            if (messageCase_ == MessageOneofCase.MatchControllerHealthReport)
                            {
                                subBuilder.MergeFrom(MatchControllerHealthReport);
                            }
                            input.ReadMessage(subBuilder);
                            MatchControllerHealthReport = subBuilder;
                            break;
                        }
                    case 98:
                        {
                            MatchGameRoomOpponentConnectionStateChangedEvent subBuilder = new MatchGameRoomOpponentConnectionStateChangedEvent();
                            if (messageCase_ == MessageOneofCase.OpponentConnectionStateChangedEvent)
                            {
                                subBuilder.MergeFrom(OpponentConnectionStateChangedEvent);
                            }
                            input.ReadMessage(subBuilder);
                            OpponentConnectionStateChangedEvent = subBuilder;
                            break;
                        }
                    case 802:
                        {
                            AuthenticateResponse subBuilder = new AuthenticateResponse();
                            if (messageCase_ == MessageOneofCase.AuthenticateResponse)
                            {
                                subBuilder.MergeFrom(AuthenticateResponse);
                            }
                            input.ReadMessage(subBuilder);
                            AuthenticateResponse = subBuilder;
                            break;
                        }
                    case 810:
                        {
                            LobbyServiceInfo subBuilder = new LobbyServiceInfo();
                            if (messageCase_ == MessageOneofCase.ServiceInfoResponse)
                            {
                                subBuilder.MergeFrom(ServiceInfoResponse);
                            }
                            input.ReadMessage(subBuilder);
                            ServiceInfoResponse = subBuilder;
                            break;
                        }
                    case 882:
                        {
                            MatchControllerGetSettingsResponse subBuilder = new MatchControllerGetSettingsResponse();
                            if (messageCase_ == MessageOneofCase.GetSettingsResponse)
                            {
                                subBuilder.MergeFrom(GetSettingsResponse);
                            }
                            input.ReadMessage(subBuilder);
                            GetSettingsResponse = subBuilder;
                            break;
                        }
                    case 890:
                        {
                            MatchControllerSetSettingsResponse subBuilder = new MatchControllerSetSettingsResponse();
                            if (messageCase_ == MessageOneofCase.SetSettingsResponse)
                            {
                                subBuilder.MergeFrom(SetSettingsResponse);
                            }
                            input.ReadMessage(subBuilder);
                            SetSettingsResponse = subBuilder;
                            break;
                        }
                    case 1602:
                        {
                            CreateMatchGameRoomResponse subBuilder = new CreateMatchGameRoomResponse();
                            if (messageCase_ == MessageOneofCase.CreateMatchGameRoomResponse)
                            {
                                subBuilder.MergeFrom(CreateMatchGameRoomResponse);
                            }
                            input.ReadMessage(subBuilder);
                            CreateMatchGameRoomResponse = subBuilder;
                            break;
                        }
                    case 1610:
                        {
                            CreateMatchGameRoomResponseV2 subBuilder = new CreateMatchGameRoomResponseV2();
                            if (messageCase_ == MessageOneofCase.CreateMatchGameRoomResponseV2)
                            {
                                subBuilder.MergeFrom(CreateMatchGameRoomResponseV2);
                            }
                            input.ReadMessage(subBuilder);
                            CreateMatchGameRoomResponseV2 = subBuilder;
                            break;
                        }
                    case 1682:
                        {
                            JoinMatchGameRoomResponse subBuilder = new JoinMatchGameRoomResponse();
                            if (messageCase_ == MessageOneofCase.JoinMatchGameRoomResponse)
                            {
                                subBuilder.MergeFrom(JoinMatchGameRoomResponse);
                            }
                            input.ReadMessage(subBuilder);
                            JoinMatchGameRoomResponse = subBuilder;
                            break;
                        }
                    case 1690:
                        {
                            JoinMatchGameRoomResponseV2 subBuilder = new JoinMatchGameRoomResponseV2();
                            if (messageCase_ == MessageOneofCase.JoinMatchGameRoomResponseV2)
                            {
                                subBuilder.MergeFrom(JoinMatchGameRoomResponseV2);
                            }
                            input.ReadMessage(subBuilder);
                            JoinMatchGameRoomResponseV2 = subBuilder;
                            break;
                        }
                    case 1922:
                        {
                            GetGameRoomIdsResponse subBuilder = new GetGameRoomIdsResponse();
                            if (messageCase_ == MessageOneofCase.GetGameRoomIdsResponse)
                            {
                                subBuilder.MergeFrom(GetGameRoomIdsResponse);
                            }
                            input.ReadMessage(subBuilder);
                            GetGameRoomIdsResponse = subBuilder;
                            break;
                        }
                    case 1930:
                        {
                            GetGameRoomInfoResponse subBuilder = new GetGameRoomInfoResponse();
                            if (messageCase_ == MessageOneofCase.GetGameRoomInfoResponse)
                            {
                                subBuilder.MergeFrom(GetGameRoomInfoResponse);
                            }
                            input.ReadMessage(subBuilder);
                            GetGameRoomInfoResponse = subBuilder;
                            break;
                        }
                    case 8002:
                        {
                            EchoResponse subBuilder = new EchoResponse();
                            if (messageCase_ == MessageOneofCase.EchoResponse)
                            {
                                subBuilder.MergeFrom(EchoResponse);
                            }
                            input.ReadMessage(subBuilder);
                            EchoResponse = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ModalOption : pb::IMessage<ModalOption>
    {
        private static readonly pb::MessageParser<ModalOption> _parser = new pb::MessageParser<ModalOption>(() => new ModalOption());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ModalOption> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[223]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModalOption()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModalOption(ModalOption other) : this()
        {
            grpId_ = other.grpId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModalOption Clone()
        {
            return new ModalOption(this);
        }

        /// <summary>Field number for the "grpId" field.</summary>
        public const int GrpIdFieldNumber = 1;
        private uint grpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GrpId
        {
            get { return grpId_; }
            set
            {
                grpId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ModalOption);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ModalOption other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GrpId != other.GrpId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (GrpId != 0) hash ^= GrpId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (GrpId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(GrpId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (GrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GrpId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ModalOption other)
        {
            if (other == null)
            {
                return;
            }
            if (other.GrpId != 0)
            {
                GrpId = other.GrpId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            GrpId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ModalReq : pb::IMessage<ModalReq>
    {
        private static readonly pb::MessageParser<ModalReq> _parser = new pb::MessageParser<ModalReq>(() => new ModalReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ModalReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[224]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModalReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModalReq(ModalReq other) : this()
        {
            modalOptions_ = other.modalOptions_.Clone();
            excludedOptions_ = other.excludedOptions_.Clone();
            abilityGrpId_ = other.abilityGrpId_;
            minSel_ = other.minSel_;
            maxSel_ = other.maxSel_;
            repeatedSelectAllowed_ = other.repeatedSelectAllowed_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModalReq Clone()
        {
            return new ModalReq(this);
        }

        /// <summary>Field number for the "modalOptions" field.</summary>
        public const int ModalOptionsFieldNumber = 1;
        private static readonly pb::FieldCodec<ModalOption> _repeated_modalOptions_codec
            = pb::FieldCodec.ForMessage(10, ModalOption.Parser);
        private readonly pbc::RepeatedField<ModalOption> modalOptions_ = new pbc::RepeatedField<ModalOption>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ModalOption> ModalOptions
        {
            get { return modalOptions_; }
        }

        /// <summary>Field number for the "excludedOptions" field.</summary>
        public const int ExcludedOptionsFieldNumber = 6;
        private static readonly pb::FieldCodec<ModalOption> _repeated_excludedOptions_codec
            = pb::FieldCodec.ForMessage(50, ModalOption.Parser);
        private readonly pbc::RepeatedField<ModalOption> excludedOptions_ = new pbc::RepeatedField<ModalOption>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ModalOption> ExcludedOptions
        {
            get { return excludedOptions_; }
        }

        /// <summary>Field number for the "abilityGrpId" field.</summary>
        public const int AbilityGrpIdFieldNumber = 2;
        private uint abilityGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityGrpId
        {
            get { return abilityGrpId_; }
            set
            {
                abilityGrpId_ = value;
            }
        }

        /// <summary>Field number for the "minSel" field.</summary>
        public const int MinSelFieldNumber = 3;
        private uint minSel_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinSel
        {
            get { return minSel_; }
            set
            {
                minSel_ = value;
            }
        }

        /// <summary>Field number for the "maxSel" field.</summary>
        public const int MaxSelFieldNumber = 4;
        private uint maxSel_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxSel
        {
            get { return maxSel_; }
            set
            {
                maxSel_ = value;
            }
        }

        /// <summary>Field number for the "repeatedSelectAllowed" field.</summary>
        public const int RepeatedSelectAllowedFieldNumber = 5;
        private bool repeatedSelectAllowed_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RepeatedSelectAllowed
        {
            get { return repeatedSelectAllowed_; }
            set
            {
                repeatedSelectAllowed_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ModalReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ModalReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!modalOptions_.Equals(other.modalOptions_)) return false;
            if (!excludedOptions_.Equals(other.excludedOptions_)) return false;
            if (AbilityGrpId != other.AbilityGrpId) return false;
            if (MinSel != other.MinSel) return false;
            if (MaxSel != other.MaxSel) return false;
            if (RepeatedSelectAllowed != other.RepeatedSelectAllowed) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= modalOptions_.GetHashCode();
            hash ^= excludedOptions_.GetHashCode();
            if (AbilityGrpId != 0) hash ^= AbilityGrpId.GetHashCode();
            if (MinSel != 0) hash ^= MinSel.GetHashCode();
            if (MaxSel != 0) hash ^= MaxSel.GetHashCode();
            if (RepeatedSelectAllowed != false) hash ^= RepeatedSelectAllowed.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            modalOptions_.WriteTo(output, _repeated_modalOptions_codec);
            if (AbilityGrpId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(AbilityGrpId);
            }
            if (MinSel != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MinSel);
            }
            if (MaxSel != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(MaxSel);
            }
            if (RepeatedSelectAllowed != false)
            {
                output.WriteRawTag(40);
                output.WriteBool(RepeatedSelectAllowed);
            }
            excludedOptions_.WriteTo(output, _repeated_excludedOptions_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += modalOptions_.CalculateSize(_repeated_modalOptions_codec);
            size += excludedOptions_.CalculateSize(_repeated_excludedOptions_codec);
            if (AbilityGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityGrpId);
            }
            if (MinSel != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinSel);
            }
            if (MaxSel != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSel);
            }
            if (RepeatedSelectAllowed != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ModalReq other)
        {
            if (other == null)
            {
                return;
            }
            modalOptions_.Add(other.modalOptions_);
            excludedOptions_.Add(other.excludedOptions_);
            if (other.AbilityGrpId != 0)
            {
                AbilityGrpId = other.AbilityGrpId;
            }
            if (other.MinSel != 0)
            {
                MinSel = other.MinSel;
            }
            if (other.MaxSel != 0)
            {
                MaxSel = other.MaxSel;
            }
            if (other.RepeatedSelectAllowed != false)
            {
                RepeatedSelectAllowed = other.RepeatedSelectAllowed;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            modalOptions_.AddEntriesFrom(input, _repeated_modalOptions_codec);
                            break;
                        }
                    case 16:
                        {
                            AbilityGrpId = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            MinSel = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            MaxSel = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            RepeatedSelectAllowed = input.ReadBool();
                            break;
                        }
                    case 50:
                        {
                            excludedOptions_.AddEntriesFrom(input, _repeated_excludedOptions_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MulliganResp : pb::IMessage<MulliganResp>
    {
        private static readonly pb::MessageParser<MulliganResp> _parser = new pb::MessageParser<MulliganResp>(() => new MulliganResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MulliganResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[225]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MulliganResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MulliganResp(MulliganResp other) : this()
        {
            decision_ = other.decision_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MulliganResp Clone()
        {
            return new MulliganResp(this);
        }

        /// <summary>Field number for the "decision" field.</summary>
        public const int DecisionFieldNumber = 1;
        private MulliganOption decision_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MulliganOption Decision
        {
            get { return decision_; }
            set
            {
                decision_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MulliganResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MulliganResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Decision != other.Decision) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Decision != 0) hash ^= Decision.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Decision != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Decision);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Decision != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Decision);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MulliganResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Decision != 0)
            {
                Decision = other.Decision;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            decision_ = (MulliganOption)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Node : pb::IMessage<Node>
    {
        private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Node> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[226]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Node()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Node(Node other) : this()
        {
            switch (other.MessageCase)
            {
                case MessageOneofCase.Composite:
                    Composite = other.Composite.Clone();
                    break;
                case MessageOneofCase.Decorator:
                    Decorator = other.Decorator.Clone();
                    break;
                case MessageOneofCase.Task:
                    Task = other.Task.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Node Clone()
        {
            return new Node(this);
        }

        /// <summary>Field number for the "composite" field.</summary>
        public const int CompositeFieldNumber = 1;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Composite Composite
        {
            get { return messageCase_ == MessageOneofCase.Composite ? (Composite)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Composite;
            }
        }

        /// <summary>Field number for the "decorator" field.</summary>
        public const int DecoratorFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Decorator Decorator
        {
            get { return messageCase_ == MessageOneofCase.Decorator ? (Decorator)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Decorator;
            }
        }

        /// <summary>Field number for the "task" field.</summary>
        public const int TaskFieldNumber = 3;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Task Task
        {
            get { return messageCase_ == MessageOneofCase.Task ? (Task)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Task;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            Composite = 1,
            Decorator = 2,
            Task = 3,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Node);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Node other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Composite, other.Composite)) return false;
            if (!object.Equals(Decorator, other.Decorator)) return false;
            if (!object.Equals(Task, other.Task)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (messageCase_ == MessageOneofCase.Composite) hash ^= Composite.GetHashCode();
            if (messageCase_ == MessageOneofCase.Decorator) hash ^= Decorator.GetHashCode();
            if (messageCase_ == MessageOneofCase.Task) hash ^= Task.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (messageCase_ == MessageOneofCase.Composite)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Composite);
            }
            if (messageCase_ == MessageOneofCase.Decorator)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Decorator);
            }
            if (messageCase_ == MessageOneofCase.Task)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Task);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (messageCase_ == MessageOneofCase.Composite)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Composite);
            }
            if (messageCase_ == MessageOneofCase.Decorator)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Decorator);
            }
            if (messageCase_ == MessageOneofCase.Task)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Node other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.Composite:
                    if (Composite == null)
                    {
                        Composite = new Composite();
                    }
                    Composite.MergeFrom(other.Composite);
                    break;
                case MessageOneofCase.Decorator:
                    if (Decorator == null)
                    {
                        Decorator = new Decorator();
                    }
                    Decorator.MergeFrom(other.Decorator);
                    break;
                case MessageOneofCase.Task:
                    if (Task == null)
                    {
                        Task = new Task();
                    }
                    Task.MergeFrom(other.Task);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Composite subBuilder = new Composite();
                            if (messageCase_ == MessageOneofCase.Composite)
                            {
                                subBuilder.MergeFrom(Composite);
                            }
                            input.ReadMessage(subBuilder);
                            Composite = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            Decorator subBuilder = new Decorator();
                            if (messageCase_ == MessageOneofCase.Decorator)
                            {
                                subBuilder.MergeFrom(Decorator);
                            }
                            input.ReadMessage(subBuilder);
                            Decorator = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            Task subBuilder = new Task();
                            if (messageCase_ == MessageOneofCase.Task)
                            {
                                subBuilder.MergeFrom(Task);
                            }
                            input.ReadMessage(subBuilder);
                            Task = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class NumericInputReq : pb::IMessage<NumericInputReq>
    {
        private static readonly pb::MessageParser<NumericInputReq> _parser = new pb::MessageParser<NumericInputReq>(() => new NumericInputReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NumericInputReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[227]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericInputReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericInputReq(NumericInputReq other) : this()
        {
            optionIndex_ = other.optionIndex_;
            minValue_ = other.minValue_;
            maxValue_ = other.maxValue_;
            stepSize_ = other.stepSize_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericInputReq Clone()
        {
            return new NumericInputReq(this);
        }

        /// <summary>Field number for the "optionIndex" field.</summary>
        public const int OptionIndexFieldNumber = 1;
        private uint optionIndex_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OptionIndex
        {
            get { return optionIndex_; }
            set
            {
                optionIndex_ = value;
            }
        }

        /// <summary>Field number for the "minValue" field.</summary>
        public const int MinValueFieldNumber = 2;
        private uint minValue_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinValue
        {
            get { return minValue_; }
            set
            {
                minValue_ = value;
            }
        }

        /// <summary>Field number for the "maxValue" field.</summary>
        public const int MaxValueFieldNumber = 3;
        private uint maxValue_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxValue
        {
            get { return maxValue_; }
            set
            {
                maxValue_ = value;
            }
        }

        /// <summary>Field number for the "stepSize" field.</summary>
        public const int StepSizeFieldNumber = 4;
        private uint stepSize_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StepSize
        {
            get { return stepSize_; }
            set
            {
                stepSize_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as NumericInputReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NumericInputReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (OptionIndex != other.OptionIndex) return false;
            if (MinValue != other.MinValue) return false;
            if (MaxValue != other.MaxValue) return false;
            if (StepSize != other.StepSize) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (OptionIndex != 0) hash ^= OptionIndex.GetHashCode();
            if (MinValue != 0) hash ^= MinValue.GetHashCode();
            if (MaxValue != 0) hash ^= MaxValue.GetHashCode();
            if (StepSize != 0) hash ^= StepSize.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OptionIndex != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OptionIndex);
            }
            if (MinValue != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MinValue);
            }
            if (MaxValue != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MaxValue);
            }
            if (StepSize != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(StepSize);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (OptionIndex != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptionIndex);
            }
            if (MinValue != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinValue);
            }
            if (MaxValue != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxValue);
            }
            if (StepSize != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StepSize);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NumericInputReq other)
        {
            if (other == null)
            {
                return;
            }
            if (other.OptionIndex != 0)
            {
                OptionIndex = other.OptionIndex;
            }
            if (other.MinValue != 0)
            {
                MinValue = other.MinValue;
            }
            if (other.MaxValue != 0)
            {
                MaxValue = other.MaxValue;
            }
            if (other.StepSize != 0)
            {
                StepSize = other.StepSize;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            OptionIndex = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            MinValue = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            MaxValue = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            StepSize = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class NumericInputResp : pb::IMessage<NumericInputResp>
    {
        private static readonly pb::MessageParser<NumericInputResp> _parser = new pb::MessageParser<NumericInputResp>(() => new NumericInputResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NumericInputResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[228]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericInputResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericInputResp(NumericInputResp other) : this()
        {
            optionIndex_ = other.optionIndex_;
            numericInputValue_ = other.numericInputValue_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericInputResp Clone()
        {
            return new NumericInputResp(this);
        }

        /// <summary>Field number for the "optionIndex" field.</summary>
        public const int OptionIndexFieldNumber = 1;
        private uint optionIndex_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OptionIndex
        {
            get { return optionIndex_; }
            set
            {
                optionIndex_ = value;
            }
        }

        /// <summary>Field number for the "numericInputValue" field.</summary>
        public const int NumericInputValueFieldNumber = 2;
        private uint numericInputValue_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumericInputValue
        {
            get { return numericInputValue_; }
            set
            {
                numericInputValue_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as NumericInputResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NumericInputResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (OptionIndex != other.OptionIndex) return false;
            if (NumericInputValue != other.NumericInputValue) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (OptionIndex != 0) hash ^= OptionIndex.GetHashCode();
            if (NumericInputValue != 0) hash ^= NumericInputValue.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OptionIndex != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OptionIndex);
            }
            if (NumericInputValue != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(NumericInputValue);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (OptionIndex != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptionIndex);
            }
            if (NumericInputValue != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumericInputValue);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NumericInputResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.OptionIndex != 0)
            {
                OptionIndex = other.OptionIndex;
            }
            if (other.NumericInputValue != 0)
            {
                NumericInputValue = other.NumericInputValue;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            OptionIndex = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            NumericInputValue = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OnChat : pb::IMessage<OnChat>
    {
        private static readonly pb::MessageParser<OnChat> _parser = new pb::MessageParser<OnChat>(() => new OnChat());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OnChat> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[229]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnChat()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnChat(OnChat other) : this()
        {
            text_ = other.text_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnChat Clone()
        {
            return new OnChat(this);
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 1;
        private string text_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text
        {
            get { return text_; }
            set
            {
                text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OnChat);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OnChat other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Text != other.Text) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Text.Length != 0) hash ^= Text.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Text.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Text);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Text.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OnChat other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Text.Length != 0)
            {
                Text = other.Text;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Text = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OnHover : pb::IMessage<OnHover>
    {
        private static readonly pb::MessageParser<OnHover> _parser = new pb::MessageParser<OnHover>(() => new OnHover());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OnHover> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[230]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnHover()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnHover(OnHover other) : this()
        {
            objectId_ = other.objectId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnHover Clone()
        {
            return new OnHover(this);
        }

        /// <summary>Field number for the "objectId" field.</summary>
        public const int ObjectIdFieldNumber = 1;
        private uint objectId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ObjectId
        {
            get { return objectId_; }
            set
            {
                objectId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OnHover);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OnHover other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ObjectId != other.ObjectId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ObjectId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(ObjectId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ObjectId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OnHover other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ObjectId != 0)
            {
                ObjectId = other.ObjectId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ObjectId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OnSelect : pb::IMessage<OnSelect>
    {
        private static readonly pb::MessageParser<OnSelect> _parser = new pb::MessageParser<OnSelect>(() => new OnSelect());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OnSelect> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[231]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnSelect()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnSelect(OnSelect other) : this()
        {
            objectId_ = other.objectId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnSelect Clone()
        {
            return new OnSelect(this);
        }

        /// <summary>Field number for the "objectId" field.</summary>
        public const int ObjectIdFieldNumber = 1;
        private uint objectId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ObjectId
        {
            get { return objectId_; }
            set
            {
                objectId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OnSelect);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OnSelect other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ObjectId != other.ObjectId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ObjectId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(ObjectId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ObjectId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OnSelect other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ObjectId != 0)
            {
                ObjectId = other.ObjectId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ObjectId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OnShuffle : pb::IMessage<OnShuffle>
    {
        private static readonly pb::MessageParser<OnShuffle> _parser = new pb::MessageParser<OnShuffle>(() => new OnShuffle());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OnShuffle> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[232]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnShuffle()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnShuffle(OnShuffle other) : this()
        {
            objectIds_ = other.objectIds_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnShuffle Clone()
        {
            return new OnShuffle(this);
        }

        /// <summary>Field number for the "objectIds" field.</summary>
        public const int ObjectIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_objectIds_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> objectIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ObjectIds
        {
            get { return objectIds_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OnShuffle);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OnShuffle other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!objectIds_.Equals(other.objectIds_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= objectIds_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            objectIds_.WriteTo(output, _repeated_objectIds_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += objectIds_.CalculateSize(_repeated_objectIds_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OnShuffle other)
        {
            if (other == null)
            {
                return;
            }
            objectIds_.Add(other.objectIds_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                        {
                            objectIds_.AddEntriesFrom(input, _repeated_objectIds_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OptionalActionMessage : pb::IMessage<OptionalActionMessage>
    {
        private static readonly pb::MessageParser<OptionalActionMessage> _parser = new pb::MessageParser<OptionalActionMessage>(() => new OptionalActionMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OptionalActionMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[233]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalActionMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalActionMessage(OptionalActionMessage other) : this()
        {
            optionalActionTypes_ = other.optionalActionTypes_.Clone();
            prompt_ = other.prompt_ != null ? other.prompt_.Clone() : null;
            systemSeatId_ = other.systemSeatId_;
            sourceId_ = other.sourceId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalActionMessage Clone()
        {
            return new OptionalActionMessage(this);
        }

        /// <summary>Field number for the "optionalActionTypes" field.</summary>
        public const int OptionalActionTypesFieldNumber = 4;
        private static readonly pb::FieldCodec<CardMechanicType> _repeated_optionalActionTypes_codec
            = pb::FieldCodec.ForEnum(34, x => (int)x, x => (CardMechanicType)x);
        private readonly pbc::RepeatedField<CardMechanicType> optionalActionTypes_ = new pbc::RepeatedField<CardMechanicType>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<CardMechanicType> OptionalActionTypes
        {
            get { return optionalActionTypes_; }
        }

        /// <summary>Field number for the "prompt" field.</summary>
        public const int PromptFieldNumber = 1;
        private Prompt prompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt Prompt
        {
            get { return prompt_; }
            set
            {
                prompt_ = value;
            }
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 2;
        private uint systemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SystemSeatId
        {
            get { return systemSeatId_; }
            set
            {
                systemSeatId_ = value;
            }
        }

        /// <summary>Field number for the "sourceId" field.</summary>
        public const int SourceIdFieldNumber = 3;
        private uint sourceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SourceId
        {
            get { return sourceId_; }
            set
            {
                sourceId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OptionalActionMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OptionalActionMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!optionalActionTypes_.Equals(other.optionalActionTypes_)) return false;
            if (!object.Equals(Prompt, other.Prompt)) return false;
            if (SystemSeatId != other.SystemSeatId) return false;
            if (SourceId != other.SourceId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= optionalActionTypes_.GetHashCode();
            if (prompt_ != null) hash ^= Prompt.GetHashCode();
            if (SystemSeatId != 0) hash ^= SystemSeatId.GetHashCode();
            if (SourceId != 0) hash ^= SourceId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (prompt_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Prompt);
            }
            if (SystemSeatId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(SystemSeatId);
            }
            if (SourceId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(SourceId);
            }
            optionalActionTypes_.WriteTo(output, _repeated_optionalActionTypes_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += optionalActionTypes_.CalculateSize(_repeated_optionalActionTypes_codec);
            if (prompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prompt);
            }
            if (SystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SystemSeatId);
            }
            if (SourceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OptionalActionMessage other)
        {
            if (other == null)
            {
                return;
            }
            optionalActionTypes_.Add(other.optionalActionTypes_);
            if (other.prompt_ != null)
            {
                if (prompt_ == null)
                {
                    prompt_ = new Prompt();
                }
                Prompt.MergeFrom(other.Prompt);
            }
            if (other.SystemSeatId != 0)
            {
                SystemSeatId = other.SystemSeatId;
            }
            if (other.SourceId != 0)
            {
                SourceId = other.SourceId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (prompt_ == null)
                            {
                                prompt_ = new Prompt();
                            }
                            input.ReadMessage(prompt_);
                            break;
                        }
                    case 16:
                        {
                            SystemSeatId = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            SourceId = input.ReadUInt32();
                            break;
                        }
                    case 34:
                    case 32:
                        {
                            optionalActionTypes_.AddEntriesFrom(input, _repeated_optionalActionTypes_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OptionalResp : pb::IMessage<OptionalResp>
    {
        private static readonly pb::MessageParser<OptionalResp> _parser = new pb::MessageParser<OptionalResp>(() => new OptionalResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OptionalResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[234]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalResp(OptionalResp other) : this()
        {
            response_ = other.response_;
            persistence_ = other.persistence_;
            appliesTo_ = other.appliesTo_;
            mapTo_ = other.mapTo_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalResp Clone()
        {
            return new OptionalResp(this);
        }

        /// <summary>Field number for the "response" field.</summary>
        public const int ResponseFieldNumber = 1;
        private OptionResponse response_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionResponse Response
        {
            get { return response_; }
            set
            {
                response_ = value;
            }
        }

        /// <summary>Field number for the "persistence" field.</summary>
        public const int PersistenceFieldNumber = 2;
        private ChoicePersistence persistence_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChoicePersistence Persistence
        {
            get { return persistence_; }
            set
            {
                persistence_ = value;
            }
        }

        /// <summary>Field number for the "appliesTo" field.</summary>
        public const int AppliesToFieldNumber = 3;
        private SettingScope appliesTo_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingScope AppliesTo
        {
            get { return appliesTo_; }
            set
            {
                appliesTo_ = value;
            }
        }

        /// <summary>Field number for the "mapTo" field.</summary>
        public const int MapToFieldNumber = 4;
        private SettingKey mapTo_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingKey MapTo
        {
            get { return mapTo_; }
            set
            {
                mapTo_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OptionalResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OptionalResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Response != other.Response) return false;
            if (Persistence != other.Persistence) return false;
            if (AppliesTo != other.AppliesTo) return false;
            if (MapTo != other.MapTo) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Response != 0) hash ^= Response.GetHashCode();
            if (Persistence != 0) hash ^= Persistence.GetHashCode();
            if (AppliesTo != 0) hash ^= AppliesTo.GetHashCode();
            if (MapTo != 0) hash ^= MapTo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Response != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Response);
            }
            if (Persistence != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Persistence);
            }
            if (AppliesTo != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)AppliesTo);
            }
            if (MapTo != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)MapTo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Response != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Response);
            }
            if (Persistence != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Persistence);
            }
            if (AppliesTo != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AppliesTo);
            }
            if (MapTo != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MapTo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OptionalResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Response != 0)
            {
                Response = other.Response;
            }
            if (other.Persistence != 0)
            {
                Persistence = other.Persistence;
            }
            if (other.AppliesTo != 0)
            {
                AppliesTo = other.AppliesTo;
            }
            if (other.MapTo != 0)
            {
                MapTo = other.MapTo;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            response_ = (OptionResponse)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            persistence_ = (ChoicePersistence)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            appliesTo_ = (SettingScope)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            mapTo_ = (SettingKey)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OrderCombatDamageReq : pb::IMessage<OrderCombatDamageReq>
    {
        private static readonly pb::MessageParser<OrderCombatDamageReq> _parser = new pb::MessageParser<OrderCombatDamageReq>(() => new OrderCombatDamageReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OrderCombatDamageReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[235]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderCombatDamageReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderCombatDamageReq(OrderCombatDamageReq other) : this()
        {
            orders_ = other.orders_.Clone();
            orderDamageType_ = other.orderDamageType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderCombatDamageReq Clone()
        {
            return new OrderCombatDamageReq(this);
        }

        /// <summary>Field number for the "orders" field.</summary>
        public const int OrdersFieldNumber = 2;
        private static readonly pb::FieldCodec<CombatDamageOrder> _repeated_orders_codec
            = pb::FieldCodec.ForMessage(18, CombatDamageOrder.Parser);
        private readonly pbc::RepeatedField<CombatDamageOrder> orders_ = new pbc::RepeatedField<CombatDamageOrder>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<CombatDamageOrder> Orders
        {
            get { return orders_; }
        }

        /// <summary>Field number for the "orderDamageType" field.</summary>
        public const int OrderDamageTypeFieldNumber = 1;
        private OrderCombatDamageType orderDamageType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderCombatDamageType OrderDamageType
        {
            get { return orderDamageType_; }
            set
            {
                orderDamageType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OrderCombatDamageReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OrderCombatDamageReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!orders_.Equals(other.orders_)) return false;
            if (OrderDamageType != other.OrderDamageType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= orders_.GetHashCode();
            if (OrderDamageType != 0) hash ^= OrderDamageType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OrderDamageType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)OrderDamageType);
            }
            orders_.WriteTo(output, _repeated_orders_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += orders_.CalculateSize(_repeated_orders_codec);
            if (OrderDamageType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)OrderDamageType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OrderCombatDamageReq other)
        {
            if (other == null)
            {
                return;
            }
            orders_.Add(other.orders_);
            if (other.OrderDamageType != 0)
            {
                OrderDamageType = other.OrderDamageType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            orderDamageType_ = (OrderCombatDamageType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            orders_.AddEntriesFrom(input, _repeated_orders_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OrderCombatDamageResp : pb::IMessage<OrderCombatDamageResp>
    {
        private static readonly pb::MessageParser<OrderCombatDamageResp> _parser = new pb::MessageParser<OrderCombatDamageResp>(() => new OrderCombatDamageResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OrderCombatDamageResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[236]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderCombatDamageResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderCombatDamageResp(OrderCombatDamageResp other) : this()
        {
            orders_ = other.orders_.Clone();
            orderDamageType_ = other.orderDamageType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderCombatDamageResp Clone()
        {
            return new OrderCombatDamageResp(this);
        }

        /// <summary>Field number for the "orders" field.</summary>
        public const int OrdersFieldNumber = 2;
        private static readonly pb::FieldCodec<CombatDamageOrderAssignment> _repeated_orders_codec
            = pb::FieldCodec.ForMessage(18, CombatDamageOrderAssignment.Parser);
        private readonly pbc::RepeatedField<CombatDamageOrderAssignment> orders_ = new pbc::RepeatedField<CombatDamageOrderAssignment>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<CombatDamageOrderAssignment> Orders
        {
            get { return orders_; }
        }

        /// <summary>Field number for the "orderDamageType" field.</summary>
        public const int OrderDamageTypeFieldNumber = 1;
        private OrderCombatDamageType orderDamageType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderCombatDamageType OrderDamageType
        {
            get { return orderDamageType_; }
            set
            {
                orderDamageType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OrderCombatDamageResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OrderCombatDamageResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!orders_.Equals(other.orders_)) return false;
            if (OrderDamageType != other.OrderDamageType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= orders_.GetHashCode();
            if (OrderDamageType != 0) hash ^= OrderDamageType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OrderDamageType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)OrderDamageType);
            }
            orders_.WriteTo(output, _repeated_orders_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += orders_.CalculateSize(_repeated_orders_codec);
            if (OrderDamageType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)OrderDamageType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OrderCombatDamageResp other)
        {
            if (other == null)
            {
                return;
            }
            orders_.Add(other.orders_);
            if (other.OrderDamageType != 0)
            {
                OrderDamageType = other.OrderDamageType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            orderDamageType_ = (OrderCombatDamageType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            orders_.AddEntriesFrom(input, _repeated_orders_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OrderDamageConfirmation : pb::IMessage<OrderDamageConfirmation>
    {
        private static readonly pb::MessageParser<OrderDamageConfirmation> _parser = new pb::MessageParser<OrderDamageConfirmation>(() => new OrderDamageConfirmation());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OrderDamageConfirmation> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[237]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderDamageConfirmation()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderDamageConfirmation(OrderDamageConfirmation other) : this()
        {
            invalidOrders_ = other.invalidOrders_.Clone();
            result_ = other.result_;
            orderDamageType_ = other.orderDamageType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderDamageConfirmation Clone()
        {
            return new OrderDamageConfirmation(this);
        }

        /// <summary>Field number for the "invalidOrders" field.</summary>
        public const int InvalidOrdersFieldNumber = 3;
        private static readonly pb::FieldCodec<InvalidCombatDamageOrderAssignment> _repeated_invalidOrders_codec
            = pb::FieldCodec.ForMessage(26, InvalidCombatDamageOrderAssignment.Parser);
        private readonly pbc::RepeatedField<InvalidCombatDamageOrderAssignment> invalidOrders_ = new pbc::RepeatedField<InvalidCombatDamageOrderAssignment>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<InvalidCombatDamageOrderAssignment> InvalidOrders
        {
            get { return invalidOrders_; }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private ResultCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        /// <summary>Field number for the "orderDamageType" field.</summary>
        public const int OrderDamageTypeFieldNumber = 2;
        private OrderCombatDamageType orderDamageType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderCombatDamageType OrderDamageType
        {
            get { return orderDamageType_; }
            set
            {
                orderDamageType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OrderDamageConfirmation);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OrderDamageConfirmation other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!invalidOrders_.Equals(other.invalidOrders_)) return false;
            if (Result != other.Result) return false;
            if (OrderDamageType != other.OrderDamageType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= invalidOrders_.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (OrderDamageType != 0) hash ^= OrderDamageType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Result != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Result);
            }
            if (OrderDamageType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)OrderDamageType);
            }
            invalidOrders_.WriteTo(output, _repeated_invalidOrders_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += invalidOrders_.CalculateSize(_repeated_invalidOrders_codec);
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (OrderDamageType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)OrderDamageType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OrderDamageConfirmation other)
        {
            if (other == null)
            {
                return;
            }
            invalidOrders_.Add(other.invalidOrders_);
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            if (other.OrderDamageType != 0)
            {
                OrderDamageType = other.OrderDamageType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            result_ = (ResultCode)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            orderDamageType_ = (OrderCombatDamageType)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            invalidOrders_.AddEntriesFrom(input, _repeated_invalidOrders_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OrderKey : pb::IMessage<OrderKey>
    {
        private static readonly pb::MessageParser<OrderKey> _parser = new pb::MessageParser<OrderKey>(() => new OrderKey());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OrderKey> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[238]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderKey()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderKey(OrderKey other) : this()
        {
            activePlayer_ = other.activePlayer_;
            turnPhase_ = other.turnPhase_;
            phaseStep_ = other.phaseStep_;
            requestType_ = other.requestType_;
            context_ = other.context_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderKey Clone()
        {
            return new OrderKey(this);
        }

        /// <summary>Field number for the "activePlayer" field.</summary>
        public const int ActivePlayerFieldNumber = 1;
        private PlayerIs activePlayer_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerIs ActivePlayer
        {
            get { return activePlayer_; }
            set
            {
                activePlayer_ = value;
            }
        }

        /// <summary>Field number for the "turnPhase" field.</summary>
        public const int TurnPhaseFieldNumber = 2;
        private Phase turnPhase_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Phase TurnPhase
        {
            get { return turnPhase_; }
            set
            {
                turnPhase_ = value;
            }
        }

        /// <summary>Field number for the "phaseStep" field.</summary>
        public const int PhaseStepFieldNumber = 3;
        private Step phaseStep_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Step PhaseStep
        {
            get { return phaseStep_; }
            set
            {
                phaseStep_ = value;
            }
        }

        /// <summary>Field number for the "requestType" field.</summary>
        public const int RequestTypeFieldNumber = 4;
        private GREMessageType requestType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREMessageType RequestType
        {
            get { return requestType_; }
            set
            {
                requestType_ = value;
            }
        }

        /// <summary>Field number for the "context" field.</summary>
        public const int ContextFieldNumber = 5;
        private int context_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Context
        {
            get { return context_; }
            set
            {
                context_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OrderKey);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OrderKey other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ActivePlayer != other.ActivePlayer) return false;
            if (TurnPhase != other.TurnPhase) return false;
            if (PhaseStep != other.PhaseStep) return false;
            if (RequestType != other.RequestType) return false;
            if (Context != other.Context) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ActivePlayer != 0) hash ^= ActivePlayer.GetHashCode();
            if (TurnPhase != 0) hash ^= TurnPhase.GetHashCode();
            if (PhaseStep != 0) hash ^= PhaseStep.GetHashCode();
            if (RequestType != 0) hash ^= RequestType.GetHashCode();
            if (Context != 0) hash ^= Context.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ActivePlayer != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ActivePlayer);
            }
            if (TurnPhase != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)TurnPhase);
            }
            if (PhaseStep != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)PhaseStep);
            }
            if (RequestType != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)RequestType);
            }
            if (Context != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(Context);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ActivePlayer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ActivePlayer);
            }
            if (TurnPhase != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)TurnPhase);
            }
            if (PhaseStep != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PhaseStep);
            }
            if (RequestType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)RequestType);
            }
            if (Context != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Context);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OrderKey other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ActivePlayer != 0)
            {
                ActivePlayer = other.ActivePlayer;
            }
            if (other.TurnPhase != 0)
            {
                TurnPhase = other.TurnPhase;
            }
            if (other.PhaseStep != 0)
            {
                PhaseStep = other.PhaseStep;
            }
            if (other.RequestType != 0)
            {
                RequestType = other.RequestType;
            }
            if (other.Context != 0)
            {
                Context = other.Context;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            activePlayer_ = (PlayerIs)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            turnPhase_ = (Phase)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            phaseStep_ = (Step)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            requestType_ = (GREMessageType)input.ReadEnum();
                            break;
                        }
                    case 40:
                        {
                            Context = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OrderReq : pb::IMessage<OrderReq>
    {
        private static readonly pb::MessageParser<OrderReq> _parser = new pb::MessageParser<OrderReq>(() => new OrderReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OrderReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[239]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderReq(OrderReq other) : this()
        {
            ids_ = other.ids_.Clone();
            idx_ = other.idx_;
            orderingContext_ = other.orderingContext_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderReq Clone()
        {
            return new OrderReq(this);
        }

        /// <summary>Field number for the "ids" field.</summary>
        public const int IdsFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_ids_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> ids_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Ids
        {
            get { return ids_; }
        }

        /// <summary>Field number for the "idx" field.</summary>
        public const int IdxFieldNumber = 2;
        private uint idx_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Idx
        {
            get { return idx_; }
            set
            {
                idx_ = value;
            }
        }

        /// <summary>Field number for the "orderingContext" field.</summary>
        public const int OrderingContextFieldNumber = 3;
        private OrderingContext orderingContext_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderingContext OrderingContext
        {
            get { return orderingContext_; }
            set
            {
                orderingContext_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OrderReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OrderReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!ids_.Equals(other.ids_)) return false;
            if (Idx != other.Idx) return false;
            if (OrderingContext != other.OrderingContext) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= ids_.GetHashCode();
            if (Idx != 0) hash ^= Idx.GetHashCode();
            if (OrderingContext != 0) hash ^= OrderingContext.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            ids_.WriteTo(output, _repeated_ids_codec);
            if (Idx != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Idx);
            }
            if (OrderingContext != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)OrderingContext);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += ids_.CalculateSize(_repeated_ids_codec);
            if (Idx != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idx);
            }
            if (OrderingContext != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)OrderingContext);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OrderReq other)
        {
            if (other == null)
            {
                return;
            }
            ids_.Add(other.ids_);
            if (other.Idx != 0)
            {
                Idx = other.Idx;
            }
            if (other.OrderingContext != 0)
            {
                OrderingContext = other.OrderingContext;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                        {
                            ids_.AddEntriesFrom(input, _repeated_ids_codec);
                            break;
                        }
                    case 16:
                        {
                            Idx = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            orderingContext_ = (OrderingContext)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OrderResp : pb::IMessage<OrderResp>
    {
        private static readonly pb::MessageParser<OrderResp> _parser = new pb::MessageParser<OrderResp>(() => new OrderResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OrderResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[240]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderResp(OrderResp other) : this()
        {
            ids_ = other.ids_.Clone();
            ordering_ = other.ordering_;
            idx_ = other.idx_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderResp Clone()
        {
            return new OrderResp(this);
        }

        /// <summary>Field number for the "ids" field.</summary>
        public const int IdsFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_ids_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> ids_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Ids
        {
            get { return ids_; }
        }

        /// <summary>Field number for the "ordering" field.</summary>
        public const int OrderingFieldNumber = 2;
        private OrderingType ordering_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderingType Ordering
        {
            get { return ordering_; }
            set
            {
                ordering_ = value;
            }
        }

        /// <summary>Field number for the "idx" field.</summary>
        public const int IdxFieldNumber = 3;
        private uint idx_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Idx
        {
            get { return idx_; }
            set
            {
                idx_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OrderResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OrderResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!ids_.Equals(other.ids_)) return false;
            if (Ordering != other.Ordering) return false;
            if (Idx != other.Idx) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= ids_.GetHashCode();
            if (Ordering != 0) hash ^= Ordering.GetHashCode();
            if (Idx != 0) hash ^= Idx.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            ids_.WriteTo(output, _repeated_ids_codec);
            if (Ordering != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Ordering);
            }
            if (Idx != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(Idx);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += ids_.CalculateSize(_repeated_ids_codec);
            if (Ordering != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Ordering);
            }
            if (Idx != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idx);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OrderResp other)
        {
            if (other == null)
            {
                return;
            }
            ids_.Add(other.ids_);
            if (other.Ordering != 0)
            {
                Ordering = other.Ordering;
            }
            if (other.Idx != 0)
            {
                Idx = other.Idx;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                        {
                            ids_.AddEntriesFrom(input, _repeated_ids_codec);
                            break;
                        }
                    case 16:
                        {
                            ordering_ = (OrderingType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            Idx = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OrderedDamageAssignment : pb::IMessage<OrderedDamageAssignment>
    {
        private static readonly pb::MessageParser<OrderedDamageAssignment> _parser = new pb::MessageParser<OrderedDamageAssignment>(() => new OrderedDamageAssignment());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OrderedDamageAssignment> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[241]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderedDamageAssignment()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderedDamageAssignment(OrderedDamageAssignment other) : this()
        {
            instanceId_ = other.instanceId_;
            assignedDamage_ = other.assignedDamage_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderedDamageAssignment Clone()
        {
            return new OrderedDamageAssignment(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "assignedDamage" field.</summary>
        public const int AssignedDamageFieldNumber = 2;
        private uint assignedDamage_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AssignedDamage
        {
            get { return assignedDamage_; }
            set
            {
                assignedDamage_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OrderedDamageAssignment);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OrderedDamageAssignment other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            if (AssignedDamage != other.AssignedDamage) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (AssignedDamage != 0) hash ^= AssignedDamage.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(InstanceId);
            }
            if (AssignedDamage != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(AssignedDamage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
            }
            if (AssignedDamage != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AssignedDamage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OrderedDamageAssignment other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.AssignedDamage != 0)
            {
                AssignedDamage = other.AssignedDamage;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            AssignedDamage = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OrderingHeuristicDefinition : pb::IMessage<OrderingHeuristicDefinition>
    {
        private static readonly pb::MessageParser<OrderingHeuristicDefinition> _parser = new pb::MessageParser<OrderingHeuristicDefinition>(() => new OrderingHeuristicDefinition());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OrderingHeuristicDefinition> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[242]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderingHeuristicDefinition()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderingHeuristicDefinition(OrderingHeuristicDefinition other) : this()
        {
            id_ = other.id_;
            priority_ = other.priority_;
            weight_ = other.weight_;
            orderKey_ = other.orderKey_ != null ? other.orderKey_.Clone() : null;
            functionType_ = other.functionType_;
            mechanicType_ = other.mechanicType_;
            withMechanic_ = other.withMechanic_;
            abilityType_ = other.abilityType_;
            sortOrder_ = other.sortOrder_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderingHeuristicDefinition Clone()
        {
            return new OrderingHeuristicDefinition(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id
        {
            get { return id_; }
            set
            {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "priority" field.</summary>
        public const int PriorityFieldNumber = 2;
        private uint priority_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Priority
        {
            get { return priority_; }
            set
            {
                priority_ = value;
            }
        }

        /// <summary>Field number for the "weight" field.</summary>
        public const int WeightFieldNumber = 3;
        private uint weight_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Weight
        {
            get { return weight_; }
            set
            {
                weight_ = value;
            }
        }

        /// <summary>Field number for the "orderKey" field.</summary>
        public const int OrderKeyFieldNumber = 4;
        private OrderKey orderKey_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderKey OrderKey
        {
            get { return orderKey_; }
            set
            {
                orderKey_ = value;
            }
        }

        /// <summary>Field number for the "functionType" field.</summary>
        public const int FunctionTypeFieldNumber = 5;
        private OrderingFunctionType functionType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderingFunctionType FunctionType
        {
            get { return functionType_; }
            set
            {
                functionType_ = value;
            }
        }

        /// <summary>Field number for the "mechanicType" field.</summary>
        public const int MechanicTypeFieldNumber = 10;
        private MechanicType mechanicType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MechanicType MechanicType
        {
            get { return mechanicType_; }
            set
            {
                mechanicType_ = value;
            }
        }

        /// <summary>Field number for the "withMechanic" field.</summary>
        public const int WithMechanicFieldNumber = 11;
        private bool withMechanic_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool WithMechanic
        {
            get { return withMechanic_; }
            set
            {
                withMechanic_ = value;
            }
        }

        /// <summary>Field number for the "abilityType" field.</summary>
        public const int AbilityTypeFieldNumber = 12;
        private AbilityType abilityType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityType AbilityType
        {
            get { return abilityType_; }
            set
            {
                abilityType_ = value;
            }
        }

        /// <summary>Field number for the "sortOrder" field.</summary>
        public const int SortOrderFieldNumber = 20;
        private SortBy sortOrder_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SortBy SortOrder
        {
            get { return sortOrder_; }
            set
            {
                sortOrder_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OrderingHeuristicDefinition);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OrderingHeuristicDefinition other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (Priority != other.Priority) return false;
            if (Weight != other.Weight) return false;
            if (!object.Equals(OrderKey, other.OrderKey)) return false;
            if (FunctionType != other.FunctionType) return false;
            if (MechanicType != other.MechanicType) return false;
            if (WithMechanic != other.WithMechanic) return false;
            if (AbilityType != other.AbilityType) return false;
            if (SortOrder != other.SortOrder) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Id.Length != 0) hash ^= Id.GetHashCode();
            if (Priority != 0) hash ^= Priority.GetHashCode();
            if (Weight != 0) hash ^= Weight.GetHashCode();
            if (orderKey_ != null) hash ^= OrderKey.GetHashCode();
            if (FunctionType != 0) hash ^= FunctionType.GetHashCode();
            if (MechanicType != 0) hash ^= MechanicType.GetHashCode();
            if (WithMechanic != false) hash ^= WithMechanic.GetHashCode();
            if (AbilityType != 0) hash ^= AbilityType.GetHashCode();
            if (SortOrder != 0) hash ^= SortOrder.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Id);
            }
            if (Priority != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Priority);
            }
            if (Weight != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(Weight);
            }
            if (orderKey_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(OrderKey);
            }
            if (FunctionType != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)FunctionType);
            }
            if (MechanicType != 0)
            {
                output.WriteRawTag(80);
                output.WriteEnum((int)MechanicType);
            }
            if (WithMechanic != false)
            {
                output.WriteRawTag(88);
                output.WriteBool(WithMechanic);
            }
            if (AbilityType != 0)
            {
                output.WriteRawTag(96);
                output.WriteEnum((int)AbilityType);
            }
            if (SortOrder != 0)
            {
                output.WriteRawTag(160, 1);
                output.WriteEnum((int)SortOrder);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Id.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
            }
            if (Priority != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
            }
            if (Weight != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weight);
            }
            if (orderKey_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrderKey);
            }
            if (FunctionType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FunctionType);
            }
            if (MechanicType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MechanicType);
            }
            if (WithMechanic != false)
            {
                size += 1 + 1;
            }
            if (AbilityType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AbilityType);
            }
            if (SortOrder != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)SortOrder);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OrderingHeuristicDefinition other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id.Length != 0)
            {
                Id = other.Id;
            }
            if (other.Priority != 0)
            {
                Priority = other.Priority;
            }
            if (other.Weight != 0)
            {
                Weight = other.Weight;
            }
            if (other.orderKey_ != null)
            {
                if (orderKey_ == null)
                {
                    orderKey_ = new OrderKey();
                }
                OrderKey.MergeFrom(other.OrderKey);
            }
            if (other.FunctionType != 0)
            {
                FunctionType = other.FunctionType;
            }
            if (other.MechanicType != 0)
            {
                MechanicType = other.MechanicType;
            }
            if (other.WithMechanic != false)
            {
                WithMechanic = other.WithMechanic;
            }
            if (other.AbilityType != 0)
            {
                AbilityType = other.AbilityType;
            }
            if (other.SortOrder != 0)
            {
                SortOrder = other.SortOrder;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Id = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            Priority = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            Weight = input.ReadUInt32();
                            break;
                        }
                    case 34:
                        {
                            if (orderKey_ == null)
                            {
                                orderKey_ = new OrderKey();
                            }
                            input.ReadMessage(orderKey_);
                            break;
                        }
                    case 40:
                        {
                            functionType_ = (OrderingFunctionType)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            mechanicType_ = (MechanicType)input.ReadEnum();
                            break;
                        }
                    case 88:
                        {
                            WithMechanic = input.ReadBool();
                            break;
                        }
                    case 96:
                        {
                            abilityType_ = (AbilityType)input.ReadEnum();
                            break;
                        }
                    case 160:
                        {
                            sortOrder_ = (SortBy)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OrderingHeuristicParameter : pb::IMessage<OrderingHeuristicParameter>
    {
        private static readonly pb::MessageParser<OrderingHeuristicParameter> _parser = new pb::MessageParser<OrderingHeuristicParameter>(() => new OrderingHeuristicParameter());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OrderingHeuristicParameter> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[243]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderingHeuristicParameter()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderingHeuristicParameter(OrderingHeuristicParameter other) : this()
        {
            paramId_ = other.paramId_;
            paramValue_ = other.paramValue_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderingHeuristicParameter Clone()
        {
            return new OrderingHeuristicParameter(this);
        }

        /// <summary>Field number for the "paramId" field.</summary>
        public const int ParamIdFieldNumber = 1;
        private OrderingParameterId paramId_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderingParameterId ParamId
        {
            get { return paramId_; }
            set
            {
                paramId_ = value;
            }
        }

        /// <summary>Field number for the "paramValue" field.</summary>
        public const int ParamValueFieldNumber = 2;
        private int paramValue_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ParamValue
        {
            get { return paramValue_; }
            set
            {
                paramValue_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OrderingHeuristicParameter);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OrderingHeuristicParameter other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ParamId != other.ParamId) return false;
            if (ParamValue != other.ParamValue) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ParamId != 0) hash ^= ParamId.GetHashCode();
            if (ParamValue != 0) hash ^= ParamValue.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ParamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ParamId);
            }
            if (ParamValue != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(ParamValue);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ParamId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ParamId);
            }
            if (ParamValue != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParamValue);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OrderingHeuristicParameter other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ParamId != 0)
            {
                ParamId = other.ParamId;
            }
            if (other.ParamValue != 0)
            {
                ParamValue = other.ParamValue;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            paramId_ = (OrderingParameterId)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            ParamValue = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Parallel : pb::IMessage<Parallel>
    {
        private static readonly pb::MessageParser<Parallel> _parser = new pb::MessageParser<Parallel>(() => new Parallel());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Parallel> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[244]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Parallel()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Parallel(Parallel other) : this()
        {
            children_ = other.children_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Parallel Clone()
        {
            return new Parallel(this);
        }

        /// <summary>Field number for the "children" field.</summary>
        public const int ChildrenFieldNumber = 1;
        private static readonly pb::FieldCodec<Node> _repeated_children_codec
            = pb::FieldCodec.ForMessage(10, Node.Parser);
        private readonly pbc::RepeatedField<Node> children_ = new pbc::RepeatedField<Node>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Node> Children
        {
            get { return children_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Parallel);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Parallel other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!children_.Equals(other.children_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= children_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            children_.WriteTo(output, _repeated_children_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += children_.CalculateSize(_repeated_children_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Parallel other)
        {
            if (other == null)
            {
                return;
            }
            children_.Add(other.children_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            children_.AddEntriesFrom(input, _repeated_children_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Pass : pb::IMessage<Pass>
    {
        private static readonly pb::MessageParser<Pass> _parser = new pb::MessageParser<Pass>(() => new Pass());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Pass> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[245]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Pass()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Pass(Pass other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Pass Clone()
        {
            return new Pass(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Pass);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Pass other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Pass other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class PayCostsReq : pb::IMessage<PayCostsReq>
    {
        private static readonly pb::MessageParser<PayCostsReq> _parser = new pb::MessageParser<PayCostsReq>(() => new PayCostsReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PayCostsReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[246]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PayCostsReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PayCostsReq(PayCostsReq other) : this()
        {
            manaCost_ = other.manaCost_.Clone();
            paymentActions_ = other.paymentActions_ != null ? other.paymentActions_.Clone() : null;
            paymentSelection_ = other.paymentSelection_ != null ? other.paymentSelection_.Clone() : null;
            actionCostReq_ = other.actionCostReq_ != null ? other.actionCostReq_.Clone() : null;
            submitPaymentReq_ = other.submitPaymentReq_ != null ? other.submitPaymentReq_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PayCostsReq Clone()
        {
            return new PayCostsReq(this);
        }

        /// <summary>Field number for the "manaCost" field.</summary>
        public const int ManaCostFieldNumber = 1;
        private static readonly pb::FieldCodec<ManaRequirement> _repeated_manaCost_codec
            = pb::FieldCodec.ForMessage(10, ManaRequirement.Parser);
        private readonly pbc::RepeatedField<ManaRequirement> manaCost_ = new pbc::RepeatedField<ManaRequirement>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaRequirement> ManaCost
        {
            get { return manaCost_; }
        }

        /// <summary>Field number for the "paymentActions" field.</summary>
        public const int PaymentActionsFieldNumber = 2;
        private ActionsAvailableReq paymentActions_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionsAvailableReq PaymentActions
        {
            get { return paymentActions_; }
            set
            {
                paymentActions_ = value;
            }
        }

        /// <summary>Field number for the "paymentSelection" field.</summary>
        public const int PaymentSelectionFieldNumber = 3;
        private SelectNReq paymentSelection_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNReq PaymentSelection
        {
            get { return paymentSelection_; }
            set
            {
                paymentSelection_ = value;
            }
        }

        /// <summary>Field number for the "actionCostReq" field.</summary>
        public const int ActionCostReqFieldNumber = 4;
        private ActionCostReq actionCostReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCostReq ActionCostReq
        {
            get { return actionCostReq_; }
            set
            {
                actionCostReq_ = value;
            }
        }

        /// <summary>Field number for the "submitPaymentReq" field.</summary>
        public const int SubmitPaymentReqFieldNumber = 5;
        private SubmitPaymentReq submitPaymentReq_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitPaymentReq SubmitPaymentReq
        {
            get { return submitPaymentReq_; }
            set
            {
                submitPaymentReq_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PayCostsReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PayCostsReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!manaCost_.Equals(other.manaCost_)) return false;
            if (!object.Equals(PaymentActions, other.PaymentActions)) return false;
            if (!object.Equals(PaymentSelection, other.PaymentSelection)) return false;
            if (!object.Equals(ActionCostReq, other.ActionCostReq)) return false;
            if (!object.Equals(SubmitPaymentReq, other.SubmitPaymentReq)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= manaCost_.GetHashCode();
            if (paymentActions_ != null) hash ^= PaymentActions.GetHashCode();
            if (paymentSelection_ != null) hash ^= PaymentSelection.GetHashCode();
            if (actionCostReq_ != null) hash ^= ActionCostReq.GetHashCode();
            if (submitPaymentReq_ != null) hash ^= SubmitPaymentReq.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            manaCost_.WriteTo(output, _repeated_manaCost_codec);
            if (paymentActions_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(PaymentActions);
            }
            if (paymentSelection_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(PaymentSelection);
            }
            if (actionCostReq_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(ActionCostReq);
            }
            if (submitPaymentReq_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(SubmitPaymentReq);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += manaCost_.CalculateSize(_repeated_manaCost_codec);
            if (paymentActions_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaymentActions);
            }
            if (paymentSelection_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaymentSelection);
            }
            if (actionCostReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionCostReq);
            }
            if (submitPaymentReq_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubmitPaymentReq);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PayCostsReq other)
        {
            if (other == null)
            {
                return;
            }
            manaCost_.Add(other.manaCost_);
            if (other.paymentActions_ != null)
            {
                if (paymentActions_ == null)
                {
                    paymentActions_ = new ActionsAvailableReq();
                }
                PaymentActions.MergeFrom(other.PaymentActions);
            }
            if (other.paymentSelection_ != null)
            {
                if (paymentSelection_ == null)
                {
                    paymentSelection_ = new SelectNReq();
                }
                PaymentSelection.MergeFrom(other.PaymentSelection);
            }
            if (other.actionCostReq_ != null)
            {
                if (actionCostReq_ == null)
                {
                    actionCostReq_ = new ActionCostReq();
                }
                ActionCostReq.MergeFrom(other.ActionCostReq);
            }
            if (other.submitPaymentReq_ != null)
            {
                if (submitPaymentReq_ == null)
                {
                    submitPaymentReq_ = new SubmitPaymentReq();
                }
                SubmitPaymentReq.MergeFrom(other.SubmitPaymentReq);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            manaCost_.AddEntriesFrom(input, _repeated_manaCost_codec);
                            break;
                        }
                    case 18:
                        {
                            if (paymentActions_ == null)
                            {
                                paymentActions_ = new ActionsAvailableReq();
                            }
                            input.ReadMessage(paymentActions_);
                            break;
                        }
                    case 26:
                        {
                            if (paymentSelection_ == null)
                            {
                                paymentSelection_ = new SelectNReq();
                            }
                            input.ReadMessage(paymentSelection_);
                            break;
                        }
                    case 34:
                        {
                            if (actionCostReq_ == null)
                            {
                                actionCostReq_ = new ActionCostReq();
                            }
                            input.ReadMessage(actionCostReq_);
                            break;
                        }
                    case 42:
                        {
                            if (submitPaymentReq_ == null)
                            {
                                submitPaymentReq_ = new SubmitPaymentReq();
                            }
                            input.ReadMessage(submitPaymentReq_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PerformActionResp : pb::IMessage<PerformActionResp>
    {
        private static readonly pb::MessageParser<PerformActionResp> _parser = new pb::MessageParser<PerformActionResp>(() => new PerformActionResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PerformActionResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[247]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerformActionResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerformActionResp(PerformActionResp other) : this()
        {
            actions_ = other.actions_.Clone();
            autoPassPriority_ = other.autoPassPriority_;
            setYield_ = other.setYield_;
            appliesTo_ = other.appliesTo_;
            mapTo_ = other.mapTo_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerformActionResp Clone()
        {
            return new PerformActionResp(this);
        }

        /// <summary>Field number for the "actions" field.</summary>
        public const int ActionsFieldNumber = 1;
        private static readonly pb::FieldCodec<Action> _repeated_actions_codec
            = pb::FieldCodec.ForMessage(10, Action.Parser);
        private readonly pbc::RepeatedField<Action> actions_ = new pbc::RepeatedField<Action>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Action> Actions
        {
            get { return actions_; }
        }

        /// <summary>Field number for the "autoPassPriority" field.</summary>
        public const int AutoPassPriorityFieldNumber = 2;
        private AutoPassPriority autoPassPriority_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoPassPriority AutoPassPriority
        {
            get { return autoPassPriority_; }
            set
            {
                autoPassPriority_ = value;
            }
        }

        /// <summary>Field number for the "setYield" field.</summary>
        public const int SetYieldFieldNumber = 3;
        private SettingStatus setYield_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingStatus SetYield
        {
            get { return setYield_; }
            set
            {
                setYield_ = value;
            }
        }

        /// <summary>Field number for the "appliesTo" field.</summary>
        public const int AppliesToFieldNumber = 4;
        private SettingScope appliesTo_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingScope AppliesTo
        {
            get { return appliesTo_; }
            set
            {
                appliesTo_ = value;
            }
        }

        /// <summary>Field number for the "mapTo" field.</summary>
        public const int MapToFieldNumber = 5;
        private SettingKey mapTo_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingKey MapTo
        {
            get { return mapTo_; }
            set
            {
                mapTo_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PerformActionResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PerformActionResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!actions_.Equals(other.actions_)) return false;
            if (AutoPassPriority != other.AutoPassPriority) return false;
            if (SetYield != other.SetYield) return false;
            if (AppliesTo != other.AppliesTo) return false;
            if (MapTo != other.MapTo) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= actions_.GetHashCode();
            if (AutoPassPriority != 0) hash ^= AutoPassPriority.GetHashCode();
            if (SetYield != 0) hash ^= SetYield.GetHashCode();
            if (AppliesTo != 0) hash ^= AppliesTo.GetHashCode();
            if (MapTo != 0) hash ^= MapTo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            actions_.WriteTo(output, _repeated_actions_codec);
            if (AutoPassPriority != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)AutoPassPriority);
            }
            if (SetYield != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)SetYield);
            }
            if (AppliesTo != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)AppliesTo);
            }
            if (MapTo != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)MapTo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += actions_.CalculateSize(_repeated_actions_codec);
            if (AutoPassPriority != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AutoPassPriority);
            }
            if (SetYield != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)SetYield);
            }
            if (AppliesTo != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AppliesTo);
            }
            if (MapTo != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MapTo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PerformActionResp other)
        {
            if (other == null)
            {
                return;
            }
            actions_.Add(other.actions_);
            if (other.AutoPassPriority != 0)
            {
                AutoPassPriority = other.AutoPassPriority;
            }
            if (other.SetYield != 0)
            {
                SetYield = other.SetYield;
            }
            if (other.AppliesTo != 0)
            {
                AppliesTo = other.AppliesTo;
            }
            if (other.MapTo != 0)
            {
                MapTo = other.MapTo;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            actions_.AddEntriesFrom(input, _repeated_actions_codec);
                            break;
                        }
                    case 16:
                        {
                            autoPassPriority_ = (AutoPassPriority)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            setYield_ = (SettingStatus)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            appliesTo_ = (SettingScope)input.ReadEnum();
                            break;
                        }
                    case 40:
                        {
                            mapTo_ = (SettingKey)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerConfig : pb::IMessage<PlayerConfig>
    {
        private static readonly pb::MessageParser<PlayerConfig> _parser = new pb::MessageParser<PlayerConfig>(() => new PlayerConfig());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerConfig> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[248]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerConfig()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerConfig(PlayerConfig other) : this()
        {
            deckCards_ = other.deckCards_.Clone();
            sideboardCards_ = other.sideboardCards_.Clone();
            commandEmblems_ = other.commandEmblems_.Clone();
            systemSeatId_ = other.systemSeatId_;
            undoPermissionBitmask_ = other.undoPermissionBitmask_;
            controlPermissionBitmask_ = other.controlPermissionBitmask_;
            startingLifeTotal_ = other.startingLifeTotal_;
            startingHandSizeSpecified_ = other.startingHandSizeSpecified_;
            startingHandSize_ = other.startingHandSize_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerConfig Clone()
        {
            return new PlayerConfig(this);
        }

        /// <summary>Field number for the "deckCards" field.</summary>
        public const int DeckCardsFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_deckCards_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> deckCards_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> DeckCards
        {
            get { return deckCards_; }
        }

        /// <summary>Field number for the "sideboardCards" field.</summary>
        public const int SideboardCardsFieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_sideboardCards_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> sideboardCards_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> SideboardCards
        {
            get { return sideboardCards_; }
        }

        /// <summary>Field number for the "commandEmblems" field.</summary>
        public const int CommandEmblemsFieldNumber = 9;
        private static readonly pb::FieldCodec<uint> _repeated_commandEmblems_codec
            = pb::FieldCodec.ForUInt32(74);
        private readonly pbc::RepeatedField<uint> commandEmblems_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> CommandEmblems
        {
            get { return commandEmblems_; }
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 1;
        private uint systemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SystemSeatId
        {
            get { return systemSeatId_; }
            set
            {
                systemSeatId_ = value;
            }
        }

        /// <summary>Field number for the "undoPermissionBitmask" field.</summary>
        public const int UndoPermissionBitmaskFieldNumber = 4;
        private uint undoPermissionBitmask_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint UndoPermissionBitmask
        {
            get { return undoPermissionBitmask_; }
            set
            {
                undoPermissionBitmask_ = value;
            }
        }

        /// <summary>Field number for the "controlPermissionBitmask" field.</summary>
        public const int ControlPermissionBitmaskFieldNumber = 5;
        private uint controlPermissionBitmask_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ControlPermissionBitmask
        {
            get { return controlPermissionBitmask_; }
            set
            {
                controlPermissionBitmask_ = value;
            }
        }

        /// <summary>Field number for the "startingLifeTotal" field.</summary>
        public const int StartingLifeTotalFieldNumber = 6;
        private uint startingLifeTotal_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StartingLifeTotal
        {
            get { return startingLifeTotal_; }
            set
            {
                startingLifeTotal_ = value;
            }
        }

        /// <summary>Field number for the "startingHandSizeSpecified" field.</summary>
        public const int StartingHandSizeSpecifiedFieldNumber = 7;
        private bool startingHandSizeSpecified_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool StartingHandSizeSpecified
        {
            get { return startingHandSizeSpecified_; }
            set
            {
                startingHandSizeSpecified_ = value;
            }
        }

        /// <summary>Field number for the "startingHandSize" field.</summary>
        public const int StartingHandSizeFieldNumber = 8;
        private uint startingHandSize_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StartingHandSize
        {
            get { return startingHandSize_; }
            set
            {
                startingHandSize_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerConfig);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerConfig other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!deckCards_.Equals(other.deckCards_)) return false;
            if (!sideboardCards_.Equals(other.sideboardCards_)) return false;
            if (!commandEmblems_.Equals(other.commandEmblems_)) return false;
            if (SystemSeatId != other.SystemSeatId) return false;
            if (UndoPermissionBitmask != other.UndoPermissionBitmask) return false;
            if (ControlPermissionBitmask != other.ControlPermissionBitmask) return false;
            if (StartingLifeTotal != other.StartingLifeTotal) return false;
            if (StartingHandSizeSpecified != other.StartingHandSizeSpecified) return false;
            if (StartingHandSize != other.StartingHandSize) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= deckCards_.GetHashCode();
            hash ^= sideboardCards_.GetHashCode();
            hash ^= commandEmblems_.GetHashCode();
            if (SystemSeatId != 0) hash ^= SystemSeatId.GetHashCode();
            if (UndoPermissionBitmask != 0) hash ^= UndoPermissionBitmask.GetHashCode();
            if (ControlPermissionBitmask != 0) hash ^= ControlPermissionBitmask.GetHashCode();
            if (StartingLifeTotal != 0) hash ^= StartingLifeTotal.GetHashCode();
            if (StartingHandSizeSpecified != false) hash ^= StartingHandSizeSpecified.GetHashCode();
            if (StartingHandSize != 0) hash ^= StartingHandSize.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SystemSeatId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SystemSeatId);
            }
            deckCards_.WriteTo(output, _repeated_deckCards_codec);
            sideboardCards_.WriteTo(output, _repeated_sideboardCards_codec);
            if (UndoPermissionBitmask != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(UndoPermissionBitmask);
            }
            if (ControlPermissionBitmask != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(ControlPermissionBitmask);
            }
            if (StartingLifeTotal != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(StartingLifeTotal);
            }
            if (StartingHandSizeSpecified != false)
            {
                output.WriteRawTag(56);
                output.WriteBool(StartingHandSizeSpecified);
            }
            if (StartingHandSize != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(StartingHandSize);
            }
            commandEmblems_.WriteTo(output, _repeated_commandEmblems_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += deckCards_.CalculateSize(_repeated_deckCards_codec);
            size += sideboardCards_.CalculateSize(_repeated_sideboardCards_codec);
            size += commandEmblems_.CalculateSize(_repeated_commandEmblems_codec);
            if (SystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SystemSeatId);
            }
            if (UndoPermissionBitmask != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UndoPermissionBitmask);
            }
            if (ControlPermissionBitmask != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControlPermissionBitmask);
            }
            if (StartingLifeTotal != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartingLifeTotal);
            }
            if (StartingHandSizeSpecified != false)
            {
                size += 1 + 1;
            }
            if (StartingHandSize != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartingHandSize);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerConfig other)
        {
            if (other == null)
            {
                return;
            }
            deckCards_.Add(other.deckCards_);
            sideboardCards_.Add(other.sideboardCards_);
            commandEmblems_.Add(other.commandEmblems_);
            if (other.SystemSeatId != 0)
            {
                SystemSeatId = other.SystemSeatId;
            }
            if (other.UndoPermissionBitmask != 0)
            {
                UndoPermissionBitmask = other.UndoPermissionBitmask;
            }
            if (other.ControlPermissionBitmask != 0)
            {
                ControlPermissionBitmask = other.ControlPermissionBitmask;
            }
            if (other.StartingLifeTotal != 0)
            {
                StartingLifeTotal = other.StartingLifeTotal;
            }
            if (other.StartingHandSizeSpecified != false)
            {
                StartingHandSizeSpecified = other.StartingHandSizeSpecified;
            }
            if (other.StartingHandSize != 0)
            {
                StartingHandSize = other.StartingHandSize;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SystemSeatId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            deckCards_.AddEntriesFrom(input, _repeated_deckCards_codec);
                            break;
                        }
                    case 26:
                    case 24:
                        {
                            sideboardCards_.AddEntriesFrom(input, _repeated_sideboardCards_codec);
                            break;
                        }
                    case 32:
                        {
                            UndoPermissionBitmask = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            ControlPermissionBitmask = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            StartingLifeTotal = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            StartingHandSizeSpecified = input.ReadBool();
                            break;
                        }
                    case 64:
                        {
                            StartingHandSize = input.ReadUInt32();
                            break;
                        }
                    case 74:
                    case 72:
                        {
                            commandEmblems_.AddEntriesFrom(input, _repeated_commandEmblems_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerDieRoll : pb::IMessage<PlayerDieRoll>
    {
        private static readonly pb::MessageParser<PlayerDieRoll> _parser = new pb::MessageParser<PlayerDieRoll>(() => new PlayerDieRoll());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerDieRoll> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[249]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerDieRoll()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerDieRoll(PlayerDieRoll other) : this()
        {
            systemSeatId_ = other.systemSeatId_;
            rollValue_ = other.rollValue_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerDieRoll Clone()
        {
            return new PlayerDieRoll(this);
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 1;
        private uint systemSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SystemSeatId
        {
            get { return systemSeatId_; }
            set
            {
                systemSeatId_ = value;
            }
        }

        /// <summary>Field number for the "rollValue" field.</summary>
        public const int RollValueFieldNumber = 2;
        private uint rollValue_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RollValue
        {
            get { return rollValue_; }
            set
            {
                rollValue_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerDieRoll);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerDieRoll other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SystemSeatId != other.SystemSeatId) return false;
            if (RollValue != other.RollValue) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SystemSeatId != 0) hash ^= SystemSeatId.GetHashCode();
            if (RollValue != 0) hash ^= RollValue.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SystemSeatId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SystemSeatId);
            }
            if (RollValue != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(RollValue);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SystemSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SystemSeatId);
            }
            if (RollValue != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollValue);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerDieRoll other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SystemSeatId != 0)
            {
                SystemSeatId = other.SystemSeatId;
            }
            if (other.RollValue != 0)
            {
                RollValue = other.RollValue;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SystemSeatId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            RollValue = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo>
    {
        private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[250]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerInfo(PlayerInfo other) : this()
        {
            manaPool_ = other.manaPool_.Clone();
            timerIds_ = other.timerIds_.Clone();
            lifeTotal_ = other.lifeTotal_;
            systemSeatNumber_ = other.systemSeatNumber_;
            maxHandSize_ = other.maxHandSize_;
            turnNumber_ = other.turnNumber_;
            teamId_ = other.teamId_;
            controllerSeatId_ = other.controllerSeatId_;
            controllerType_ = other.controllerType_;
            timeoutCount_ = other.timeoutCount_;
            pipCount_ = other.pipCount_;
            pendingMessageType_ = other.pendingMessageType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerInfo Clone()
        {
            return new PlayerInfo(this);
        }

        /// <summary>Field number for the "manaPool" field.</summary>
        public const int ManaPoolFieldNumber = 6;
        private static readonly pb::FieldCodec<ManaInfo> _repeated_manaPool_codec
            = pb::FieldCodec.ForMessage(50, ManaInfo.Parser);
        private readonly pbc::RepeatedField<ManaInfo> manaPool_ = new pbc::RepeatedField<ManaInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaInfo> ManaPool
        {
            get { return manaPool_; }
        }

        /// <summary>Field number for the "timerIds" field.</summary>
        public const int TimerIdsFieldNumber = 11;
        private static readonly pb::FieldCodec<uint> _repeated_timerIds_codec
            = pb::FieldCodec.ForUInt32(90);
        private readonly pbc::RepeatedField<uint> timerIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> TimerIds
        {
            get { return timerIds_; }
        }

        /// <summary>Field number for the "lifeTotal" field.</summary>
        public const int LifeTotalFieldNumber = 1;
        private int lifeTotal_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LifeTotal
        {
            get { return lifeTotal_; }
            set
            {
                lifeTotal_ = value;
            }
        }

        /// <summary>Field number for the "systemSeatNumber" field.</summary>
        public const int SystemSeatNumberFieldNumber = 2;
        private uint systemSeatNumber_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SystemSeatNumber
        {
            get { return systemSeatNumber_; }
            set
            {
                systemSeatNumber_ = value;
            }
        }

        /// <summary>Field number for the "maxHandSize" field.</summary>
        public const int MaxHandSizeFieldNumber = 7;
        private uint maxHandSize_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxHandSize
        {
            get { return maxHandSize_; }
            set
            {
                maxHandSize_ = value;
            }
        }

        /// <summary>Field number for the "turnNumber" field.</summary>
        public const int TurnNumberFieldNumber = 9;
        private uint turnNumber_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TurnNumber
        {
            get { return turnNumber_; }
            set
            {
                turnNumber_ = value;
            }
        }

        /// <summary>Field number for the "teamId" field.</summary>
        public const int TeamIdFieldNumber = 10;
        private uint teamId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamId
        {
            get { return teamId_; }
            set
            {
                teamId_ = value;
            }
        }

        /// <summary>Field number for the "controllerSeatId" field.</summary>
        public const int ControllerSeatIdFieldNumber = 12;
        private uint controllerSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ControllerSeatId
        {
            get { return controllerSeatId_; }
            set
            {
                controllerSeatId_ = value;
            }
        }

        /// <summary>Field number for the "controllerType" field.</summary>
        public const int ControllerTypeFieldNumber = 13;
        private ControllerType controllerType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ControllerType ControllerType
        {
            get { return controllerType_; }
            set
            {
                controllerType_ = value;
            }
        }

        /// <summary>Field number for the "timeoutCount" field.</summary>
        public const int TimeoutCountFieldNumber = 14;
        private uint timeoutCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutCount
        {
            get { return timeoutCount_; }
            set
            {
                timeoutCount_ = value;
            }
        }

        /// <summary>Field number for the "pipCount" field.</summary>
        public const int PipCountFieldNumber = 15;
        private uint pipCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PipCount
        {
            get { return pipCount_; }
            set
            {
                pipCount_ = value;
            }
        }

        /// <summary>Field number for the "pendingMessageType" field.</summary>
        public const int PendingMessageTypeFieldNumber = 16;
        private ClientMessageType pendingMessageType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientMessageType PendingMessageType
        {
            get { return pendingMessageType_; }
            set
            {
                pendingMessageType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!manaPool_.Equals(other.manaPool_)) return false;
            if (!timerIds_.Equals(other.timerIds_)) return false;
            if (LifeTotal != other.LifeTotal) return false;
            if (SystemSeatNumber != other.SystemSeatNumber) return false;
            if (MaxHandSize != other.MaxHandSize) return false;
            if (TurnNumber != other.TurnNumber) return false;
            if (TeamId != other.TeamId) return false;
            if (ControllerSeatId != other.ControllerSeatId) return false;
            if (ControllerType != other.ControllerType) return false;
            if (TimeoutCount != other.TimeoutCount) return false;
            if (PipCount != other.PipCount) return false;
            if (PendingMessageType != other.PendingMessageType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= manaPool_.GetHashCode();
            hash ^= timerIds_.GetHashCode();
            if (LifeTotal != 0) hash ^= LifeTotal.GetHashCode();
            if (SystemSeatNumber != 0) hash ^= SystemSeatNumber.GetHashCode();
            if (MaxHandSize != 0) hash ^= MaxHandSize.GetHashCode();
            if (TurnNumber != 0) hash ^= TurnNumber.GetHashCode();
            if (TeamId != 0) hash ^= TeamId.GetHashCode();
            if (ControllerSeatId != 0) hash ^= ControllerSeatId.GetHashCode();
            if (ControllerType != 0) hash ^= ControllerType.GetHashCode();
            if (TimeoutCount != 0) hash ^= TimeoutCount.GetHashCode();
            if (PipCount != 0) hash ^= PipCount.GetHashCode();
            if (PendingMessageType != 0) hash ^= PendingMessageType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (LifeTotal != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(LifeTotal);
            }
            if (SystemSeatNumber != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(SystemSeatNumber);
            }
            manaPool_.WriteTo(output, _repeated_manaPool_codec);
            if (MaxHandSize != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(MaxHandSize);
            }
            if (TurnNumber != 0)
            {
                output.WriteRawTag(72);
                output.WriteUInt32(TurnNumber);
            }
            if (TeamId != 0)
            {
                output.WriteRawTag(80);
                output.WriteUInt32(TeamId);
            }
            timerIds_.WriteTo(output, _repeated_timerIds_codec);
            if (ControllerSeatId != 0)
            {
                output.WriteRawTag(96);
                output.WriteUInt32(ControllerSeatId);
            }
            if (ControllerType != 0)
            {
                output.WriteRawTag(104);
                output.WriteEnum((int)ControllerType);
            }
            if (TimeoutCount != 0)
            {
                output.WriteRawTag(112);
                output.WriteUInt32(TimeoutCount);
            }
            if (PipCount != 0)
            {
                output.WriteRawTag(120);
                output.WriteUInt32(PipCount);
            }
            if (PendingMessageType != 0)
            {
                output.WriteRawTag(128, 1);
                output.WriteEnum((int)PendingMessageType);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += manaPool_.CalculateSize(_repeated_manaPool_codec);
            size += timerIds_.CalculateSize(_repeated_timerIds_codec);
            if (LifeTotal != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(LifeTotal);
            }
            if (SystemSeatNumber != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SystemSeatNumber);
            }
            if (MaxHandSize != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxHandSize);
            }
            if (TurnNumber != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TurnNumber);
            }
            if (TeamId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
            }
            if (ControllerSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerSeatId);
            }
            if (ControllerType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ControllerType);
            }
            if (TimeoutCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutCount);
            }
            if (PipCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PipCount);
            }
            if (PendingMessageType != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)PendingMessageType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerInfo other)
        {
            if (other == null)
            {
                return;
            }
            manaPool_.Add(other.manaPool_);
            timerIds_.Add(other.timerIds_);
            if (other.LifeTotal != 0)
            {
                LifeTotal = other.LifeTotal;
            }
            if (other.SystemSeatNumber != 0)
            {
                SystemSeatNumber = other.SystemSeatNumber;
            }
            if (other.MaxHandSize != 0)
            {
                MaxHandSize = other.MaxHandSize;
            }
            if (other.TurnNumber != 0)
            {
                TurnNumber = other.TurnNumber;
            }
            if (other.TeamId != 0)
            {
                TeamId = other.TeamId;
            }
            if (other.ControllerSeatId != 0)
            {
                ControllerSeatId = other.ControllerSeatId;
            }
            if (other.ControllerType != 0)
            {
                ControllerType = other.ControllerType;
            }
            if (other.TimeoutCount != 0)
            {
                TimeoutCount = other.TimeoutCount;
            }
            if (other.PipCount != 0)
            {
                PipCount = other.PipCount;
            }
            if (other.PendingMessageType != 0)
            {
                PendingMessageType = other.PendingMessageType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            LifeTotal = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            SystemSeatNumber = input.ReadUInt32();
                            break;
                        }
                    case 50:
                        {
                            manaPool_.AddEntriesFrom(input, _repeated_manaPool_codec);
                            break;
                        }
                    case 56:
                        {
                            MaxHandSize = input.ReadUInt32();
                            break;
                        }
                    case 72:
                        {
                            TurnNumber = input.ReadUInt32();
                            break;
                        }
                    case 80:
                        {
                            TeamId = input.ReadUInt32();
                            break;
                        }
                    case 90:
                    case 88:
                        {
                            timerIds_.AddEntriesFrom(input, _repeated_timerIds_codec);
                            break;
                        }
                    case 96:
                        {
                            ControllerSeatId = input.ReadUInt32();
                            break;
                        }
                    case 104:
                        {
                            controllerType_ = (ControllerType)input.ReadEnum();
                            break;
                        }
                    case 112:
                        {
                            TimeoutCount = input.ReadUInt32();
                            break;
                        }
                    case 120:
                        {
                            PipCount = input.ReadUInt32();
                            break;
                        }
                    case 128:
                        {
                            pendingMessageType_ = (ClientMessageType)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerMetricKeyValuePair : pb::IMessage<PlayerMetricKeyValuePair>
    {
        private static readonly pb::MessageParser<PlayerMetricKeyValuePair> _parser = new pb::MessageParser<PlayerMetricKeyValuePair>(() => new PlayerMetricKeyValuePair());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerMetricKeyValuePair> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[251]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerMetricKeyValuePair()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerMetricKeyValuePair(PlayerMetricKeyValuePair other) : this()
        {
            key_ = other.key_;
            value_ = other.value_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerMetricKeyValuePair Clone()
        {
            return new PlayerMetricKeyValuePair(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key
        {
            get { return key_; }
            set
            {
                key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private int value_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Value
        {
            get { return value_; }
            set
            {
                value_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerMetricKeyValuePair);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerMetricKeyValuePair other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Key != other.Key) return false;
            if (Value != other.Value) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Key.Length != 0) hash ^= Key.GetHashCode();
            if (Value != 0) hash ^= Value.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Key.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Key);
            }
            if (Value != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Value);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Key.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
            }
            if (Value != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerMetricKeyValuePair other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Key.Length != 0)
            {
                Key = other.Key;
            }
            if (other.Value != 0)
            {
                Value = other.Value;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Key = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            Value = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerMetrics : pb::IMessage<PlayerMetrics>
    {
        private static readonly pb::MessageParser<PlayerMetrics> _parser = new pb::MessageParser<PlayerMetrics>(() => new PlayerMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerMetrics> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[252]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerMetrics()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerMetrics(PlayerMetrics other) : this()
        {
            metrics_ = other.metrics_.Clone();
            playerId_ = other.playerId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerMetrics Clone()
        {
            return new PlayerMetrics(this);
        }

        /// <summary>Field number for the "metrics" field.</summary>
        public const int MetricsFieldNumber = 2;
        private static readonly pb::FieldCodec<KeyValuePairInfo> _repeated_metrics_codec
            = pb::FieldCodec.ForMessage(18, KeyValuePairInfo.Parser);
        private readonly pbc::RepeatedField<KeyValuePairInfo> metrics_ = new pbc::RepeatedField<KeyValuePairInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<KeyValuePairInfo> Metrics
        {
            get { return metrics_; }
        }

        /// <summary>Field number for the "playerId" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private uint playerId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerId
        {
            get { return playerId_; }
            set
            {
                playerId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerMetrics);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerMetrics other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!metrics_.Equals(other.metrics_)) return false;
            if (PlayerId != other.PlayerId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= metrics_.GetHashCode();
            if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PlayerId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(PlayerId);
            }
            metrics_.WriteTo(output, _repeated_metrics_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += metrics_.CalculateSize(_repeated_metrics_codec);
            if (PlayerId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerMetrics other)
        {
            if (other == null)
            {
                return;
            }
            metrics_.Add(other.metrics_);
            if (other.PlayerId != 0)
            {
                PlayerId = other.PlayerId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            PlayerId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Prompt : pb::IMessage<Prompt>
    {
        private static readonly pb::MessageParser<Prompt> _parser = new pb::MessageParser<Prompt>(() => new Prompt());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Prompt> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[253]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt(Prompt other) : this()
        {
            parameters_ = other.parameters_.Clone();
            choices_ = other.choices_.Clone();
            promptId_ = other.promptId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt Clone()
        {
            return new Prompt(this);
        }

        /// <summary>Field number for the "parameters" field.</summary>
        public const int ParametersFieldNumber = 2;
        private static readonly pb::FieldCodec<PromptParameter> _repeated_parameters_codec
            = pb::FieldCodec.ForMessage(18, PromptParameter.Parser);
        private readonly pbc::RepeatedField<PromptParameter> parameters_ = new pbc::RepeatedField<PromptParameter>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<PromptParameter> Parameters
        {
            get { return parameters_; }
        }

        /// <summary>Field number for the "choices" field.</summary>
        public const int ChoicesFieldNumber = 3;
        private static readonly pb::FieldCodec<Choice> _repeated_choices_codec
            = pb::FieldCodec.ForMessage(26, Choice.Parser);
        private readonly pbc::RepeatedField<Choice> choices_ = new pbc::RepeatedField<Choice>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Choice> Choices
        {
            get { return choices_; }
        }

        /// <summary>Field number for the "promptId" field.</summary>
        public const int PromptIdFieldNumber = 1;
        private uint promptId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PromptId
        {
            get { return promptId_; }
            set
            {
                promptId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Prompt);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Prompt other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!parameters_.Equals(other.parameters_)) return false;
            if (!choices_.Equals(other.choices_)) return false;
            if (PromptId != other.PromptId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= parameters_.GetHashCode();
            hash ^= choices_.GetHashCode();
            if (PromptId != 0) hash ^= PromptId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PromptId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(PromptId);
            }
            parameters_.WriteTo(output, _repeated_parameters_codec);
            choices_.WriteTo(output, _repeated_choices_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += parameters_.CalculateSize(_repeated_parameters_codec);
            size += choices_.CalculateSize(_repeated_choices_codec);
            if (PromptId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PromptId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Prompt other)
        {
            if (other == null)
            {
                return;
            }
            parameters_.Add(other.parameters_);
            choices_.Add(other.choices_);
            if (other.PromptId != 0)
            {
                PromptId = other.PromptId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            PromptId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
                            break;
                        }
                    case 26:
                        {
                            choices_.AddEntriesFrom(input, _repeated_choices_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PromptParameter : pb::IMessage<PromptParameter>
    {
        private static readonly pb::MessageParser<PromptParameter> _parser = new pb::MessageParser<PromptParameter>(() => new PromptParameter());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PromptParameter> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[254]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PromptParameter()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PromptParameter(PromptParameter other) : this()
        {
            parameterName_ = other.parameterName_;
            stringValue_ = other.stringValue_;
            repeatedNumbers_ = other.repeatedNumbers_.Clone();
            type_ = other.type_;
            reference_ = other.reference_ != null ? other.reference_.Clone() : null;
            numberValue_ = other.numberValue_;
            promptId_ = other.promptId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PromptParameter Clone()
        {
            return new PromptParameter(this);
        }

        /// <summary>Field number for the "parameterName" field.</summary>
        public const int ParameterNameFieldNumber = 1;
        private string parameterName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ParameterName
        {
            get { return parameterName_; }
            set
            {
                parameterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "stringValue" field.</summary>
        public const int StringValueFieldNumber = 4;
        private string stringValue_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StringValue
        {
            get { return stringValue_; }
            set
            {
                stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "repeatedNumbers" field.</summary>
        public const int RepeatedNumbersFieldNumber = 6;
        private static readonly pb::FieldCodec<int> _repeated_repeatedNumbers_codec
            = pb::FieldCodec.ForInt32(50);
        private readonly pbc::RepeatedField<int> repeatedNumbers_ = new pbc::RepeatedField<int>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> RepeatedNumbers
        {
            get { return repeatedNumbers_; }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private ParameterType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParameterType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "reference" field.</summary>
        public const int ReferenceFieldNumber = 3;
        private Reference reference_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reference Reference
        {
            get { return reference_; }
            set
            {
                reference_ = value;
            }
        }

        /// <summary>Field number for the "numberValue" field.</summary>
        public const int NumberValueFieldNumber = 5;
        private int numberValue_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NumberValue
        {
            get { return numberValue_; }
            set
            {
                numberValue_ = value;
            }
        }

        /// <summary>Field number for the "promptId" field.</summary>
        public const int PromptIdFieldNumber = 7;
        private int promptId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PromptId
        {
            get { return promptId_; }
            set
            {
                promptId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PromptParameter);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PromptParameter other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ParameterName != other.ParameterName) return false;
            if (StringValue != other.StringValue) return false;
            if (!repeatedNumbers_.Equals(other.repeatedNumbers_)) return false;
            if (Type != other.Type) return false;
            if (!object.Equals(Reference, other.Reference)) return false;
            if (NumberValue != other.NumberValue) return false;
            if (PromptId != other.PromptId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ParameterName.Length != 0) hash ^= ParameterName.GetHashCode();
            if (StringValue.Length != 0) hash ^= StringValue.GetHashCode();
            hash ^= repeatedNumbers_.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (reference_ != null) hash ^= Reference.GetHashCode();
            if (NumberValue != 0) hash ^= NumberValue.GetHashCode();
            if (PromptId != 0) hash ^= PromptId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ParameterName.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ParameterName);
            }
            if (Type != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Type);
            }
            if (reference_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Reference);
            }
            if (StringValue.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(StringValue);
            }
            if (NumberValue != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(NumberValue);
            }
            repeatedNumbers_.WriteTo(output, _repeated_repeatedNumbers_codec);
            if (PromptId != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(PromptId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ParameterName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ParameterName);
            }
            if (StringValue.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
            }
            size += repeatedNumbers_.CalculateSize(_repeated_repeatedNumbers_codec);
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (reference_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reference);
            }
            if (NumberValue != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberValue);
            }
            if (PromptId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PromptId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PromptParameter other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ParameterName.Length != 0)
            {
                ParameterName = other.ParameterName;
            }
            if (other.StringValue.Length != 0)
            {
                StringValue = other.StringValue;
            }
            repeatedNumbers_.Add(other.repeatedNumbers_);
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.reference_ != null)
            {
                if (reference_ == null)
                {
                    reference_ = new Reference();
                }
                Reference.MergeFrom(other.Reference);
            }
            if (other.NumberValue != 0)
            {
                NumberValue = other.NumberValue;
            }
            if (other.PromptId != 0)
            {
                PromptId = other.PromptId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ParameterName = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            type_ = (ParameterType)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            if (reference_ == null)
                            {
                                reference_ = new Reference();
                            }
                            input.ReadMessage(reference_);
                            break;
                        }
                    case 34:
                        {
                            StringValue = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            NumberValue = input.ReadInt32();
                            break;
                        }
                    case 50:
                    case 48:
                        {
                            repeatedNumbers_.AddEntriesFrom(input, _repeated_repeatedNumbers_codec);
                            break;
                        }
                    case 56:
                        {
                            PromptId = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class QueueInfo : pb::IMessage<QueueInfo>
    {
        private static readonly pb::MessageParser<QueueInfo> _parser = new pb::MessageParser<QueueInfo>(() => new QueueInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<QueueInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[255]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueueInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueueInfo(QueueInfo other) : this()
        {
            eventId_ = other.eventId_;
            queueServiceBaseUri_ = other.queueServiceBaseUri_;
            queueServiceErrorCallbackUri_ = other.queueServiceErrorCallbackUri_;
            queueServiceOutputCallbackUri_ = other.queueServiceOutputCallbackUri_;
            queueType_ = other.queueType_;
            minimumPlayerCount_ = other.minimumPlayerCount_;
            playerBatchSize_ = other.playerBatchSize_;
            triggerCadenceMs_ = other.triggerCadenceMs_;
            createdTimestamp_ = other.createdTimestamp_;
            updatedTimestamp_ = other.updatedTimestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueueInfo Clone()
        {
            return new QueueInfo(this);
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 2;
        private string eventId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "queueServiceBaseUri" field.</summary>
        public const int QueueServiceBaseUriFieldNumber = 5;
        private string queueServiceBaseUri_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string QueueServiceBaseUri
        {
            get { return queueServiceBaseUri_; }
            set
            {
                queueServiceBaseUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "queueServiceErrorCallbackUri" field.</summary>
        public const int QueueServiceErrorCallbackUriFieldNumber = 6;
        private string queueServiceErrorCallbackUri_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string QueueServiceErrorCallbackUri
        {
            get { return queueServiceErrorCallbackUri_; }
            set
            {
                queueServiceErrorCallbackUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "queueServiceOutputCallbackUri" field.</summary>
        public const int QueueServiceOutputCallbackUriFieldNumber = 7;
        private string queueServiceOutputCallbackUri_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string QueueServiceOutputCallbackUri
        {
            get { return queueServiceOutputCallbackUri_; }
            set
            {
                queueServiceOutputCallbackUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "queueType" field.</summary>
        public const int QueueTypeFieldNumber = 3;
        private QueueType queueType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueueType QueueType
        {
            get { return queueType_; }
            set
            {
                queueType_ = value;
            }
        }

        /// <summary>Field number for the "minimumPlayerCount" field.</summary>
        public const int MinimumPlayerCountFieldNumber = 10;
        private int minimumPlayerCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MinimumPlayerCount
        {
            get { return minimumPlayerCount_; }
            set
            {
                minimumPlayerCount_ = value;
            }
        }

        /// <summary>Field number for the "playerBatchSize" field.</summary>
        public const int PlayerBatchSizeFieldNumber = 11;
        private int playerBatchSize_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerBatchSize
        {
            get { return playerBatchSize_; }
            set
            {
                playerBatchSize_ = value;
            }
        }

        /// <summary>Field number for the "triggerCadenceMs" field.</summary>
        public const int TriggerCadenceMsFieldNumber = 12;
        private int triggerCadenceMs_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TriggerCadenceMs
        {
            get { return triggerCadenceMs_; }
            set
            {
                triggerCadenceMs_ = value;
            }
        }

        /// <summary>Field number for the "createdTimestamp" field.</summary>
        public const int CreatedTimestampFieldNumber = 20;
        private long createdTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CreatedTimestamp
        {
            get { return createdTimestamp_; }
            set
            {
                createdTimestamp_ = value;
            }
        }

        /// <summary>Field number for the "updatedTimestamp" field.</summary>
        public const int UpdatedTimestampFieldNumber = 21;
        private long updatedTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long UpdatedTimestamp
        {
            get { return updatedTimestamp_; }
            set
            {
                updatedTimestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as QueueInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(QueueInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventId != other.EventId) return false;
            if (QueueServiceBaseUri != other.QueueServiceBaseUri) return false;
            if (QueueServiceErrorCallbackUri != other.QueueServiceErrorCallbackUri) return false;
            if (QueueServiceOutputCallbackUri != other.QueueServiceOutputCallbackUri) return false;
            if (QueueType != other.QueueType) return false;
            if (MinimumPlayerCount != other.MinimumPlayerCount) return false;
            if (PlayerBatchSize != other.PlayerBatchSize) return false;
            if (TriggerCadenceMs != other.TriggerCadenceMs) return false;
            if (CreatedTimestamp != other.CreatedTimestamp) return false;
            if (UpdatedTimestamp != other.UpdatedTimestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventId.Length != 0) hash ^= EventId.GetHashCode();
            if (QueueServiceBaseUri.Length != 0) hash ^= QueueServiceBaseUri.GetHashCode();
            if (QueueServiceErrorCallbackUri.Length != 0) hash ^= QueueServiceErrorCallbackUri.GetHashCode();
            if (QueueServiceOutputCallbackUri.Length != 0) hash ^= QueueServiceOutputCallbackUri.GetHashCode();
            if (QueueType != 0) hash ^= QueueType.GetHashCode();
            if (MinimumPlayerCount != 0) hash ^= MinimumPlayerCount.GetHashCode();
            if (PlayerBatchSize != 0) hash ^= PlayerBatchSize.GetHashCode();
            if (TriggerCadenceMs != 0) hash ^= TriggerCadenceMs.GetHashCode();
            if (CreatedTimestamp != 0L) hash ^= CreatedTimestamp.GetHashCode();
            if (UpdatedTimestamp != 0L) hash ^= UpdatedTimestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EventId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(EventId);
            }
            if (QueueType != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)QueueType);
            }
            if (QueueServiceBaseUri.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(QueueServiceBaseUri);
            }
            if (QueueServiceErrorCallbackUri.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(QueueServiceErrorCallbackUri);
            }
            if (QueueServiceOutputCallbackUri.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(QueueServiceOutputCallbackUri);
            }
            if (MinimumPlayerCount != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(MinimumPlayerCount);
            }
            if (PlayerBatchSize != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(PlayerBatchSize);
            }
            if (TriggerCadenceMs != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(TriggerCadenceMs);
            }
            if (CreatedTimestamp != 0L)
            {
                output.WriteRawTag(160, 1);
                output.WriteInt64(CreatedTimestamp);
            }
            if (UpdatedTimestamp != 0L)
            {
                output.WriteRawTag(168, 1);
                output.WriteInt64(UpdatedTimestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
            }
            if (QueueServiceBaseUri.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueServiceBaseUri);
            }
            if (QueueServiceErrorCallbackUri.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueServiceErrorCallbackUri);
            }
            if (QueueServiceOutputCallbackUri.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueServiceOutputCallbackUri);
            }
            if (QueueType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)QueueType);
            }
            if (MinimumPlayerCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumPlayerCount);
            }
            if (PlayerBatchSize != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerBatchSize);
            }
            if (TriggerCadenceMs != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerCadenceMs);
            }
            if (CreatedTimestamp != 0L)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(CreatedTimestamp);
            }
            if (UpdatedTimestamp != 0L)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(UpdatedTimestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(QueueInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventId.Length != 0)
            {
                EventId = other.EventId;
            }
            if (other.QueueServiceBaseUri.Length != 0)
            {
                QueueServiceBaseUri = other.QueueServiceBaseUri;
            }
            if (other.QueueServiceErrorCallbackUri.Length != 0)
            {
                QueueServiceErrorCallbackUri = other.QueueServiceErrorCallbackUri;
            }
            if (other.QueueServiceOutputCallbackUri.Length != 0)
            {
                QueueServiceOutputCallbackUri = other.QueueServiceOutputCallbackUri;
            }
            if (other.QueueType != 0)
            {
                QueueType = other.QueueType;
            }
            if (other.MinimumPlayerCount != 0)
            {
                MinimumPlayerCount = other.MinimumPlayerCount;
            }
            if (other.PlayerBatchSize != 0)
            {
                PlayerBatchSize = other.PlayerBatchSize;
            }
            if (other.TriggerCadenceMs != 0)
            {
                TriggerCadenceMs = other.TriggerCadenceMs;
            }
            if (other.CreatedTimestamp != 0L)
            {
                CreatedTimestamp = other.CreatedTimestamp;
            }
            if (other.UpdatedTimestamp != 0L)
            {
                UpdatedTimestamp = other.UpdatedTimestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 18:
                        {
                            EventId = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            queueType_ = (QueueType)input.ReadEnum();
                            break;
                        }
                    case 42:
                        {
                            QueueServiceBaseUri = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            QueueServiceErrorCallbackUri = input.ReadString();
                            break;
                        }
                    case 58:
                        {
                            QueueServiceOutputCallbackUri = input.ReadString();
                            break;
                        }
                    case 80:
                        {
                            MinimumPlayerCount = input.ReadInt32();
                            break;
                        }
                    case 88:
                        {
                            PlayerBatchSize = input.ReadInt32();
                            break;
                        }
                    case 96:
                        {
                            TriggerCadenceMs = input.ReadInt32();
                            break;
                        }
                    case 160:
                        {
                            CreatedTimestamp = input.ReadInt64();
                            break;
                        }
                    case 168:
                        {
                            UpdatedTimestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Reference : pb::IMessage<Reference>
    {
        private static readonly pb::MessageParser<Reference> _parser = new pb::MessageParser<Reference>(() => new Reference());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Reference> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[256]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reference()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reference(Reference other) : this()
        {
            field_ = other.field_;
            debugValue_ = other.debugValue_;
            type_ = other.type_;
            id_ = other.id_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reference Clone()
        {
            return new Reference(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 3;
        private string field_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field
        {
            get { return field_; }
            set
            {
                field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "debugValue" field.</summary>
        public const int DebugValueFieldNumber = 4;
        private string debugValue_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DebugValue
        {
            get { return debugValue_; }
            set
            {
                debugValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private ReferenceType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReferenceType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 2;
        private uint id_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id
        {
            get { return id_; }
            set
            {
                id_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Reference);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Reference other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Field != other.Field) return false;
            if (DebugValue != other.DebugValue) return false;
            if (Type != other.Type) return false;
            if (Id != other.Id) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Field.Length != 0) hash ^= Field.GetHashCode();
            if (DebugValue.Length != 0) hash ^= DebugValue.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (Id != 0) hash ^= Id.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (Id != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Id);
            }
            if (Field.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Field);
            }
            if (DebugValue.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(DebugValue);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Field.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
            }
            if (DebugValue.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DebugValue);
            }
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (Id != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Reference other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Field.Length != 0)
            {
                Field = other.Field;
            }
            if (other.DebugValue.Length != 0)
            {
                DebugValue = other.DebugValue;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            type_ = (ReferenceType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            Id = input.ReadUInt32();
                            break;
                        }
                    case 26:
                        {
                            Field = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            DebugValue = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ReplacementEffect : pb::IMessage<ReplacementEffect>
    {
        private static readonly pb::MessageParser<ReplacementEffect> _parser = new pb::MessageParser<ReplacementEffect>(() => new ReplacementEffect());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReplacementEffect> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[257]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplacementEffect()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplacementEffect(ReplacementEffect other) : this()
        {
            objectInstance_ = other.objectInstance_;
            abilityInstance_ = other.abilityInstance_;
            abilityGrpId_ = other.abilityGrpId_;
            affectedObject_ = other.affectedObject_;
            replacementEffectId_ = other.replacementEffectId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplacementEffect Clone()
        {
            return new ReplacementEffect(this);
        }

        /// <summary>Field number for the "objectInstance" field.</summary>
        public const int ObjectInstanceFieldNumber = 1;
        private uint objectInstance_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ObjectInstance
        {
            get { return objectInstance_; }
            set
            {
                objectInstance_ = value;
            }
        }

        /// <summary>Field number for the "abilityInstance" field.</summary>
        public const int AbilityInstanceFieldNumber = 2;
        private uint abilityInstance_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityInstance
        {
            get { return abilityInstance_; }
            set
            {
                abilityInstance_ = value;
            }
        }

        /// <summary>Field number for the "abilityGrpId" field.</summary>
        public const int AbilityGrpIdFieldNumber = 4;
        private uint abilityGrpId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityGrpId
        {
            get { return abilityGrpId_; }
            set
            {
                abilityGrpId_ = value;
            }
        }

        /// <summary>Field number for the "affectedObject" field.</summary>
        public const int AffectedObjectFieldNumber = 5;
        private uint affectedObject_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AffectedObject
        {
            get { return affectedObject_; }
            set
            {
                affectedObject_ = value;
            }
        }

        /// <summary>Field number for the "replacementEffectId" field.</summary>
        public const int ReplacementEffectIdFieldNumber = 6;
        private uint replacementEffectId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ReplacementEffectId
        {
            get { return replacementEffectId_; }
            set
            {
                replacementEffectId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ReplacementEffect);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReplacementEffect other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ObjectInstance != other.ObjectInstance) return false;
            if (AbilityInstance != other.AbilityInstance) return false;
            if (AbilityGrpId != other.AbilityGrpId) return false;
            if (AffectedObject != other.AffectedObject) return false;
            if (ReplacementEffectId != other.ReplacementEffectId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ObjectInstance != 0) hash ^= ObjectInstance.GetHashCode();
            if (AbilityInstance != 0) hash ^= AbilityInstance.GetHashCode();
            if (AbilityGrpId != 0) hash ^= AbilityGrpId.GetHashCode();
            if (AffectedObject != 0) hash ^= AffectedObject.GetHashCode();
            if (ReplacementEffectId != 0) hash ^= ReplacementEffectId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ObjectInstance != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(ObjectInstance);
            }
            if (AbilityInstance != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(AbilityInstance);
            }
            if (AbilityGrpId != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(AbilityGrpId);
            }
            if (AffectedObject != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(AffectedObject);
            }
            if (ReplacementEffectId != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(ReplacementEffectId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ObjectInstance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectInstance);
            }
            if (AbilityInstance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityInstance);
            }
            if (AbilityGrpId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityGrpId);
            }
            if (AffectedObject != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AffectedObject);
            }
            if (ReplacementEffectId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReplacementEffectId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReplacementEffect other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ObjectInstance != 0)
            {
                ObjectInstance = other.ObjectInstance;
            }
            if (other.AbilityInstance != 0)
            {
                AbilityInstance = other.AbilityInstance;
            }
            if (other.AbilityGrpId != 0)
            {
                AbilityGrpId = other.AbilityGrpId;
            }
            if (other.AffectedObject != 0)
            {
                AffectedObject = other.AffectedObject;
            }
            if (other.ReplacementEffectId != 0)
            {
                ReplacementEffectId = other.ReplacementEffectId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ObjectInstance = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            AbilityInstance = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            AbilityGrpId = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            AffectedObject = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            ReplacementEffectId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ReportResultMessage : pb::IMessage<ReportResultMessage>
    {
        private static readonly pb::MessageParser<ReportResultMessage> _parser = new pb::MessageParser<ReportResultMessage>(() => new ReportResultMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReportResultMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[258]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReportResultMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReportResultMessage(ReportResultMessage other) : this()
        {
            result_ = other.result_ != null ? other.result_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReportResultMessage Clone()
        {
            return new ReportResultMessage(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private ResultSpec result_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultSpec Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ReportResultMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReportResultMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Result, other.Result)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (result_ != null) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (result_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (result_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReportResultMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.result_ != null)
            {
                if (result_ == null)
                {
                    result_ = new ResultSpec();
                }
                Result.MergeFrom(other.Result);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (result_ == null)
                            {
                                result_ = new ResultSpec();
                            }
                            input.ReadMessage(result_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResultSpec : pb::IMessage<ResultSpec>
    {
        private static readonly pb::MessageParser<ResultSpec> _parser = new pb::MessageParser<ResultSpec>(() => new ResultSpec());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResultSpec> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[259]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultSpec()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultSpec(ResultSpec other) : this()
        {
            scope_ = other.scope_;
            result_ = other.result_;
            winningTeamId_ = other.winningTeamId_;
            reason_ = other.reason_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultSpec Clone()
        {
            return new ResultSpec(this);
        }

        /// <summary>Field number for the "scope" field.</summary>
        public const int ScopeFieldNumber = 1;
        private MatchScope scope_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchScope Scope
        {
            get { return scope_; }
            set
            {
                scope_ = value;
            }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private ResultType result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultType Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        /// <summary>Field number for the "winningTeamId" field.</summary>
        public const int WinningTeamIdFieldNumber = 3;
        private uint winningTeamId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WinningTeamId
        {
            get { return winningTeamId_; }
            set
            {
                winningTeamId_ = value;
            }
        }

        /// <summary>Field number for the "reason" field.</summary>
        public const int ReasonFieldNumber = 4;
        private ResultReason reason_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultReason Reason
        {
            get { return reason_; }
            set
            {
                reason_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResultSpec);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResultSpec other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Scope != other.Scope) return false;
            if (Result != other.Result) return false;
            if (WinningTeamId != other.WinningTeamId) return false;
            if (Reason != other.Reason) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Scope != 0) hash ^= Scope.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (WinningTeamId != 0) hash ^= WinningTeamId.GetHashCode();
            if (Reason != 0) hash ^= Reason.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Scope != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Scope);
            }
            if (Result != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Result);
            }
            if (WinningTeamId != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(WinningTeamId);
            }
            if (Reason != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)Reason);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Scope != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Scope);
            }
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (WinningTeamId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinningTeamId);
            }
            if (Reason != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Reason);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResultSpec other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Scope != 0)
            {
                Scope = other.Scope;
            }
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            if (other.WinningTeamId != 0)
            {
                WinningTeamId = other.WinningTeamId;
            }
            if (other.Reason != 0)
            {
                Reason = other.Reason;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            scope_ = (MatchScope)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            result_ = (ResultType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            WinningTeamId = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            reason_ = (ResultReason)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SearchFromGroupsReq : pb::IMessage<SearchFromGroupsReq>
    {
        private static readonly pb::MessageParser<SearchFromGroupsReq> _parser = new pb::MessageParser<SearchFromGroupsReq>(() => new SearchFromGroupsReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SearchFromGroupsReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[260]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchFromGroupsReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchFromGroupsReq(SearchFromGroupsReq other) : this()
        {
            zonesToSearch_ = other.zonesToSearch_.Clone();
            groups_ = other.groups_.Clone();
            optionIndex_ = other.optionIndex_;
            minFind_ = other.minFind_;
            maxFind_ = other.maxFind_;
            groupingStyle_ = other.groupingStyle_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchFromGroupsReq Clone()
        {
            return new SearchFromGroupsReq(this);
        }

        /// <summary>Field number for the "zonesToSearch" field.</summary>
        public const int ZonesToSearchFieldNumber = 4;
        private static readonly pb::FieldCodec<uint> _repeated_zonesToSearch_codec
            = pb::FieldCodec.ForUInt32(34);
        private readonly pbc::RepeatedField<uint> zonesToSearch_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ZonesToSearch
        {
            get { return zonesToSearch_; }
        }

        /// <summary>Field number for the "groups" field.</summary>
        public const int GroupsFieldNumber = 5;
        private static readonly pb::FieldCodec<Group> _repeated_groups_codec
            = pb::FieldCodec.ForMessage(42, Group.Parser);
        private readonly pbc::RepeatedField<Group> groups_ = new pbc::RepeatedField<Group>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Group> Groups
        {
            get { return groups_; }
        }

        /// <summary>Field number for the "optionIndex" field.</summary>
        public const int OptionIndexFieldNumber = 1;
        private uint optionIndex_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OptionIndex
        {
            get { return optionIndex_; }
            set
            {
                optionIndex_ = value;
            }
        }

        /// <summary>Field number for the "minFind" field.</summary>
        public const int MinFindFieldNumber = 2;
        private uint minFind_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinFind
        {
            get { return minFind_; }
            set
            {
                minFind_ = value;
            }
        }

        /// <summary>Field number for the "maxFind" field.</summary>
        public const int MaxFindFieldNumber = 3;
        private uint maxFind_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxFind
        {
            get { return maxFind_; }
            set
            {
                maxFind_ = value;
            }
        }

        /// <summary>Field number for the "groupingStyle" field.</summary>
        public const int GroupingStyleFieldNumber = 6;
        private GroupingStyle groupingStyle_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupingStyle GroupingStyle
        {
            get { return groupingStyle_; }
            set
            {
                groupingStyle_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SearchFromGroupsReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SearchFromGroupsReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!zonesToSearch_.Equals(other.zonesToSearch_)) return false;
            if (!groups_.Equals(other.groups_)) return false;
            if (OptionIndex != other.OptionIndex) return false;
            if (MinFind != other.MinFind) return false;
            if (MaxFind != other.MaxFind) return false;
            if (GroupingStyle != other.GroupingStyle) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= zonesToSearch_.GetHashCode();
            hash ^= groups_.GetHashCode();
            if (OptionIndex != 0) hash ^= OptionIndex.GetHashCode();
            if (MinFind != 0) hash ^= MinFind.GetHashCode();
            if (MaxFind != 0) hash ^= MaxFind.GetHashCode();
            if (GroupingStyle != 0) hash ^= GroupingStyle.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OptionIndex != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OptionIndex);
            }
            if (MinFind != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MinFind);
            }
            if (MaxFind != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MaxFind);
            }
            zonesToSearch_.WriteTo(output, _repeated_zonesToSearch_codec);
            groups_.WriteTo(output, _repeated_groups_codec);
            if (GroupingStyle != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)GroupingStyle);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += zonesToSearch_.CalculateSize(_repeated_zonesToSearch_codec);
            size += groups_.CalculateSize(_repeated_groups_codec);
            if (OptionIndex != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptionIndex);
            }
            if (MinFind != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinFind);
            }
            if (MaxFind != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxFind);
            }
            if (GroupingStyle != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GroupingStyle);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SearchFromGroupsReq other)
        {
            if (other == null)
            {
                return;
            }
            zonesToSearch_.Add(other.zonesToSearch_);
            groups_.Add(other.groups_);
            if (other.OptionIndex != 0)
            {
                OptionIndex = other.OptionIndex;
            }
            if (other.MinFind != 0)
            {
                MinFind = other.MinFind;
            }
            if (other.MaxFind != 0)
            {
                MaxFind = other.MaxFind;
            }
            if (other.GroupingStyle != 0)
            {
                GroupingStyle = other.GroupingStyle;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            OptionIndex = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            MinFind = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            MaxFind = input.ReadUInt32();
                            break;
                        }
                    case 34:
                    case 32:
                        {
                            zonesToSearch_.AddEntriesFrom(input, _repeated_zonesToSearch_codec);
                            break;
                        }
                    case 42:
                        {
                            groups_.AddEntriesFrom(input, _repeated_groups_codec);
                            break;
                        }
                    case 48:
                        {
                            groupingStyle_ = (GroupingStyle)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SearchFromGroupsResp : pb::IMessage<SearchFromGroupsResp>
    {
        private static readonly pb::MessageParser<SearchFromGroupsResp> _parser = new pb::MessageParser<SearchFromGroupsResp>(() => new SearchFromGroupsResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SearchFromGroupsResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[261]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchFromGroupsResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchFromGroupsResp(SearchFromGroupsResp other) : this()
        {
            itemsFound_ = other.itemsFound_.Clone();
            optionIndex_ = other.optionIndex_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchFromGroupsResp Clone()
        {
            return new SearchFromGroupsResp(this);
        }

        /// <summary>Field number for the "itemsFound" field.</summary>
        public const int ItemsFoundFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_itemsFound_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> itemsFound_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ItemsFound
        {
            get { return itemsFound_; }
        }

        /// <summary>Field number for the "optionIndex" field.</summary>
        public const int OptionIndexFieldNumber = 1;
        private uint optionIndex_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OptionIndex
        {
            get { return optionIndex_; }
            set
            {
                optionIndex_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SearchFromGroupsResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SearchFromGroupsResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!itemsFound_.Equals(other.itemsFound_)) return false;
            if (OptionIndex != other.OptionIndex) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= itemsFound_.GetHashCode();
            if (OptionIndex != 0) hash ^= OptionIndex.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OptionIndex != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OptionIndex);
            }
            itemsFound_.WriteTo(output, _repeated_itemsFound_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += itemsFound_.CalculateSize(_repeated_itemsFound_codec);
            if (OptionIndex != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptionIndex);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SearchFromGroupsResp other)
        {
            if (other == null)
            {
                return;
            }
            itemsFound_.Add(other.itemsFound_);
            if (other.OptionIndex != 0)
            {
                OptionIndex = other.OptionIndex;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            OptionIndex = input.ReadUInt32();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            itemsFound_.AddEntriesFrom(input, _repeated_itemsFound_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SearchReq : pb::IMessage<SearchReq>
    {
        private static readonly pb::MessageParser<SearchReq> _parser = new pb::MessageParser<SearchReq>(() => new SearchReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SearchReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[262]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchReq(SearchReq other) : this()
        {
            zonesToSearch_ = other.zonesToSearch_.Clone();
            itemsToSearch_ = other.itemsToSearch_.Clone();
            itemsSought_ = other.itemsSought_.Clone();
            optionIndex_ = other.optionIndex_;
            minFind_ = other.minFind_;
            maxFind_ = other.maxFind_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchReq Clone()
        {
            return new SearchReq(this);
        }

        /// <summary>Field number for the "zonesToSearch" field.</summary>
        public const int ZonesToSearchFieldNumber = 4;
        private static readonly pb::FieldCodec<uint> _repeated_zonesToSearch_codec
            = pb::FieldCodec.ForUInt32(34);
        private readonly pbc::RepeatedField<uint> zonesToSearch_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ZonesToSearch
        {
            get { return zonesToSearch_; }
        }

        /// <summary>Field number for the "itemsToSearch" field.</summary>
        public const int ItemsToSearchFieldNumber = 5;
        private static readonly pb::FieldCodec<uint> _repeated_itemsToSearch_codec
            = pb::FieldCodec.ForUInt32(42);
        private readonly pbc::RepeatedField<uint> itemsToSearch_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ItemsToSearch
        {
            get { return itemsToSearch_; }
        }

        /// <summary>Field number for the "itemsSought" field.</summary>
        public const int ItemsSoughtFieldNumber = 6;
        private static readonly pb::FieldCodec<uint> _repeated_itemsSought_codec
            = pb::FieldCodec.ForUInt32(50);
        private readonly pbc::RepeatedField<uint> itemsSought_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ItemsSought
        {
            get { return itemsSought_; }
        }

        /// <summary>Field number for the "optionIndex" field.</summary>
        public const int OptionIndexFieldNumber = 1;
        private uint optionIndex_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OptionIndex
        {
            get { return optionIndex_; }
            set
            {
                optionIndex_ = value;
            }
        }

        /// <summary>Field number for the "minFind" field.</summary>
        public const int MinFindFieldNumber = 2;
        private uint minFind_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinFind
        {
            get { return minFind_; }
            set
            {
                minFind_ = value;
            }
        }

        /// <summary>Field number for the "maxFind" field.</summary>
        public const int MaxFindFieldNumber = 3;
        private uint maxFind_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxFind
        {
            get { return maxFind_; }
            set
            {
                maxFind_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SearchReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SearchReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!zonesToSearch_.Equals(other.zonesToSearch_)) return false;
            if (!itemsToSearch_.Equals(other.itemsToSearch_)) return false;
            if (!itemsSought_.Equals(other.itemsSought_)) return false;
            if (OptionIndex != other.OptionIndex) return false;
            if (MinFind != other.MinFind) return false;
            if (MaxFind != other.MaxFind) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= zonesToSearch_.GetHashCode();
            hash ^= itemsToSearch_.GetHashCode();
            hash ^= itemsSought_.GetHashCode();
            if (OptionIndex != 0) hash ^= OptionIndex.GetHashCode();
            if (MinFind != 0) hash ^= MinFind.GetHashCode();
            if (MaxFind != 0) hash ^= MaxFind.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OptionIndex != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OptionIndex);
            }
            if (MinFind != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MinFind);
            }
            if (MaxFind != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MaxFind);
            }
            zonesToSearch_.WriteTo(output, _repeated_zonesToSearch_codec);
            itemsToSearch_.WriteTo(output, _repeated_itemsToSearch_codec);
            itemsSought_.WriteTo(output, _repeated_itemsSought_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += zonesToSearch_.CalculateSize(_repeated_zonesToSearch_codec);
            size += itemsToSearch_.CalculateSize(_repeated_itemsToSearch_codec);
            size += itemsSought_.CalculateSize(_repeated_itemsSought_codec);
            if (OptionIndex != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptionIndex);
            }
            if (MinFind != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinFind);
            }
            if (MaxFind != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxFind);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SearchReq other)
        {
            if (other == null)
            {
                return;
            }
            zonesToSearch_.Add(other.zonesToSearch_);
            itemsToSearch_.Add(other.itemsToSearch_);
            itemsSought_.Add(other.itemsSought_);
            if (other.OptionIndex != 0)
            {
                OptionIndex = other.OptionIndex;
            }
            if (other.MinFind != 0)
            {
                MinFind = other.MinFind;
            }
            if (other.MaxFind != 0)
            {
                MaxFind = other.MaxFind;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            OptionIndex = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            MinFind = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            MaxFind = input.ReadUInt32();
                            break;
                        }
                    case 34:
                    case 32:
                        {
                            zonesToSearch_.AddEntriesFrom(input, _repeated_zonesToSearch_codec);
                            break;
                        }
                    case 42:
                    case 40:
                        {
                            itemsToSearch_.AddEntriesFrom(input, _repeated_itemsToSearch_codec);
                            break;
                        }
                    case 50:
                    case 48:
                        {
                            itemsSought_.AddEntriesFrom(input, _repeated_itemsSought_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SearchResp : pb::IMessage<SearchResp>
    {
        private static readonly pb::MessageParser<SearchResp> _parser = new pb::MessageParser<SearchResp>(() => new SearchResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SearchResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[263]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchResp(SearchResp other) : this()
        {
            itemsFound_ = other.itemsFound_.Clone();
            optionIndex_ = other.optionIndex_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchResp Clone()
        {
            return new SearchResp(this);
        }

        /// <summary>Field number for the "itemsFound" field.</summary>
        public const int ItemsFoundFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_itemsFound_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> itemsFound_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ItemsFound
        {
            get { return itemsFound_; }
        }

        /// <summary>Field number for the "optionIndex" field.</summary>
        public const int OptionIndexFieldNumber = 1;
        private uint optionIndex_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OptionIndex
        {
            get { return optionIndex_; }
            set
            {
                optionIndex_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SearchResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SearchResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!itemsFound_.Equals(other.itemsFound_)) return false;
            if (OptionIndex != other.OptionIndex) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= itemsFound_.GetHashCode();
            if (OptionIndex != 0) hash ^= OptionIndex.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OptionIndex != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OptionIndex);
            }
            itemsFound_.WriteTo(output, _repeated_itemsFound_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += itemsFound_.CalculateSize(_repeated_itemsFound_codec);
            if (OptionIndex != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptionIndex);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SearchResp other)
        {
            if (other == null)
            {
                return;
            }
            itemsFound_.Add(other.itemsFound_);
            if (other.OptionIndex != 0)
            {
                OptionIndex = other.OptionIndex;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            OptionIndex = input.ReadUInt32();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            itemsFound_.AddEntriesFrom(input, _repeated_itemsFound_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectCountersReq : pb::IMessage<SelectCountersReq>
    {
        private static readonly pb::MessageParser<SelectCountersReq> _parser = new pb::MessageParser<SelectCountersReq>(() => new SelectCountersReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectCountersReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[264]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectCountersReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectCountersReq(SelectCountersReq other) : this()
        {
            counters_ = other.counters_.Clone();
            minSel_ = other.minSel_;
            maxSel_ = other.maxSel_;
            context_ = other.context_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectCountersReq Clone()
        {
            return new SelectCountersReq(this);
        }

        /// <summary>Field number for the "counters" field.</summary>
        public const int CountersFieldNumber = 4;
        private static readonly pb::FieldCodec<Counter> _repeated_counters_codec
            = pb::FieldCodec.ForMessage(34, Counter.Parser);
        private readonly pbc::RepeatedField<Counter> counters_ = new pbc::RepeatedField<Counter>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Counter> Counters
        {
            get { return counters_; }
        }

        /// <summary>Field number for the "minSel" field.</summary>
        public const int MinSelFieldNumber = 1;
        private uint minSel_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinSel
        {
            get { return minSel_; }
            set
            {
                minSel_ = value;
            }
        }

        /// <summary>Field number for the "maxSel" field.</summary>
        public const int MaxSelFieldNumber = 2;
        private uint maxSel_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxSel
        {
            get { return maxSel_; }
            set
            {
                maxSel_ = value;
            }
        }

        /// <summary>Field number for the "context" field.</summary>
        public const int ContextFieldNumber = 3;
        private SelectionContext context_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectionContext Context
        {
            get { return context_; }
            set
            {
                context_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectCountersReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectCountersReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!counters_.Equals(other.counters_)) return false;
            if (MinSel != other.MinSel) return false;
            if (MaxSel != other.MaxSel) return false;
            if (Context != other.Context) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= counters_.GetHashCode();
            if (MinSel != 0) hash ^= MinSel.GetHashCode();
            if (MaxSel != 0) hash ^= MaxSel.GetHashCode();
            if (Context != 0) hash ^= Context.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MinSel != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(MinSel);
            }
            if (MaxSel != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MaxSel);
            }
            if (Context != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)Context);
            }
            counters_.WriteTo(output, _repeated_counters_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += counters_.CalculateSize(_repeated_counters_codec);
            if (MinSel != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinSel);
            }
            if (MaxSel != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSel);
            }
            if (Context != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Context);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectCountersReq other)
        {
            if (other == null)
            {
                return;
            }
            counters_.Add(other.counters_);
            if (other.MinSel != 0)
            {
                MinSel = other.MinSel;
            }
            if (other.MaxSel != 0)
            {
                MaxSel = other.MaxSel;
            }
            if (other.Context != 0)
            {
                Context = other.Context;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            MinSel = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            MaxSel = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            context_ = (SelectionContext)input.ReadEnum();
                            break;
                        }
                    case 34:
                        {
                            counters_.AddEntriesFrom(input, _repeated_counters_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectCountersResp : pb::IMessage<SelectCountersResp>
    {
        private static readonly pb::MessageParser<SelectCountersResp> _parser = new pb::MessageParser<SelectCountersResp>(() => new SelectCountersResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectCountersResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[265]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectCountersResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectCountersResp(SelectCountersResp other) : this()
        {
            counters_ = other.counters_.Clone();
            context_ = other.context_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectCountersResp Clone()
        {
            return new SelectCountersResp(this);
        }

        /// <summary>Field number for the "counters" field.</summary>
        public const int CountersFieldNumber = 2;
        private static readonly pb::FieldCodec<Counter> _repeated_counters_codec
            = pb::FieldCodec.ForMessage(18, Counter.Parser);
        private readonly pbc::RepeatedField<Counter> counters_ = new pbc::RepeatedField<Counter>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Counter> Counters
        {
            get { return counters_; }
        }

        /// <summary>Field number for the "context" field.</summary>
        public const int ContextFieldNumber = 1;
        private SelectionContext context_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectionContext Context
        {
            get { return context_; }
            set
            {
                context_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectCountersResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectCountersResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!counters_.Equals(other.counters_)) return false;
            if (Context != other.Context) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= counters_.GetHashCode();
            if (Context != 0) hash ^= Context.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Context != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Context);
            }
            counters_.WriteTo(output, _repeated_counters_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += counters_.CalculateSize(_repeated_counters_codec);
            if (Context != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Context);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectCountersResp other)
        {
            if (other == null)
            {
                return;
            }
            counters_.Add(other.counters_);
            if (other.Context != 0)
            {
                Context = other.Context;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            context_ = (SelectionContext)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            counters_.AddEntriesFrom(input, _repeated_counters_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectFromGroupsReq : pb::IMessage<SelectFromGroupsReq>
    {
        private static readonly pb::MessageParser<SelectFromGroupsReq> _parser = new pb::MessageParser<SelectFromGroupsReq>(() => new SelectFromGroupsReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectFromGroupsReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[266]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectFromGroupsReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectFromGroupsReq(SelectFromGroupsReq other) : this()
        {
            groups_ = other.groups_.Clone();
            idx_ = other.idx_;
            minTotalSel_ = other.minTotalSel_;
            maxTotalSel_ = other.maxTotalSel_;
            groupingStyle_ = other.groupingStyle_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectFromGroupsReq Clone()
        {
            return new SelectFromGroupsReq(this);
        }

        /// <summary>Field number for the "groups" field.</summary>
        public const int GroupsFieldNumber = 3;
        private static readonly pb::FieldCodec<Group> _repeated_groups_codec
            = pb::FieldCodec.ForMessage(26, Group.Parser);
        private readonly pbc::RepeatedField<Group> groups_ = new pbc::RepeatedField<Group>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Group> Groups
        {
            get { return groups_; }
        }

        /// <summary>Field number for the "idx" field.</summary>
        public const int IdxFieldNumber = 4;
        private uint idx_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Idx
        {
            get { return idx_; }
            set
            {
                idx_ = value;
            }
        }

        /// <summary>Field number for the "minTotalSel" field.</summary>
        public const int MinTotalSelFieldNumber = 5;
        private uint minTotalSel_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinTotalSel
        {
            get { return minTotalSel_; }
            set
            {
                minTotalSel_ = value;
            }
        }

        /// <summary>Field number for the "maxTotalSel" field.</summary>
        public const int MaxTotalSelFieldNumber = 6;
        private uint maxTotalSel_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxTotalSel
        {
            get { return maxTotalSel_; }
            set
            {
                maxTotalSel_ = value;
            }
        }

        /// <summary>Field number for the "groupingStyle" field.</summary>
        public const int GroupingStyleFieldNumber = 7;
        private GroupingStyle groupingStyle_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupingStyle GroupingStyle
        {
            get { return groupingStyle_; }
            set
            {
                groupingStyle_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectFromGroupsReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectFromGroupsReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!groups_.Equals(other.groups_)) return false;
            if (Idx != other.Idx) return false;
            if (MinTotalSel != other.MinTotalSel) return false;
            if (MaxTotalSel != other.MaxTotalSel) return false;
            if (GroupingStyle != other.GroupingStyle) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= groups_.GetHashCode();
            if (Idx != 0) hash ^= Idx.GetHashCode();
            if (MinTotalSel != 0) hash ^= MinTotalSel.GetHashCode();
            if (MaxTotalSel != 0) hash ^= MaxTotalSel.GetHashCode();
            if (GroupingStyle != 0) hash ^= GroupingStyle.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            groups_.WriteTo(output, _repeated_groups_codec);
            if (Idx != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(Idx);
            }
            if (MinTotalSel != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(MinTotalSel);
            }
            if (MaxTotalSel != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(MaxTotalSel);
            }
            if (GroupingStyle != 0)
            {
                output.WriteRawTag(56);
                output.WriteEnum((int)GroupingStyle);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += groups_.CalculateSize(_repeated_groups_codec);
            if (Idx != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idx);
            }
            if (MinTotalSel != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinTotalSel);
            }
            if (MaxTotalSel != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTotalSel);
            }
            if (GroupingStyle != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GroupingStyle);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectFromGroupsReq other)
        {
            if (other == null)
            {
                return;
            }
            groups_.Add(other.groups_);
            if (other.Idx != 0)
            {
                Idx = other.Idx;
            }
            if (other.MinTotalSel != 0)
            {
                MinTotalSel = other.MinTotalSel;
            }
            if (other.MaxTotalSel != 0)
            {
                MaxTotalSel = other.MaxTotalSel;
            }
            if (other.GroupingStyle != 0)
            {
                GroupingStyle = other.GroupingStyle;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 26:
                        {
                            groups_.AddEntriesFrom(input, _repeated_groups_codec);
                            break;
                        }
                    case 32:
                        {
                            Idx = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            MinTotalSel = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            MaxTotalSel = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            groupingStyle_ = (GroupingStyle)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectFromGroupsResp : pb::IMessage<SelectFromGroupsResp>
    {
        private static readonly pb::MessageParser<SelectFromGroupsResp> _parser = new pb::MessageParser<SelectFromGroupsResp>(() => new SelectFromGroupsResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectFromGroupsResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[267]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectFromGroupsResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectFromGroupsResp(SelectFromGroupsResp other) : this()
        {
            ids_ = other.ids_.Clone();
            idx_ = other.idx_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectFromGroupsResp Clone()
        {
            return new SelectFromGroupsResp(this);
        }

        /// <summary>Field number for the "ids" field.</summary>
        public const int IdsFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_ids_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> ids_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Ids
        {
            get { return ids_; }
        }

        /// <summary>Field number for the "idx" field.</summary>
        public const int IdxFieldNumber = 1;
        private uint idx_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Idx
        {
            get { return idx_; }
            set
            {
                idx_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectFromGroupsResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectFromGroupsResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!ids_.Equals(other.ids_)) return false;
            if (Idx != other.Idx) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= ids_.GetHashCode();
            if (Idx != 0) hash ^= Idx.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Idx != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Idx);
            }
            ids_.WriteTo(output, _repeated_ids_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += ids_.CalculateSize(_repeated_ids_codec);
            if (Idx != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idx);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectFromGroupsResp other)
        {
            if (other == null)
            {
                return;
            }
            ids_.Add(other.ids_);
            if (other.Idx != 0)
            {
                Idx = other.Idx;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Idx = input.ReadUInt32();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            ids_.AddEntriesFrom(input, _repeated_ids_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectManaTypeReq : pb::IMessage<SelectManaTypeReq>
    {
        private static readonly pb::MessageParser<SelectManaTypeReq> _parser = new pb::MessageParser<SelectManaTypeReq>(() => new SelectManaTypeReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectManaTypeReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[268]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectManaTypeReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectManaTypeReq(SelectManaTypeReq other) : this()
        {
            manaColors_ = other.manaColors_.Clone();
            index_ = other.index_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectManaTypeReq Clone()
        {
            return new SelectManaTypeReq(this);
        }

        /// <summary>Field number for the "manaColors" field.</summary>
        public const int ManaColorsFieldNumber = 2;
        private static readonly pb::FieldCodec<ManaColor> _repeated_manaColors_codec
            = pb::FieldCodec.ForEnum(18, x => (int)x, x => (ManaColor)x);
        private readonly pbc::RepeatedField<ManaColor> manaColors_ = new pbc::RepeatedField<ManaColor>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaColor> ManaColors
        {
            get { return manaColors_; }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index
        {
            get { return index_; }
            set
            {
                index_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectManaTypeReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectManaTypeReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!manaColors_.Equals(other.manaColors_)) return false;
            if (Index != other.Index) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= manaColors_.GetHashCode();
            if (Index != 0) hash ^= Index.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Index != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Index);
            }
            manaColors_.WriteTo(output, _repeated_manaColors_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += manaColors_.CalculateSize(_repeated_manaColors_codec);
            if (Index != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectManaTypeReq other)
        {
            if (other == null)
            {
                return;
            }
            manaColors_.Add(other.manaColors_);
            if (other.Index != 0)
            {
                Index = other.Index;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Index = input.ReadUInt32();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            manaColors_.AddEntriesFrom(input, _repeated_manaColors_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectManaTypeResp : pb::IMessage<SelectManaTypeResp>
    {
        private static readonly pb::MessageParser<SelectManaTypeResp> _parser = new pb::MessageParser<SelectManaTypeResp>(() => new SelectManaTypeResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectManaTypeResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[269]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectManaTypeResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectManaTypeResp(SelectManaTypeResp other) : this()
        {
            manaColors_ = other.manaColors_.Clone();
            index_ = other.index_;
            manaColor_ = other.manaColor_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectManaTypeResp Clone()
        {
            return new SelectManaTypeResp(this);
        }

        /// <summary>Field number for the "manaColors" field.</summary>
        public const int ManaColorsFieldNumber = 2;
        private static readonly pb::FieldCodec<ManaColor> _repeated_manaColors_codec
            = pb::FieldCodec.ForEnum(18, x => (int)x, x => (ManaColor)x);
        private readonly pbc::RepeatedField<ManaColor> manaColors_ = new pbc::RepeatedField<ManaColor>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ManaColor> ManaColors
        {
            get { return manaColors_; }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index
        {
            get { return index_; }
            set
            {
                index_ = value;
            }
        }

        /// <summary>Field number for the "manaColor" field.</summary>
        public const int ManaColorFieldNumber = 3;
        private ManaColor manaColor_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaColor ManaColor
        {
            get { return manaColor_; }
            set
            {
                manaColor_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectManaTypeResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectManaTypeResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!manaColors_.Equals(other.manaColors_)) return false;
            if (Index != other.Index) return false;
            if (ManaColor != other.ManaColor) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= manaColors_.GetHashCode();
            if (Index != 0) hash ^= Index.GetHashCode();
            if (ManaColor != 0) hash ^= ManaColor.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Index != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Index);
            }
            manaColors_.WriteTo(output, _repeated_manaColors_codec);
            if (ManaColor != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)ManaColor);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += manaColors_.CalculateSize(_repeated_manaColors_codec);
            if (Index != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
            }
            if (ManaColor != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ManaColor);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectManaTypeResp other)
        {
            if (other == null)
            {
                return;
            }
            manaColors_.Add(other.manaColors_);
            if (other.Index != 0)
            {
                Index = other.Index;
            }
            if (other.ManaColor != 0)
            {
                ManaColor = other.ManaColor;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Index = input.ReadUInt32();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            manaColors_.AddEntriesFrom(input, _repeated_manaColors_codec);
                            break;
                        }
                    case 24:
                        {
                            manaColor_ = (ManaColor)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectNGroupReq : pb::IMessage<SelectNGroupReq>
    {
        private static readonly pb::MessageParser<SelectNGroupReq> _parser = new pb::MessageParser<SelectNGroupReq>(() => new SelectNGroupReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectNGroupReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[270]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNGroupReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNGroupReq(SelectNGroupReq other) : this()
        {
            groups_ = other.groups_.Clone();
            minSel_ = other.minSel_;
            maxSel_ = other.maxSel_;
            idx_ = other.idx_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNGroupReq Clone()
        {
            return new SelectNGroupReq(this);
        }

        /// <summary>Field number for the "groups" field.</summary>
        public const int GroupsFieldNumber = 3;
        private static readonly pb::FieldCodec<Group> _repeated_groups_codec
            = pb::FieldCodec.ForMessage(26, Group.Parser);
        private readonly pbc::RepeatedField<Group> groups_ = new pbc::RepeatedField<Group>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Group> Groups
        {
            get { return groups_; }
        }

        /// <summary>Field number for the "minSel" field.</summary>
        public const int MinSelFieldNumber = 1;
        private uint minSel_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinSel
        {
            get { return minSel_; }
            set
            {
                minSel_ = value;
            }
        }

        /// <summary>Field number for the "maxSel" field.</summary>
        public const int MaxSelFieldNumber = 2;
        private uint maxSel_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxSel
        {
            get { return maxSel_; }
            set
            {
                maxSel_ = value;
            }
        }

        /// <summary>Field number for the "idx" field.</summary>
        public const int IdxFieldNumber = 4;
        private uint idx_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Idx
        {
            get { return idx_; }
            set
            {
                idx_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectNGroupReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectNGroupReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!groups_.Equals(other.groups_)) return false;
            if (MinSel != other.MinSel) return false;
            if (MaxSel != other.MaxSel) return false;
            if (Idx != other.Idx) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= groups_.GetHashCode();
            if (MinSel != 0) hash ^= MinSel.GetHashCode();
            if (MaxSel != 0) hash ^= MaxSel.GetHashCode();
            if (Idx != 0) hash ^= Idx.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MinSel != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(MinSel);
            }
            if (MaxSel != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MaxSel);
            }
            groups_.WriteTo(output, _repeated_groups_codec);
            if (Idx != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(Idx);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += groups_.CalculateSize(_repeated_groups_codec);
            if (MinSel != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinSel);
            }
            if (MaxSel != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSel);
            }
            if (Idx != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idx);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectNGroupReq other)
        {
            if (other == null)
            {
                return;
            }
            groups_.Add(other.groups_);
            if (other.MinSel != 0)
            {
                MinSel = other.MinSel;
            }
            if (other.MaxSel != 0)
            {
                MaxSel = other.MaxSel;
            }
            if (other.Idx != 0)
            {
                Idx = other.Idx;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            MinSel = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            MaxSel = input.ReadUInt32();
                            break;
                        }
                    case 26:
                        {
                            groups_.AddEntriesFrom(input, _repeated_groups_codec);
                            break;
                        }
                    case 32:
                        {
                            Idx = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectNGroupResp : pb::IMessage<SelectNGroupResp>
    {
        private static readonly pb::MessageParser<SelectNGroupResp> _parser = new pb::MessageParser<SelectNGroupResp>(() => new SelectNGroupResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectNGroupResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[271]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNGroupResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNGroupResp(SelectNGroupResp other) : this()
        {
            selectedgroupids_ = other.selectedgroupids_.Clone();
            idx_ = other.idx_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNGroupResp Clone()
        {
            return new SelectNGroupResp(this);
        }

        /// <summary>Field number for the "selectedgroupids" field.</summary>
        public const int SelectedgroupidsFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_selectedgroupids_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> selectedgroupids_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Selectedgroupids
        {
            get { return selectedgroupids_; }
        }

        /// <summary>Field number for the "idx" field.</summary>
        public const int IdxFieldNumber = 1;
        private uint idx_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Idx
        {
            get { return idx_; }
            set
            {
                idx_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectNGroupResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectNGroupResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!selectedgroupids_.Equals(other.selectedgroupids_)) return false;
            if (Idx != other.Idx) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= selectedgroupids_.GetHashCode();
            if (Idx != 0) hash ^= Idx.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Idx != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Idx);
            }
            selectedgroupids_.WriteTo(output, _repeated_selectedgroupids_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += selectedgroupids_.CalculateSize(_repeated_selectedgroupids_codec);
            if (Idx != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idx);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectNGroupResp other)
        {
            if (other == null)
            {
                return;
            }
            selectedgroupids_.Add(other.selectedgroupids_);
            if (other.Idx != 0)
            {
                Idx = other.Idx;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Idx = input.ReadUInt32();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            selectedgroupids_.AddEntriesFrom(input, _repeated_selectedgroupids_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectNReq : pb::IMessage<SelectNReq>
    {
        private static readonly pb::MessageParser<SelectNReq> _parser = new pb::MessageParser<SelectNReq>(() => new SelectNReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectNReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[272]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNReq(SelectNReq other) : this()
        {
            ids_ = other.ids_.Clone();
            weights_ = other.weights_.Clone();
            unfilteredIds_ = other.unfilteredIds_.Clone();
            minSel_ = other.minSel_;
            maxSel_ = other.maxSel_;
            context_ = other.context_;
            optionType_ = other.optionType_;
            optionContext_ = other.optionContext_;
            listType_ = other.listType_;
            staticList_ = other.staticList_;
            idx_ = other.idx_;
            prompt_ = other.prompt_ != null ? other.prompt_.Clone() : null;
            idType_ = other.idType_;
            choicesAreRepeatable_ = other.choicesAreRepeatable_;
            sourceId_ = other.sourceId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNReq Clone()
        {
            return new SelectNReq(this);
        }

        /// <summary>Field number for the "ids" field.</summary>
        public const int IdsFieldNumber = 7;
        private static readonly pb::FieldCodec<uint> _repeated_ids_codec
            = pb::FieldCodec.ForUInt32(58);
        private readonly pbc::RepeatedField<uint> ids_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Ids
        {
            get { return ids_; }
        }

        /// <summary>Field number for the "weights" field.</summary>
        public const int WeightsFieldNumber = 8;
        private static readonly pb::FieldCodec<int> _repeated_weights_codec
            = pb::FieldCodec.ForInt32(66);
        private readonly pbc::RepeatedField<int> weights_ = new pbc::RepeatedField<int>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Weights
        {
            get { return weights_; }
        }

        /// <summary>Field number for the "unfilteredIds" field.</summary>
        public const int UnfilteredIdsFieldNumber = 14;
        private static readonly pb::FieldCodec<uint> _repeated_unfilteredIds_codec
            = pb::FieldCodec.ForUInt32(114);
        private readonly pbc::RepeatedField<uint> unfilteredIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> UnfilteredIds
        {
            get { return unfilteredIds_; }
        }

        /// <summary>Field number for the "minSel" field.</summary>
        public const int MinSelFieldNumber = 1;
        private int minSel_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MinSel
        {
            get { return minSel_; }
            set
            {
                minSel_ = value;
            }
        }

        /// <summary>Field number for the "maxSel" field.</summary>
        public const int MaxSelFieldNumber = 2;
        private uint maxSel_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxSel
        {
            get { return maxSel_; }
            set
            {
                maxSel_ = value;
            }
        }

        /// <summary>Field number for the "context" field.</summary>
        public const int ContextFieldNumber = 3;
        private SelectionContext context_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectionContext Context
        {
            get { return context_; }
            set
            {
                context_ = value;
            }
        }

        /// <summary>Field number for the "optionType" field.</summary>
        public const int OptionTypeFieldNumber = 4;
        private OptionType optionType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionType OptionType
        {
            get { return optionType_; }
            set
            {
                optionType_ = value;
            }
        }

        /// <summary>Field number for the "optionContext" field.</summary>
        public const int OptionContextFieldNumber = 5;
        private OptionContext optionContext_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionContext OptionContext
        {
            get { return optionContext_; }
            set
            {
                optionContext_ = value;
            }
        }

        /// <summary>Field number for the "listType" field.</summary>
        public const int ListTypeFieldNumber = 6;
        private SelectionListType listType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectionListType ListType
        {
            get { return listType_; }
            set
            {
                listType_ = value;
            }
        }

        /// <summary>Field number for the "staticList" field.</summary>
        public const int StaticListFieldNumber = 9;
        private StaticList staticList_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StaticList StaticList
        {
            get { return staticList_; }
            set
            {
                staticList_ = value;
            }
        }

        /// <summary>Field number for the "idx" field.</summary>
        public const int IdxFieldNumber = 10;
        private uint idx_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Idx
        {
            get { return idx_; }
            set
            {
                idx_ = value;
            }
        }

        /// <summary>Field number for the "prompt" field.</summary>
        public const int PromptFieldNumber = 11;
        private Prompt prompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt Prompt
        {
            get { return prompt_; }
            set
            {
                prompt_ = value;
            }
        }

        /// <summary>Field number for the "idType" field.</summary>
        public const int IdTypeFieldNumber = 12;
        private IdType idType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdType IdType
        {
            get { return idType_; }
            set
            {
                idType_ = value;
            }
        }

        /// <summary>Field number for the "choicesAreRepeatable" field.</summary>
        public const int ChoicesAreRepeatableFieldNumber = 13;
        private bool choicesAreRepeatable_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ChoicesAreRepeatable
        {
            get { return choicesAreRepeatable_; }
            set
            {
                choicesAreRepeatable_ = value;
            }
        }

        /// <summary>Field number for the "sourceId" field.</summary>
        public const int SourceIdFieldNumber = 15;
        private uint sourceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SourceId
        {
            get { return sourceId_; }
            set
            {
                sourceId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectNReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectNReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!ids_.Equals(other.ids_)) return false;
            if (!weights_.Equals(other.weights_)) return false;
            if (!unfilteredIds_.Equals(other.unfilteredIds_)) return false;
            if (MinSel != other.MinSel) return false;
            if (MaxSel != other.MaxSel) return false;
            if (Context != other.Context) return false;
            if (OptionType != other.OptionType) return false;
            if (OptionContext != other.OptionContext) return false;
            if (ListType != other.ListType) return false;
            if (StaticList != other.StaticList) return false;
            if (Idx != other.Idx) return false;
            if (!object.Equals(Prompt, other.Prompt)) return false;
            if (IdType != other.IdType) return false;
            if (ChoicesAreRepeatable != other.ChoicesAreRepeatable) return false;
            if (SourceId != other.SourceId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= ids_.GetHashCode();
            hash ^= weights_.GetHashCode();
            hash ^= unfilteredIds_.GetHashCode();
            if (MinSel != 0) hash ^= MinSel.GetHashCode();
            if (MaxSel != 0) hash ^= MaxSel.GetHashCode();
            if (Context != 0) hash ^= Context.GetHashCode();
            if (OptionType != 0) hash ^= OptionType.GetHashCode();
            if (OptionContext != 0) hash ^= OptionContext.GetHashCode();
            if (ListType != 0) hash ^= ListType.GetHashCode();
            if (StaticList != 0) hash ^= StaticList.GetHashCode();
            if (Idx != 0) hash ^= Idx.GetHashCode();
            if (prompt_ != null) hash ^= Prompt.GetHashCode();
            if (IdType != 0) hash ^= IdType.GetHashCode();
            if (ChoicesAreRepeatable != false) hash ^= ChoicesAreRepeatable.GetHashCode();
            if (SourceId != 0) hash ^= SourceId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MinSel != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(MinSel);
            }
            if (MaxSel != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MaxSel);
            }
            if (Context != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)Context);
            }
            if (OptionType != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)OptionType);
            }
            if (OptionContext != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)OptionContext);
            }
            if (ListType != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)ListType);
            }
            ids_.WriteTo(output, _repeated_ids_codec);
            weights_.WriteTo(output, _repeated_weights_codec);
            if (StaticList != 0)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)StaticList);
            }
            if (Idx != 0)
            {
                output.WriteRawTag(80);
                output.WriteUInt32(Idx);
            }
            if (prompt_ != null)
            {
                output.WriteRawTag(90);
                output.WriteMessage(Prompt);
            }
            if (IdType != 0)
            {
                output.WriteRawTag(96);
                output.WriteEnum((int)IdType);
            }
            if (ChoicesAreRepeatable != false)
            {
                output.WriteRawTag(104);
                output.WriteBool(ChoicesAreRepeatable);
            }
            unfilteredIds_.WriteTo(output, _repeated_unfilteredIds_codec);
            if (SourceId != 0)
            {
                output.WriteRawTag(120);
                output.WriteUInt32(SourceId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += ids_.CalculateSize(_repeated_ids_codec);
            size += weights_.CalculateSize(_repeated_weights_codec);
            size += unfilteredIds_.CalculateSize(_repeated_unfilteredIds_codec);
            if (MinSel != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinSel);
            }
            if (MaxSel != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSel);
            }
            if (Context != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Context);
            }
            if (OptionType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)OptionType);
            }
            if (OptionContext != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)OptionContext);
            }
            if (ListType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ListType);
            }
            if (StaticList != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)StaticList);
            }
            if (Idx != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idx);
            }
            if (prompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prompt);
            }
            if (IdType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)IdType);
            }
            if (ChoicesAreRepeatable != false)
            {
                size += 1 + 1;
            }
            if (SourceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectNReq other)
        {
            if (other == null)
            {
                return;
            }
            ids_.Add(other.ids_);
            weights_.Add(other.weights_);
            unfilteredIds_.Add(other.unfilteredIds_);
            if (other.MinSel != 0)
            {
                MinSel = other.MinSel;
            }
            if (other.MaxSel != 0)
            {
                MaxSel = other.MaxSel;
            }
            if (other.Context != 0)
            {
                Context = other.Context;
            }
            if (other.OptionType != 0)
            {
                OptionType = other.OptionType;
            }
            if (other.OptionContext != 0)
            {
                OptionContext = other.OptionContext;
            }
            if (other.ListType != 0)
            {
                ListType = other.ListType;
            }
            if (other.StaticList != 0)
            {
                StaticList = other.StaticList;
            }
            if (other.Idx != 0)
            {
                Idx = other.Idx;
            }
            if (other.prompt_ != null)
            {
                if (prompt_ == null)
                {
                    prompt_ = new Prompt();
                }
                Prompt.MergeFrom(other.Prompt);
            }
            if (other.IdType != 0)
            {
                IdType = other.IdType;
            }
            if (other.ChoicesAreRepeatable != false)
            {
                ChoicesAreRepeatable = other.ChoicesAreRepeatable;
            }
            if (other.SourceId != 0)
            {
                SourceId = other.SourceId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            MinSel = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            MaxSel = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            context_ = (SelectionContext)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            optionType_ = (OptionType)input.ReadEnum();
                            break;
                        }
                    case 40:
                        {
                            optionContext_ = (OptionContext)input.ReadEnum();
                            break;
                        }
                    case 48:
                        {
                            listType_ = (SelectionListType)input.ReadEnum();
                            break;
                        }
                    case 58:
                    case 56:
                        {
                            ids_.AddEntriesFrom(input, _repeated_ids_codec);
                            break;
                        }
                    case 66:
                    case 64:
                        {
                            weights_.AddEntriesFrom(input, _repeated_weights_codec);
                            break;
                        }
                    case 72:
                        {
                            staticList_ = (StaticList)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            Idx = input.ReadUInt32();
                            break;
                        }
                    case 90:
                        {
                            if (prompt_ == null)
                            {
                                prompt_ = new Prompt();
                            }
                            input.ReadMessage(prompt_);
                            break;
                        }
                    case 96:
                        {
                            idType_ = (IdType)input.ReadEnum();
                            break;
                        }
                    case 104:
                        {
                            ChoicesAreRepeatable = input.ReadBool();
                            break;
                        }
                    case 114:
                    case 112:
                        {
                            unfilteredIds_.AddEntriesFrom(input, _repeated_unfilteredIds_codec);
                            break;
                        }
                    case 120:
                        {
                            SourceId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectNResp : pb::IMessage<SelectNResp>
    {
        private static readonly pb::MessageParser<SelectNResp> _parser = new pb::MessageParser<SelectNResp>(() => new SelectNResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectNResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[273]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNResp(SelectNResp other) : this()
        {
            ids_ = other.ids_.Clone();
            idx_ = other.idx_;
            context_ = other.context_;
            optionContext_ = other.optionContext_;
            optionType_ = other.optionType_;
            useArbitrary_ = other.useArbitrary_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectNResp Clone()
        {
            return new SelectNResp(this);
        }

        /// <summary>Field number for the "ids" field.</summary>
        public const int IdsFieldNumber = 5;
        private static readonly pb::FieldCodec<uint> _repeated_ids_codec
            = pb::FieldCodec.ForUInt32(42);
        private readonly pbc::RepeatedField<uint> ids_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Ids
        {
            get { return ids_; }
        }

        /// <summary>Field number for the "idx" field.</summary>
        public const int IdxFieldNumber = 1;
        private uint idx_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Idx
        {
            get { return idx_; }
            set
            {
                idx_ = value;
            }
        }

        /// <summary>Field number for the "context" field.</summary>
        public const int ContextFieldNumber = 2;
        private SelectionContext context_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectionContext Context
        {
            get { return context_; }
            set
            {
                context_ = value;
            }
        }

        /// <summary>Field number for the "optionContext" field.</summary>
        public const int OptionContextFieldNumber = 3;
        private OptionContext optionContext_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionContext OptionContext
        {
            get { return optionContext_; }
            set
            {
                optionContext_ = value;
            }
        }

        /// <summary>Field number for the "optionType" field.</summary>
        public const int OptionTypeFieldNumber = 4;
        private OptionType optionType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionType OptionType
        {
            get { return optionType_; }
            set
            {
                optionType_ = value;
            }
        }

        /// <summary>Field number for the "useArbitrary" field.</summary>
        public const int UseArbitraryFieldNumber = 6;
        private OrderingType useArbitrary_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderingType UseArbitrary
        {
            get { return useArbitrary_; }
            set
            {
                useArbitrary_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectNResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectNResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!ids_.Equals(other.ids_)) return false;
            if (Idx != other.Idx) return false;
            if (Context != other.Context) return false;
            if (OptionContext != other.OptionContext) return false;
            if (OptionType != other.OptionType) return false;
            if (UseArbitrary != other.UseArbitrary) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= ids_.GetHashCode();
            if (Idx != 0) hash ^= Idx.GetHashCode();
            if (Context != 0) hash ^= Context.GetHashCode();
            if (OptionContext != 0) hash ^= OptionContext.GetHashCode();
            if (OptionType != 0) hash ^= OptionType.GetHashCode();
            if (UseArbitrary != 0) hash ^= UseArbitrary.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Idx != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Idx);
            }
            if (Context != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Context);
            }
            if (OptionContext != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)OptionContext);
            }
            if (OptionType != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)OptionType);
            }
            ids_.WriteTo(output, _repeated_ids_codec);
            if (UseArbitrary != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)UseArbitrary);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += ids_.CalculateSize(_repeated_ids_codec);
            if (Idx != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idx);
            }
            if (Context != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Context);
            }
            if (OptionContext != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)OptionContext);
            }
            if (OptionType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)OptionType);
            }
            if (UseArbitrary != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)UseArbitrary);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectNResp other)
        {
            if (other == null)
            {
                return;
            }
            ids_.Add(other.ids_);
            if (other.Idx != 0)
            {
                Idx = other.Idx;
            }
            if (other.Context != 0)
            {
                Context = other.Context;
            }
            if (other.OptionContext != 0)
            {
                OptionContext = other.OptionContext;
            }
            if (other.OptionType != 0)
            {
                OptionType = other.OptionType;
            }
            if (other.UseArbitrary != 0)
            {
                UseArbitrary = other.UseArbitrary;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Idx = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            context_ = (SelectionContext)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            optionContext_ = (OptionContext)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            optionType_ = (OptionType)input.ReadEnum();
                            break;
                        }
                    case 42:
                    case 40:
                        {
                            ids_.AddEntriesFrom(input, _repeated_ids_codec);
                            break;
                        }
                    case 48:
                        {
                            useArbitrary_ = (OrderingType)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectReplacementReq : pb::IMessage<SelectReplacementReq>
    {
        private static readonly pb::MessageParser<SelectReplacementReq> _parser = new pb::MessageParser<SelectReplacementReq>(() => new SelectReplacementReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectReplacementReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[274]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectReplacementReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectReplacementReq(SelectReplacementReq other) : this()
        {
            replacements_ = other.replacements_.Clone();
            isOptional_ = other.isOptional_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectReplacementReq Clone()
        {
            return new SelectReplacementReq(this);
        }

        /// <summary>Field number for the "replacements" field.</summary>
        public const int ReplacementsFieldNumber = 1;
        private static readonly pb::FieldCodec<ReplacementEffect> _repeated_replacements_codec
            = pb::FieldCodec.ForMessage(10, ReplacementEffect.Parser);
        private readonly pbc::RepeatedField<ReplacementEffect> replacements_ = new pbc::RepeatedField<ReplacementEffect>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ReplacementEffect> Replacements
        {
            get { return replacements_; }
        }

        /// <summary>Field number for the "isOptional" field.</summary>
        public const int IsOptionalFieldNumber = 2;
        private bool isOptional_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsOptional
        {
            get { return isOptional_; }
            set
            {
                isOptional_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectReplacementReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectReplacementReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!replacements_.Equals(other.replacements_)) return false;
            if (IsOptional != other.IsOptional) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= replacements_.GetHashCode();
            if (IsOptional != false) hash ^= IsOptional.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            replacements_.WriteTo(output, _repeated_replacements_codec);
            if (IsOptional != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(IsOptional);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += replacements_.CalculateSize(_repeated_replacements_codec);
            if (IsOptional != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectReplacementReq other)
        {
            if (other == null)
            {
                return;
            }
            replacements_.Add(other.replacements_);
            if (other.IsOptional != false)
            {
                IsOptional = other.IsOptional;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            replacements_.AddEntriesFrom(input, _repeated_replacements_codec);
                            break;
                        }
                    case 16:
                        {
                            IsOptional = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectReplacementResp : pb::IMessage<SelectReplacementResp>
    {
        private static readonly pb::MessageParser<SelectReplacementResp> _parser = new pb::MessageParser<SelectReplacementResp>(() => new SelectReplacementResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectReplacementResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[275]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectReplacementResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectReplacementResp(SelectReplacementResp other) : this()
        {
            replacement_ = other.replacement_ != null ? other.replacement_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectReplacementResp Clone()
        {
            return new SelectReplacementResp(this);
        }

        /// <summary>Field number for the "replacement" field.</summary>
        public const int ReplacementFieldNumber = 1;
        private ReplacementEffect replacement_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplacementEffect Replacement
        {
            get { return replacement_; }
            set
            {
                replacement_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectReplacementResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectReplacementResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Replacement, other.Replacement)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (replacement_ != null) hash ^= Replacement.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (replacement_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Replacement);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (replacement_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Replacement);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectReplacementResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.replacement_ != null)
            {
                if (replacement_ == null)
                {
                    replacement_ = new ReplacementEffect();
                }
                Replacement.MergeFrom(other.Replacement);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (replacement_ == null)
                            {
                                replacement_ = new ReplacementEffect();
                            }
                            input.ReadMessage(replacement_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectTargetsReq : pb::IMessage<SelectTargetsReq>
    {
        private static readonly pb::MessageParser<SelectTargetsReq> _parser = new pb::MessageParser<SelectTargetsReq>(() => new SelectTargetsReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectTargetsReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[276]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectTargetsReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectTargetsReq(SelectTargetsReq other) : this()
        {
            targets_ = other.targets_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectTargetsReq Clone()
        {
            return new SelectTargetsReq(this);
        }

        /// <summary>Field number for the "targets" field.</summary>
        public const int TargetsFieldNumber = 1;
        private static readonly pb::FieldCodec<TargetSelection> _repeated_targets_codec
            = pb::FieldCodec.ForMessage(10, TargetSelection.Parser);
        private readonly pbc::RepeatedField<TargetSelection> targets_ = new pbc::RepeatedField<TargetSelection>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<TargetSelection> Targets
        {
            get { return targets_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectTargetsReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectTargetsReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!targets_.Equals(other.targets_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= targets_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            targets_.WriteTo(output, _repeated_targets_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += targets_.CalculateSize(_repeated_targets_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectTargetsReq other)
        {
            if (other == null)
            {
                return;
            }
            targets_.Add(other.targets_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            targets_.AddEntriesFrom(input, _repeated_targets_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SelectTargetsResp : pb::IMessage<SelectTargetsResp>
    {
        private static readonly pb::MessageParser<SelectTargetsResp> _parser = new pb::MessageParser<SelectTargetsResp>(() => new SelectTargetsResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelectTargetsResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[277]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectTargetsResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectTargetsResp(SelectTargetsResp other) : this()
        {
            target_ = other.target_ != null ? other.target_.Clone() : null;
            action_ = other.action_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectTargetsResp Clone()
        {
            return new SelectTargetsResp(this);
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 1;
        private TargetSelection target_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetSelection Target
        {
            get { return target_; }
            set
            {
                target_ = value;
            }
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 2;
        private SelectAction action_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectAction Action
        {
            get { return action_; }
            set
            {
                action_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SelectTargetsResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelectTargetsResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Target, other.Target)) return false;
            if (Action != other.Action) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (target_ != null) hash ^= Target.GetHashCode();
            if (Action != 0) hash ^= Action.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (target_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Target);
            }
            if (Action != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Action);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (target_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
            }
            if (Action != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Action);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelectTargetsResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.target_ != null)
            {
                if (target_ == null)
                {
                    target_ = new TargetSelection();
                }
                Target.MergeFrom(other.Target);
            }
            if (other.Action != 0)
            {
                Action = other.Action;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (target_ == null)
                            {
                                target_ = new TargetSelection();
                            }
                            input.ReadMessage(target_);
                            break;
                        }
                    case 16:
                        {
                            action_ = (SelectAction)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Selector : pb::IMessage<Selector>
    {
        private static readonly pb::MessageParser<Selector> _parser = new pb::MessageParser<Selector>(() => new Selector());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Selector> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[278]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Selector()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Selector(Selector other) : this()
        {
            children_ = other.children_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Selector Clone()
        {
            return new Selector(this);
        }

        /// <summary>Field number for the "children" field.</summary>
        public const int ChildrenFieldNumber = 1;
        private static readonly pb::FieldCodec<Node> _repeated_children_codec
            = pb::FieldCodec.ForMessage(10, Node.Parser);
        private readonly pbc::RepeatedField<Node> children_ = new pbc::RepeatedField<Node>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Node> Children
        {
            get { return children_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Selector);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Selector other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!children_.Equals(other.children_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= children_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            children_.WriteTo(output, _repeated_children_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += children_.CalculateSize(_repeated_children_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Selector other)
        {
            if (other == null)
            {
                return;
            }
            children_.Add(other.children_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            children_.AddEntriesFrom(input, _repeated_children_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Sequence : pb::IMessage<Sequence>
    {
        private static readonly pb::MessageParser<Sequence> _parser = new pb::MessageParser<Sequence>(() => new Sequence());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Sequence> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[279]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sequence()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sequence(Sequence other) : this()
        {
            children_ = other.children_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sequence Clone()
        {
            return new Sequence(this);
        }

        /// <summary>Field number for the "children" field.</summary>
        public const int ChildrenFieldNumber = 1;
        private static readonly pb::FieldCodec<Node> _repeated_children_codec
            = pb::FieldCodec.ForMessage(10, Node.Parser);
        private readonly pbc::RepeatedField<Node> children_ = new pbc::RepeatedField<Node>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Node> Children
        {
            get { return children_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Sequence);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Sequence other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!children_.Equals(other.children_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= children_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            children_.WriteTo(output, _repeated_children_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += children_.CalculateSize(_repeated_children_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Sequence other)
        {
            if (other == null)
            {
                return;
            }
            children_.Add(other.children_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            children_.AddEntriesFrom(input, _repeated_children_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ServerToGREMessage : pb::IMessage<ServerToGREMessage>
    {
        private static readonly pb::MessageParser<ServerToGREMessage> _parser = new pb::MessageParser<ServerToGREMessage>(() => new ServerToGREMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ServerToGREMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[280]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerToGREMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerToGREMessage(ServerToGREMessage other) : this()
        {
            switch (other.MessageCase)
            {
                case MessageOneofCase.CreateRequest:
                    CreateRequest = other.CreateRequest.Clone();
                    break;
                case MessageOneofCase.ConfigRequest:
                    ConfigRequest = other.ConfigRequest.Clone();
                    break;
                case MessageOneofCase.StartMatchRequest:
                    StartMatchRequest = other.StartMatchRequest.Clone();
                    break;
                case MessageOneofCase.ResumeMatchRequest:
                    ResumeMatchRequest = other.ResumeMatchRequest.Clone();
                    break;
                case MessageOneofCase.SubmitDeckRequest:
                    SubmitDeckRequest = other.SubmitDeckRequest.Clone();
                    break;
                case MessageOneofCase.ForceResultRequest:
                    ForceResultRequest = other.ForceResultRequest.Clone();
                    break;
                case MessageOneofCase.DestroyRequest:
                    DestroyRequest = other.DestroyRequest.Clone();
                    break;
                case MessageOneofCase.TimerExpired:
                    TimerExpired = other.TimerExpired.Clone();
                    break;
                case MessageOneofCase.Tick:
                    Tick = other.Tick.Clone();
                    break;
                case MessageOneofCase.Timeout:
                    Timeout = other.Timeout.Clone();
                    break;
                case MessageOneofCase.InterpretRequest:
                    InterpretRequest = other.InterpretRequest.Clone();
                    break;
                case MessageOneofCase.ExpireTimerRequest:
                    ExpireTimerRequest = other.ExpireTimerRequest.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerToGREMessage Clone()
        {
            return new ServerToGREMessage(this);
        }

        /// <summary>Field number for the "createRequest" field.</summary>
        public const int CreateRequestFieldNumber = 1;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRECreateRequest CreateRequest
        {
            get { return messageCase_ == MessageOneofCase.CreateRequest ? (GRECreateRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CreateRequest;
            }
        }

        /// <summary>Field number for the "configRequest" field.</summary>
        public const int ConfigRequestFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREConfigRequest ConfigRequest
        {
            get { return messageCase_ == MessageOneofCase.ConfigRequest ? (GREConfigRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ConfigRequest;
            }
        }

        /// <summary>Field number for the "startMatchRequest" field.</summary>
        public const int StartMatchRequestFieldNumber = 3;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREStartMatchRequest StartMatchRequest
        {
            get { return messageCase_ == MessageOneofCase.StartMatchRequest ? (GREStartMatchRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.StartMatchRequest;
            }
        }

        /// <summary>Field number for the "resumeMatchRequest" field.</summary>
        public const int ResumeMatchRequestFieldNumber = 4;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREResumeMatchRequest ResumeMatchRequest
        {
            get { return messageCase_ == MessageOneofCase.ResumeMatchRequest ? (GREResumeMatchRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ResumeMatchRequest;
            }
        }

        /// <summary>Field number for the "submitDeckRequest" field.</summary>
        public const int SubmitDeckRequestFieldNumber = 5;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRESubmitDeckRequest SubmitDeckRequest
        {
            get { return messageCase_ == MessageOneofCase.SubmitDeckRequest ? (GRESubmitDeckRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.SubmitDeckRequest;
            }
        }

        /// <summary>Field number for the "forceResultRequest" field.</summary>
        public const int ForceResultRequestFieldNumber = 6;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREForceResultRequest ForceResultRequest
        {
            get { return messageCase_ == MessageOneofCase.ForceResultRequest ? (GREForceResultRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ForceResultRequest;
            }
        }

        /// <summary>Field number for the "destroyRequest" field.</summary>
        public const int DestroyRequestFieldNumber = 7;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREDestroyRequest DestroyRequest
        {
            get { return messageCase_ == MessageOneofCase.DestroyRequest ? (GREDestroyRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DestroyRequest;
            }
        }

        /// <summary>Field number for the "timerExpired" field.</summary>
        public const int TimerExpiredFieldNumber = 8;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETimerExpiredMessage TimerExpired
        {
            get { return messageCase_ == MessageOneofCase.TimerExpired ? (GRETimerExpiredMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.TimerExpired;
            }
        }

        /// <summary>Field number for the "tick" field.</summary>
        public const int TickFieldNumber = 9;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GRETickMessage Tick
        {
            get { return messageCase_ == MessageOneofCase.Tick ? (GRETickMessage)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Tick;
            }
        }

        /// <summary>Field number for the "timeout" field.</summary>
        public const int TimeoutFieldNumber = 10;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Timeout Timeout
        {
            get { return messageCase_ == MessageOneofCase.Timeout ? (Timeout)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Timeout;
            }
        }

        /// <summary>Field number for the "interpretRequest" field.</summary>
        public const int InterpretRequestFieldNumber = 11;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREInterpretRequest InterpretRequest
        {
            get { return messageCase_ == MessageOneofCase.InterpretRequest ? (GREInterpretRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.InterpretRequest;
            }
        }

        /// <summary>Field number for the "expireTimerRequest" field.</summary>
        public const int ExpireTimerRequestFieldNumber = 12;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GREExpireTimerRequest ExpireTimerRequest
        {
            get { return messageCase_ == MessageOneofCase.ExpireTimerRequest ? (GREExpireTimerRequest)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ExpireTimerRequest;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            CreateRequest = 1,
            ConfigRequest = 2,
            StartMatchRequest = 3,
            ResumeMatchRequest = 4,
            SubmitDeckRequest = 5,
            ForceResultRequest = 6,
            DestroyRequest = 7,
            TimerExpired = 8,
            Tick = 9,
            Timeout = 10,
            InterpretRequest = 11,
            ExpireTimerRequest = 12,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ServerToGREMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ServerToGREMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(CreateRequest, other.CreateRequest)) return false;
            if (!object.Equals(ConfigRequest, other.ConfigRequest)) return false;
            if (!object.Equals(StartMatchRequest, other.StartMatchRequest)) return false;
            if (!object.Equals(ResumeMatchRequest, other.ResumeMatchRequest)) return false;
            if (!object.Equals(SubmitDeckRequest, other.SubmitDeckRequest)) return false;
            if (!object.Equals(ForceResultRequest, other.ForceResultRequest)) return false;
            if (!object.Equals(DestroyRequest, other.DestroyRequest)) return false;
            if (!object.Equals(TimerExpired, other.TimerExpired)) return false;
            if (!object.Equals(Tick, other.Tick)) return false;
            if (!object.Equals(Timeout, other.Timeout)) return false;
            if (!object.Equals(InterpretRequest, other.InterpretRequest)) return false;
            if (!object.Equals(ExpireTimerRequest, other.ExpireTimerRequest)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (messageCase_ == MessageOneofCase.CreateRequest) hash ^= CreateRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.ConfigRequest) hash ^= ConfigRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.StartMatchRequest) hash ^= StartMatchRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.ResumeMatchRequest) hash ^= ResumeMatchRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.SubmitDeckRequest) hash ^= SubmitDeckRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.ForceResultRequest) hash ^= ForceResultRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.DestroyRequest) hash ^= DestroyRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.TimerExpired) hash ^= TimerExpired.GetHashCode();
            if (messageCase_ == MessageOneofCase.Tick) hash ^= Tick.GetHashCode();
            if (messageCase_ == MessageOneofCase.Timeout) hash ^= Timeout.GetHashCode();
            if (messageCase_ == MessageOneofCase.InterpretRequest) hash ^= InterpretRequest.GetHashCode();
            if (messageCase_ == MessageOneofCase.ExpireTimerRequest) hash ^= ExpireTimerRequest.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (messageCase_ == MessageOneofCase.CreateRequest)
            {
                output.WriteRawTag(10);
                output.WriteMessage(CreateRequest);
            }
            if (messageCase_ == MessageOneofCase.ConfigRequest)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ConfigRequest);
            }
            if (messageCase_ == MessageOneofCase.StartMatchRequest)
            {
                output.WriteRawTag(26);
                output.WriteMessage(StartMatchRequest);
            }
            if (messageCase_ == MessageOneofCase.ResumeMatchRequest)
            {
                output.WriteRawTag(34);
                output.WriteMessage(ResumeMatchRequest);
            }
            if (messageCase_ == MessageOneofCase.SubmitDeckRequest)
            {
                output.WriteRawTag(42);
                output.WriteMessage(SubmitDeckRequest);
            }
            if (messageCase_ == MessageOneofCase.ForceResultRequest)
            {
                output.WriteRawTag(50);
                output.WriteMessage(ForceResultRequest);
            }
            if (messageCase_ == MessageOneofCase.DestroyRequest)
            {
                output.WriteRawTag(58);
                output.WriteMessage(DestroyRequest);
            }
            if (messageCase_ == MessageOneofCase.TimerExpired)
            {
                output.WriteRawTag(66);
                output.WriteMessage(TimerExpired);
            }
            if (messageCase_ == MessageOneofCase.Tick)
            {
                output.WriteRawTag(74);
                output.WriteMessage(Tick);
            }
            if (messageCase_ == MessageOneofCase.Timeout)
            {
                output.WriteRawTag(82);
                output.WriteMessage(Timeout);
            }
            if (messageCase_ == MessageOneofCase.InterpretRequest)
            {
                output.WriteRawTag(90);
                output.WriteMessage(InterpretRequest);
            }
            if (messageCase_ == MessageOneofCase.ExpireTimerRequest)
            {
                output.WriteRawTag(98);
                output.WriteMessage(ExpireTimerRequest);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (messageCase_ == MessageOneofCase.CreateRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateRequest);
            }
            if (messageCase_ == MessageOneofCase.ConfigRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigRequest);
            }
            if (messageCase_ == MessageOneofCase.StartMatchRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartMatchRequest);
            }
            if (messageCase_ == MessageOneofCase.ResumeMatchRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResumeMatchRequest);
            }
            if (messageCase_ == MessageOneofCase.SubmitDeckRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubmitDeckRequest);
            }
            if (messageCase_ == MessageOneofCase.ForceResultRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ForceResultRequest);
            }
            if (messageCase_ == MessageOneofCase.DestroyRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestroyRequest);
            }
            if (messageCase_ == MessageOneofCase.TimerExpired)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimerExpired);
            }
            if (messageCase_ == MessageOneofCase.Tick)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tick);
            }
            if (messageCase_ == MessageOneofCase.Timeout)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeout);
            }
            if (messageCase_ == MessageOneofCase.InterpretRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(InterpretRequest);
            }
            if (messageCase_ == MessageOneofCase.ExpireTimerRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpireTimerRequest);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ServerToGREMessage other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.CreateRequest:
                    if (CreateRequest == null)
                    {
                        CreateRequest = new GRECreateRequest();
                    }
                    CreateRequest.MergeFrom(other.CreateRequest);
                    break;
                case MessageOneofCase.ConfigRequest:
                    if (ConfigRequest == null)
                    {
                        ConfigRequest = new GREConfigRequest();
                    }
                    ConfigRequest.MergeFrom(other.ConfigRequest);
                    break;
                case MessageOneofCase.StartMatchRequest:
                    if (StartMatchRequest == null)
                    {
                        StartMatchRequest = new GREStartMatchRequest();
                    }
                    StartMatchRequest.MergeFrom(other.StartMatchRequest);
                    break;
                case MessageOneofCase.ResumeMatchRequest:
                    if (ResumeMatchRequest == null)
                    {
                        ResumeMatchRequest = new GREResumeMatchRequest();
                    }
                    ResumeMatchRequest.MergeFrom(other.ResumeMatchRequest);
                    break;
                case MessageOneofCase.SubmitDeckRequest:
                    if (SubmitDeckRequest == null)
                    {
                        SubmitDeckRequest = new GRESubmitDeckRequest();
                    }
                    SubmitDeckRequest.MergeFrom(other.SubmitDeckRequest);
                    break;
                case MessageOneofCase.ForceResultRequest:
                    if (ForceResultRequest == null)
                    {
                        ForceResultRequest = new GREForceResultRequest();
                    }
                    ForceResultRequest.MergeFrom(other.ForceResultRequest);
                    break;
                case MessageOneofCase.DestroyRequest:
                    if (DestroyRequest == null)
                    {
                        DestroyRequest = new GREDestroyRequest();
                    }
                    DestroyRequest.MergeFrom(other.DestroyRequest);
                    break;
                case MessageOneofCase.TimerExpired:
                    if (TimerExpired == null)
                    {
                        TimerExpired = new GRETimerExpiredMessage();
                    }
                    TimerExpired.MergeFrom(other.TimerExpired);
                    break;
                case MessageOneofCase.Tick:
                    if (Tick == null)
                    {
                        Tick = new GRETickMessage();
                    }
                    Tick.MergeFrom(other.Tick);
                    break;
                case MessageOneofCase.Timeout:
                    if (Timeout == null)
                    {
                        Timeout = new Timeout();
                    }
                    Timeout.MergeFrom(other.Timeout);
                    break;
                case MessageOneofCase.InterpretRequest:
                    if (InterpretRequest == null)
                    {
                        InterpretRequest = new GREInterpretRequest();
                    }
                    InterpretRequest.MergeFrom(other.InterpretRequest);
                    break;
                case MessageOneofCase.ExpireTimerRequest:
                    if (ExpireTimerRequest == null)
                    {
                        ExpireTimerRequest = new GREExpireTimerRequest();
                    }
                    ExpireTimerRequest.MergeFrom(other.ExpireTimerRequest);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            GRECreateRequest subBuilder = new GRECreateRequest();
                            if (messageCase_ == MessageOneofCase.CreateRequest)
                            {
                                subBuilder.MergeFrom(CreateRequest);
                            }
                            input.ReadMessage(subBuilder);
                            CreateRequest = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            GREConfigRequest subBuilder = new GREConfigRequest();
                            if (messageCase_ == MessageOneofCase.ConfigRequest)
                            {
                                subBuilder.MergeFrom(ConfigRequest);
                            }
                            input.ReadMessage(subBuilder);
                            ConfigRequest = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            GREStartMatchRequest subBuilder = new GREStartMatchRequest();
                            if (messageCase_ == MessageOneofCase.StartMatchRequest)
                            {
                                subBuilder.MergeFrom(StartMatchRequest);
                            }
                            input.ReadMessage(subBuilder);
                            StartMatchRequest = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            GREResumeMatchRequest subBuilder = new GREResumeMatchRequest();
                            if (messageCase_ == MessageOneofCase.ResumeMatchRequest)
                            {
                                subBuilder.MergeFrom(ResumeMatchRequest);
                            }
                            input.ReadMessage(subBuilder);
                            ResumeMatchRequest = subBuilder;
                            break;
                        }
                    case 42:
                        {
                            GRESubmitDeckRequest subBuilder = new GRESubmitDeckRequest();
                            if (messageCase_ == MessageOneofCase.SubmitDeckRequest)
                            {
                                subBuilder.MergeFrom(SubmitDeckRequest);
                            }
                            input.ReadMessage(subBuilder);
                            SubmitDeckRequest = subBuilder;
                            break;
                        }
                    case 50:
                        {
                            GREForceResultRequest subBuilder = new GREForceResultRequest();
                            if (messageCase_ == MessageOneofCase.ForceResultRequest)
                            {
                                subBuilder.MergeFrom(ForceResultRequest);
                            }
                            input.ReadMessage(subBuilder);
                            ForceResultRequest = subBuilder;
                            break;
                        }
                    case 58:
                        {
                            GREDestroyRequest subBuilder = new GREDestroyRequest();
                            if (messageCase_ == MessageOneofCase.DestroyRequest)
                            {
                                subBuilder.MergeFrom(DestroyRequest);
                            }
                            input.ReadMessage(subBuilder);
                            DestroyRequest = subBuilder;
                            break;
                        }
                    case 66:
                        {
                            GRETimerExpiredMessage subBuilder = new GRETimerExpiredMessage();
                            if (messageCase_ == MessageOneofCase.TimerExpired)
                            {
                                subBuilder.MergeFrom(TimerExpired);
                            }
                            input.ReadMessage(subBuilder);
                            TimerExpired = subBuilder;
                            break;
                        }
                    case 74:
                        {
                            GRETickMessage subBuilder = new GRETickMessage();
                            if (messageCase_ == MessageOneofCase.Tick)
                            {
                                subBuilder.MergeFrom(Tick);
                            }
                            input.ReadMessage(subBuilder);
                            Tick = subBuilder;
                            break;
                        }
                    case 82:
                        {
                            Timeout subBuilder = new Timeout();
                            if (messageCase_ == MessageOneofCase.Timeout)
                            {
                                subBuilder.MergeFrom(Timeout);
                            }
                            input.ReadMessage(subBuilder);
                            Timeout = subBuilder;
                            break;
                        }
                    case 90:
                        {
                            GREInterpretRequest subBuilder = new GREInterpretRequest();
                            if (messageCase_ == MessageOneofCase.InterpretRequest)
                            {
                                subBuilder.MergeFrom(InterpretRequest);
                            }
                            input.ReadMessage(subBuilder);
                            InterpretRequest = subBuilder;
                            break;
                        }
                    case 98:
                        {
                            GREExpireTimerRequest subBuilder = new GREExpireTimerRequest();
                            if (messageCase_ == MessageOneofCase.ExpireTimerRequest)
                            {
                                subBuilder.MergeFrom(ExpireTimerRequest);
                            }
                            input.ReadMessage(subBuilder);
                            ExpireTimerRequest = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ServiceFabricConfigPackageInfo : pb::IMessage<ServiceFabricConfigPackageInfo>
    {
        private static readonly pb::MessageParser<ServiceFabricConfigPackageInfo> _parser = new pb::MessageParser<ServiceFabricConfigPackageInfo>(() => new ServiceFabricConfigPackageInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ServiceFabricConfigPackageInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[281]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServiceFabricConfigPackageInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServiceFabricConfigPackageInfo(ServiceFabricConfigPackageInfo other) : this()
        {
            packageName_ = other.packageName_;
            packageVersion_ = other.packageVersion_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServiceFabricConfigPackageInfo Clone()
        {
            return new ServiceFabricConfigPackageInfo(this);
        }

        /// <summary>Field number for the "packageName" field.</summary>
        public const int PackageNameFieldNumber = 1;
        private string packageName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PackageName
        {
            get { return packageName_; }
            set
            {
                packageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "packageVersion" field.</summary>
        public const int PackageVersionFieldNumber = 2;
        private string packageVersion_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PackageVersion
        {
            get { return packageVersion_; }
            set
            {
                packageVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ServiceFabricConfigPackageInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ServiceFabricConfigPackageInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PackageName != other.PackageName) return false;
            if (PackageVersion != other.PackageVersion) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (PackageName.Length != 0) hash ^= PackageName.GetHashCode();
            if (PackageVersion.Length != 0) hash ^= PackageVersion.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PackageName.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(PackageName);
            }
            if (PackageVersion.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(PackageVersion);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (PackageName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageName);
            }
            if (PackageVersion.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageVersion);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ServiceFabricConfigPackageInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.PackageName.Length != 0)
            {
                PackageName = other.PackageName;
            }
            if (other.PackageVersion.Length != 0)
            {
                PackageVersion = other.PackageVersion;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            PackageName = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            PackageVersion = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ServiceFabricServiceInfo : pb::IMessage<ServiceFabricServiceInfo>
    {
        private static readonly pb::MessageParser<ServiceFabricServiceInfo> _parser = new pb::MessageParser<ServiceFabricServiceInfo>(() => new ServiceFabricServiceInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ServiceFabricServiceInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[282]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServiceFabricServiceInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServiceFabricServiceInfo(ServiceFabricServiceInfo other) : this()
        {
            serviceName_ = other.serviceName_;
            serviceTypeName_ = other.serviceTypeName_;
            partitionId_ = other.partitionId_;
            nodeName_ = other.nodeName_;
            codePackageVersion_ = other.codePackageVersion_;
            configPackages_ = other.configPackages_.Clone();
            exeAssemblyVersion_ = other.exeAssemblyVersion_;
            gatewayUrl_ = other.gatewayUrl_;
            replicaOrInstanceId_ = other.replicaOrInstanceId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServiceFabricServiceInfo Clone()
        {
            return new ServiceFabricServiceInfo(this);
        }

        /// <summary>Field number for the "serviceName" field.</summary>
        public const int ServiceNameFieldNumber = 1;
        private string serviceName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ServiceName
        {
            get { return serviceName_; }
            set
            {
                serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "serviceTypeName" field.</summary>
        public const int ServiceTypeNameFieldNumber = 2;
        private string serviceTypeName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ServiceTypeName
        {
            get { return serviceTypeName_; }
            set
            {
                serviceTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "partitionId" field.</summary>
        public const int PartitionIdFieldNumber = 4;
        private string partitionId_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PartitionId
        {
            get { return partitionId_; }
            set
            {
                partitionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "nodeName" field.</summary>
        public const int NodeNameFieldNumber = 5;
        private string nodeName_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NodeName
        {
            get { return nodeName_; }
            set
            {
                nodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "codePackageVersion" field.</summary>
        public const int CodePackageVersionFieldNumber = 6;
        private string codePackageVersion_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CodePackageVersion
        {
            get { return codePackageVersion_; }
            set
            {
                codePackageVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "configPackages" field.</summary>
        public const int ConfigPackagesFieldNumber = 7;
        private static readonly pb::FieldCodec<ServiceFabricConfigPackageInfo> _repeated_configPackages_codec
            = pb::FieldCodec.ForMessage(58, ServiceFabricConfigPackageInfo.Parser);
        private readonly pbc::RepeatedField<ServiceFabricConfigPackageInfo> configPackages_ = new pbc::RepeatedField<ServiceFabricConfigPackageInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ServiceFabricConfigPackageInfo> ConfigPackages
        {
            get { return configPackages_; }
        }

        /// <summary>Field number for the "exeAssemblyVersion" field.</summary>
        public const int ExeAssemblyVersionFieldNumber = 10;
        private string exeAssemblyVersion_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ExeAssemblyVersion
        {
            get { return exeAssemblyVersion_; }
            set
            {
                exeAssemblyVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "gatewayUrl" field.</summary>
        public const int GatewayUrlFieldNumber = 20;
        private string gatewayUrl_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GatewayUrl
        {
            get { return gatewayUrl_; }
            set
            {
                gatewayUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "replicaOrInstanceId" field.</summary>
        public const int ReplicaOrInstanceIdFieldNumber = 3;
        private long replicaOrInstanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ReplicaOrInstanceId
        {
            get { return replicaOrInstanceId_; }
            set
            {
                replicaOrInstanceId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ServiceFabricServiceInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ServiceFabricServiceInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ServiceName != other.ServiceName) return false;
            if (ServiceTypeName != other.ServiceTypeName) return false;
            if (PartitionId != other.PartitionId) return false;
            if (NodeName != other.NodeName) return false;
            if (CodePackageVersion != other.CodePackageVersion) return false;
            if (!configPackages_.Equals(other.configPackages_)) return false;
            if (ExeAssemblyVersion != other.ExeAssemblyVersion) return false;
            if (GatewayUrl != other.GatewayUrl) return false;
            if (ReplicaOrInstanceId != other.ReplicaOrInstanceId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
            if (ServiceTypeName.Length != 0) hash ^= ServiceTypeName.GetHashCode();
            if (PartitionId.Length != 0) hash ^= PartitionId.GetHashCode();
            if (NodeName.Length != 0) hash ^= NodeName.GetHashCode();
            if (CodePackageVersion.Length != 0) hash ^= CodePackageVersion.GetHashCode();
            hash ^= configPackages_.GetHashCode();
            if (ExeAssemblyVersion.Length != 0) hash ^= ExeAssemblyVersion.GetHashCode();
            if (GatewayUrl.Length != 0) hash ^= GatewayUrl.GetHashCode();
            if (ReplicaOrInstanceId != 0L) hash ^= ReplicaOrInstanceId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ServiceName.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ServiceName);
            }
            if (ServiceTypeName.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(ServiceTypeName);
            }
            if (ReplicaOrInstanceId != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(ReplicaOrInstanceId);
            }
            if (PartitionId.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(PartitionId);
            }
            if (NodeName.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(NodeName);
            }
            if (CodePackageVersion.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(CodePackageVersion);
            }
            configPackages_.WriteTo(output, _repeated_configPackages_codec);
            if (ExeAssemblyVersion.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteString(ExeAssemblyVersion);
            }
            if (GatewayUrl.Length != 0)
            {
                output.WriteRawTag(162, 1);
                output.WriteString(GatewayUrl);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ServiceName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
            }
            if (ServiceTypeName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceTypeName);
            }
            if (PartitionId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PartitionId);
            }
            if (NodeName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeName);
            }
            if (CodePackageVersion.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CodePackageVersion);
            }
            size += configPackages_.CalculateSize(_repeated_configPackages_codec);
            if (ExeAssemblyVersion.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ExeAssemblyVersion);
            }
            if (GatewayUrl.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(GatewayUrl);
            }
            if (ReplicaOrInstanceId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReplicaOrInstanceId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ServiceFabricServiceInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ServiceName.Length != 0)
            {
                ServiceName = other.ServiceName;
            }
            if (other.ServiceTypeName.Length != 0)
            {
                ServiceTypeName = other.ServiceTypeName;
            }
            if (other.PartitionId.Length != 0)
            {
                PartitionId = other.PartitionId;
            }
            if (other.NodeName.Length != 0)
            {
                NodeName = other.NodeName;
            }
            if (other.CodePackageVersion.Length != 0)
            {
                CodePackageVersion = other.CodePackageVersion;
            }
            configPackages_.Add(other.configPackages_);
            if (other.ExeAssemblyVersion.Length != 0)
            {
                ExeAssemblyVersion = other.ExeAssemblyVersion;
            }
            if (other.GatewayUrl.Length != 0)
            {
                GatewayUrl = other.GatewayUrl;
            }
            if (other.ReplicaOrInstanceId != 0L)
            {
                ReplicaOrInstanceId = other.ReplicaOrInstanceId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ServiceName = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            ServiceTypeName = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            ReplicaOrInstanceId = input.ReadInt64();
                            break;
                        }
                    case 34:
                        {
                            PartitionId = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            NodeName = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            CodePackageVersion = input.ReadString();
                            break;
                        }
                    case 58:
                        {
                            configPackages_.AddEntriesFrom(input, _repeated_configPackages_codec);
                            break;
                        }
                    case 82:
                        {
                            ExeAssemblyVersion = input.ReadString();
                            break;
                        }
                    case 162:
                        {
                            GatewayUrl = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ServiceInfoRequest : pb::IMessage<ServiceInfoRequest>
    {
        private static readonly pb::MessageParser<ServiceInfoRequest> _parser = new pb::MessageParser<ServiceInfoRequest>(() => new ServiceInfoRequest());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ServiceInfoRequest> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[283]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServiceInfoRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServiceInfoRequest(ServiceInfoRequest other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServiceInfoRequest Clone()
        {
            return new ServiceInfoRequest(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ServiceInfoRequest);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ServiceInfoRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ServiceInfoRequest other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class SetSettingsReq : pb::IMessage<SetSettingsReq>
    {
        private static readonly pb::MessageParser<SetSettingsReq> _parser = new pb::MessageParser<SetSettingsReq>(() => new SetSettingsReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SetSettingsReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[284]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetSettingsReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetSettingsReq(SetSettingsReq other) : this()
        {
            settings_ = other.settings_ != null ? other.settings_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetSettingsReq Clone()
        {
            return new SetSettingsReq(this);
        }

        /// <summary>Field number for the "settings" field.</summary>
        public const int SettingsFieldNumber = 1;
        private SettingsMessage settings_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingsMessage Settings
        {
            get { return settings_; }
            set
            {
                settings_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SetSettingsReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SetSettingsReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Settings, other.Settings)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (settings_ != null) hash ^= Settings.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (settings_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Settings);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (settings_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SetSettingsReq other)
        {
            if (other == null)
            {
                return;
            }
            if (other.settings_ != null)
            {
                if (settings_ == null)
                {
                    settings_ = new SettingsMessage();
                }
                Settings.MergeFrom(other.Settings);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (settings_ == null)
                            {
                                settings_ = new SettingsMessage();
                            }
                            input.ReadMessage(settings_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SetSettingsResp : pb::IMessage<SetSettingsResp>
    {
        private static readonly pb::MessageParser<SetSettingsResp> _parser = new pb::MessageParser<SetSettingsResp>(() => new SetSettingsResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SetSettingsResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[285]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetSettingsResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetSettingsResp(SetSettingsResp other) : this()
        {
            settings_ = other.settings_ != null ? other.settings_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetSettingsResp Clone()
        {
            return new SetSettingsResp(this);
        }

        /// <summary>Field number for the "settings" field.</summary>
        public const int SettingsFieldNumber = 1;
        private SettingsMessage settings_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingsMessage Settings
        {
            get { return settings_; }
            set
            {
                settings_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SetSettingsResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SetSettingsResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Settings, other.Settings)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (settings_ != null) hash ^= Settings.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (settings_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Settings);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (settings_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SetSettingsResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.settings_ != null)
            {
                if (settings_ == null)
                {
                    settings_ = new SettingsMessage();
                }
                Settings.MergeFrom(other.Settings);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (settings_ == null)
                            {
                                settings_ = new SettingsMessage();
                            }
                            input.ReadMessage(settings_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SettingsMessage : pb::IMessage<SettingsMessage>
    {
        private static readonly pb::MessageParser<SettingsMessage> _parser = new pb::MessageParser<SettingsMessage>(() => new SettingsMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SettingsMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[286]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingsMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingsMessage(SettingsMessage other) : this()
        {
            stops_ = other.stops_.Clone();
            yields_ = other.yields_.Clone();
            answers_ = other.answers_.Clone();
            transientStops_ = other.transientStops_.Clone();
            cosmetics_ = other.cosmetics_.Clone();
            autoPassOption_ = other.autoPassOption_;
            graveyardOrder_ = other.graveyardOrder_;
            clearAllStops_ = other.clearAllStops_;
            clearAllYields_ = other.clearAllYields_;
            clearAllAnswers_ = other.clearAllAnswers_;
            manaSelectionType_ = other.manaSelectionType_;
            defaultAutoPassOption_ = other.defaultAutoPassOption_;
            smartStopsSetting_ = other.smartStopsSetting_;
            autoTapStopsSetting_ = other.autoTapStopsSetting_;
            autoOptionalPaymentCancellationSetting_ = other.autoOptionalPaymentCancellationSetting_;
            manaPaymentStrategyType_ = other.manaPaymentStrategyType_;
            autoSelectReplacementSetting_ = other.autoSelectReplacementSetting_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingsMessage Clone()
        {
            return new SettingsMessage(this);
        }

        /// <summary>Field number for the "stops" field.</summary>
        public const int StopsFieldNumber = 1;
        private static readonly pb::FieldCodec<Stop> _repeated_stops_codec
            = pb::FieldCodec.ForMessage(10, Stop.Parser);
        private readonly pbc::RepeatedField<Stop> stops_ = new pbc::RepeatedField<Stop>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Stop> Stops
        {
            get { return stops_; }
        }

        /// <summary>Field number for the "yields" field.</summary>
        public const int YieldsFieldNumber = 2;
        private static readonly pb::FieldCodec<AutoYield> _repeated_yields_codec
            = pb::FieldCodec.ForMessage(18, AutoYield.Parser);
        private readonly pbc::RepeatedField<AutoYield> yields_ = new pbc::RepeatedField<AutoYield>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<AutoYield> Yields
        {
            get { return yields_; }
        }

        /// <summary>Field number for the "answers" field.</summary>
        public const int AnswersFieldNumber = 3;
        private static readonly pb::FieldCodec<AutoAnswer> _repeated_answers_codec
            = pb::FieldCodec.ForMessage(26, AutoAnswer.Parser);
        private readonly pbc::RepeatedField<AutoAnswer> answers_ = new pbc::RepeatedField<AutoAnswer>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<AutoAnswer> Answers
        {
            get { return answers_; }
        }

        /// <summary>Field number for the "transientStops" field.</summary>
        public const int TransientStopsFieldNumber = 15;
        private static readonly pb::FieldCodec<Stop> _repeated_transientStops_codec
            = pb::FieldCodec.ForMessage(122, Stop.Parser);
        private readonly pbc::RepeatedField<Stop> transientStops_ = new pbc::RepeatedField<Stop>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Stop> TransientStops
        {
            get { return transientStops_; }
        }

        /// <summary>Field number for the "cosmetics" field.</summary>
        public const int CosmeticsFieldNumber = 16;
        private static readonly pb::FieldCodec<CosmeticInfo> _repeated_cosmetics_codec
            = pb::FieldCodec.ForMessage(130, CosmeticInfo.Parser);
        private readonly pbc::RepeatedField<CosmeticInfo> cosmetics_ = new pbc::RepeatedField<CosmeticInfo>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<CosmeticInfo> Cosmetics
        {
            get { return cosmetics_; }
        }

        /// <summary>Field number for the "autoPassOption" field.</summary>
        public const int AutoPassOptionFieldNumber = 4;
        private AutoPassOption autoPassOption_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoPassOption AutoPassOption
        {
            get { return autoPassOption_; }
            set
            {
                autoPassOption_ = value;
            }
        }

        /// <summary>Field number for the "graveyardOrder" field.</summary>
        public const int GraveyardOrderFieldNumber = 5;
        private OrderingType graveyardOrder_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OrderingType GraveyardOrder
        {
            get { return graveyardOrder_; }
            set
            {
                graveyardOrder_ = value;
            }
        }

        /// <summary>Field number for the "clearAllStops" field.</summary>
        public const int ClearAllStopsFieldNumber = 6;
        private SettingStatus clearAllStops_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingStatus ClearAllStops
        {
            get { return clearAllStops_; }
            set
            {
                clearAllStops_ = value;
            }
        }

        /// <summary>Field number for the "clearAllYields" field.</summary>
        public const int ClearAllYieldsFieldNumber = 7;
        private SettingStatus clearAllYields_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingStatus ClearAllYields
        {
            get { return clearAllYields_; }
            set
            {
                clearAllYields_ = value;
            }
        }

        /// <summary>Field number for the "clearAllAnswers" field.</summary>
        public const int ClearAllAnswersFieldNumber = 8;
        private SettingStatus clearAllAnswers_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingStatus ClearAllAnswers
        {
            get { return clearAllAnswers_; }
            set
            {
                clearAllAnswers_ = value;
            }
        }

        /// <summary>Field number for the "manaSelectionType" field.</summary>
        public const int ManaSelectionTypeFieldNumber = 9;
        private ManaSelectionType manaSelectionType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaSelectionType ManaSelectionType
        {
            get { return manaSelectionType_; }
            set
            {
                manaSelectionType_ = value;
            }
        }

        /// <summary>Field number for the "defaultAutoPassOption" field.</summary>
        public const int DefaultAutoPassOptionFieldNumber = 10;
        private AutoPassOption defaultAutoPassOption_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoPassOption DefaultAutoPassOption
        {
            get { return defaultAutoPassOption_; }
            set
            {
                defaultAutoPassOption_ = value;
            }
        }

        /// <summary>Field number for the "smartStopsSetting" field.</summary>
        public const int SmartStopsSettingFieldNumber = 11;
        private SmartStopsSetting smartStopsSetting_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SmartStopsSetting SmartStopsSetting
        {
            get { return smartStopsSetting_; }
            set
            {
                smartStopsSetting_ = value;
            }
        }

        /// <summary>Field number for the "autoTapStopsSetting" field.</summary>
        public const int AutoTapStopsSettingFieldNumber = 12;
        private AutoTapStopsSetting autoTapStopsSetting_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoTapStopsSetting AutoTapStopsSetting
        {
            get { return autoTapStopsSetting_; }
            set
            {
                autoTapStopsSetting_ = value;
            }
        }

        /// <summary>Field number for the "autoOptionalPaymentCancellationSetting" field.</summary>
        public const int AutoOptionalPaymentCancellationSettingFieldNumber = 13;
        private Setting autoOptionalPaymentCancellationSetting_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Setting AutoOptionalPaymentCancellationSetting
        {
            get { return autoOptionalPaymentCancellationSetting_; }
            set
            {
                autoOptionalPaymentCancellationSetting_ = value;
            }
        }

        /// <summary>Field number for the "manaPaymentStrategyType" field.</summary>
        public const int ManaPaymentStrategyTypeFieldNumber = 14;
        private ManaPaymentStrategyType manaPaymentStrategyType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ManaPaymentStrategyType ManaPaymentStrategyType
        {
            get { return manaPaymentStrategyType_; }
            set
            {
                manaPaymentStrategyType_ = value;
            }
        }

        /// <summary>Field number for the "autoSelectReplacementSetting" field.</summary>
        public const int AutoSelectReplacementSettingFieldNumber = 17;
        private Setting autoSelectReplacementSetting_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Setting AutoSelectReplacementSetting
        {
            get { return autoSelectReplacementSetting_; }
            set
            {
                autoSelectReplacementSetting_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SettingsMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SettingsMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!stops_.Equals(other.stops_)) return false;
            if (!yields_.Equals(other.yields_)) return false;
            if (!answers_.Equals(other.answers_)) return false;
            if (!transientStops_.Equals(other.transientStops_)) return false;
            if (!cosmetics_.Equals(other.cosmetics_)) return false;
            if (AutoPassOption != other.AutoPassOption) return false;
            if (GraveyardOrder != other.GraveyardOrder) return false;
            if (ClearAllStops != other.ClearAllStops) return false;
            if (ClearAllYields != other.ClearAllYields) return false;
            if (ClearAllAnswers != other.ClearAllAnswers) return false;
            if (ManaSelectionType != other.ManaSelectionType) return false;
            if (DefaultAutoPassOption != other.DefaultAutoPassOption) return false;
            if (SmartStopsSetting != other.SmartStopsSetting) return false;
            if (AutoTapStopsSetting != other.AutoTapStopsSetting) return false;
            if (AutoOptionalPaymentCancellationSetting != other.AutoOptionalPaymentCancellationSetting) return false;
            if (ManaPaymentStrategyType != other.ManaPaymentStrategyType) return false;
            if (AutoSelectReplacementSetting != other.AutoSelectReplacementSetting) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= stops_.GetHashCode();
            hash ^= yields_.GetHashCode();
            hash ^= answers_.GetHashCode();
            hash ^= transientStops_.GetHashCode();
            hash ^= cosmetics_.GetHashCode();
            if (AutoPassOption != 0) hash ^= AutoPassOption.GetHashCode();
            if (GraveyardOrder != 0) hash ^= GraveyardOrder.GetHashCode();
            if (ClearAllStops != 0) hash ^= ClearAllStops.GetHashCode();
            if (ClearAllYields != 0) hash ^= ClearAllYields.GetHashCode();
            if (ClearAllAnswers != 0) hash ^= ClearAllAnswers.GetHashCode();
            if (ManaSelectionType != 0) hash ^= ManaSelectionType.GetHashCode();
            if (DefaultAutoPassOption != 0) hash ^= DefaultAutoPassOption.GetHashCode();
            if (SmartStopsSetting != 0) hash ^= SmartStopsSetting.GetHashCode();
            if (AutoTapStopsSetting != 0) hash ^= AutoTapStopsSetting.GetHashCode();
            if (AutoOptionalPaymentCancellationSetting != 0) hash ^= AutoOptionalPaymentCancellationSetting.GetHashCode();
            if (ManaPaymentStrategyType != 0) hash ^= ManaPaymentStrategyType.GetHashCode();
            if (AutoSelectReplacementSetting != 0) hash ^= AutoSelectReplacementSetting.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            stops_.WriteTo(output, _repeated_stops_codec);
            yields_.WriteTo(output, _repeated_yields_codec);
            answers_.WriteTo(output, _repeated_answers_codec);
            if (AutoPassOption != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)AutoPassOption);
            }
            if (GraveyardOrder != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)GraveyardOrder);
            }
            if (ClearAllStops != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)ClearAllStops);
            }
            if (ClearAllYields != 0)
            {
                output.WriteRawTag(56);
                output.WriteEnum((int)ClearAllYields);
            }
            if (ClearAllAnswers != 0)
            {
                output.WriteRawTag(64);
                output.WriteEnum((int)ClearAllAnswers);
            }
            if (ManaSelectionType != 0)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)ManaSelectionType);
            }
            if (DefaultAutoPassOption != 0)
            {
                output.WriteRawTag(80);
                output.WriteEnum((int)DefaultAutoPassOption);
            }
            if (SmartStopsSetting != 0)
            {
                output.WriteRawTag(88);
                output.WriteEnum((int)SmartStopsSetting);
            }
            if (AutoTapStopsSetting != 0)
            {
                output.WriteRawTag(96);
                output.WriteEnum((int)AutoTapStopsSetting);
            }
            if (AutoOptionalPaymentCancellationSetting != 0)
            {
                output.WriteRawTag(104);
                output.WriteEnum((int)AutoOptionalPaymentCancellationSetting);
            }
            if (ManaPaymentStrategyType != 0)
            {
                output.WriteRawTag(112);
                output.WriteEnum((int)ManaPaymentStrategyType);
            }
            transientStops_.WriteTo(output, _repeated_transientStops_codec);
            cosmetics_.WriteTo(output, _repeated_cosmetics_codec);
            if (AutoSelectReplacementSetting != 0)
            {
                output.WriteRawTag(136, 1);
                output.WriteEnum((int)AutoSelectReplacementSetting);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += stops_.CalculateSize(_repeated_stops_codec);
            size += yields_.CalculateSize(_repeated_yields_codec);
            size += answers_.CalculateSize(_repeated_answers_codec);
            size += transientStops_.CalculateSize(_repeated_transientStops_codec);
            size += cosmetics_.CalculateSize(_repeated_cosmetics_codec);
            if (AutoPassOption != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AutoPassOption);
            }
            if (GraveyardOrder != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GraveyardOrder);
            }
            if (ClearAllStops != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ClearAllStops);
            }
            if (ClearAllYields != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ClearAllYields);
            }
            if (ClearAllAnswers != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ClearAllAnswers);
            }
            if (ManaSelectionType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ManaSelectionType);
            }
            if (DefaultAutoPassOption != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)DefaultAutoPassOption);
            }
            if (SmartStopsSetting != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)SmartStopsSetting);
            }
            if (AutoTapStopsSetting != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AutoTapStopsSetting);
            }
            if (AutoOptionalPaymentCancellationSetting != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AutoOptionalPaymentCancellationSetting);
            }
            if (ManaPaymentStrategyType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ManaPaymentStrategyType);
            }
            if (AutoSelectReplacementSetting != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)AutoSelectReplacementSetting);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SettingsMessage other)
        {
            if (other == null)
            {
                return;
            }
            stops_.Add(other.stops_);
            yields_.Add(other.yields_);
            answers_.Add(other.answers_);
            transientStops_.Add(other.transientStops_);
            cosmetics_.Add(other.cosmetics_);
            if (other.AutoPassOption != 0)
            {
                AutoPassOption = other.AutoPassOption;
            }
            if (other.GraveyardOrder != 0)
            {
                GraveyardOrder = other.GraveyardOrder;
            }
            if (other.ClearAllStops != 0)
            {
                ClearAllStops = other.ClearAllStops;
            }
            if (other.ClearAllYields != 0)
            {
                ClearAllYields = other.ClearAllYields;
            }
            if (other.ClearAllAnswers != 0)
            {
                ClearAllAnswers = other.ClearAllAnswers;
            }
            if (other.ManaSelectionType != 0)
            {
                ManaSelectionType = other.ManaSelectionType;
            }
            if (other.DefaultAutoPassOption != 0)
            {
                DefaultAutoPassOption = other.DefaultAutoPassOption;
            }
            if (other.SmartStopsSetting != 0)
            {
                SmartStopsSetting = other.SmartStopsSetting;
            }
            if (other.AutoTapStopsSetting != 0)
            {
                AutoTapStopsSetting = other.AutoTapStopsSetting;
            }
            if (other.AutoOptionalPaymentCancellationSetting != 0)
            {
                AutoOptionalPaymentCancellationSetting = other.AutoOptionalPaymentCancellationSetting;
            }
            if (other.ManaPaymentStrategyType != 0)
            {
                ManaPaymentStrategyType = other.ManaPaymentStrategyType;
            }
            if (other.AutoSelectReplacementSetting != 0)
            {
                AutoSelectReplacementSetting = other.AutoSelectReplacementSetting;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            stops_.AddEntriesFrom(input, _repeated_stops_codec);
                            break;
                        }
                    case 18:
                        {
                            yields_.AddEntriesFrom(input, _repeated_yields_codec);
                            break;
                        }
                    case 26:
                        {
                            answers_.AddEntriesFrom(input, _repeated_answers_codec);
                            break;
                        }
                    case 32:
                        {
                            autoPassOption_ = (AutoPassOption)input.ReadEnum();
                            break;
                        }
                    case 40:
                        {
                            graveyardOrder_ = (OrderingType)input.ReadEnum();
                            break;
                        }
                    case 48:
                        {
                            clearAllStops_ = (SettingStatus)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            clearAllYields_ = (SettingStatus)input.ReadEnum();
                            break;
                        }
                    case 64:
                        {
                            clearAllAnswers_ = (SettingStatus)input.ReadEnum();
                            break;
                        }
                    case 72:
                        {
                            manaSelectionType_ = (ManaSelectionType)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            defaultAutoPassOption_ = (AutoPassOption)input.ReadEnum();
                            break;
                        }
                    case 88:
                        {
                            smartStopsSetting_ = (SmartStopsSetting)input.ReadEnum();
                            break;
                        }
                    case 96:
                        {
                            autoTapStopsSetting_ = (AutoTapStopsSetting)input.ReadEnum();
                            break;
                        }
                    case 104:
                        {
                            autoOptionalPaymentCancellationSetting_ = (Setting)input.ReadEnum();
                            break;
                        }
                    case 112:
                        {
                            manaPaymentStrategyType_ = (ManaPaymentStrategyType)input.ReadEnum();
                            break;
                        }
                    case 122:
                        {
                            transientStops_.AddEntriesFrom(input, _repeated_transientStops_codec);
                            break;
                        }
                    case 130:
                        {
                            cosmetics_.AddEntriesFrom(input, _repeated_cosmetics_codec);
                            break;
                        }
                    case 136:
                        {
                            autoSelectReplacementSetting_ = (Setting)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SortFilterPagingOptions : pb::IMessage<SortFilterPagingOptions>
    {
        private static readonly pb::MessageParser<SortFilterPagingOptions> _parser = new pb::MessageParser<SortFilterPagingOptions>(() => new SortFilterPagingOptions());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SortFilterPagingOptions> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[287]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SortFilterPagingOptions()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SortFilterPagingOptions(SortFilterPagingOptions other) : this()
        {
            sort_ = other.sort_;
            filter_ = other.filter_;
            top_ = other.top_;
            skip_ = other.skip_;
            continuationToken_ = other.continuationToken_ != null ? other.continuationToken_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SortFilterPagingOptions Clone()
        {
            return new SortFilterPagingOptions(this);
        }

        /// <summary>Field number for the "sort" field.</summary>
        public const int SortFieldNumber = 1;
        private string sort_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Sort
        {
            get { return sort_; }
            set
            {
                sort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "filter" field.</summary>
        public const int FilterFieldNumber = 2;
        private string filter_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Filter
        {
            get { return filter_; }
            set
            {
                filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "top" field.</summary>
        public const int TopFieldNumber = 5;
        private int top_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Top
        {
            get { return top_; }
            set
            {
                top_ = value;
            }
        }

        /// <summary>Field number for the "skip" field.</summary>
        public const int SkipFieldNumber = 6;
        private int skip_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Skip
        {
            get { return skip_; }
            set
            {
                skip_ = value;
            }
        }

        /// <summary>Field number for the "continuationToken" field.</summary>
        public const int ContinuationTokenFieldNumber = 10;
        private ContinuationToken continuationToken_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContinuationToken ContinuationToken
        {
            get { return continuationToken_; }
            set
            {
                continuationToken_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SortFilterPagingOptions);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SortFilterPagingOptions other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Sort != other.Sort) return false;
            if (Filter != other.Filter) return false;
            if (Top != other.Top) return false;
            if (Skip != other.Skip) return false;
            if (!object.Equals(ContinuationToken, other.ContinuationToken)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Sort.Length != 0) hash ^= Sort.GetHashCode();
            if (Filter.Length != 0) hash ^= Filter.GetHashCode();
            if (Top != 0) hash ^= Top.GetHashCode();
            if (Skip != 0) hash ^= Skip.GetHashCode();
            if (continuationToken_ != null) hash ^= ContinuationToken.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Sort.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Sort);
            }
            if (Filter.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Filter);
            }
            if (Top != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(Top);
            }
            if (Skip != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(Skip);
            }
            if (continuationToken_ != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(ContinuationToken);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Sort.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Sort);
            }
            if (Filter.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
            }
            if (Top != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Top);
            }
            if (Skip != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skip);
            }
            if (continuationToken_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContinuationToken);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SortFilterPagingOptions other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Sort.Length != 0)
            {
                Sort = other.Sort;
            }
            if (other.Filter.Length != 0)
            {
                Filter = other.Filter;
            }
            if (other.Top != 0)
            {
                Top = other.Top;
            }
            if (other.Skip != 0)
            {
                Skip = other.Skip;
            }
            if (other.continuationToken_ != null)
            {
                if (continuationToken_ == null)
                {
                    continuationToken_ = new ContinuationToken();
                }
                ContinuationToken.MergeFrom(other.ContinuationToken);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Sort = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Filter = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            Top = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            Skip = input.ReadInt32();
                            break;
                        }
                    case 82:
                        {
                            if (continuationToken_ == null)
                            {
                                continuationToken_ = new ContinuationToken();
                            }
                            input.ReadMessage(continuationToken_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Stop : pb::IMessage<Stop>
    {
        private static readonly pb::MessageParser<Stop> _parser = new pb::MessageParser<Stop>(() => new Stop());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Stop> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[288]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Stop()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Stop(Stop other) : this()
        {
            stopType_ = other.stopType_;
            appliesTo_ = other.appliesTo_;
            status_ = other.status_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Stop Clone()
        {
            return new Stop(this);
        }

        /// <summary>Field number for the "stopType" field.</summary>
        public const int StopTypeFieldNumber = 1;
        private StopType stopType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopType StopType
        {
            get { return stopType_; }
            set
            {
                stopType_ = value;
            }
        }

        /// <summary>Field number for the "appliesTo" field.</summary>
        public const int AppliesToFieldNumber = 2;
        private SettingScope appliesTo_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingScope AppliesTo
        {
            get { return appliesTo_; }
            set
            {
                appliesTo_ = value;
            }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 3;
        private SettingStatus status_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettingStatus Status
        {
            get { return status_; }
            set
            {
                status_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Stop);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Stop other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (StopType != other.StopType) return false;
            if (AppliesTo != other.AppliesTo) return false;
            if (Status != other.Status) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (StopType != 0) hash ^= StopType.GetHashCode();
            if (AppliesTo != 0) hash ^= AppliesTo.GetHashCode();
            if (Status != 0) hash ^= Status.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (StopType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)StopType);
            }
            if (AppliesTo != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)AppliesTo);
            }
            if (Status != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)Status);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (StopType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)StopType);
            }
            if (AppliesTo != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AppliesTo);
            }
            if (Status != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Status);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Stop other)
        {
            if (other == null)
            {
                return;
            }
            if (other.StopType != 0)
            {
                StopType = other.StopType;
            }
            if (other.AppliesTo != 0)
            {
                AppliesTo = other.AppliesTo;
            }
            if (other.Status != 0)
            {
                Status = other.Status;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            stopType_ = (StopType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            appliesTo_ = (SettingScope)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            status_ = (SettingStatus)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SubmitAttackersResp : pb::IMessage<SubmitAttackersResp>
    {
        private static readonly pb::MessageParser<SubmitAttackersResp> _parser = new pb::MessageParser<SubmitAttackersResp>(() => new SubmitAttackersResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SubmitAttackersResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[289]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitAttackersResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitAttackersResp(SubmitAttackersResp other) : this()
        {
            invalidAttackers_ = other.invalidAttackers_.Clone();
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitAttackersResp Clone()
        {
            return new SubmitAttackersResp(this);
        }

        /// <summary>Field number for the "invalidAttackers" field.</summary>
        public const int InvalidAttackersFieldNumber = 2;
        private static readonly pb::FieldCodec<InvalidAttacker> _repeated_invalidAttackers_codec
            = pb::FieldCodec.ForMessage(18, InvalidAttacker.Parser);
        private readonly pbc::RepeatedField<InvalidAttacker> invalidAttackers_ = new pbc::RepeatedField<InvalidAttacker>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<InvalidAttacker> InvalidAttackers
        {
            get { return invalidAttackers_; }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private ResultCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SubmitAttackersResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SubmitAttackersResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!invalidAttackers_.Equals(other.invalidAttackers_)) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= invalidAttackers_.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Result != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Result);
            }
            invalidAttackers_.WriteTo(output, _repeated_invalidAttackers_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += invalidAttackers_.CalculateSize(_repeated_invalidAttackers_codec);
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SubmitAttackersResp other)
        {
            if (other == null)
            {
                return;
            }
            invalidAttackers_.Add(other.invalidAttackers_);
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            result_ = (ResultCode)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            invalidAttackers_.AddEntriesFrom(input, _repeated_invalidAttackers_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SubmitBlockersResp : pb::IMessage<SubmitBlockersResp>
    {
        private static readonly pb::MessageParser<SubmitBlockersResp> _parser = new pb::MessageParser<SubmitBlockersResp>(() => new SubmitBlockersResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SubmitBlockersResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[290]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitBlockersResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitBlockersResp(SubmitBlockersResp other) : this()
        {
            invalidBlockers_ = other.invalidBlockers_.Clone();
            effectViolationBlocking_ = other.effectViolationBlocking_.Clone();
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitBlockersResp Clone()
        {
            return new SubmitBlockersResp(this);
        }

        /// <summary>Field number for the "invalidBlockers" field.</summary>
        public const int InvalidBlockersFieldNumber = 2;
        private static readonly pb::FieldCodec<InvalidBlocker> _repeated_invalidBlockers_codec
            = pb::FieldCodec.ForMessage(18, InvalidBlocker.Parser);
        private readonly pbc::RepeatedField<InvalidBlocker> invalidBlockers_ = new pbc::RepeatedField<InvalidBlocker>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<InvalidBlocker> InvalidBlockers
        {
            get { return invalidBlockers_; }
        }

        /// <summary>Field number for the "effectViolationBlocking" field.</summary>
        public const int EffectViolationBlockingFieldNumber = 3;
        private static readonly pb::FieldCodec<EffectViolationBlocking> _repeated_effectViolationBlocking_codec
            = pb::FieldCodec.ForMessage(26, MTGAHelper.Entity.Protobuf.EffectViolationBlocking.Parser);
        private readonly pbc::RepeatedField<EffectViolationBlocking> effectViolationBlocking_ = new pbc::RepeatedField<EffectViolationBlocking>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<EffectViolationBlocking> EffectViolationBlocking
        {
            get { return effectViolationBlocking_; }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private ResultCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SubmitBlockersResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SubmitBlockersResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!invalidBlockers_.Equals(other.invalidBlockers_)) return false;
            if (!effectViolationBlocking_.Equals(other.effectViolationBlocking_)) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= invalidBlockers_.GetHashCode();
            hash ^= effectViolationBlocking_.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Result != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Result);
            }
            invalidBlockers_.WriteTo(output, _repeated_invalidBlockers_codec);
            effectViolationBlocking_.WriteTo(output, _repeated_effectViolationBlocking_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += invalidBlockers_.CalculateSize(_repeated_invalidBlockers_codec);
            size += effectViolationBlocking_.CalculateSize(_repeated_effectViolationBlocking_codec);
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SubmitBlockersResp other)
        {
            if (other == null)
            {
                return;
            }
            invalidBlockers_.Add(other.invalidBlockers_);
            effectViolationBlocking_.Add(other.effectViolationBlocking_);
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            result_ = (ResultCode)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            invalidBlockers_.AddEntriesFrom(input, _repeated_invalidBlockers_codec);
                            break;
                        }
                    case 26:
                        {
                            effectViolationBlocking_.AddEntriesFrom(input, _repeated_effectViolationBlocking_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SubmitDeckReq : pb::IMessage<SubmitDeckReq>
    {
        private static readonly pb::MessageParser<SubmitDeckReq> _parser = new pb::MessageParser<SubmitDeckReq>(() => new SubmitDeckReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SubmitDeckReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[291]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitDeckReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitDeckReq(SubmitDeckReq other) : this()
        {
            deck_ = other.deck_ != null ? other.deck_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitDeckReq Clone()
        {
            return new SubmitDeckReq(this);
        }

        /// <summary>Field number for the "deck" field.</summary>
        public const int DeckFieldNumber = 1;
        private DeckMessage deck_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeckMessage Deck
        {
            get { return deck_; }
            set
            {
                deck_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SubmitDeckReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SubmitDeckReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Deck, other.Deck)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (deck_ != null) hash ^= Deck.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (deck_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Deck);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (deck_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SubmitDeckReq other)
        {
            if (other == null)
            {
                return;
            }
            if (other.deck_ != null)
            {
                if (deck_ == null)
                {
                    deck_ = new DeckMessage();
                }
                Deck.MergeFrom(other.Deck);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (deck_ == null)
                            {
                                deck_ = new DeckMessage();
                            }
                            input.ReadMessage(deck_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SubmitDeckResp : pb::IMessage<SubmitDeckResp>
    {
        private static readonly pb::MessageParser<SubmitDeckResp> _parser = new pb::MessageParser<SubmitDeckResp>(() => new SubmitDeckResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SubmitDeckResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[292]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitDeckResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitDeckResp(SubmitDeckResp other) : this()
        {
            deck_ = other.deck_ != null ? other.deck_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitDeckResp Clone()
        {
            return new SubmitDeckResp(this);
        }

        /// <summary>Field number for the "deck" field.</summary>
        public const int DeckFieldNumber = 1;
        private DeckMessage deck_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeckMessage Deck
        {
            get { return deck_; }
            set
            {
                deck_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SubmitDeckResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SubmitDeckResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Deck, other.Deck)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (deck_ != null) hash ^= Deck.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (deck_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Deck);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (deck_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SubmitDeckResp other)
        {
            if (other == null)
            {
                return;
            }
            if (other.deck_ != null)
            {
                if (deck_ == null)
                {
                    deck_ = new DeckMessage();
                }
                Deck.MergeFrom(other.Deck);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (deck_ == null)
                            {
                                deck_ = new DeckMessage();
                            }
                            input.ReadMessage(deck_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SubmitPaymentReq : pb::IMessage<SubmitPaymentReq>
    {
        private static readonly pb::MessageParser<SubmitPaymentReq> _parser = new pb::MessageParser<SubmitPaymentReq>(() => new SubmitPaymentReq());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SubmitPaymentReq> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[293]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitPaymentReq()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitPaymentReq(SubmitPaymentReq other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitPaymentReq Clone()
        {
            return new SubmitPaymentReq(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SubmitPaymentReq);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SubmitPaymentReq other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SubmitPaymentReq other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class SubmitPaymentResp : pb::IMessage<SubmitPaymentResp>
    {
        private static readonly pb::MessageParser<SubmitPaymentResp> _parser = new pb::MessageParser<SubmitPaymentResp>(() => new SubmitPaymentResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SubmitPaymentResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[294]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitPaymentResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitPaymentResp(SubmitPaymentResp other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitPaymentResp Clone()
        {
            return new SubmitPaymentResp(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SubmitPaymentResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SubmitPaymentResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SubmitPaymentResp other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class SubmitTargetsResp : pb::IMessage<SubmitTargetsResp>
    {
        private static readonly pb::MessageParser<SubmitTargetsResp> _parser = new pb::MessageParser<SubmitTargetsResp>(() => new SubmitTargetsResp());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SubmitTargetsResp> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[295]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitTargetsResp()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitTargetsResp(SubmitTargetsResp other) : this()
        {
            invalidSelections_ = other.invalidSelections_.Clone();
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubmitTargetsResp Clone()
        {
            return new SubmitTargetsResp(this);
        }

        /// <summary>Field number for the "invalidSelections" field.</summary>
        public const int InvalidSelectionsFieldNumber = 2;
        private static readonly pb::FieldCodec<InvalidTargetSelection> _repeated_invalidSelections_codec
            = pb::FieldCodec.ForMessage(18, InvalidTargetSelection.Parser);
        private readonly pbc::RepeatedField<InvalidTargetSelection> invalidSelections_ = new pbc::RepeatedField<InvalidTargetSelection>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<InvalidTargetSelection> InvalidSelections
        {
            get { return invalidSelections_; }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private ResultCode result_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultCode Result
        {
            get { return result_; }
            set
            {
                result_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SubmitTargetsResp);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SubmitTargetsResp other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!invalidSelections_.Equals(other.invalidSelections_)) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= invalidSelections_.GetHashCode();
            if (Result != 0) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Result != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Result);
            }
            invalidSelections_.WriteTo(output, _repeated_invalidSelections_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += invalidSelections_.CalculateSize(_repeated_invalidSelections_codec);
            if (Result != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SubmitTargetsResp other)
        {
            if (other == null)
            {
                return;
            }
            invalidSelections_.Add(other.invalidSelections_);
            if (other.Result != 0)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            result_ = (ResultCode)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            invalidSelections_.AddEntriesFrom(input, _repeated_invalidSelections_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Target : pb::IMessage<Target>
    {
        private static readonly pb::MessageParser<Target> _parser = new pb::MessageParser<Target>(() => new Target());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Target> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[296]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Target()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Target(Target other) : this()
        {
            targetInstanceId_ = other.targetInstanceId_;
            legalAction_ = other.legalAction_;
            highlight_ = other.highlight_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Target Clone()
        {
            return new Target(this);
        }

        /// <summary>Field number for the "targetInstanceId" field.</summary>
        public const int TargetInstanceIdFieldNumber = 1;
        private uint targetInstanceId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TargetInstanceId
        {
            get { return targetInstanceId_; }
            set
            {
                targetInstanceId_ = value;
            }
        }

        /// <summary>Field number for the "legalAction" field.</summary>
        public const int LegalActionFieldNumber = 2;
        private SelectAction legalAction_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelectAction LegalAction
        {
            get { return legalAction_; }
            set
            {
                legalAction_ = value;
            }
        }

        /// <summary>Field number for the "highlight" field.</summary>
        public const int HighlightFieldNumber = 3;
        private uint highlight_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Highlight
        {
            get { return highlight_; }
            set
            {
                highlight_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Target);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Target other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TargetInstanceId != other.TargetInstanceId) return false;
            if (LegalAction != other.LegalAction) return false;
            if (Highlight != other.Highlight) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TargetInstanceId != 0) hash ^= TargetInstanceId.GetHashCode();
            if (LegalAction != 0) hash ^= LegalAction.GetHashCode();
            if (Highlight != 0) hash ^= Highlight.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TargetInstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(TargetInstanceId);
            }
            if (LegalAction != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)LegalAction);
            }
            if (Highlight != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(Highlight);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TargetInstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetInstanceId);
            }
            if (LegalAction != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)LegalAction);
            }
            if (Highlight != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Highlight);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Target other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TargetInstanceId != 0)
            {
                TargetInstanceId = other.TargetInstanceId;
            }
            if (other.LegalAction != 0)
            {
                LegalAction = other.LegalAction;
            }
            if (other.Highlight != 0)
            {
                Highlight = other.Highlight;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            TargetInstanceId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            legalAction_ = (SelectAction)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            Highlight = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TargetInfo : pb::IMessage<TargetInfo>
    {
        private static readonly pb::MessageParser<TargetInfo> _parser = new pb::MessageParser<TargetInfo>(() => new TargetInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TargetInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[297]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetInfo(TargetInfo other) : this()
        {
            targetType_ = other.targetType_;
            targetId_ = other.targetId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetInfo Clone()
        {
            return new TargetInfo(this);
        }

        /// <summary>Field number for the "targetType" field.</summary>
        public const int TargetTypeFieldNumber = 1;
        private TargetType targetType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetType TargetType
        {
            get { return targetType_; }
            set
            {
                targetType_ = value;
            }
        }

        /// <summary>Field number for the "targetId" field.</summary>
        public const int TargetIdFieldNumber = 2;
        private uint targetId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TargetId
        {
            get { return targetId_; }
            set
            {
                targetId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TargetInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TargetInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TargetType != other.TargetType) return false;
            if (TargetId != other.TargetId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TargetType != 0) hash ^= TargetType.GetHashCode();
            if (TargetId != 0) hash ^= TargetId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TargetType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)TargetType);
            }
            if (TargetId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(TargetId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TargetType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)TargetType);
            }
            if (TargetId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TargetInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TargetType != 0)
            {
                TargetType = other.TargetType;
            }
            if (other.TargetId != 0)
            {
                TargetId = other.TargetId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            targetType_ = (TargetType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            TargetId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TargetSelection : pb::IMessage<TargetSelection>
    {
        private static readonly pb::MessageParser<TargetSelection> _parser = new pb::MessageParser<TargetSelection>(() => new TargetSelection());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TargetSelection> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[298]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetSelection()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetSelection(TargetSelection other) : this()
        {
            targets_ = other.targets_.Clone();
            targetIdx_ = other.targetIdx_;
            minTargets_ = other.minTargets_;
            maxTargets_ = other.maxTargets_;
            selectedTargets_ = other.selectedTargets_;
            prompt_ = other.prompt_ != null ? other.prompt_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetSelection Clone()
        {
            return new TargetSelection(this);
        }

        /// <summary>Field number for the "targets" field.</summary>
        public const int TargetsFieldNumber = 2;
        private static readonly pb::FieldCodec<Target> _repeated_targets_codec
            = pb::FieldCodec.ForMessage(18, Target.Parser);
        private readonly pbc::RepeatedField<Target> targets_ = new pbc::RepeatedField<Target>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<Target> Targets
        {
            get { return targets_; }
        }

        /// <summary>Field number for the "targetIdx" field.</summary>
        public const int TargetIdxFieldNumber = 1;
        private uint targetIdx_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TargetIdx
        {
            get { return targetIdx_; }
            set
            {
                targetIdx_ = value;
            }
        }

        /// <summary>Field number for the "minTargets" field.</summary>
        public const int MinTargetsFieldNumber = 3;
        private uint minTargets_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinTargets
        {
            get { return minTargets_; }
            set
            {
                minTargets_ = value;
            }
        }

        /// <summary>Field number for the "maxTargets" field.</summary>
        public const int MaxTargetsFieldNumber = 4;
        private uint maxTargets_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxTargets
        {
            get { return maxTargets_; }
            set
            {
                maxTargets_ = value;
            }
        }

        /// <summary>Field number for the "selectedTargets" field.</summary>
        public const int SelectedTargetsFieldNumber = 5;
        private uint selectedTargets_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SelectedTargets
        {
            get { return selectedTargets_; }
            set
            {
                selectedTargets_ = value;
            }
        }

        /// <summary>Field number for the "prompt" field.</summary>
        public const int PromptFieldNumber = 6;
        private Prompt prompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt Prompt
        {
            get { return prompt_; }
            set
            {
                prompt_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TargetSelection);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TargetSelection other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!targets_.Equals(other.targets_)) return false;
            if (TargetIdx != other.TargetIdx) return false;
            if (MinTargets != other.MinTargets) return false;
            if (MaxTargets != other.MaxTargets) return false;
            if (SelectedTargets != other.SelectedTargets) return false;
            if (!object.Equals(Prompt, other.Prompt)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= targets_.GetHashCode();
            if (TargetIdx != 0) hash ^= TargetIdx.GetHashCode();
            if (MinTargets != 0) hash ^= MinTargets.GetHashCode();
            if (MaxTargets != 0) hash ^= MaxTargets.GetHashCode();
            if (SelectedTargets != 0) hash ^= SelectedTargets.GetHashCode();
            if (prompt_ != null) hash ^= Prompt.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TargetIdx != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(TargetIdx);
            }
            targets_.WriteTo(output, _repeated_targets_codec);
            if (MinTargets != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MinTargets);
            }
            if (MaxTargets != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(MaxTargets);
            }
            if (SelectedTargets != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(SelectedTargets);
            }
            if (prompt_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(Prompt);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += targets_.CalculateSize(_repeated_targets_codec);
            if (TargetIdx != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetIdx);
            }
            if (MinTargets != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinTargets);
            }
            if (MaxTargets != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTargets);
            }
            if (SelectedTargets != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectedTargets);
            }
            if (prompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prompt);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TargetSelection other)
        {
            if (other == null)
            {
                return;
            }
            targets_.Add(other.targets_);
            if (other.TargetIdx != 0)
            {
                TargetIdx = other.TargetIdx;
            }
            if (other.MinTargets != 0)
            {
                MinTargets = other.MinTargets;
            }
            if (other.MaxTargets != 0)
            {
                MaxTargets = other.MaxTargets;
            }
            if (other.SelectedTargets != 0)
            {
                SelectedTargets = other.SelectedTargets;
            }
            if (other.prompt_ != null)
            {
                if (prompt_ == null)
                {
                    prompt_ = new Prompt();
                }
                Prompt.MergeFrom(other.Prompt);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            TargetIdx = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            targets_.AddEntriesFrom(input, _repeated_targets_codec);
                            break;
                        }
                    case 24:
                        {
                            MinTargets = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            MaxTargets = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            SelectedTargets = input.ReadUInt32();
                            break;
                        }
                    case 50:
                        {
                            if (prompt_ == null)
                            {
                                prompt_ = new Prompt();
                            }
                            input.ReadMessage(prompt_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Task : pb::IMessage<Task>
    {
        private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Task> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[299]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Task()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Task(Task other) : this()
        {
            switch (other.MessageCase)
            {
                case MessageOneofCase.Timeout:
                    Timeout = other.Timeout.Clone();
                    break;
                case MessageOneofCase.EndTurn:
                    EndTurn = other.EndTurn.Clone();
                    break;
                case MessageOneofCase.Pass:
                    Pass = other.Pass.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Task Clone()
        {
            return new Task(this);
        }

        /// <summary>Field number for the "timeout" field.</summary>
        public const int TimeoutFieldNumber = 1;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Timeout Timeout
        {
            get { return messageCase_ == MessageOneofCase.Timeout ? (Timeout)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Timeout;
            }
        }

        /// <summary>Field number for the "endTurn" field.</summary>
        public const int EndTurnFieldNumber = 2;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndTurn EndTurn
        {
            get { return messageCase_ == MessageOneofCase.EndTurn ? (EndTurn)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.EndTurn;
            }
        }

        /// <summary>Field number for the "pass" field.</summary>
        public const int PassFieldNumber = 3;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Pass Pass
        {
            get { return messageCase_ == MessageOneofCase.Pass ? (Pass)message_ : null; }
            set
            {
                message_ = value;
                messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Pass;
            }
        }

        private object message_;
        /// <summary>Enum of possible cases for the "message" oneof.</summary>
        public enum MessageOneofCase
        {
            None = 0,
            Timeout = 1,
            EndTurn = 2,
            Pass = 3,
        }
        private MessageOneofCase messageCase_ = MessageOneofCase.None;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageOneofCase MessageCase
        {
            get { return messageCase_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            messageCase_ = MessageOneofCase.None;
            message_ = null;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Task);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Task other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Timeout, other.Timeout)) return false;
            if (!object.Equals(EndTurn, other.EndTurn)) return false;
            if (!object.Equals(Pass, other.Pass)) return false;
            if (MessageCase != other.MessageCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (messageCase_ == MessageOneofCase.Timeout) hash ^= Timeout.GetHashCode();
            if (messageCase_ == MessageOneofCase.EndTurn) hash ^= EndTurn.GetHashCode();
            if (messageCase_ == MessageOneofCase.Pass) hash ^= Pass.GetHashCode();
            hash ^= (int)messageCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (messageCase_ == MessageOneofCase.Timeout)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Timeout);
            }
            if (messageCase_ == MessageOneofCase.EndTurn)
            {
                output.WriteRawTag(18);
                output.WriteMessage(EndTurn);
            }
            if (messageCase_ == MessageOneofCase.Pass)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Pass);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (messageCase_ == MessageOneofCase.Timeout)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeout);
            }
            if (messageCase_ == MessageOneofCase.EndTurn)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTurn);
            }
            if (messageCase_ == MessageOneofCase.Pass)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pass);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Task other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.MessageCase)
            {
                case MessageOneofCase.Timeout:
                    if (Timeout == null)
                    {
                        Timeout = new Timeout();
                    }
                    Timeout.MergeFrom(other.Timeout);
                    break;
                case MessageOneofCase.EndTurn:
                    if (EndTurn == null)
                    {
                        EndTurn = new EndTurn();
                    }
                    EndTurn.MergeFrom(other.EndTurn);
                    break;
                case MessageOneofCase.Pass:
                    if (Pass == null)
                    {
                        Pass = new Pass();
                    }
                    Pass.MergeFrom(other.Pass);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Timeout subBuilder = new Timeout();
                            if (messageCase_ == MessageOneofCase.Timeout)
                            {
                                subBuilder.MergeFrom(Timeout);
                            }
                            input.ReadMessage(subBuilder);
                            Timeout = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            EndTurn subBuilder = new EndTurn();
                            if (messageCase_ == MessageOneofCase.EndTurn)
                            {
                                subBuilder.MergeFrom(EndTurn);
                            }
                            input.ReadMessage(subBuilder);
                            EndTurn = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            Pass subBuilder = new Pass();
                            if (messageCase_ == MessageOneofCase.Pass)
                            {
                                subBuilder.MergeFrom(Pass);
                            }
                            input.ReadMessage(subBuilder);
                            Pass = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TeamConfig : pb::IMessage<TeamConfig>
    {
        private static readonly pb::MessageParser<TeamConfig> _parser = new pb::MessageParser<TeamConfig>(() => new TeamConfig());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TeamConfig> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[300]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamConfig()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamConfig(TeamConfig other) : this()
        {
            players_ = other.players_.Clone();
            teamID_ = other.teamID_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamConfig Clone()
        {
            return new TeamConfig(this);
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 2;
        private static readonly pb::FieldCodec<PlayerConfig> _repeated_players_codec
            = pb::FieldCodec.ForMessage(18, PlayerConfig.Parser);
        private readonly pbc::RepeatedField<PlayerConfig> players_ = new pbc::RepeatedField<PlayerConfig>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<PlayerConfig> Players
        {
            get { return players_; }
        }

        /// <summary>Field number for the "teamID" field.</summary>
        public const int TeamIDFieldNumber = 1;
        private uint teamID_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamID
        {
            get { return teamID_; }
            set
            {
                teamID_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TeamConfig);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TeamConfig other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!players_.Equals(other.players_)) return false;
            if (TeamID != other.TeamID) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= players_.GetHashCode();
            if (TeamID != 0) hash ^= TeamID.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TeamID != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(TeamID);
            }
            players_.WriteTo(output, _repeated_players_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += players_.CalculateSize(_repeated_players_codec);
            if (TeamID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamID);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TeamConfig other)
        {
            if (other == null)
            {
                return;
            }
            players_.Add(other.players_);
            if (other.TeamID != 0)
            {
                TeamID = other.TeamID;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            TeamID = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            players_.AddEntriesFrom(input, _repeated_players_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TeamInfo : pb::IMessage<TeamInfo>
    {
        private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => new TeamInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[301]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamInfo(TeamInfo other) : this()
        {
            playerIds_ = other.playerIds_.Clone();
            id_ = other.id_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamInfo Clone()
        {
            return new TeamInfo(this);
        }

        /// <summary>Field number for the "playerIds" field.</summary>
        public const int PlayerIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_playerIds_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> playerIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> PlayerIds
        {
            get { return playerIds_; }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id
        {
            get { return id_; }
            set
            {
                id_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TeamInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TeamInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!playerIds_.Equals(other.playerIds_)) return false;
            if (Id != other.Id) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= playerIds_.GetHashCode();
            if (Id != 0) hash ^= Id.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
            }
            playerIds_.WriteTo(output, _repeated_playerIds_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += playerIds_.CalculateSize(_repeated_playerIds_codec);
            if (Id != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TeamInfo other)
        {
            if (other == null)
            {
                return;
            }
            playerIds_.Add(other.playerIds_);
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Id = input.ReadUInt32();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TestConfig : pb::IMessage<TestConfig>
    {
        private static readonly pb::MessageParser<TestConfig> _parser = new pb::MessageParser<TestConfig>(() => new TestConfig());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TestConfig> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[302]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestConfig()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestConfig(TestConfig other) : this()
        {
            randomSeeds_ = other.randomSeeds_.Clone();
            shuffleRestriction_ = other.shuffleRestriction_;
            startingPlayer_ = other.startingPlayer_;
            useSpecifiedSeed_ = other.useSpecifiedSeed_;
            randomSeed_ = other.randomSeed_;
            useZeroManaCostForCasting_ = other.useZeroManaCostForCasting_;
            useMaxLandsPerTurn_ = other.useMaxLandsPerTurn_;
            treeOfCongress_ = other.treeOfCongress_ != null ? other.treeOfCongress_.Clone() : null;
            useLibraryRNG_ = other.useLibraryRNG_;
            disableGameStateQueueingDuringCancelableActions_ = other.disableGameStateQueueingDuringCancelableActions_;
            disableHiFiGameStates_ = other.disableHiFiGameStates_;
            disableTimers_ = other.disableTimers_;
            freeMulliganCount_ = other.freeMulliganCount_;
            randomDrawCount_ = other.randomDrawCount_;
            minRandomDrawDistance_ = other.minRandomDrawDistance_;
            maxRandomDrawDistance_ = other.maxRandomDrawDistance_;
            enableAutoAcceptHand_ = other.enableAutoAcceptHand_;
            enableAutoPlay_ = other.enableAutoPlay_;
            disableUnexpectedMessageRecovery_ = other.disableUnexpectedMessageRecovery_;
            disableSideboarding_ = other.disableSideboarding_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestConfig Clone()
        {
            return new TestConfig(this);
        }

        /// <summary>Field number for the "randomSeeds" field.</summary>
        public const int RandomSeedsFieldNumber = 13;
        private static readonly pb::FieldCodec<uint> _repeated_randomSeeds_codec
            = pb::FieldCodec.ForUInt32(106);
        private readonly pbc::RepeatedField<uint> randomSeeds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> RandomSeeds
        {
            get { return randomSeeds_; }
        }

        /// <summary>Field number for the "shuffleRestriction" field.</summary>
        public const int ShuffleRestrictionFieldNumber = 1;
        private ShuffleRestriction shuffleRestriction_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShuffleRestriction ShuffleRestriction
        {
            get { return shuffleRestriction_; }
            set
            {
                shuffleRestriction_ = value;
            }
        }

        /// <summary>Field number for the "startingPlayer" field.</summary>
        public const int StartingPlayerFieldNumber = 2;
        private uint startingPlayer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StartingPlayer
        {
            get { return startingPlayer_; }
            set
            {
                startingPlayer_ = value;
            }
        }

        /// <summary>Field number for the "useSpecifiedSeed" field.</summary>
        public const int UseSpecifiedSeedFieldNumber = 3;
        private bool useSpecifiedSeed_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UseSpecifiedSeed
        {
            get { return useSpecifiedSeed_; }
            set
            {
                useSpecifiedSeed_ = value;
            }
        }

        /// <summary>Field number for the "randomSeed" field.</summary>
        public const int RandomSeedFieldNumber = 4;
        private uint randomSeed_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RandomSeed
        {
            get { return randomSeed_; }
            set
            {
                randomSeed_ = value;
            }
        }

        /// <summary>Field number for the "useZeroManaCostForCasting" field.</summary>
        public const int UseZeroManaCostForCastingFieldNumber = 5;
        private bool useZeroManaCostForCasting_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UseZeroManaCostForCasting
        {
            get { return useZeroManaCostForCasting_; }
            set
            {
                useZeroManaCostForCasting_ = value;
            }
        }

        /// <summary>Field number for the "useMaxLandsPerTurn" field.</summary>
        public const int UseMaxLandsPerTurnFieldNumber = 6;
        private uint useMaxLandsPerTurn_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint UseMaxLandsPerTurn
        {
            get { return useMaxLandsPerTurn_; }
            set
            {
                useMaxLandsPerTurn_ = value;
            }
        }

        /// <summary>Field number for the "treeOfCongress" field.</summary>
        public const int TreeOfCongressFieldNumber = 7;
        private TreeOfCongress treeOfCongress_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TreeOfCongress TreeOfCongress
        {
            get { return treeOfCongress_; }
            set
            {
                treeOfCongress_ = value;
            }
        }

        /// <summary>Field number for the "useLibraryRNG" field.</summary>
        public const int UseLibraryRNGFieldNumber = 9;
        private bool useLibraryRNG_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UseLibraryRNG
        {
            get { return useLibraryRNG_; }
            set
            {
                useLibraryRNG_ = value;
            }
        }

        /// <summary>Field number for the "disableGameStateQueueingDuringCancelableActions" field.</summary>
        public const int DisableGameStateQueueingDuringCancelableActionsFieldNumber = 10;
        private bool disableGameStateQueueingDuringCancelableActions_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DisableGameStateQueueingDuringCancelableActions
        {
            get { return disableGameStateQueueingDuringCancelableActions_; }
            set
            {
                disableGameStateQueueingDuringCancelableActions_ = value;
            }
        }

        /// <summary>Field number for the "disableHiFiGameStates" field.</summary>
        public const int DisableHiFiGameStatesFieldNumber = 11;
        private bool disableHiFiGameStates_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DisableHiFiGameStates
        {
            get { return disableHiFiGameStates_; }
            set
            {
                disableHiFiGameStates_ = value;
            }
        }

        /// <summary>Field number for the "disableTimers" field.</summary>
        public const int DisableTimersFieldNumber = 12;
        private bool disableTimers_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DisableTimers
        {
            get { return disableTimers_; }
            set
            {
                disableTimers_ = value;
            }
        }

        /// <summary>Field number for the "freeMulliganCount" field.</summary>
        public const int FreeMulliganCountFieldNumber = 14;
        private uint freeMulliganCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FreeMulliganCount
        {
            get { return freeMulliganCount_; }
            set
            {
                freeMulliganCount_ = value;
            }
        }

        /// <summary>Field number for the "randomDrawCount" field.</summary>
        public const int RandomDrawCountFieldNumber = 15;
        private uint randomDrawCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RandomDrawCount
        {
            get { return randomDrawCount_; }
            set
            {
                randomDrawCount_ = value;
            }
        }

        /// <summary>Field number for the "minRandomDrawDistance" field.</summary>
        public const int MinRandomDrawDistanceFieldNumber = 16;
        private float minRandomDrawDistance_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float MinRandomDrawDistance
        {
            get { return minRandomDrawDistance_; }
            set
            {
                minRandomDrawDistance_ = value;
            }
        }

        /// <summary>Field number for the "maxRandomDrawDistance" field.</summary>
        public const int MaxRandomDrawDistanceFieldNumber = 17;
        private float maxRandomDrawDistance_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float MaxRandomDrawDistance
        {
            get { return maxRandomDrawDistance_; }
            set
            {
                maxRandomDrawDistance_ = value;
            }
        }

        /// <summary>Field number for the "enableAutoAcceptHand" field.</summary>
        public const int EnableAutoAcceptHandFieldNumber = 18;
        private bool enableAutoAcceptHand_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EnableAutoAcceptHand
        {
            get { return enableAutoAcceptHand_; }
            set
            {
                enableAutoAcceptHand_ = value;
            }
        }

        /// <summary>Field number for the "enableAutoPlay" field.</summary>
        public const int EnableAutoPlayFieldNumber = 19;
        private bool enableAutoPlay_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EnableAutoPlay
        {
            get { return enableAutoPlay_; }
            set
            {
                enableAutoPlay_ = value;
            }
        }

        /// <summary>Field number for the "disableUnexpectedMessageRecovery" field.</summary>
        public const int DisableUnexpectedMessageRecoveryFieldNumber = 20;
        private bool disableUnexpectedMessageRecovery_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DisableUnexpectedMessageRecovery
        {
            get { return disableUnexpectedMessageRecovery_; }
            set
            {
                disableUnexpectedMessageRecovery_ = value;
            }
        }

        /// <summary>Field number for the "disableSideboarding" field.</summary>
        public const int DisableSideboardingFieldNumber = 21;
        private bool disableSideboarding_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DisableSideboarding
        {
            get { return disableSideboarding_; }
            set
            {
                disableSideboarding_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TestConfig);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TestConfig other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!randomSeeds_.Equals(other.randomSeeds_)) return false;
            if (ShuffleRestriction != other.ShuffleRestriction) return false;
            if (StartingPlayer != other.StartingPlayer) return false;
            if (UseSpecifiedSeed != other.UseSpecifiedSeed) return false;
            if (RandomSeed != other.RandomSeed) return false;
            if (UseZeroManaCostForCasting != other.UseZeroManaCostForCasting) return false;
            if (UseMaxLandsPerTurn != other.UseMaxLandsPerTurn) return false;
            if (!object.Equals(TreeOfCongress, other.TreeOfCongress)) return false;
            if (UseLibraryRNG != other.UseLibraryRNG) return false;
            if (DisableGameStateQueueingDuringCancelableActions != other.DisableGameStateQueueingDuringCancelableActions) return false;
            if (DisableHiFiGameStates != other.DisableHiFiGameStates) return false;
            if (DisableTimers != other.DisableTimers) return false;
            if (FreeMulliganCount != other.FreeMulliganCount) return false;
            if (RandomDrawCount != other.RandomDrawCount) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinRandomDrawDistance, other.MinRandomDrawDistance)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxRandomDrawDistance, other.MaxRandomDrawDistance)) return false;
            if (EnableAutoAcceptHand != other.EnableAutoAcceptHand) return false;
            if (EnableAutoPlay != other.EnableAutoPlay) return false;
            if (DisableUnexpectedMessageRecovery != other.DisableUnexpectedMessageRecovery) return false;
            if (DisableSideboarding != other.DisableSideboarding) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= randomSeeds_.GetHashCode();
            if (ShuffleRestriction != 0) hash ^= ShuffleRestriction.GetHashCode();
            if (StartingPlayer != 0) hash ^= StartingPlayer.GetHashCode();
            if (UseSpecifiedSeed != false) hash ^= UseSpecifiedSeed.GetHashCode();
            if (RandomSeed != 0) hash ^= RandomSeed.GetHashCode();
            if (UseZeroManaCostForCasting != false) hash ^= UseZeroManaCostForCasting.GetHashCode();
            if (UseMaxLandsPerTurn != 0) hash ^= UseMaxLandsPerTurn.GetHashCode();
            if (treeOfCongress_ != null) hash ^= TreeOfCongress.GetHashCode();
            if (UseLibraryRNG != false) hash ^= UseLibraryRNG.GetHashCode();
            if (DisableGameStateQueueingDuringCancelableActions != false) hash ^= DisableGameStateQueueingDuringCancelableActions.GetHashCode();
            if (DisableHiFiGameStates != false) hash ^= DisableHiFiGameStates.GetHashCode();
            if (DisableTimers != false) hash ^= DisableTimers.GetHashCode();
            if (FreeMulliganCount != 0) hash ^= FreeMulliganCount.GetHashCode();
            if (RandomDrawCount != 0) hash ^= RandomDrawCount.GetHashCode();
            if (MinRandomDrawDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinRandomDrawDistance);
            if (MaxRandomDrawDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxRandomDrawDistance);
            if (EnableAutoAcceptHand != false) hash ^= EnableAutoAcceptHand.GetHashCode();
            if (EnableAutoPlay != false) hash ^= EnableAutoPlay.GetHashCode();
            if (DisableUnexpectedMessageRecovery != false) hash ^= DisableUnexpectedMessageRecovery.GetHashCode();
            if (DisableSideboarding != false) hash ^= DisableSideboarding.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ShuffleRestriction != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ShuffleRestriction);
            }
            if (StartingPlayer != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(StartingPlayer);
            }
            if (UseSpecifiedSeed != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(UseSpecifiedSeed);
            }
            if (RandomSeed != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(RandomSeed);
            }
            if (UseZeroManaCostForCasting != false)
            {
                output.WriteRawTag(40);
                output.WriteBool(UseZeroManaCostForCasting);
            }
            if (UseMaxLandsPerTurn != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(UseMaxLandsPerTurn);
            }
            if (treeOfCongress_ != null)
            {
                output.WriteRawTag(58);
                output.WriteMessage(TreeOfCongress);
            }
            if (UseLibraryRNG != false)
            {
                output.WriteRawTag(72);
                output.WriteBool(UseLibraryRNG);
            }
            if (DisableGameStateQueueingDuringCancelableActions != false)
            {
                output.WriteRawTag(80);
                output.WriteBool(DisableGameStateQueueingDuringCancelableActions);
            }
            if (DisableHiFiGameStates != false)
            {
                output.WriteRawTag(88);
                output.WriteBool(DisableHiFiGameStates);
            }
            if (DisableTimers != false)
            {
                output.WriteRawTag(96);
                output.WriteBool(DisableTimers);
            }
            randomSeeds_.WriteTo(output, _repeated_randomSeeds_codec);
            if (FreeMulliganCount != 0)
            {
                output.WriteRawTag(112);
                output.WriteUInt32(FreeMulliganCount);
            }
            if (RandomDrawCount != 0)
            {
                output.WriteRawTag(120);
                output.WriteUInt32(RandomDrawCount);
            }
            if (MinRandomDrawDistance != 0F)
            {
                output.WriteRawTag(133, 1);
                output.WriteFloat(MinRandomDrawDistance);
            }
            if (MaxRandomDrawDistance != 0F)
            {
                output.WriteRawTag(141, 1);
                output.WriteFloat(MaxRandomDrawDistance);
            }
            if (EnableAutoAcceptHand != false)
            {
                output.WriteRawTag(144, 1);
                output.WriteBool(EnableAutoAcceptHand);
            }
            if (EnableAutoPlay != false)
            {
                output.WriteRawTag(152, 1);
                output.WriteBool(EnableAutoPlay);
            }
            if (DisableUnexpectedMessageRecovery != false)
            {
                output.WriteRawTag(160, 1);
                output.WriteBool(DisableUnexpectedMessageRecovery);
            }
            if (DisableSideboarding != false)
            {
                output.WriteRawTag(168, 1);
                output.WriteBool(DisableSideboarding);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += randomSeeds_.CalculateSize(_repeated_randomSeeds_codec);
            if (ShuffleRestriction != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ShuffleRestriction);
            }
            if (StartingPlayer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartingPlayer);
            }
            if (UseSpecifiedSeed != false)
            {
                size += 1 + 1;
            }
            if (RandomSeed != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandomSeed);
            }
            if (UseZeroManaCostForCasting != false)
            {
                size += 1 + 1;
            }
            if (UseMaxLandsPerTurn != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseMaxLandsPerTurn);
            }
            if (treeOfCongress_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TreeOfCongress);
            }
            if (UseLibraryRNG != false)
            {
                size += 1 + 1;
            }
            if (DisableGameStateQueueingDuringCancelableActions != false)
            {
                size += 1 + 1;
            }
            if (DisableHiFiGameStates != false)
            {
                size += 1 + 1;
            }
            if (DisableTimers != false)
            {
                size += 1 + 1;
            }
            if (FreeMulliganCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeMulliganCount);
            }
            if (RandomDrawCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandomDrawCount);
            }
            if (MinRandomDrawDistance != 0F)
            {
                size += 2 + 4;
            }
            if (MaxRandomDrawDistance != 0F)
            {
                size += 2 + 4;
            }
            if (EnableAutoAcceptHand != false)
            {
                size += 2 + 1;
            }
            if (EnableAutoPlay != false)
            {
                size += 2 + 1;
            }
            if (DisableUnexpectedMessageRecovery != false)
            {
                size += 2 + 1;
            }
            if (DisableSideboarding != false)
            {
                size += 2 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TestConfig other)
        {
            if (other == null)
            {
                return;
            }
            randomSeeds_.Add(other.randomSeeds_);
            if (other.ShuffleRestriction != 0)
            {
                ShuffleRestriction = other.ShuffleRestriction;
            }
            if (other.StartingPlayer != 0)
            {
                StartingPlayer = other.StartingPlayer;
            }
            if (other.UseSpecifiedSeed != false)
            {
                UseSpecifiedSeed = other.UseSpecifiedSeed;
            }
            if (other.RandomSeed != 0)
            {
                RandomSeed = other.RandomSeed;
            }
            if (other.UseZeroManaCostForCasting != false)
            {
                UseZeroManaCostForCasting = other.UseZeroManaCostForCasting;
            }
            if (other.UseMaxLandsPerTurn != 0)
            {
                UseMaxLandsPerTurn = other.UseMaxLandsPerTurn;
            }
            if (other.treeOfCongress_ != null)
            {
                if (treeOfCongress_ == null)
                {
                    treeOfCongress_ = new TreeOfCongress();
                }
                TreeOfCongress.MergeFrom(other.TreeOfCongress);
            }
            if (other.UseLibraryRNG != false)
            {
                UseLibraryRNG = other.UseLibraryRNG;
            }
            if (other.DisableGameStateQueueingDuringCancelableActions != false)
            {
                DisableGameStateQueueingDuringCancelableActions = other.DisableGameStateQueueingDuringCancelableActions;
            }
            if (other.DisableHiFiGameStates != false)
            {
                DisableHiFiGameStates = other.DisableHiFiGameStates;
            }
            if (other.DisableTimers != false)
            {
                DisableTimers = other.DisableTimers;
            }
            if (other.FreeMulliganCount != 0)
            {
                FreeMulliganCount = other.FreeMulliganCount;
            }
            if (other.RandomDrawCount != 0)
            {
                RandomDrawCount = other.RandomDrawCount;
            }
            if (other.MinRandomDrawDistance != 0F)
            {
                MinRandomDrawDistance = other.MinRandomDrawDistance;
            }
            if (other.MaxRandomDrawDistance != 0F)
            {
                MaxRandomDrawDistance = other.MaxRandomDrawDistance;
            }
            if (other.EnableAutoAcceptHand != false)
            {
                EnableAutoAcceptHand = other.EnableAutoAcceptHand;
            }
            if (other.EnableAutoPlay != false)
            {
                EnableAutoPlay = other.EnableAutoPlay;
            }
            if (other.DisableUnexpectedMessageRecovery != false)
            {
                DisableUnexpectedMessageRecovery = other.DisableUnexpectedMessageRecovery;
            }
            if (other.DisableSideboarding != false)
            {
                DisableSideboarding = other.DisableSideboarding;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            shuffleRestriction_ = (ShuffleRestriction)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            StartingPlayer = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            UseSpecifiedSeed = input.ReadBool();
                            break;
                        }
                    case 32:
                        {
                            RandomSeed = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            UseZeroManaCostForCasting = input.ReadBool();
                            break;
                        }
                    case 48:
                        {
                            UseMaxLandsPerTurn = input.ReadUInt32();
                            break;
                        }
                    case 58:
                        {
                            if (treeOfCongress_ == null)
                            {
                                treeOfCongress_ = new TreeOfCongress();
                            }
                            input.ReadMessage(treeOfCongress_);
                            break;
                        }
                    case 72:
                        {
                            UseLibraryRNG = input.ReadBool();
                            break;
                        }
                    case 80:
                        {
                            DisableGameStateQueueingDuringCancelableActions = input.ReadBool();
                            break;
                        }
                    case 88:
                        {
                            DisableHiFiGameStates = input.ReadBool();
                            break;
                        }
                    case 96:
                        {
                            DisableTimers = input.ReadBool();
                            break;
                        }
                    case 106:
                    case 104:
                        {
                            randomSeeds_.AddEntriesFrom(input, _repeated_randomSeeds_codec);
                            break;
                        }
                    case 112:
                        {
                            FreeMulliganCount = input.ReadUInt32();
                            break;
                        }
                    case 120:
                        {
                            RandomDrawCount = input.ReadUInt32();
                            break;
                        }
                    case 133:
                        {
                            MinRandomDrawDistance = input.ReadFloat();
                            break;
                        }
                    case 141:
                        {
                            MaxRandomDrawDistance = input.ReadFloat();
                            break;
                        }
                    case 144:
                        {
                            EnableAutoAcceptHand = input.ReadBool();
                            break;
                        }
                    case 152:
                        {
                            EnableAutoPlay = input.ReadBool();
                            break;
                        }
                    case 160:
                        {
                            DisableUnexpectedMessageRecovery = input.ReadBool();
                            break;
                        }
                    case 168:
                        {
                            DisableSideboarding = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Timeout : pb::IMessage<Timeout>
    {
        private static readonly pb::MessageParser<Timeout> _parser = new pb::MessageParser<Timeout>(() => new Timeout());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Timeout> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[303]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Timeout()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Timeout(Timeout other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Timeout Clone()
        {
            return new Timeout(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Timeout);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Timeout other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Timeout other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class TimeoutConfig : pb::IMessage<TimeoutConfig>
    {
        private static readonly pb::MessageParser<TimeoutConfig> _parser = new pb::MessageParser<TimeoutConfig>(() => new TimeoutConfig());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TimeoutConfig> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[304]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeoutConfig()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeoutConfig(TimeoutConfig other) : this()
        {
            maxTimeoutCount_ = other.maxTimeoutCount_;
            startingTimeoutCount_ = other.startingTimeoutCount_;
            maxPipCount_ = other.maxPipCount_;
            startingPipCount_ = other.startingPipCount_;
            durationSec_ = other.durationSec_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeoutConfig Clone()
        {
            return new TimeoutConfig(this);
        }

        /// <summary>Field number for the "maxTimeoutCount" field.</summary>
        public const int MaxTimeoutCountFieldNumber = 1;
        private uint maxTimeoutCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxTimeoutCount
        {
            get { return maxTimeoutCount_; }
            set
            {
                maxTimeoutCount_ = value;
            }
        }

        /// <summary>Field number for the "startingTimeoutCount" field.</summary>
        public const int StartingTimeoutCountFieldNumber = 2;
        private uint startingTimeoutCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StartingTimeoutCount
        {
            get { return startingTimeoutCount_; }
            set
            {
                startingTimeoutCount_ = value;
            }
        }

        /// <summary>Field number for the "maxPipCount" field.</summary>
        public const int MaxPipCountFieldNumber = 3;
        private uint maxPipCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxPipCount
        {
            get { return maxPipCount_; }
            set
            {
                maxPipCount_ = value;
            }
        }

        /// <summary>Field number for the "startingPipCount" field.</summary>
        public const int StartingPipCountFieldNumber = 4;
        private uint startingPipCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StartingPipCount
        {
            get { return startingPipCount_; }
            set
            {
                startingPipCount_ = value;
            }
        }

        /// <summary>Field number for the "durationSec" field.</summary>
        public const int DurationSecFieldNumber = 5;
        private uint durationSec_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DurationSec
        {
            get { return durationSec_; }
            set
            {
                durationSec_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TimeoutConfig);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TimeoutConfig other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MaxTimeoutCount != other.MaxTimeoutCount) return false;
            if (StartingTimeoutCount != other.StartingTimeoutCount) return false;
            if (MaxPipCount != other.MaxPipCount) return false;
            if (StartingPipCount != other.StartingPipCount) return false;
            if (DurationSec != other.DurationSec) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MaxTimeoutCount != 0) hash ^= MaxTimeoutCount.GetHashCode();
            if (StartingTimeoutCount != 0) hash ^= StartingTimeoutCount.GetHashCode();
            if (MaxPipCount != 0) hash ^= MaxPipCount.GetHashCode();
            if (StartingPipCount != 0) hash ^= StartingPipCount.GetHashCode();
            if (DurationSec != 0) hash ^= DurationSec.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MaxTimeoutCount != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(MaxTimeoutCount);
            }
            if (StartingTimeoutCount != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(StartingTimeoutCount);
            }
            if (MaxPipCount != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MaxPipCount);
            }
            if (StartingPipCount != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(StartingPipCount);
            }
            if (DurationSec != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(DurationSec);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MaxTimeoutCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTimeoutCount);
            }
            if (StartingTimeoutCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartingTimeoutCount);
            }
            if (MaxPipCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPipCount);
            }
            if (StartingPipCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartingPipCount);
            }
            if (DurationSec != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DurationSec);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TimeoutConfig other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MaxTimeoutCount != 0)
            {
                MaxTimeoutCount = other.MaxTimeoutCount;
            }
            if (other.StartingTimeoutCount != 0)
            {
                StartingTimeoutCount = other.StartingTimeoutCount;
            }
            if (other.MaxPipCount != 0)
            {
                MaxPipCount = other.MaxPipCount;
            }
            if (other.StartingPipCount != 0)
            {
                StartingPipCount = other.StartingPipCount;
            }
            if (other.DurationSec != 0)
            {
                DurationSec = other.DurationSec;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            MaxTimeoutCount = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            StartingTimeoutCount = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            MaxPipCount = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            StartingPipCount = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            DurationSec = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TimeoutMessage : pb::IMessage<TimeoutMessage>
    {
        private static readonly pb::MessageParser<TimeoutMessage> _parser = new pb::MessageParser<TimeoutMessage>(() => new TimeoutMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TimeoutMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[305]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeoutMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeoutMessage(TimeoutMessage other) : this()
        {
            seatId_ = other.seatId_;
            timeoutCount_ = other.timeoutCount_;
            timer_ = other.timer_ != null ? other.timer_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeoutMessage Clone()
        {
            return new TimeoutMessage(this);
        }

        /// <summary>Field number for the "seatId" field.</summary>
        public const int SeatIdFieldNumber = 1;
        private uint seatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SeatId
        {
            get { return seatId_; }
            set
            {
                seatId_ = value;
            }
        }

        /// <summary>Field number for the "timeoutCount" field.</summary>
        public const int TimeoutCountFieldNumber = 2;
        private uint timeoutCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutCount
        {
            get { return timeoutCount_; }
            set
            {
                timeoutCount_ = value;
            }
        }

        /// <summary>Field number for the "timer" field.</summary>
        public const int TimerFieldNumber = 3;
        private TimerInfo timer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerInfo Timer
        {
            get { return timer_; }
            set
            {
                timer_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TimeoutMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TimeoutMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SeatId != other.SeatId) return false;
            if (TimeoutCount != other.TimeoutCount) return false;
            if (!object.Equals(Timer, other.Timer)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SeatId != 0) hash ^= SeatId.GetHashCode();
            if (TimeoutCount != 0) hash ^= TimeoutCount.GetHashCode();
            if (timer_ != null) hash ^= Timer.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SeatId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SeatId);
            }
            if (TimeoutCount != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(TimeoutCount);
            }
            if (timer_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Timer);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeatId);
            }
            if (TimeoutCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutCount);
            }
            if (timer_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timer);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TimeoutMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SeatId != 0)
            {
                SeatId = other.SeatId;
            }
            if (other.TimeoutCount != 0)
            {
                TimeoutCount = other.TimeoutCount;
            }
            if (other.timer_ != null)
            {
                if (timer_ == null)
                {
                    timer_ = new TimerInfo();
                }
                Timer.MergeFrom(other.Timer);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SeatId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            TimeoutCount = input.ReadUInt32();
                            break;
                        }
                    case 26:
                        {
                            if (timer_ == null)
                            {
                                timer_ = new TimerInfo();
                            }
                            input.ReadMessage(timer_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TimerConfig : pb::IMessage<TimerConfig>
    {
        private static readonly pb::MessageParser<TimerConfig> _parser = new pb::MessageParser<TimerConfig>(() => new TimerConfig());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TimerConfig> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[306]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerConfig()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerConfig(TimerConfig other) : this()
        {
            controls_ = other.controls_.Clone();
            type_ = other.type_;
            durationSec_ = other.durationSec_;
            behavior_ = other.behavior_;
            warningThresholdSec_ = other.warningThresholdSec_;
            maxDurationSec_ = other.maxDurationSec_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerConfig Clone()
        {
            return new TimerConfig(this);
        }

        /// <summary>Field number for the "controls" field.</summary>
        public const int ControlsFieldNumber = 6;
        private static readonly pb::FieldCodec<TimerControl> _repeated_controls_codec
            = pb::FieldCodec.ForMessage(50, TimerControl.Parser);
        private readonly pbc::RepeatedField<TimerControl> controls_ = new pbc::RepeatedField<TimerControl>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<TimerControl> Controls
        {
            get { return controls_; }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private TimerType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "durationSec" field.</summary>
        public const int DurationSecFieldNumber = 4;
        private uint durationSec_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DurationSec
        {
            get { return durationSec_; }
            set
            {
                durationSec_ = value;
            }
        }

        /// <summary>Field number for the "behavior" field.</summary>
        public const int BehaviorFieldNumber = 5;
        private TimerBehavior behavior_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerBehavior Behavior
        {
            get { return behavior_; }
            set
            {
                behavior_ = value;
            }
        }

        /// <summary>Field number for the "warningThresholdSec" field.</summary>
        public const int WarningThresholdSecFieldNumber = 7;
        private uint warningThresholdSec_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WarningThresholdSec
        {
            get { return warningThresholdSec_; }
            set
            {
                warningThresholdSec_ = value;
            }
        }

        /// <summary>Field number for the "maxDurationSec" field.</summary>
        public const int MaxDurationSecFieldNumber = 8;
        private uint maxDurationSec_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxDurationSec
        {
            get { return maxDurationSec_; }
            set
            {
                maxDurationSec_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TimerConfig);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TimerConfig other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!controls_.Equals(other.controls_)) return false;
            if (Type != other.Type) return false;
            if (DurationSec != other.DurationSec) return false;
            if (Behavior != other.Behavior) return false;
            if (WarningThresholdSec != other.WarningThresholdSec) return false;
            if (MaxDurationSec != other.MaxDurationSec) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= controls_.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (DurationSec != 0) hash ^= DurationSec.GetHashCode();
            if (Behavior != 0) hash ^= Behavior.GetHashCode();
            if (WarningThresholdSec != 0) hash ^= WarningThresholdSec.GetHashCode();
            if (MaxDurationSec != 0) hash ^= MaxDurationSec.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (DurationSec != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(DurationSec);
            }
            if (Behavior != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)Behavior);
            }
            controls_.WriteTo(output, _repeated_controls_codec);
            if (WarningThresholdSec != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(WarningThresholdSec);
            }
            if (MaxDurationSec != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(MaxDurationSec);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += controls_.CalculateSize(_repeated_controls_codec);
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (DurationSec != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DurationSec);
            }
            if (Behavior != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Behavior);
            }
            if (WarningThresholdSec != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WarningThresholdSec);
            }
            if (MaxDurationSec != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxDurationSec);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TimerConfig other)
        {
            if (other == null)
            {
                return;
            }
            controls_.Add(other.controls_);
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.DurationSec != 0)
            {
                DurationSec = other.DurationSec;
            }
            if (other.Behavior != 0)
            {
                Behavior = other.Behavior;
            }
            if (other.WarningThresholdSec != 0)
            {
                WarningThresholdSec = other.WarningThresholdSec;
            }
            if (other.MaxDurationSec != 0)
            {
                MaxDurationSec = other.MaxDurationSec;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            type_ = (TimerType)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            DurationSec = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            behavior_ = (TimerBehavior)input.ReadEnum();
                            break;
                        }
                    case 50:
                        {
                            controls_.AddEntriesFrom(input, _repeated_controls_codec);
                            break;
                        }
                    case 56:
                        {
                            WarningThresholdSec = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            MaxDurationSec = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TimerControl : pb::IMessage<TimerControl>
    {
        private static readonly pb::MessageParser<TimerControl> _parser = new pb::MessageParser<TimerControl>(() => new TimerControl());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TimerControl> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[307]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerControl()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerControl(TimerControl other) : this()
        {
            event_ = other.event_;
            behavior_ = other.behavior_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerControl Clone()
        {
            return new TimerControl(this);
        }

        /// <summary>Field number for the "event" field.</summary>
        public const int EventFieldNumber = 1;
        private TimerEvent event_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerEvent Event
        {
            get { return event_; }
            set
            {
                event_ = value;
            }
        }

        /// <summary>Field number for the "behavior" field.</summary>
        public const int BehaviorFieldNumber = 2;
        private TimerBehavior behavior_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerBehavior Behavior
        {
            get { return behavior_; }
            set
            {
                behavior_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TimerControl);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TimerControl other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Event != other.Event) return false;
            if (Behavior != other.Behavior) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Event != 0) hash ^= Event.GetHashCode();
            if (Behavior != 0) hash ^= Behavior.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Event != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Event);
            }
            if (Behavior != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Behavior);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Event != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Event);
            }
            if (Behavior != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Behavior);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TimerControl other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Event != 0)
            {
                Event = other.Event;
            }
            if (other.Behavior != 0)
            {
                Behavior = other.Behavior;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            event_ = (TimerEvent)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            behavior_ = (TimerBehavior)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TimerInfo : pb::IMessage<TimerInfo>
    {
        private static readonly pb::MessageParser<TimerInfo> _parser = new pb::MessageParser<TimerInfo>(() => new TimerInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TimerInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[308]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerInfo(TimerInfo other) : this()
        {
            timerId_ = other.timerId_;
            type_ = other.type_;
            durationSec_ = other.durationSec_;
            elapsedSec_ = other.elapsedSec_;
            running_ = other.running_;
            behavior_ = other.behavior_;
            warningThresholdSec_ = other.warningThresholdSec_;
            elapsedMs_ = other.elapsedMs_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerInfo Clone()
        {
            return new TimerInfo(this);
        }

        /// <summary>Field number for the "timerId" field.</summary>
        public const int TimerIdFieldNumber = 1;
        private uint timerId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimerId
        {
            get { return timerId_; }
            set
            {
                timerId_ = value;
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private TimerType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "durationSec" field.</summary>
        public const int DurationSecFieldNumber = 3;
        private uint durationSec_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DurationSec
        {
            get { return durationSec_; }
            set
            {
                durationSec_ = value;
            }
        }

        /// <summary>Field number for the "elapsedSec" field.</summary>
        public const int ElapsedSecFieldNumber = 4;
        private uint elapsedSec_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ElapsedSec
        {
            get { return elapsedSec_; }
            set
            {
                elapsedSec_ = value;
            }
        }

        /// <summary>Field number for the "running" field.</summary>
        public const int RunningFieldNumber = 5;
        private bool running_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Running
        {
            get { return running_; }
            set
            {
                running_ = value;
            }
        }

        /// <summary>Field number for the "behavior" field.</summary>
        public const int BehaviorFieldNumber = 6;
        private TimerBehavior behavior_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimerBehavior Behavior
        {
            get { return behavior_; }
            set
            {
                behavior_ = value;
            }
        }

        /// <summary>Field number for the "warningThresholdSec" field.</summary>
        public const int WarningThresholdSecFieldNumber = 7;
        private uint warningThresholdSec_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WarningThresholdSec
        {
            get { return warningThresholdSec_; }
            set
            {
                warningThresholdSec_ = value;
            }
        }

        /// <summary>Field number for the "elapsedMs" field.</summary>
        public const int ElapsedMsFieldNumber = 8;
        private uint elapsedMs_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ElapsedMs
        {
            get { return elapsedMs_; }
            set
            {
                elapsedMs_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TimerInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TimerInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TimerId != other.TimerId) return false;
            if (Type != other.Type) return false;
            if (DurationSec != other.DurationSec) return false;
            if (ElapsedSec != other.ElapsedSec) return false;
            if (Running != other.Running) return false;
            if (Behavior != other.Behavior) return false;
            if (WarningThresholdSec != other.WarningThresholdSec) return false;
            if (ElapsedMs != other.ElapsedMs) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TimerId != 0) hash ^= TimerId.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (DurationSec != 0) hash ^= DurationSec.GetHashCode();
            if (ElapsedSec != 0) hash ^= ElapsedSec.GetHashCode();
            if (Running != false) hash ^= Running.GetHashCode();
            if (Behavior != 0) hash ^= Behavior.GetHashCode();
            if (WarningThresholdSec != 0) hash ^= WarningThresholdSec.GetHashCode();
            if (ElapsedMs != 0) hash ^= ElapsedMs.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TimerId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(TimerId);
            }
            if (Type != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Type);
            }
            if (DurationSec != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(DurationSec);
            }
            if (ElapsedSec != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(ElapsedSec);
            }
            if (Running != false)
            {
                output.WriteRawTag(40);
                output.WriteBool(Running);
            }
            if (Behavior != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)Behavior);
            }
            if (WarningThresholdSec != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(WarningThresholdSec);
            }
            if (ElapsedMs != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(ElapsedMs);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TimerId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimerId);
            }
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (DurationSec != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DurationSec);
            }
            if (ElapsedSec != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ElapsedSec);
            }
            if (Running != false)
            {
                size += 1 + 1;
            }
            if (Behavior != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Behavior);
            }
            if (WarningThresholdSec != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WarningThresholdSec);
            }
            if (ElapsedMs != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ElapsedMs);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TimerInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TimerId != 0)
            {
                TimerId = other.TimerId;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.DurationSec != 0)
            {
                DurationSec = other.DurationSec;
            }
            if (other.ElapsedSec != 0)
            {
                ElapsedSec = other.ElapsedSec;
            }
            if (other.Running != false)
            {
                Running = other.Running;
            }
            if (other.Behavior != 0)
            {
                Behavior = other.Behavior;
            }
            if (other.WarningThresholdSec != 0)
            {
                WarningThresholdSec = other.WarningThresholdSec;
            }
            if (other.ElapsedMs != 0)
            {
                ElapsedMs = other.ElapsedMs;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            TimerId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            type_ = (TimerType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            DurationSec = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            ElapsedSec = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            Running = input.ReadBool();
                            break;
                        }
                    case 48:
                        {
                            behavior_ = (TimerBehavior)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            WarningThresholdSec = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            ElapsedMs = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TreeOfCongress : pb::IMessage<TreeOfCongress>
    {
        private static readonly pb::MessageParser<TreeOfCongress> _parser = new pb::MessageParser<TreeOfCongress>(() => new TreeOfCongress());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TreeOfCongress> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[309]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TreeOfCongress()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TreeOfCongress(TreeOfCongress other) : this()
        {
            systemSeatId_ = other.systemSeatId_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TreeOfCongress Clone()
        {
            return new TreeOfCongress(this);
        }

        /// <summary>Field number for the "systemSeatId" field.</summary>
        public const int SystemSeatIdFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_systemSeatId_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> systemSeatId_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> SystemSeatId
        {
            get { return systemSeatId_; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TreeOfCongress);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TreeOfCongress other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!systemSeatId_.Equals(other.systemSeatId_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= systemSeatId_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            systemSeatId_.WriteTo(output, _repeated_systemSeatId_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += systemSeatId_.CalculateSize(_repeated_systemSeatId_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TreeOfCongress other)
        {
            if (other == null)
            {
                return;
            }
            systemSeatId_.Add(other.systemSeatId_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                        {
                            systemSeatId_.AddEntriesFrom(input, _repeated_systemSeatId_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TurnInfo : pb::IMessage<TurnInfo>
    {
        private static readonly pb::MessageParser<TurnInfo> _parser = new pb::MessageParser<TurnInfo>(() => new TurnInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TurnInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[310]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurnInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurnInfo(TurnInfo other) : this()
        {
            phase_ = other.phase_;
            step_ = other.step_;
            turnNumber_ = other.turnNumber_;
            activePlayer_ = other.activePlayer_;
            priorityPlayer_ = other.priorityPlayer_;
            decisionPlayer_ = other.decisionPlayer_;
            stormCount_ = other.stormCount_;
            nextPhase_ = other.nextPhase_;
            nextStep_ = other.nextStep_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurnInfo Clone()
        {
            return new TurnInfo(this);
        }

        /// <summary>Field number for the "phase" field.</summary>
        public const int PhaseFieldNumber = 1;
        private Phase phase_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Phase Phase
        {
            get { return phase_; }
            set
            {
                phase_ = value;
            }
        }

        /// <summary>Field number for the "step" field.</summary>
        public const int StepFieldNumber = 2;
        private Step step_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Step Step
        {
            get { return step_; }
            set
            {
                step_ = value;
            }
        }

        /// <summary>Field number for the "turnNumber" field.</summary>
        public const int TurnNumberFieldNumber = 3;
        private uint turnNumber_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TurnNumber
        {
            get { return turnNumber_; }
            set
            {
                turnNumber_ = value;
            }
        }

        /// <summary>Field number for the "activePlayer" field.</summary>
        public const int ActivePlayerFieldNumber = 4;
        private uint activePlayer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ActivePlayer
        {
            get { return activePlayer_; }
            set
            {
                activePlayer_ = value;
            }
        }

        /// <summary>Field number for the "priorityPlayer" field.</summary>
        public const int PriorityPlayerFieldNumber = 5;
        private uint priorityPlayer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PriorityPlayer
        {
            get { return priorityPlayer_; }
            set
            {
                priorityPlayer_ = value;
            }
        }

        /// <summary>Field number for the "decisionPlayer" field.</summary>
        public const int DecisionPlayerFieldNumber = 6;
        private uint decisionPlayer_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DecisionPlayer
        {
            get { return decisionPlayer_; }
            set
            {
                decisionPlayer_ = value;
            }
        }

        /// <summary>Field number for the "stormCount" field.</summary>
        public const int StormCountFieldNumber = 7;
        private uint stormCount_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StormCount
        {
            get { return stormCount_; }
            set
            {
                stormCount_ = value;
            }
        }

        /// <summary>Field number for the "nextPhase" field.</summary>
        public const int NextPhaseFieldNumber = 8;
        private Phase nextPhase_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Phase NextPhase
        {
            get { return nextPhase_; }
            set
            {
                nextPhase_ = value;
            }
        }

        /// <summary>Field number for the "nextStep" field.</summary>
        public const int NextStepFieldNumber = 9;
        private Step nextStep_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Step NextStep
        {
            get { return nextStep_; }
            set
            {
                nextStep_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TurnInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TurnInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Phase != other.Phase) return false;
            if (Step != other.Step) return false;
            if (TurnNumber != other.TurnNumber) return false;
            if (ActivePlayer != other.ActivePlayer) return false;
            if (PriorityPlayer != other.PriorityPlayer) return false;
            if (DecisionPlayer != other.DecisionPlayer) return false;
            if (StormCount != other.StormCount) return false;
            if (NextPhase != other.NextPhase) return false;
            if (NextStep != other.NextStep) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Phase != 0) hash ^= Phase.GetHashCode();
            if (Step != 0) hash ^= Step.GetHashCode();
            if (TurnNumber != 0) hash ^= TurnNumber.GetHashCode();
            if (ActivePlayer != 0) hash ^= ActivePlayer.GetHashCode();
            if (PriorityPlayer != 0) hash ^= PriorityPlayer.GetHashCode();
            if (DecisionPlayer != 0) hash ^= DecisionPlayer.GetHashCode();
            if (StormCount != 0) hash ^= StormCount.GetHashCode();
            if (NextPhase != 0) hash ^= NextPhase.GetHashCode();
            if (NextStep != 0) hash ^= NextStep.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Phase != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Phase);
            }
            if (Step != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Step);
            }
            if (TurnNumber != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(TurnNumber);
            }
            if (ActivePlayer != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(ActivePlayer);
            }
            if (PriorityPlayer != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(PriorityPlayer);
            }
            if (DecisionPlayer != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(DecisionPlayer);
            }
            if (StormCount != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(StormCount);
            }
            if (NextPhase != 0)
            {
                output.WriteRawTag(64);
                output.WriteEnum((int)NextPhase);
            }
            if (NextStep != 0)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)NextStep);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Phase != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Phase);
            }
            if (Step != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Step);
            }
            if (TurnNumber != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TurnNumber);
            }
            if (ActivePlayer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivePlayer);
            }
            if (PriorityPlayer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PriorityPlayer);
            }
            if (DecisionPlayer != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DecisionPlayer);
            }
            if (StormCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StormCount);
            }
            if (NextPhase != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)NextPhase);
            }
            if (NextStep != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)NextStep);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TurnInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Phase != 0)
            {
                Phase = other.Phase;
            }
            if (other.Step != 0)
            {
                Step = other.Step;
            }
            if (other.TurnNumber != 0)
            {
                TurnNumber = other.TurnNumber;
            }
            if (other.ActivePlayer != 0)
            {
                ActivePlayer = other.ActivePlayer;
            }
            if (other.PriorityPlayer != 0)
            {
                PriorityPlayer = other.PriorityPlayer;
            }
            if (other.DecisionPlayer != 0)
            {
                DecisionPlayer = other.DecisionPlayer;
            }
            if (other.StormCount != 0)
            {
                StormCount = other.StormCount;
            }
            if (other.NextPhase != 0)
            {
                NextPhase = other.NextPhase;
            }
            if (other.NextStep != 0)
            {
                NextStep = other.NextStep;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            phase_ = (Phase)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            step_ = (Step)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            TurnNumber = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            ActivePlayer = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            PriorityPlayer = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            DecisionPlayer = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            StormCount = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            nextPhase_ = (Phase)input.ReadEnum();
                            break;
                        }
                    case 72:
                        {
                            nextStep_ = (Step)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class UIMessage : pb::IMessage<UIMessage>
    {
        private static readonly pb::MessageParser<UIMessage> _parser = new pb::MessageParser<UIMessage>(() => new UIMessage());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UIMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[311]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UIMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UIMessage(UIMessage other) : this()
        {
            seatIds_ = other.seatIds_.Clone();
            onSelect_ = other.onSelect_ != null ? other.onSelect_.Clone() : null;
            onHover_ = other.onHover_ != null ? other.onHover_.Clone() : null;
            onShuffle_ = other.onShuffle_ != null ? other.onShuffle_.Clone() : null;
            onChat_ = other.onChat_ != null ? other.onChat_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UIMessage Clone()
        {
            return new UIMessage(this);
        }

        /// <summary>Field number for the "seatIds" field.</summary>
        public const int SeatIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_seatIds_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> seatIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> SeatIds
        {
            get { return seatIds_; }
        }

        /// <summary>Field number for the "onSelect" field.</summary>
        public const int OnSelectFieldNumber = 2;
        private OnSelect onSelect_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnSelect OnSelect
        {
            get { return onSelect_; }
            set
            {
                onSelect_ = value;
            }
        }

        /// <summary>Field number for the "onHover" field.</summary>
        public const int OnHoverFieldNumber = 3;
        private OnHover onHover_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnHover OnHover
        {
            get { return onHover_; }
            set
            {
                onHover_ = value;
            }
        }

        /// <summary>Field number for the "onShuffle" field.</summary>
        public const int OnShuffleFieldNumber = 4;
        private OnShuffle onShuffle_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnShuffle OnShuffle
        {
            get { return onShuffle_; }
            set
            {
                onShuffle_ = value;
            }
        }

        /// <summary>Field number for the "onChat" field.</summary>
        public const int OnChatFieldNumber = 5;
        private OnChat onChat_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnChat OnChat
        {
            get { return onChat_; }
            set
            {
                onChat_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as UIMessage);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UIMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!seatIds_.Equals(other.seatIds_)) return false;
            if (!object.Equals(OnSelect, other.OnSelect)) return false;
            if (!object.Equals(OnHover, other.OnHover)) return false;
            if (!object.Equals(OnShuffle, other.OnShuffle)) return false;
            if (!object.Equals(OnChat, other.OnChat)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= seatIds_.GetHashCode();
            if (onSelect_ != null) hash ^= OnSelect.GetHashCode();
            if (onHover_ != null) hash ^= OnHover.GetHashCode();
            if (onShuffle_ != null) hash ^= OnShuffle.GetHashCode();
            if (onChat_ != null) hash ^= OnChat.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            seatIds_.WriteTo(output, _repeated_seatIds_codec);
            if (onSelect_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(OnSelect);
            }
            if (onHover_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(OnHover);
            }
            if (onShuffle_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(OnShuffle);
            }
            if (onChat_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(OnChat);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += seatIds_.CalculateSize(_repeated_seatIds_codec);
            if (onSelect_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnSelect);
            }
            if (onHover_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnHover);
            }
            if (onShuffle_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnShuffle);
            }
            if (onChat_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnChat);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UIMessage other)
        {
            if (other == null)
            {
                return;
            }
            seatIds_.Add(other.seatIds_);
            if (other.onSelect_ != null)
            {
                if (onSelect_ == null)
                {
                    onSelect_ = new OnSelect();
                }
                OnSelect.MergeFrom(other.OnSelect);
            }
            if (other.onHover_ != null)
            {
                if (onHover_ == null)
                {
                    onHover_ = new OnHover();
                }
                OnHover.MergeFrom(other.OnHover);
            }
            if (other.onShuffle_ != null)
            {
                if (onShuffle_ == null)
                {
                    onShuffle_ = new OnShuffle();
                }
                OnShuffle.MergeFrom(other.OnShuffle);
            }
            if (other.onChat_ != null)
            {
                if (onChat_ == null)
                {
                    onChat_ = new OnChat();
                }
                OnChat.MergeFrom(other.OnChat);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                        {
                            seatIds_.AddEntriesFrom(input, _repeated_seatIds_codec);
                            break;
                        }
                    case 18:
                        {
                            if (onSelect_ == null)
                            {
                                onSelect_ = new OnSelect();
                            }
                            input.ReadMessage(onSelect_);
                            break;
                        }
                    case 26:
                        {
                            if (onHover_ == null)
                            {
                                onHover_ = new OnHover();
                            }
                            input.ReadMessage(onHover_);
                            break;
                        }
                    case 34:
                        {
                            if (onShuffle_ == null)
                            {
                                onShuffle_ = new OnShuffle();
                            }
                            input.ReadMessage(onShuffle_);
                            break;
                        }
                    case 42:
                        {
                            if (onChat_ == null)
                            {
                                onChat_ = new OnChat();
                            }
                            input.ReadMessage(onChat_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class UInt32Value : pb::IMessage<UInt32Value>
    {
        private static readonly pb::MessageParser<UInt32Value> _parser = new pb::MessageParser<UInt32Value>(() => new UInt32Value());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UInt32Value> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[312]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UInt32Value()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UInt32Value(UInt32Value other) : this()
        {
            value_ = other.value_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UInt32Value Clone()
        {
            return new UInt32Value(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private uint value_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Value
        {
            get { return value_; }
            set
            {
                value_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as UInt32Value);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UInt32Value other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Value != other.Value) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Value != 0) hash ^= Value.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Value != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Value);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Value != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UInt32Value other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Value != 0)
            {
                Value = other.Value;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Value = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class UserConnectionInfo : pb::IMessage<UserConnectionInfo>
    {
        private static readonly pb::MessageParser<UserConnectionInfo> _parser = new pb::MessageParser<UserConnectionInfo>(() => new UserConnectionInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserConnectionInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[313]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserConnectionInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserConnectionInfo(UserConnectionInfo other) : this()
        {
            connectionState_ = other.connectionState_;
            lastConnectTimestamp_ = other.lastConnectTimestamp_;
            lastDisconnectTimestamp_ = other.lastDisconnectTimestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserConnectionInfo Clone()
        {
            return new UserConnectionInfo(this);
        }

        /// <summary>Field number for the "connectionState" field.</summary>
        public const int ConnectionStateFieldNumber = 1;
        private ConnectionState connectionState_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectionState ConnectionState
        {
            get { return connectionState_; }
            set
            {
                connectionState_ = value;
            }
        }

        /// <summary>Field number for the "lastConnectTimestamp" field.</summary>
        public const int LastConnectTimestampFieldNumber = 10;
        private long lastConnectTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastConnectTimestamp
        {
            get { return lastConnectTimestamp_; }
            set
            {
                lastConnectTimestamp_ = value;
            }
        }

        /// <summary>Field number for the "lastDisconnectTimestamp" field.</summary>
        public const int LastDisconnectTimestampFieldNumber = 11;
        private long lastDisconnectTimestamp_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastDisconnectTimestamp
        {
            get { return lastDisconnectTimestamp_; }
            set
            {
                lastDisconnectTimestamp_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as UserConnectionInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserConnectionInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ConnectionState != other.ConnectionState) return false;
            if (LastConnectTimestamp != other.LastConnectTimestamp) return false;
            if (LastDisconnectTimestamp != other.LastDisconnectTimestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ConnectionState != 0) hash ^= ConnectionState.GetHashCode();
            if (LastConnectTimestamp != 0L) hash ^= LastConnectTimestamp.GetHashCode();
            if (LastDisconnectTimestamp != 0L) hash ^= LastDisconnectTimestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ConnectionState != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ConnectionState);
            }
            if (LastConnectTimestamp != 0L)
            {
                output.WriteRawTag(80);
                output.WriteInt64(LastConnectTimestamp);
            }
            if (LastDisconnectTimestamp != 0L)
            {
                output.WriteRawTag(88);
                output.WriteInt64(LastDisconnectTimestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ConnectionState != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ConnectionState);
            }
            if (LastConnectTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastConnectTimestamp);
            }
            if (LastDisconnectTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastDisconnectTimestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserConnectionInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ConnectionState != 0)
            {
                ConnectionState = other.ConnectionState;
            }
            if (other.LastConnectTimestamp != 0L)
            {
                LastConnectTimestamp = other.LastConnectTimestamp;
            }
            if (other.LastDisconnectTimestamp != 0L)
            {
                LastDisconnectTimestamp = other.LastDisconnectTimestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            connectionState_ = (ConnectionState)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            LastConnectTimestamp = input.ReadInt64();
                            break;
                        }
                    case 88:
                        {
                            LastDisconnectTimestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class UserOption : pb::IMessage<UserOption>
    {
        private static readonly pb::MessageParser<UserOption> _parser = new pb::MessageParser<UserOption>(() => new UserOption());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserOption> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[314]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserOption()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserOption(UserOption other) : this()
        {
            optionPrompt_ = other.optionPrompt_ != null ? other.optionPrompt_.Clone() : null;
            responseType_ = other.responseType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserOption Clone()
        {
            return new UserOption(this);
        }

        /// <summary>Field number for the "optionPrompt" field.</summary>
        public const int OptionPromptFieldNumber = 1;
        private Prompt optionPrompt_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt OptionPrompt
        {
            get { return optionPrompt_; }
            set
            {
                optionPrompt_ = value;
            }
        }

        /// <summary>Field number for the "responseType" field.</summary>
        public const int ResponseTypeFieldNumber = 2;
        private ClientMessageType responseType_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientMessageType ResponseType
        {
            get { return responseType_; }
            set
            {
                responseType_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as UserOption);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserOption other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(OptionPrompt, other.OptionPrompt)) return false;
            if (ResponseType != other.ResponseType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (optionPrompt_ != null) hash ^= OptionPrompt.GetHashCode();
            if (ResponseType != 0) hash ^= ResponseType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (optionPrompt_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(OptionPrompt);
            }
            if (ResponseType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)ResponseType);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (optionPrompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionPrompt);
            }
            if (ResponseType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ResponseType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserOption other)
        {
            if (other == null)
            {
                return;
            }
            if (other.optionPrompt_ != null)
            {
                if (optionPrompt_ == null)
                {
                    optionPrompt_ = new Prompt();
                }
                OptionPrompt.MergeFrom(other.OptionPrompt);
            }
            if (other.ResponseType != 0)
            {
                ResponseType = other.ResponseType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (optionPrompt_ == null)
                            {
                                optionPrompt_ = new Prompt();
                            }
                            input.ReadMessage(optionPrompt_);
                            break;
                        }
                    case 16:
                        {
                            responseType_ = (ClientMessageType)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ValueHeuristicDefinition : pb::IMessage<ValueHeuristicDefinition>
    {
        private static readonly pb::MessageParser<ValueHeuristicDefinition> _parser = new pb::MessageParser<ValueHeuristicDefinition>(() => new ValueHeuristicDefinition());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ValueHeuristicDefinition> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[315]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueHeuristicDefinition()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueHeuristicDefinition(ValueHeuristicDefinition other) : this()
        {
            id_ = other.id_;
            priority_ = other.priority_;
            weight_ = other.weight_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueHeuristicDefinition Clone()
        {
            return new ValueHeuristicDefinition(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id
        {
            get { return id_; }
            set
            {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "priority" field.</summary>
        public const int PriorityFieldNumber = 2;
        private uint priority_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Priority
        {
            get { return priority_; }
            set
            {
                priority_ = value;
            }
        }

        /// <summary>Field number for the "weight" field.</summary>
        public const int WeightFieldNumber = 3;
        private uint weight_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Weight
        {
            get { return weight_; }
            set
            {
                weight_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ValueHeuristicDefinition);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ValueHeuristicDefinition other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (Priority != other.Priority) return false;
            if (Weight != other.Weight) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Id.Length != 0) hash ^= Id.GetHashCode();
            if (Priority != 0) hash ^= Priority.GetHashCode();
            if (Weight != 0) hash ^= Weight.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Id);
            }
            if (Priority != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Priority);
            }
            if (Weight != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(Weight);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Id.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
            }
            if (Priority != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
            }
            if (Weight != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weight);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ValueHeuristicDefinition other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id.Length != 0)
            {
                Id = other.Id;
            }
            if (other.Priority != 0)
            {
                Priority = other.Priority;
            }
            if (other.Weight != 0)
            {
                Weight = other.Weight;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Id = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            Priority = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            Weight = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ValueHeuristicParameter : pb::IMessage<ValueHeuristicParameter>
    {
        private static readonly pb::MessageParser<ValueHeuristicParameter> _parser = new pb::MessageParser<ValueHeuristicParameter>(() => new ValueHeuristicParameter());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ValueHeuristicParameter> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[316]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueHeuristicParameter()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueHeuristicParameter(ValueHeuristicParameter other) : this()
        {
            id_ = other.id_;
            paramValue_ = other.paramValue_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueHeuristicParameter Clone()
        {
            return new ValueHeuristicParameter(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id
        {
            get { return id_; }
            set
            {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "paramValue" field.</summary>
        public const int ParamValueFieldNumber = 2;
        private int paramValue_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ParamValue
        {
            get { return paramValue_; }
            set
            {
                paramValue_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ValueHeuristicParameter);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ValueHeuristicParameter other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (ParamValue != other.ParamValue) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Id.Length != 0) hash ^= Id.GetHashCode();
            if (ParamValue != 0) hash ^= ParamValue.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Id);
            }
            if (ParamValue != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(ParamValue);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Id.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
            }
            if (ParamValue != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParamValue);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ValueHeuristicParameter other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id.Length != 0)
            {
                Id = other.Id;
            }
            if (other.ParamValue != 0)
            {
                ParamValue = other.ParamValue;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Id = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            ParamValue = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ZoneInfo : pb::IMessage<ZoneInfo>
    {
        private static readonly pb::MessageParser<ZoneInfo> _parser = new pb::MessageParser<ZoneInfo>(() => new ZoneInfo());
        private pb::UnknownFieldSet _unknownFields;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ZoneInfo> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return MyReflection.Descriptor.MessageTypes[317]; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ZoneInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ZoneInfo(ZoneInfo other) : this()
        {
            objectInstanceIds_ = other.objectInstanceIds_.Clone();
            viewers_ = other.viewers_.Clone();
            zoneId_ = other.zoneId_;
            type_ = other.type_;
            visibility_ = other.visibility_;
            ownerSeatId_ = other.ownerSeatId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ZoneInfo Clone()
        {
            return new ZoneInfo(this);
        }

        /// <summary>Field number for the "objectInstanceIds" field.</summary>
        public const int ObjectInstanceIdsFieldNumber = 5;
        private static readonly pb::FieldCodec<uint> _repeated_objectInstanceIds_codec
            = pb::FieldCodec.ForUInt32(42);
        private readonly pbc::RepeatedField<uint> objectInstanceIds_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ObjectInstanceIds
        {
            get { return objectInstanceIds_; }
        }

        /// <summary>Field number for the "viewers" field.</summary>
        public const int ViewersFieldNumber = 6;
        private static readonly pb::FieldCodec<uint> _repeated_viewers_codec
            = pb::FieldCodec.ForUInt32(50);
        private readonly pbc::RepeatedField<uint> viewers_ = new pbc::RepeatedField<uint>();
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Viewers
        {
            get { return viewers_; }
        }

        /// <summary>Field number for the "zoneId" field.</summary>
        public const int ZoneIdFieldNumber = 1;
        private uint zoneId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ZoneId
        {
            get { return zoneId_; }
            set
            {
                zoneId_ = value;
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private ZoneType type_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ZoneType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "visibility" field.</summary>
        public const int VisibilityFieldNumber = 3;
        private Visibility visibility_ = 0;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Visibility Visibility
        {
            get { return visibility_; }
            set
            {
                visibility_ = value;
            }
        }

        /// <summary>Field number for the "ownerSeatId" field.</summary>
        public const int OwnerSeatIdFieldNumber = 4;
        private uint ownerSeatId_;
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OwnerSeatId
        {
            get { return ownerSeatId_; }
            set
            {
                ownerSeatId_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ZoneInfo);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ZoneInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!objectInstanceIds_.Equals(other.objectInstanceIds_)) return false;
            if (!viewers_.Equals(other.viewers_)) return false;
            if (ZoneId != other.ZoneId) return false;
            if (Type != other.Type) return false;
            if (Visibility != other.Visibility) return false;
            if (OwnerSeatId != other.OwnerSeatId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= objectInstanceIds_.GetHashCode();
            hash ^= viewers_.GetHashCode();
            if (ZoneId != 0) hash ^= ZoneId.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            if (Visibility != 0) hash ^= Visibility.GetHashCode();
            if (OwnerSeatId != 0) hash ^= OwnerSeatId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ZoneId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(ZoneId);
            }
            if (Type != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Type);
            }
            if (Visibility != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)Visibility);
            }
            if (OwnerSeatId != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(OwnerSeatId);
            }
            objectInstanceIds_.WriteTo(output, _repeated_objectInstanceIds_codec);
            viewers_.WriteTo(output, _repeated_viewers_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += objectInstanceIds_.CalculateSize(_repeated_objectInstanceIds_codec);
            size += viewers_.CalculateSize(_repeated_viewers_codec);
            if (ZoneId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
            }
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (Visibility != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Visibility);
            }
            if (OwnerSeatId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerSeatId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ZoneInfo other)
        {
            if (other == null)
            {
                return;
            }
            objectInstanceIds_.Add(other.objectInstanceIds_);
            viewers_.Add(other.viewers_);
            if (other.ZoneId != 0)
            {
                ZoneId = other.ZoneId;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.Visibility != 0)
            {
                Visibility = other.Visibility;
            }
            if (other.OwnerSeatId != 0)
            {
                OwnerSeatId = other.OwnerSeatId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ZoneId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            type_ = (ZoneType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            visibility_ = (Visibility)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            OwnerSeatId = input.ReadUInt32();
                            break;
                        }
                    case 42:
                    case 40:
                        {
                            objectInstanceIds_.AddEntriesFrom(input, _repeated_objectInstanceIds_codec);
                            break;
                        }
                    case 50:
                    case 48:
                        {
                            viewers_.AddEntriesFrom(input, _repeated_viewers_codec);
                            break;
                        }
                }
            }
        }

    }

    #endregion


    #endregion Designer generated code

}